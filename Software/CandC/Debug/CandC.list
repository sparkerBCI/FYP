
CandC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f84  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  08007110  08007110  00017110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007540  08007540  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007540  08007540  00017540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007548  08007548  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007548  08007548  00017548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800754c  0800754c  0001754c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023dc  200001e0  08007730  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200025bc  08007730  000225bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097dd  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b2a  00000000  00000000  000299ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007d0  00000000  00000000  0002b518  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000700  00000000  00000000  0002bce8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021236  00000000  00000000  0002c3e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007028  00000000  00000000  0004d61e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c36d4  00000000  00000000  00054646  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00117d1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ad0  00000000  00000000  00117d98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e0 	.word	0x200001e0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080070f4 	.word	0x080070f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e4 	.word	0x200001e4
 80001c4:	080070f4 	.word	0x080070f4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_uldivmod>:
 8000b00:	b953      	cbnz	r3, 8000b18 <__aeabi_uldivmod+0x18>
 8000b02:	b94a      	cbnz	r2, 8000b18 <__aeabi_uldivmod+0x18>
 8000b04:	2900      	cmp	r1, #0
 8000b06:	bf08      	it	eq
 8000b08:	2800      	cmpeq	r0, #0
 8000b0a:	bf1c      	itt	ne
 8000b0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b10:	f04f 30ff 	movne.w	r0, #4294967295
 8000b14:	f000 b972 	b.w	8000dfc <__aeabi_idiv0>
 8000b18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b20:	f000 f806 	bl	8000b30 <__udivmoddi4>
 8000b24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2c:	b004      	add	sp, #16
 8000b2e:	4770      	bx	lr

08000b30 <__udivmoddi4>:
 8000b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b34:	9e08      	ldr	r6, [sp, #32]
 8000b36:	4604      	mov	r4, r0
 8000b38:	4688      	mov	r8, r1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d14b      	bne.n	8000bd6 <__udivmoddi4+0xa6>
 8000b3e:	428a      	cmp	r2, r1
 8000b40:	4615      	mov	r5, r2
 8000b42:	d967      	bls.n	8000c14 <__udivmoddi4+0xe4>
 8000b44:	fab2 f282 	clz	r2, r2
 8000b48:	b14a      	cbz	r2, 8000b5e <__udivmoddi4+0x2e>
 8000b4a:	f1c2 0720 	rsb	r7, r2, #32
 8000b4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b52:	fa20 f707 	lsr.w	r7, r0, r7
 8000b56:	4095      	lsls	r5, r2
 8000b58:	ea47 0803 	orr.w	r8, r7, r3
 8000b5c:	4094      	lsls	r4, r2
 8000b5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b62:	0c23      	lsrs	r3, r4, #16
 8000b64:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b68:	fa1f fc85 	uxth.w	ip, r5
 8000b6c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b70:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b74:	fb07 f10c 	mul.w	r1, r7, ip
 8000b78:	4299      	cmp	r1, r3
 8000b7a:	d909      	bls.n	8000b90 <__udivmoddi4+0x60>
 8000b7c:	18eb      	adds	r3, r5, r3
 8000b7e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b82:	f080 811b 	bcs.w	8000dbc <__udivmoddi4+0x28c>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 8118 	bls.w	8000dbc <__udivmoddi4+0x28c>
 8000b8c:	3f02      	subs	r7, #2
 8000b8e:	442b      	add	r3, r5
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	b2a4      	uxth	r4, r4
 8000b94:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b98:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba4:	45a4      	cmp	ip, r4
 8000ba6:	d909      	bls.n	8000bbc <__udivmoddi4+0x8c>
 8000ba8:	192c      	adds	r4, r5, r4
 8000baa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bae:	f080 8107 	bcs.w	8000dc0 <__udivmoddi4+0x290>
 8000bb2:	45a4      	cmp	ip, r4
 8000bb4:	f240 8104 	bls.w	8000dc0 <__udivmoddi4+0x290>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	442c      	add	r4, r5
 8000bbc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bc0:	eba4 040c 	sub.w	r4, r4, ip
 8000bc4:	2700      	movs	r7, #0
 8000bc6:	b11e      	cbz	r6, 8000bd0 <__udivmoddi4+0xa0>
 8000bc8:	40d4      	lsrs	r4, r2
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e9c6 4300 	strd	r4, r3, [r6]
 8000bd0:	4639      	mov	r1, r7
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d909      	bls.n	8000bee <__udivmoddi4+0xbe>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	f000 80eb 	beq.w	8000db6 <__udivmoddi4+0x286>
 8000be0:	2700      	movs	r7, #0
 8000be2:	e9c6 0100 	strd	r0, r1, [r6]
 8000be6:	4638      	mov	r0, r7
 8000be8:	4639      	mov	r1, r7
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	fab3 f783 	clz	r7, r3
 8000bf2:	2f00      	cmp	r7, #0
 8000bf4:	d147      	bne.n	8000c86 <__udivmoddi4+0x156>
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xd0>
 8000bfa:	4282      	cmp	r2, r0
 8000bfc:	f200 80fa 	bhi.w	8000df4 <__udivmoddi4+0x2c4>
 8000c00:	1a84      	subs	r4, r0, r2
 8000c02:	eb61 0303 	sbc.w	r3, r1, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	4698      	mov	r8, r3
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	d0e0      	beq.n	8000bd0 <__udivmoddi4+0xa0>
 8000c0e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c12:	e7dd      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000c14:	b902      	cbnz	r2, 8000c18 <__udivmoddi4+0xe8>
 8000c16:	deff      	udf	#255	; 0xff
 8000c18:	fab2 f282 	clz	r2, r2
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	f040 808f 	bne.w	8000d40 <__udivmoddi4+0x210>
 8000c22:	1b49      	subs	r1, r1, r5
 8000c24:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c28:	fa1f f885 	uxth.w	r8, r5
 8000c2c:	2701      	movs	r7, #1
 8000c2e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c32:	0c23      	lsrs	r3, r4, #16
 8000c34:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d907      	bls.n	8000c54 <__udivmoddi4+0x124>
 8000c44:	18eb      	adds	r3, r5, r3
 8000c46:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0x122>
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	f200 80cd 	bhi.w	8000dec <__udivmoddi4+0x2bc>
 8000c52:	4684      	mov	ip, r0
 8000c54:	1a59      	subs	r1, r3, r1
 8000c56:	b2a3      	uxth	r3, r4
 8000c58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c60:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c64:	fb08 f800 	mul.w	r8, r8, r0
 8000c68:	45a0      	cmp	r8, r4
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x14c>
 8000c6c:	192c      	adds	r4, r5, r4
 8000c6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x14a>
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	f200 80b6 	bhi.w	8000de6 <__udivmoddi4+0x2b6>
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	eba4 0408 	sub.w	r4, r4, r8
 8000c80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c84:	e79f      	b.n	8000bc6 <__udivmoddi4+0x96>
 8000c86:	f1c7 0c20 	rsb	ip, r7, #32
 8000c8a:	40bb      	lsls	r3, r7
 8000c8c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c90:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c94:	fa01 f407 	lsl.w	r4, r1, r7
 8000c98:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c9c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ca0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ca4:	4325      	orrs	r5, r4
 8000ca6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000caa:	0c2c      	lsrs	r4, r5, #16
 8000cac:	fb08 3319 	mls	r3, r8, r9, r3
 8000cb0:	fa1f fa8e 	uxth.w	sl, lr
 8000cb4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cb8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cbc:	429c      	cmp	r4, r3
 8000cbe:	fa02 f207 	lsl.w	r2, r2, r7
 8000cc2:	fa00 f107 	lsl.w	r1, r0, r7
 8000cc6:	d90b      	bls.n	8000ce0 <__udivmoddi4+0x1b0>
 8000cc8:	eb1e 0303 	adds.w	r3, lr, r3
 8000ccc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cd0:	f080 8087 	bcs.w	8000de2 <__udivmoddi4+0x2b2>
 8000cd4:	429c      	cmp	r4, r3
 8000cd6:	f240 8084 	bls.w	8000de2 <__udivmoddi4+0x2b2>
 8000cda:	f1a9 0902 	sub.w	r9, r9, #2
 8000cde:	4473      	add	r3, lr
 8000ce0:	1b1b      	subs	r3, r3, r4
 8000ce2:	b2ad      	uxth	r5, r5
 8000ce4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cf0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cf4:	45a2      	cmp	sl, r4
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x1da>
 8000cf8:	eb1e 0404 	adds.w	r4, lr, r4
 8000cfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d00:	d26b      	bcs.n	8000dda <__udivmoddi4+0x2aa>
 8000d02:	45a2      	cmp	sl, r4
 8000d04:	d969      	bls.n	8000dda <__udivmoddi4+0x2aa>
 8000d06:	3802      	subs	r0, #2
 8000d08:	4474      	add	r4, lr
 8000d0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d12:	eba4 040a 	sub.w	r4, r4, sl
 8000d16:	454c      	cmp	r4, r9
 8000d18:	46c2      	mov	sl, r8
 8000d1a:	464b      	mov	r3, r9
 8000d1c:	d354      	bcc.n	8000dc8 <__udivmoddi4+0x298>
 8000d1e:	d051      	beq.n	8000dc4 <__udivmoddi4+0x294>
 8000d20:	2e00      	cmp	r6, #0
 8000d22:	d069      	beq.n	8000df8 <__udivmoddi4+0x2c8>
 8000d24:	ebb1 050a 	subs.w	r5, r1, sl
 8000d28:	eb64 0403 	sbc.w	r4, r4, r3
 8000d2c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d30:	40fd      	lsrs	r5, r7
 8000d32:	40fc      	lsrs	r4, r7
 8000d34:	ea4c 0505 	orr.w	r5, ip, r5
 8000d38:	e9c6 5400 	strd	r5, r4, [r6]
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	e747      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000d40:	f1c2 0320 	rsb	r3, r2, #32
 8000d44:	fa20 f703 	lsr.w	r7, r0, r3
 8000d48:	4095      	lsls	r5, r2
 8000d4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d52:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d56:	4338      	orrs	r0, r7
 8000d58:	0c01      	lsrs	r1, r0, #16
 8000d5a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d5e:	fa1f f885 	uxth.w	r8, r5
 8000d62:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d66:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6a:	fb07 f308 	mul.w	r3, r7, r8
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	fa04 f402 	lsl.w	r4, r4, r2
 8000d74:	d907      	bls.n	8000d86 <__udivmoddi4+0x256>
 8000d76:	1869      	adds	r1, r5, r1
 8000d78:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d7c:	d22f      	bcs.n	8000dde <__udivmoddi4+0x2ae>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d92d      	bls.n	8000dde <__udivmoddi4+0x2ae>
 8000d82:	3f02      	subs	r7, #2
 8000d84:	4429      	add	r1, r5
 8000d86:	1acb      	subs	r3, r1, r3
 8000d88:	b281      	uxth	r1, r0
 8000d8a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d96:	fb00 f308 	mul.w	r3, r0, r8
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d907      	bls.n	8000dae <__udivmoddi4+0x27e>
 8000d9e:	1869      	adds	r1, r5, r1
 8000da0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da4:	d217      	bcs.n	8000dd6 <__udivmoddi4+0x2a6>
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d915      	bls.n	8000dd6 <__udivmoddi4+0x2a6>
 8000daa:	3802      	subs	r0, #2
 8000dac:	4429      	add	r1, r5
 8000dae:	1ac9      	subs	r1, r1, r3
 8000db0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000db4:	e73b      	b.n	8000c2e <__udivmoddi4+0xfe>
 8000db6:	4637      	mov	r7, r6
 8000db8:	4630      	mov	r0, r6
 8000dba:	e709      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000dbc:	4607      	mov	r7, r0
 8000dbe:	e6e7      	b.n	8000b90 <__udivmoddi4+0x60>
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	e6fb      	b.n	8000bbc <__udivmoddi4+0x8c>
 8000dc4:	4541      	cmp	r1, r8
 8000dc6:	d2ab      	bcs.n	8000d20 <__udivmoddi4+0x1f0>
 8000dc8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dcc:	eb69 020e 	sbc.w	r2, r9, lr
 8000dd0:	3801      	subs	r0, #1
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	e7a4      	b.n	8000d20 <__udivmoddi4+0x1f0>
 8000dd6:	4660      	mov	r0, ip
 8000dd8:	e7e9      	b.n	8000dae <__udivmoddi4+0x27e>
 8000dda:	4618      	mov	r0, r3
 8000ddc:	e795      	b.n	8000d0a <__udivmoddi4+0x1da>
 8000dde:	4667      	mov	r7, ip
 8000de0:	e7d1      	b.n	8000d86 <__udivmoddi4+0x256>
 8000de2:	4681      	mov	r9, r0
 8000de4:	e77c      	b.n	8000ce0 <__udivmoddi4+0x1b0>
 8000de6:	3802      	subs	r0, #2
 8000de8:	442c      	add	r4, r5
 8000dea:	e747      	b.n	8000c7c <__udivmoddi4+0x14c>
 8000dec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000df0:	442b      	add	r3, r5
 8000df2:	e72f      	b.n	8000c54 <__udivmoddi4+0x124>
 8000df4:	4638      	mov	r0, r7
 8000df6:	e708      	b.n	8000c0a <__udivmoddi4+0xda>
 8000df8:	4637      	mov	r7, r6
 8000dfa:	e6e9      	b.n	8000bd0 <__udivmoddi4+0xa0>

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <bit_reverse>:
	return j;
}



int bit_reverse(int N, int l) {
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
	int ans = 0, i;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
	for (i = 0; i<l; ++i)
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	e014      	b.n	8000e3e <bit_reverse+0x3e>
		if (N & (1 << i))    ans |= (1 << l - 1 - i);
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	fa42 f303 	asr.w	r3, r2, r3
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d009      	beq.n	8000e38 <bit_reverse+0x38>
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	1e5a      	subs	r2, r3, #1
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	60fb      	str	r3, [r7, #12]
	for (i = 0; i<l; ++i)
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	68ba      	ldr	r2, [r7, #8]
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	dbe6      	blt.n	8000e14 <bit_reverse+0x14>
	return(ans);
 8000e46:	68fb      	ldr	r3, [r7, #12]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	0000      	movs	r0, r0
	...

08000e58 <FFTcore>:


void FFTcore(int Nr, int Nc, double* Ar, int Ldr, double* Ai, int Ldi, char tran, char flag) {
 8000e58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e5c:	b0a8      	sub	sp, #160	; 0xa0
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	60f8      	str	r0, [r7, #12]
 8000e62:	60b9      	str	r1, [r7, #8]
 8000e64:	607a      	str	r2, [r7, #4]
 8000e66:	603b      	str	r3, [r7, #0]

	int N, M, d, K = 0, k = 0, l = 1, L = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000e74:	2301      	movs	r3, #1
 8000e76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	double Wr, Wi, C1r, C1i, C2r, C2i, Dr, Di;

	if (tran == 't') {
 8000e80:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 8000e84:	2b74      	cmp	r3, #116	; 0x74
 8000e86:	d10a      	bne.n	8000e9e <FFTcore+0x46>
		d = N = Nc;
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000e8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		M = Nr;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000e9c:	e011      	b.n	8000ec2 <FFTcore+0x6a>
	}
	else if (tran == 'n') {
 8000e9e:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 8000ea2:	2b6e      	cmp	r3, #110	; 0x6e
 8000ea4:	d10a      	bne.n	8000ebc <FFTcore+0x64>
		d = N = Nr;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000eac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000eb0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		M = Nc;
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000eba:	e002      	b.n	8000ec2 <FFTcore+0x6a>
	}
	else {
		//("tran can be either 'n' or 't'\n");
		exit(1);
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	f003 f909 	bl	80040d4 <exit>
	}

	do
	{
		d /= 2;
 8000ec2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000ec6:	0fda      	lsrs	r2, r3, #31
 8000ec8:	4413      	add	r3, r2
 8000eca:	105b      	asrs	r3, r3, #1
 8000ecc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		K = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		while (K<N) {
 8000ed6:	e1cc      	b.n	8001272 <FFTcore+0x41a>
			k = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			while (k<d) {
 8000ede:	e1b9      	b.n	8001254 <FFTcore+0x3fc>
				int it, Ind1 = K + k, Ind2 = K + k + d;
 8000ee0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000ee4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000ee8:	4413      	add	r3, r2
 8000eea:	667b      	str	r3, [r7, #100]	; 0x64
 8000eec:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000ef0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000ef4:	4413      	add	r3, r2
 8000ef6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000efa:	4413      	add	r3, r2
 8000efc:	663b      	str	r3, [r7, #96]	; 0x60
				Wr = cos(2 * M_PI*k*l / N);
 8000efe:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000f02:	f7ff fabb 	bl	800047c <__aeabi_i2d>
 8000f06:	f20f 5318 	addw	r3, pc, #1304	; 0x518
 8000f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0e:	f7ff fb1f 	bl	8000550 <__aeabi_dmul>
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	4690      	mov	r8, r2
 8000f18:	4699      	mov	r9, r3
 8000f1a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8000f1e:	f7ff faad 	bl	800047c <__aeabi_i2d>
 8000f22:	4602      	mov	r2, r0
 8000f24:	460b      	mov	r3, r1
 8000f26:	4640      	mov	r0, r8
 8000f28:	4649      	mov	r1, r9
 8000f2a:	f7ff fb11 	bl	8000550 <__aeabi_dmul>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	460b      	mov	r3, r1
 8000f32:	4690      	mov	r8, r2
 8000f34:	4699      	mov	r9, r3
 8000f36:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8000f3a:	f7ff fa9f 	bl	800047c <__aeabi_i2d>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	460b      	mov	r3, r1
 8000f42:	4640      	mov	r0, r8
 8000f44:	4649      	mov	r1, r9
 8000f46:	f7ff fc2d 	bl	80007a4 <__aeabi_ddiv>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	ec43 2b17 	vmov	d7, r2, r3
 8000f52:	eeb0 0a47 	vmov.f32	s0, s14
 8000f56:	eef0 0a67 	vmov.f32	s1, s15
 8000f5a:	f004 ff65 	bl	8005e28 <cos>
 8000f5e:	ed87 0b16 	vstr	d0, [r7, #88]	; 0x58
				Wi = (flag == 'f') ? -sin(2 * M_PI*k*l / N) : sin(2 * M_PI*k*l / N);
 8000f62:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 8000f66:	2b66      	cmp	r3, #102	; 0x66
 8000f68:	d135      	bne.n	8000fd6 <FFTcore+0x17e>
 8000f6a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000f6e:	f7ff fa85 	bl	800047c <__aeabi_i2d>
 8000f72:	f20f 43ac 	addw	r3, pc, #1196	; 0x4ac
 8000f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7a:	f7ff fae9 	bl	8000550 <__aeabi_dmul>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	4690      	mov	r8, r2
 8000f84:	4699      	mov	r9, r3
 8000f86:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8000f8a:	f7ff fa77 	bl	800047c <__aeabi_i2d>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	460b      	mov	r3, r1
 8000f92:	4640      	mov	r0, r8
 8000f94:	4649      	mov	r1, r9
 8000f96:	f7ff fadb 	bl	8000550 <__aeabi_dmul>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4690      	mov	r8, r2
 8000fa0:	4699      	mov	r9, r3
 8000fa2:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8000fa6:	f7ff fa69 	bl	800047c <__aeabi_i2d>
 8000faa:	4602      	mov	r2, r0
 8000fac:	460b      	mov	r3, r1
 8000fae:	4640      	mov	r0, r8
 8000fb0:	4649      	mov	r1, r9
 8000fb2:	f7ff fbf7 	bl	80007a4 <__aeabi_ddiv>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	ec43 2b17 	vmov	d7, r2, r3
 8000fbe:	eeb0 0a47 	vmov.f32	s0, s14
 8000fc2:	eef0 0a67 	vmov.f32	s1, s15
 8000fc6:	f004 ff73 	bl	8005eb0 <sin>
 8000fca:	ec53 2b10 	vmov	r2, r3, d0
 8000fce:	4614      	mov	r4, r2
 8000fd0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000fd4:	e031      	b.n	800103a <FFTcore+0x1e2>
 8000fd6:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000fda:	f7ff fa4f 	bl	800047c <__aeabi_i2d>
 8000fde:	f20f 4340 	addw	r3, pc, #1088	; 0x440
 8000fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe6:	f7ff fab3 	bl	8000550 <__aeabi_dmul>
 8000fea:	4603      	mov	r3, r0
 8000fec:	460c      	mov	r4, r1
 8000fee:	4625      	mov	r5, r4
 8000ff0:	461c      	mov	r4, r3
 8000ff2:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8000ff6:	f7ff fa41 	bl	800047c <__aeabi_i2d>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	4620      	mov	r0, r4
 8001000:	4629      	mov	r1, r5
 8001002:	f7ff faa5 	bl	8000550 <__aeabi_dmul>
 8001006:	4603      	mov	r3, r0
 8001008:	460c      	mov	r4, r1
 800100a:	4625      	mov	r5, r4
 800100c:	461c      	mov	r4, r3
 800100e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8001012:	f7ff fa33 	bl	800047c <__aeabi_i2d>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	4620      	mov	r0, r4
 800101c:	4629      	mov	r1, r5
 800101e:	f7ff fbc1 	bl	80007a4 <__aeabi_ddiv>
 8001022:	4603      	mov	r3, r0
 8001024:	460c      	mov	r4, r1
 8001026:	ec44 3b17 	vmov	d7, r3, r4
 800102a:	eeb0 0a47 	vmov.f32	s0, s14
 800102e:	eef0 0a67 	vmov.f32	s1, s15
 8001032:	f004 ff3d 	bl	8005eb0 <sin>
 8001036:	ec55 4b10 	vmov	r4, r5, d0
 800103a:	e9c7 4514 	strd	r4, r5, [r7, #80]	; 0x50

				for (it = 0; it<M; ++it) {
 800103e:	2300      	movs	r3, #0
 8001040:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001044:	e0fa      	b.n	800123c <FFTcore+0x3e4>
					int rind1 = (tran == 't') ? Ind1 * Ldr + it : Ind1 + Ldr * it;
 8001046:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 800104a:	2b74      	cmp	r3, #116	; 0x74
 800104c:	d107      	bne.n	800105e <FFTcore+0x206>
 800104e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	fb02 f203 	mul.w	r2, r2, r3
 8001056:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800105a:	4413      	add	r3, r2
 800105c:	e006      	b.n	800106c <FFTcore+0x214>
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001064:	fb02 f203 	mul.w	r2, r2, r3
 8001068:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800106a:	4413      	add	r3, r2
 800106c:	64fb      	str	r3, [r7, #76]	; 0x4c
					int iind1 = (tran == 't') ? Ind1 * Ldi + it : Ind1 + Ldi * it;
 800106e:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 8001072:	2b74      	cmp	r3, #116	; 0x74
 8001074:	d108      	bne.n	8001088 <FFTcore+0x230>
 8001076:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001078:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800107c:	fb02 f203 	mul.w	r2, r2, r3
 8001080:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001084:	4413      	add	r3, r2
 8001086:	e007      	b.n	8001098 <FFTcore+0x240>
 8001088:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800108c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001090:	fb02 f203 	mul.w	r2, r2, r3
 8001094:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001096:	4413      	add	r3, r2
 8001098:	64bb      	str	r3, [r7, #72]	; 0x48
					int rind2 = (tran == 't') ? Ind2 * Ldr + it : Ind2 + Ldr * it;
 800109a:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 800109e:	2b74      	cmp	r3, #116	; 0x74
 80010a0:	d107      	bne.n	80010b2 <FFTcore+0x25a>
 80010a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010a4:	683a      	ldr	r2, [r7, #0]
 80010a6:	fb02 f203 	mul.w	r2, r2, r3
 80010aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80010ae:	4413      	add	r3, r2
 80010b0:	e006      	b.n	80010c0 <FFTcore+0x268>
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80010b8:	fb02 f203 	mul.w	r2, r2, r3
 80010bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010be:	4413      	add	r3, r2
 80010c0:	647b      	str	r3, [r7, #68]	; 0x44
					int iind2 = (tran == 't') ? Ind2 * Ldi + it : Ind2 + Ldi * it;
 80010c2:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 80010c6:	2b74      	cmp	r3, #116	; 0x74
 80010c8:	d108      	bne.n	80010dc <FFTcore+0x284>
 80010ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80010d0:	fb02 f203 	mul.w	r2, r2, r3
 80010d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80010d8:	4413      	add	r3, r2
 80010da:	e007      	b.n	80010ec <FFTcore+0x294>
 80010dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80010e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80010e4:	fb02 f203 	mul.w	r2, r2, r3
 80010e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010ea:	4413      	add	r3, r2
 80010ec:	643b      	str	r3, [r7, #64]	; 0x40

					C1r = Ar[rind1] + Ar[rind2];
 80010ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001106:	f7ff f86d 	bl	80001e4 <__adddf3>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
					C1i = Ai[iind1] + Ai[iind2];
 8001112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800111a:	4413      	add	r3, r2
 800111c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001128:	4413      	add	r3, r2
 800112a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112e:	f7ff f859 	bl	80001e4 <__adddf3>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
					Dr = Ar[rind1] - Ar[rind2];
 800113a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001152:	f7ff f845 	bl	80001e0 <__aeabi_dsub>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
					Di = Ai[iind1] - Ai[iind2];
 800115e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001166:	4413      	add	r3, r2
 8001168:	e9d3 0100 	ldrd	r0, r1, [r3]
 800116c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001174:	4413      	add	r3, r2
 8001176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117a:	f7ff f831 	bl	80001e0 <__aeabi_dsub>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	e9c7 2308 	strd	r2, r3, [r7, #32]
					C2r = Dr * Wr - Di * Wi;
 8001186:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800118a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800118e:	f7ff f9df 	bl	8000550 <__aeabi_dmul>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4690      	mov	r8, r2
 8001198:	4699      	mov	r9, r3
 800119a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800119e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80011a2:	f7ff f9d5 	bl	8000550 <__aeabi_dmul>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	4640      	mov	r0, r8
 80011ac:	4649      	mov	r1, r9
 80011ae:	f7ff f817 	bl	80001e0 <__aeabi_dsub>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	e9c7 2306 	strd	r2, r3, [r7, #24]
					C2i = Dr * Wi + Di * Wr;
 80011ba:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80011be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80011c2:	f7ff f9c5 	bl	8000550 <__aeabi_dmul>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4690      	mov	r8, r2
 80011cc:	4699      	mov	r9, r3
 80011ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80011d2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80011d6:	f7ff f9bb 	bl	8000550 <__aeabi_dmul>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	4640      	mov	r0, r8
 80011e0:	4649      	mov	r1, r9
 80011e2:	f7fe ffff 	bl	80001e4 <__adddf3>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	e9c7 2304 	strd	r2, r3, [r7, #16]
					Ar[rind1] = C1r;
 80011ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	18d1      	adds	r1, r2, r3
 80011f6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80011fa:	e9c1 2300 	strd	r2, r3, [r1]
					Ai[iind1] = C1i;
 80011fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001206:	18d1      	adds	r1, r2, r3
 8001208:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800120c:	e9c1 2300 	strd	r2, r3, [r1]
					Ar[rind2] = C2r;
 8001210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	18d1      	adds	r1, r2, r3
 8001218:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800121c:	e9c1 2300 	strd	r2, r3, [r1]
					Ai[iind2] = C2i;
 8001220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001228:	18d1      	adds	r1, r2, r3
 800122a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800122e:	e9c1 2300 	strd	r2, r3, [r1]
				for (it = 0; it<M; ++it) {
 8001232:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001236:	3301      	adds	r3, #1
 8001238:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800123c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001240:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001244:	429a      	cmp	r2, r3
 8001246:	f6ff aefe 	blt.w	8001046 <FFTcore+0x1ee>
				}
				++k;
 800124a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800124e:	3301      	adds	r3, #1
 8001250:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			while (k<d) {
 8001254:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001258:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800125c:	429a      	cmp	r2, r3
 800125e:	f6ff ae3f 	blt.w	8000ee0 <FFTcore+0x88>
			}
			K += 2 * d;
 8001262:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800126c:	4413      	add	r3, r2
 800126e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		while (K<N) {
 8001272:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001276:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800127a:	429a      	cmp	r2, r3
 800127c:	f6ff ae2c 	blt.w	8000ed8 <FFTcore+0x80>
		}
		l *= 2;
 8001280:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		++L;
 800128a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800128e:	3301      	adds	r3, #1
 8001290:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	} while (d>1);
 8001294:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001298:	2b01      	cmp	r3, #1
 800129a:	f73f ae12 	bgt.w	8000ec2 <FFTcore+0x6a>

	for (d = 0; d<N; ++d) {
 800129e:	2300      	movs	r3, #0
 80012a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80012a4:	e0af      	b.n	8001406 <FFTcore+0x5ae>
		k = bit_reverse(d, L);
 80012a6:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80012aa:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80012ae:	f7ff fda7 	bl	8000e00 <bit_reverse>
 80012b2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		if (d < k) {
 80012b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80012ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012be:	429a      	cmp	r2, r3
 80012c0:	f280 809c 	bge.w	80013fc <FFTcore+0x5a4>
			int it;
			for (it = 0; it<M; ++it) {
 80012c4:	2300      	movs	r3, #0
 80012c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80012c8:	e092      	b.n	80013f0 <FFTcore+0x598>
				int ind1 = (tran == 't') ? d * Ldr + it : d + Ldr * it;
 80012ca:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 80012ce:	2b74      	cmp	r3, #116	; 0x74
 80012d0:	d107      	bne.n	80012e2 <FFTcore+0x48a>
 80012d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80012d6:	683a      	ldr	r2, [r7, #0]
 80012d8:	fb02 f203 	mul.w	r2, r2, r3
 80012dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80012de:	4413      	add	r3, r2
 80012e0:	e006      	b.n	80012f0 <FFTcore+0x498>
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80012e6:	fb02 f203 	mul.w	r2, r2, r3
 80012ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80012ee:	4413      	add	r3, r2
 80012f0:	67bb      	str	r3, [r7, #120]	; 0x78
				int ind2 = (tran == 't') ? k * Ldr + it : k + Ldr * it;
 80012f2:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 80012f6:	2b74      	cmp	r3, #116	; 0x74
 80012f8:	d107      	bne.n	800130a <FFTcore+0x4b2>
 80012fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	fb02 f203 	mul.w	r2, r2, r3
 8001304:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001306:	4413      	add	r3, r2
 8001308:	e006      	b.n	8001318 <FFTcore+0x4c0>
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800130e:	fb02 f203 	mul.w	r2, r2, r3
 8001312:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001316:	4413      	add	r3, r2
 8001318:	677b      	str	r3, [r7, #116]	; 0x74
				double temp = Ar[ind1];
 800131a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	4413      	add	r3, r2
 8001322:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001326:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
				Ar[ind1] = Ar[ind2];
 800132a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001334:	00d2      	lsls	r2, r2, #3
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	440a      	add	r2, r1
 800133a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800133e:	e9c2 3400 	strd	r3, r4, [r2]
				Ar[ind2] = temp;
 8001342:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	441a      	add	r2, r3
 800134a:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800134e:	e9c2 3400 	strd	r3, r4, [r2]

				ind1 = (tran == 't') ? d * Ldi + it : d + Ldi * it;
 8001352:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 8001356:	2b74      	cmp	r3, #116	; 0x74
 8001358:	d108      	bne.n	800136c <FFTcore+0x514>
 800135a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800135e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001362:	fb02 f203 	mul.w	r2, r2, r3
 8001366:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001368:	4413      	add	r3, r2
 800136a:	e007      	b.n	800137c <FFTcore+0x524>
 800136c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001370:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001372:	fb02 f203 	mul.w	r2, r2, r3
 8001376:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800137a:	4413      	add	r3, r2
 800137c:	67bb      	str	r3, [r7, #120]	; 0x78
				ind2 = (tran == 't') ? k * Ldi + it : k + Ldi * it;
 800137e:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 8001382:	2b74      	cmp	r3, #116	; 0x74
 8001384:	d108      	bne.n	8001398 <FFTcore+0x540>
 8001386:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800138a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800138e:	fb02 f203 	mul.w	r2, r2, r3
 8001392:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001394:	4413      	add	r3, r2
 8001396:	e007      	b.n	80013a8 <FFTcore+0x550>
 8001398:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800139c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800139e:	fb02 f203 	mul.w	r2, r2, r3
 80013a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80013a6:	4413      	add	r3, r2
 80013a8:	677b      	str	r3, [r7, #116]	; 0x74
				temp = Ai[ind1];
 80013aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80013b2:	4413      	add	r3, r2
 80013b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80013b8:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
				Ai[ind1] = Ai[ind2];
 80013bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80013c4:	4413      	add	r3, r2
 80013c6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80013c8:	00d2      	lsls	r2, r2, #3
 80013ca:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80013ce:	440a      	add	r2, r1
 80013d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80013d4:	e9c2 3400 	strd	r3, r4, [r2]
				Ai[ind2] = temp;
 80013d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80013e0:	441a      	add	r2, r3
 80013e2:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80013e6:	e9c2 3400 	strd	r3, r4, [r2]
			for (it = 0; it<M; ++it) {
 80013ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80013ec:	3301      	adds	r3, #1
 80013ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80013f0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80013f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80013f6:	429a      	cmp	r2, r3
 80013f8:	f6ff af67 	blt.w	80012ca <FFTcore+0x472>
	for (d = 0; d<N; ++d) {
 80013fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001400:	3301      	adds	r3, #1
 8001402:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001406:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800140a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800140e:	429a      	cmp	r2, r3
 8001410:	f6ff af49 	blt.w	80012a6 <FFTcore+0x44e>
			}
		}
	}
}
 8001414:	bf00      	nop
 8001416:	37a0      	adds	r7, #160	; 0xa0
 8001418:	46bd      	mov	sp, r7
 800141a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800141e:	bf00      	nop
 8001420:	54442d18 	.word	0x54442d18
 8001424:	401921fb 	.word	0x401921fb

08001428 <DCT2>:

void DCT2(int N, double* x) {
 8001428:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800142c:	b092      	sub	sp, #72	; 0x48
 800142e:	af04      	add	r7, sp, #16
 8001430:	6078      	str	r0, [r7, #4]
 8001432:	6039      	str	r1, [r7, #0]
	double* Ar = (double*)malloc(4 * N * sizeof(double));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	015b      	lsls	r3, r3, #5
 8001438:	4618      	mov	r0, r3
 800143a:	f002 fe83 	bl	8004144 <malloc>
 800143e:	4603      	mov	r3, r0
 8001440:	633b      	str	r3, [r7, #48]	; 0x30
	//assert(Ar != NULL);
	double* Ai = Ar + 2 * N;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	011b      	lsls	r3, r3, #4
 8001446:	461a      	mov	r2, r3
 8001448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800144a:	4413      	add	r3, r2
 800144c:	62fb      	str	r3, [r7, #44]	; 0x2c
	memset(Ar, 0, 4 * N * sizeof(double));
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	015b      	lsls	r3, r3, #5
 8001452:	461a      	mov	r2, r3
 8001454:	2100      	movs	r1, #0
 8001456:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001458:	f002 fe8f 	bl	800417a <memset>
	int n;
	for (n = 0; n<N; ++n) Ar[n] = x[n];
 800145c:	2300      	movs	r3, #0
 800145e:	637b      	str	r3, [r7, #52]	; 0x34
 8001460:	e00e      	b.n	8001480 <DCT2+0x58>
 8001462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	4413      	add	r3, r2
 800146a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800146c:	00d2      	lsls	r2, r2, #3
 800146e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001470:	440a      	add	r2, r1
 8001472:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001476:	e9c2 3400 	strd	r3, r4, [r2]
 800147a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800147c:	3301      	adds	r3, #1
 800147e:	637b      	str	r3, [r7, #52]	; 0x34
 8001480:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	429a      	cmp	r2, r3
 8001486:	dbec      	blt.n	8001462 <DCT2+0x3a>
	for (n = N; n<2 * N; ++n) Ar[n] = x[2 * N - 1 - n];
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	637b      	str	r3, [r7, #52]	; 0x34
 800148c:	e012      	b.n	80014b4 <DCT2+0x8c>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	1e5a      	subs	r2, r3, #1
 8001494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	4413      	add	r3, r2
 800149e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014a0:	00d2      	lsls	r2, r2, #3
 80014a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80014a4:	440a      	add	r2, r1
 80014a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80014aa:	e9c2 3400 	strd	r3, r4, [r2]
 80014ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014b0:	3301      	adds	r3, #1
 80014b2:	637b      	str	r3, [r7, #52]	; 0x34
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014ba:	429a      	cmp	r2, r3
 80014bc:	dbe7      	blt.n	800148e <DCT2+0x66>
	FFTcore(2 * N, 1, Ar, 2 * n, Ai, 2 * n, 'n', 'f');
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	0058      	lsls	r0, r3, #1
 80014c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014c4:	0059      	lsls	r1, r3, #1
 80014c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	2266      	movs	r2, #102	; 0x66
 80014cc:	9203      	str	r2, [sp, #12]
 80014ce:	226e      	movs	r2, #110	; 0x6e
 80014d0:	9202      	str	r2, [sp, #8]
 80014d2:	9301      	str	r3, [sp, #4]
 80014d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	460b      	mov	r3, r1
 80014da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014dc:	2101      	movs	r1, #1
 80014de:	f7ff fcbb 	bl	8000e58 <FFTcore>
	double g = M_PI / (2 * N), p = sqrt(2.0 / N), po = sqrt(1.0 / N);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7fe ffc8 	bl	800047c <__aeabi_i2d>
 80014ec:	4603      	mov	r3, r0
 80014ee:	460c      	mov	r4, r1
 80014f0:	461a      	mov	r2, r3
 80014f2:	4623      	mov	r3, r4
 80014f4:	a161      	add	r1, pc, #388	; (adr r1, 800167c <DCT2+0x254>)
 80014f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80014fa:	f7ff f953 	bl	80007a4 <__aeabi_ddiv>
 80014fe:	4603      	mov	r3, r0
 8001500:	460c      	mov	r4, r1
 8001502:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7fe ffb8 	bl	800047c <__aeabi_i2d>
 800150c:	4603      	mov	r3, r0
 800150e:	460c      	mov	r4, r1
 8001510:	461a      	mov	r2, r3
 8001512:	4623      	mov	r3, r4
 8001514:	f04f 0000 	mov.w	r0, #0
 8001518:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800151c:	f7ff f942 	bl	80007a4 <__aeabi_ddiv>
 8001520:	4603      	mov	r3, r0
 8001522:	460c      	mov	r4, r1
 8001524:	ec44 3b17 	vmov	d7, r3, r4
 8001528:	eeb0 0a47 	vmov.f32	s0, s14
 800152c:	eef0 0a67 	vmov.f32	s1, s15
 8001530:	f004 fd06 	bl	8005f40 <sqrt>
 8001534:	ed87 0b06 	vstr	d0, [r7, #24]
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7fe ff9f 	bl	800047c <__aeabi_i2d>
 800153e:	4603      	mov	r3, r0
 8001540:	460c      	mov	r4, r1
 8001542:	461a      	mov	r2, r3
 8001544:	4623      	mov	r3, r4
 8001546:	f04f 0000 	mov.w	r0, #0
 800154a:	494b      	ldr	r1, [pc, #300]	; (8001678 <DCT2+0x250>)
 800154c:	f7ff f92a 	bl	80007a4 <__aeabi_ddiv>
 8001550:	4603      	mov	r3, r0
 8001552:	460c      	mov	r4, r1
 8001554:	ec44 3b17 	vmov	d7, r3, r4
 8001558:	eeb0 0a47 	vmov.f32	s0, s14
 800155c:	eef0 0a67 	vmov.f32	s1, s15
 8001560:	f004 fcee 	bl	8005f40 <sqrt>
 8001564:	ed87 0b04 	vstr	d0, [r7, #16]
	for (n = 0; n<N; ++n) {
 8001568:	2300      	movs	r3, #0
 800156a:	637b      	str	r3, [r7, #52]	; 0x34
 800156c:	e076      	b.n	800165c <DCT2+0x234>
		double z = (Ar[n] * cos(n*g) + Ai[n] * sin(n*g)) / 2;
 800156e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001574:	4413      	add	r3, r2
 8001576:	e9d3 4500 	ldrd	r4, r5, [r3]
 800157a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800157c:	f7fe ff7e 	bl	800047c <__aeabi_i2d>
 8001580:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001584:	f7fe ffe4 	bl	8000550 <__aeabi_dmul>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	ec43 2b17 	vmov	d7, r2, r3
 8001590:	eeb0 0a47 	vmov.f32	s0, s14
 8001594:	eef0 0a67 	vmov.f32	s1, s15
 8001598:	f004 fc46 	bl	8005e28 <cos>
 800159c:	ec53 2b10 	vmov	r2, r3, d0
 80015a0:	4620      	mov	r0, r4
 80015a2:	4629      	mov	r1, r5
 80015a4:	f7fe ffd4 	bl	8000550 <__aeabi_dmul>
 80015a8:	4603      	mov	r3, r0
 80015aa:	460c      	mov	r4, r1
 80015ac:	4698      	mov	r8, r3
 80015ae:	46a1      	mov	r9, r4
 80015b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015b6:	4413      	add	r3, r2
 80015b8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80015bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80015be:	f7fe ff5d 	bl	800047c <__aeabi_i2d>
 80015c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80015c6:	f7fe ffc3 	bl	8000550 <__aeabi_dmul>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	ec43 2b17 	vmov	d7, r2, r3
 80015d2:	eeb0 0a47 	vmov.f32	s0, s14
 80015d6:	eef0 0a67 	vmov.f32	s1, s15
 80015da:	f004 fc69 	bl	8005eb0 <sin>
 80015de:	ec53 2b10 	vmov	r2, r3, d0
 80015e2:	4620      	mov	r0, r4
 80015e4:	4629      	mov	r1, r5
 80015e6:	f7fe ffb3 	bl	8000550 <__aeabi_dmul>
 80015ea:	4603      	mov	r3, r0
 80015ec:	460c      	mov	r4, r1
 80015ee:	461a      	mov	r2, r3
 80015f0:	4623      	mov	r3, r4
 80015f2:	4640      	mov	r0, r8
 80015f4:	4649      	mov	r1, r9
 80015f6:	f7fe fdf5 	bl	80001e4 <__adddf3>
 80015fa:	4603      	mov	r3, r0
 80015fc:	460c      	mov	r4, r1
 80015fe:	4618      	mov	r0, r3
 8001600:	4621      	mov	r1, r4
 8001602:	f04f 0200 	mov.w	r2, #0
 8001606:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800160a:	f7ff f8cb 	bl	80007a4 <__aeabi_ddiv>
 800160e:	4603      	mov	r3, r0
 8001610:	460c      	mov	r4, r1
 8001612:	e9c7 3402 	strd	r3, r4, [r7, #8]
		if (n == 0) x[n] = po * z;
 8001616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001618:	2b00      	cmp	r3, #0
 800161a:	d10e      	bne.n	800163a <DCT2+0x212>
 800161c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	18d5      	adds	r5, r2, r3
 8001624:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001628:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800162c:	f7fe ff90 	bl	8000550 <__aeabi_dmul>
 8001630:	4603      	mov	r3, r0
 8001632:	460c      	mov	r4, r1
 8001634:	e9c5 3400 	strd	r3, r4, [r5]
 8001638:	e00d      	b.n	8001656 <DCT2+0x22e>
		else     x[n] = p * z;
 800163a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	18d5      	adds	r5, r2, r3
 8001642:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001646:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800164a:	f7fe ff81 	bl	8000550 <__aeabi_dmul>
 800164e:	4603      	mov	r3, r0
 8001650:	460c      	mov	r4, r1
 8001652:	e9c5 3400 	strd	r3, r4, [r5]
	for (n = 0; n<N; ++n) {
 8001656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001658:	3301      	adds	r3, #1
 800165a:	637b      	str	r3, [r7, #52]	; 0x34
 800165c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	429a      	cmp	r2, r3
 8001662:	db84      	blt.n	800156e <DCT2+0x146>
	}
	free(Ar);
 8001664:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001666:	f002 fd75 	bl	8004154 <free>
}
 800166a:	bf00      	nop
 800166c:	3738      	adds	r7, #56	; 0x38
 800166e:	46bd      	mov	sp, r7
 8001670:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001674:	f3af 8000 	nop.w
 8001678:	3ff00000 	.word	0x3ff00000
 800167c:	54442d18 	.word	0x54442d18
 8001680:	400921fb 	.word	0x400921fb

08001684 <dct_test>:


void dct_test(double * z, double * data, int m) {
 8001684:	b590      	push	{r4, r7, lr}
 8001686:	b087      	sub	sp, #28
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]

	int i;
	for (i = 0; i < m; ++i) z[i] =  data[i];
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	e00e      	b.n	80016b4 <dct_test+0x30>
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	4413      	add	r3, r2
 800169e:	697a      	ldr	r2, [r7, #20]
 80016a0:	00d2      	lsls	r2, r2, #3
 80016a2:	68f9      	ldr	r1, [r7, #12]
 80016a4:	440a      	add	r2, r1
 80016a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80016aa:	e9c2 3400 	strd	r3, r4, [r2]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	3301      	adds	r3, #1
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	dbec      	blt.n	8001696 <dct_test+0x12>

	DCT2(m, z);
 80016bc:	68f9      	ldr	r1, [r7, #12]
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff feb2 	bl	8001428 <DCT2>
}
 80016c4:	bf00      	nop
 80016c6:	371c      	adds	r7, #28
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd90      	pop	{r4, r7, pc}
 80016cc:	0000      	movs	r0, r0
	...

080016d0 <parse_buffer>:
unsigned char RX_data[EPOCH_LENGTH_SAMPLES * CHARS_PER_SAMPLE] = {0};
double parsed_epoch_data[EPOCH_LENGTH_SAMPLES] = {0};
Linear_SVM_Model* SVM;
int classes[1024];

int parse_buffer(void) {
 80016d0:	b590      	push	{r4, r7, lr}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
	char delim[] = "\n";
 80016d6:	230a      	movs	r3, #10
 80016d8:	803b      	strh	r3, [r7, #0]
	char *ptr = strtok((char*)RX_data, delim);
 80016da:	463b      	mov	r3, r7
 80016dc:	4619      	mov	r1, r3
 80016de:	4818      	ldr	r0, [pc, #96]	; (8001740 <parse_buffer+0x70>)
 80016e0:	f003 f956 	bl	8004990 <strtok>
 80016e4:	60f8      	str	r0, [r7, #12]
	int sample_number = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
	while(ptr != NULL)
 80016ea:	e01c      	b.n	8001726 <parse_buffer+0x56>
	{
		long value = atol(ptr);
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f002 fce7 	bl	80040c0 <atol>
 80016f2:	6078      	str	r0, [r7, #4]
		parsed_epoch_data[sample_number] = ((double)value) / EEG_SCALE_FACTOR;
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7fe fec1 	bl	800047c <__aeabi_i2d>
 80016fa:	a30f      	add	r3, pc, #60	; (adr r3, 8001738 <parse_buffer+0x68>)
 80016fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001700:	f7ff f850 	bl	80007a4 <__aeabi_ddiv>
 8001704:	4603      	mov	r3, r0
 8001706:	460c      	mov	r4, r1
 8001708:	490e      	ldr	r1, [pc, #56]	; (8001744 <parse_buffer+0x74>)
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	00d2      	lsls	r2, r2, #3
 800170e:	440a      	add	r2, r1
 8001710:	e9c2 3400 	strd	r3, r4, [r2]
		sample_number++;
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	3301      	adds	r3, #1
 8001718:	60bb      	str	r3, [r7, #8]
		ptr = strtok(NULL, delim);
 800171a:	463b      	mov	r3, r7
 800171c:	4619      	mov	r1, r3
 800171e:	2000      	movs	r0, #0
 8001720:	f003 f936 	bl	8004990 <strtok>
 8001724:	60f8      	str	r0, [r7, #12]
	while(ptr != NULL)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1df      	bne.n	80016ec <parse_buffer+0x1c>
	}
	return sample_number;
 800172c:	68bb      	ldr	r3, [r7, #8]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3714      	adds	r7, #20
 8001732:	46bd      	mov	sp, r7
 8001734:	bd90      	pop	{r4, r7, pc}
 8001736:	bf00      	nop
 8001738:	00000000 	.word	0x00000000
 800173c:	40f86a00 	.word	0x40f86a00
 8001740:	200001fc 	.word	0x200001fc
 8001744:	20000d00 	.word	0x20000d00

08001748 <process_sample>:

void process_sample(double coeffs[]) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
    parse_buffer();
 8001750:	f7ff ffbe 	bl	80016d0 <parse_buffer>
	// Process this epoch
	int number_of_samples = sizeof(parsed_epoch_data) / sizeof(double);
 8001754:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001758:	60fb      	str	r3, [r7, #12]

	dct_test(coeffs, parsed_epoch_data, number_of_samples);
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	4903      	ldr	r1, [pc, #12]	; (800176c <process_sample+0x24>)
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff ff90 	bl	8001684 <dct_test>
		HAL_UART_Transmit(&huart4, (unsigned char *)data_string, CHARS_PER_SAMPLE, 0xFFFF);
		HAL_UART_Transmit(&huart4, (unsigned char *)"\n\r", 3, 0xFFFF);
	}
#endif

}
 8001764:	bf00      	nop
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000d00 	.word	0x20000d00

08001770 <build_model>:
	}

}
#endif

void build_model(void) {
 8001770:	b5b0      	push	{r4, r5, r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
	parse_buffer();
 8001776:	f7ff ffab 	bl	80016d0 <parse_buffer>
	if (SVM->has_vector == 0) {
 800177a:	4b40      	ldr	r3, [pc, #256]	; (800187c <build_model+0x10c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 8001782:	2b00      	cmp	r3, #0
 8001784:	d153      	bne.n	800182e <build_model+0xbe>
 8001786:	466b      	mov	r3, sp
 8001788:	461d      	mov	r5, r3
		/* Load the weight vector */
		int number_of_weights = sizeof(parsed_epoch_data) / sizeof(double);   // Get the number of coefficients in the weight vector
 800178a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800178e:	60bb      	str	r3, [r7, #8]
		double vect[number_of_weights];      // This is an array to hold the weights once converted to double from long
 8001790:	68b8      	ldr	r0, [r7, #8]
 8001792:	1e43      	subs	r3, r0, #1
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	4603      	mov	r3, r0
 8001798:	4619      	mov	r1, r3
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	f04f 0300 	mov.w	r3, #0
 80017a2:	f04f 0400 	mov.w	r4, #0
 80017a6:	0194      	lsls	r4, r2, #6
 80017a8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80017ac:	018b      	lsls	r3, r1, #6
 80017ae:	4603      	mov	r3, r0
 80017b0:	4619      	mov	r1, r3
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	f04f 0300 	mov.w	r3, #0
 80017ba:	f04f 0400 	mov.w	r4, #0
 80017be:	0194      	lsls	r4, r2, #6
 80017c0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80017c4:	018b      	lsls	r3, r1, #6
 80017c6:	4603      	mov	r3, r0
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	3307      	adds	r3, #7
 80017cc:	3307      	adds	r3, #7
 80017ce:	08db      	lsrs	r3, r3, #3
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	ebad 0d03 	sub.w	sp, sp, r3
 80017d6:	466b      	mov	r3, sp
 80017d8:	3307      	adds	r3, #7
 80017da:	08db      	lsrs	r3, r3, #3
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	603b      	str	r3, [r7, #0]
		for (int i = 0; i < number_of_weights; i++) {
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	e00e      	b.n	8001804 <build_model+0x94>
			vect[i] = (parsed_epoch_data[i]); // Convert the weight to double then divide by the scale factor
 80017e6:	4a26      	ldr	r2, [pc, #152]	; (8001880 <build_model+0x110>)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	4413      	add	r3, r2
 80017ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80017f2:	6839      	ldr	r1, [r7, #0]
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	00d2      	lsls	r2, r2, #3
 80017f8:	440a      	add	r2, r1
 80017fa:	e9c2 3400 	strd	r3, r4, [r2]
		for (int i = 0; i < number_of_weights; i++) {
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	3301      	adds	r3, #1
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	429a      	cmp	r2, r3
 800180a:	dbec      	blt.n	80017e6 <build_model+0x76>
		}
		//SVM->weight_vector = malloc(number_of_weights * sizeof(double));
		memcpy(SVM->weight_vector, vect, sizeof(vect));   // Store the scaled weights into the model, SVM.weight_vector is no longer NULL
 800180c:	4b1b      	ldr	r3, [pc, #108]	; (800187c <build_model+0x10c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	461c      	mov	r4, r3
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	4602      	mov	r2, r0
 8001816:	00d2      	lsls	r2, r2, #3
 8001818:	4619      	mov	r1, r3
 800181a:	4620      	mov	r0, r4
 800181c:	f002 fca2 	bl	8004164 <memcpy>
		SVM->has_vector = 1;
 8001820:	4b16      	ldr	r3, [pc, #88]	; (800187c <build_model+0x10c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2201      	movs	r2, #1
 8001826:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
 800182a:	46ad      	mov	sp, r5
		SVM->complete = 1;
#ifdef PRINTING_MODEL
		print_model(SVM);
#endif
	}
}
 800182c:	e022      	b.n	8001874 <build_model+0x104>
		SVM->scale = (parsed_epoch_data[0]);
 800182e:	4b13      	ldr	r3, [pc, #76]	; (800187c <build_model+0x10c>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	4b13      	ldr	r3, [pc, #76]	; (8001880 <build_model+0x110>)
 8001834:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001838:	f602 0208 	addw	r2, r2, #2056	; 0x808
 800183c:	e9c2 3400 	strd	r3, r4, [r2]
		SVM->offset = (parsed_epoch_data[1]);
 8001840:	4b0e      	ldr	r3, [pc, #56]	; (800187c <build_model+0x10c>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <build_model+0x110>)
 8001846:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800184a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800184e:	e9c2 3400 	strd	r3, r4, [r2]
		SVM->dimension = (parsed_epoch_data[2]);
 8001852:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <build_model+0x110>)
 8001854:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001858:	4a08      	ldr	r2, [pc, #32]	; (800187c <build_model+0x10c>)
 800185a:	6815      	ldr	r5, [r2, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	4621      	mov	r1, r4
 8001860:	f7ff f926 	bl	8000ab0 <__aeabi_d2iz>
 8001864:	4603      	mov	r3, r0
 8001866:	f8c5 3810 	str.w	r3, [r5, #2064]	; 0x810
		SVM->complete = 1;
 800186a:	4b04      	ldr	r3, [pc, #16]	; (800187c <build_model+0x10c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2201      	movs	r2, #1
 8001870:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
}
 8001874:	bf00      	nop
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bdb0      	pop	{r4, r5, r7, pc}
 800187c:	20001570 	.word	0x20001570
 8001880:	20000d00 	.word	0x20000d00

08001884 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001884:	b580      	push	{r7, lr}
 8001886:	f5ad 6d01 	sub.w	sp, sp, #2064	; 0x810
 800188a:	af00      	add	r7, sp, #0
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	6018      	str	r0, [r3, #0]
	static unsigned int observation = 0;
	HAL_UART_Receive_IT(&huart4, RX_data, EPOCH_LENGTH_SAMPLES * CHARS_PER_SAMPLE); // Start listening. You now have 1 epoch to process this epoch
 8001890:	f44f 6230 	mov.w	r2, #2816	; 0xb00
 8001894:	491e      	ldr	r1, [pc, #120]	; (8001910 <HAL_UART_RxCpltCallback+0x8c>)
 8001896:	481f      	ldr	r0, [pc, #124]	; (8001914 <HAL_UART_RxCpltCallback+0x90>)
 8001898:	f001 fe0b 	bl	80034b2 <HAL_UART_Receive_IT>
	if (SVM->complete) {
 800189c:	4b1e      	ldr	r3, [pc, #120]	; (8001918 <HAL_UART_RxCpltCallback+0x94>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d02b      	beq.n	8001900 <HAL_UART_RxCpltCallback+0x7c>
		double coeffs[EPOCH_LENGTH_SAMPLES];
        process_sample(coeffs);
 80018a8:	f107 0308 	add.w	r3, r7, #8
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff4b 	bl	8001748 <process_sample>
        double prediction = Linear_SVM_Predict(SVM, coeffs);
 80018b2:	4b19      	ldr	r3, [pc, #100]	; (8001918 <HAL_UART_RxCpltCallback+0x94>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f107 0208 	add.w	r2, r7, #8
 80018ba:	4611      	mov	r1, r2
 80018bc:	4618      	mov	r0, r3
 80018be:	f000 fa3b 	bl	8001d38 <Linear_SVM_Predict>
 80018c2:	f607 0308 	addw	r3, r7, #2056	; 0x808
 80018c6:	ed83 0b00 	vstr	d0, [r3]
        if (prediction < 0) {
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	f04f 0300 	mov.w	r3, #0
 80018d2:	f607 0108 	addw	r1, r7, #2056	; 0x808
 80018d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80018da:	f7ff f8ab 	bl	8000a34 <__aeabi_dcmplt>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d006      	beq.n	80018f2 <HAL_UART_RxCpltCallback+0x6e>
        	classes[observation] = 0;
 80018e4:	4b0d      	ldr	r3, [pc, #52]	; (800191c <HAL_UART_RxCpltCallback+0x98>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a0d      	ldr	r2, [pc, #52]	; (8001920 <HAL_UART_RxCpltCallback+0x9c>)
 80018ea:	2100      	movs	r1, #0
 80018ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	else {        //This happens when we haven't got the model yet
		/* Get the model */
		build_model();
	}

}
 80018f0:	e008      	b.n	8001904 <HAL_UART_RxCpltCallback+0x80>
        	classes[observation] = 1;
 80018f2:	4b0a      	ldr	r3, [pc, #40]	; (800191c <HAL_UART_RxCpltCallback+0x98>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <HAL_UART_RxCpltCallback+0x9c>)
 80018f8:	2101      	movs	r1, #1
 80018fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80018fe:	e001      	b.n	8001904 <HAL_UART_RxCpltCallback+0x80>
		build_model();
 8001900:	f7ff ff36 	bl	8001770 <build_model>
}
 8001904:	bf00      	nop
 8001906:	f507 6701 	add.w	r7, r7, #2064	; 0x810
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	200001fc 	.word	0x200001fc
 8001914:	20002574 	.word	0x20002574
 8001918:	20001570 	.word	0x20001570
 800191c:	20001500 	.word	0x20001500
 8001920:	20001574 	.word	0x20001574

08001924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001928:	f000 faec 	bl	8001f04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800192c:	f000 f826 	bl	800197c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001930:	f000 f8d8 	bl	8001ae4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001934:	f000 f8b6 	bl	8001aa4 <MX_DMA_Init>
  MX_UART4_Init();
 8001938:	f000 f88a 	bl	8001a50 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  SVM = malloc(sizeof(Linear_SVM_Model));
 800193c:	f44f 6002 	mov.w	r0, #2080	; 0x820
 8001940:	f002 fc00 	bl	8004144 <malloc>
 8001944:	4603      	mov	r3, r0
 8001946:	461a      	mov	r2, r3
 8001948:	4b09      	ldr	r3, [pc, #36]	; (8001970 <main+0x4c>)
 800194a:	601a      	str	r2, [r3, #0]
  SVM->has_vector = 0;
 800194c:	4b08      	ldr	r3, [pc, #32]	; (8001970 <main+0x4c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2200      	movs	r2, #0
 8001952:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  SVM->complete = 0;
 8001956:	4b06      	ldr	r3, [pc, #24]	; (8001970 <main+0x4c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2200      	movs	r2, #0
 800195c:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
  HAL_UART_Receive_IT(&huart4, RX_data, EPOCH_LENGTH_SAMPLES * CHARS_PER_SAMPLE);
 8001960:	f44f 6230 	mov.w	r2, #2816	; 0xb00
 8001964:	4903      	ldr	r1, [pc, #12]	; (8001974 <main+0x50>)
 8001966:	4804      	ldr	r0, [pc, #16]	; (8001978 <main+0x54>)
 8001968:	f001 fda3 	bl	80034b2 <HAL_UART_Receive_IT>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800196c:	e7fe      	b.n	800196c <main+0x48>
 800196e:	bf00      	nop
 8001970:	20001570 	.word	0x20001570
 8001974:	200001fc 	.word	0x200001fc
 8001978:	20002574 	.word	0x20002574

0800197c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b094      	sub	sp, #80	; 0x50
 8001980:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001982:	f107 0320 	add.w	r3, r7, #32
 8001986:	2230      	movs	r2, #48	; 0x30
 8001988:	2100      	movs	r1, #0
 800198a:	4618      	mov	r0, r3
 800198c:	f002 fbf5 	bl	800417a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001990:	f107 030c 	add.w	r3, r7, #12
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a0:	2300      	movs	r3, #0
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	4b28      	ldr	r3, [pc, #160]	; (8001a48 <SystemClock_Config+0xcc>)
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	4a27      	ldr	r2, [pc, #156]	; (8001a48 <SystemClock_Config+0xcc>)
 80019aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ae:	6413      	str	r3, [r2, #64]	; 0x40
 80019b0:	4b25      	ldr	r3, [pc, #148]	; (8001a48 <SystemClock_Config+0xcc>)
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019bc:	2300      	movs	r3, #0
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	4b22      	ldr	r3, [pc, #136]	; (8001a4c <SystemClock_Config+0xd0>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a21      	ldr	r2, [pc, #132]	; (8001a4c <SystemClock_Config+0xd0>)
 80019c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <SystemClock_Config+0xd0>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019d8:	2301      	movs	r3, #1
 80019da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019e2:	2302      	movs	r3, #2
 80019e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019ec:	2304      	movs	r3, #4
 80019ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80019f0:	23a8      	movs	r3, #168	; 0xa8
 80019f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019f4:	2302      	movs	r3, #2
 80019f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019f8:	2304      	movs	r3, #4
 80019fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019fc:	f107 0320 	add.w	r3, r7, #32
 8001a00:	4618      	mov	r0, r3
 8001a02:	f001 f8a7 	bl	8002b54 <HAL_RCC_OscConfig>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a0c:	f000 f8a0 	bl	8001b50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a10:	230f      	movs	r3, #15
 8001a12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a14:	2302      	movs	r3, #2
 8001a16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a1c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a28:	f107 030c 	add.w	r3, r7, #12
 8001a2c:	2105      	movs	r1, #5
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f001 fb00 	bl	8003034 <HAL_RCC_ClockConfig>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a3a:	f000 f889 	bl	8001b50 <Error_Handler>
  }
}
 8001a3e:	bf00      	nop
 8001a40:	3750      	adds	r7, #80	; 0x50
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40007000 	.word	0x40007000

08001a50 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001a54:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <MX_UART4_Init+0x4c>)
 8001a56:	4a12      	ldr	r2, [pc, #72]	; (8001aa0 <MX_UART4_Init+0x50>)
 8001a58:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 8001a5a:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <MX_UART4_Init+0x4c>)
 8001a5c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001a60:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001a62:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <MX_UART4_Init+0x4c>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <MX_UART4_Init+0x4c>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <MX_UART4_Init+0x4c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001a74:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <MX_UART4_Init+0x4c>)
 8001a76:	220c      	movs	r2, #12
 8001a78:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <MX_UART4_Init+0x4c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <MX_UART4_Init+0x4c>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a86:	4805      	ldr	r0, [pc, #20]	; (8001a9c <MX_UART4_Init+0x4c>)
 8001a88:	f001 fcc6 	bl	8003418 <HAL_UART_Init>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001a92:	f000 f85d 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20002574 	.word	0x20002574
 8001aa0:	40004c00 	.word	0x40004c00

08001aa4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	607b      	str	r3, [r7, #4]
 8001aae:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <MX_DMA_Init+0x3c>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a0b      	ldr	r2, [pc, #44]	; (8001ae0 <MX_DMA_Init+0x3c>)
 8001ab4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <MX_DMA_Init+0x3c>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac2:	607b      	str	r3, [r7, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2100      	movs	r1, #0
 8001aca:	200d      	movs	r0, #13
 8001acc:	f000 fb67 	bl	800219e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001ad0:	200d      	movs	r0, #13
 8001ad2:	f000 fb80 	bl	80021d6 <HAL_NVIC_EnableIRQ>

}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40023800 	.word	0x40023800

08001ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <MX_GPIO_Init+0x68>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4a16      	ldr	r2, [pc, #88]	; (8001b4c <MX_GPIO_Init+0x68>)
 8001af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <MX_GPIO_Init+0x68>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <MX_GPIO_Init+0x68>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a0f      	ldr	r2, [pc, #60]	; (8001b4c <MX_GPIO_Init+0x68>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <MX_GPIO_Init+0x68>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <MX_GPIO_Init+0x68>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	4a08      	ldr	r2, [pc, #32]	; (8001b4c <MX_GPIO_Init+0x68>)
 8001b2c:	f043 0304 	orr.w	r3, r3, #4
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <MX_GPIO_Init+0x68>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f003 0304 	and.w	r3, r3, #4
 8001b3a:	607b      	str	r3, [r7, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]

}
 8001b3e:	bf00      	nop
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	40023800 	.word	0x40023800

08001b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
	...

08001b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	607b      	str	r3, [r7, #4]
 8001b6a:	4b10      	ldr	r3, [pc, #64]	; (8001bac <HAL_MspInit+0x4c>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	4a0f      	ldr	r2, [pc, #60]	; (8001bac <HAL_MspInit+0x4c>)
 8001b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b74:	6453      	str	r3, [r2, #68]	; 0x44
 8001b76:	4b0d      	ldr	r3, [pc, #52]	; (8001bac <HAL_MspInit+0x4c>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b7e:	607b      	str	r3, [r7, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	603b      	str	r3, [r7, #0]
 8001b86:	4b09      	ldr	r3, [pc, #36]	; (8001bac <HAL_MspInit+0x4c>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	4a08      	ldr	r2, [pc, #32]	; (8001bac <HAL_MspInit+0x4c>)
 8001b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b90:	6413      	str	r3, [r2, #64]	; 0x40
 8001b92:	4b06      	ldr	r3, [pc, #24]	; (8001bac <HAL_MspInit+0x4c>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9a:	603b      	str	r3, [r7, #0]
 8001b9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	40023800 	.word	0x40023800

08001bb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	; 0x28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a34      	ldr	r2, [pc, #208]	; (8001ca0 <HAL_UART_MspInit+0xf0>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d162      	bne.n	8001c98 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	4b33      	ldr	r3, [pc, #204]	; (8001ca4 <HAL_UART_MspInit+0xf4>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	4a32      	ldr	r2, [pc, #200]	; (8001ca4 <HAL_UART_MspInit+0xf4>)
 8001bdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001be0:	6413      	str	r3, [r2, #64]	; 0x40
 8001be2:	4b30      	ldr	r3, [pc, #192]	; (8001ca4 <HAL_UART_MspInit+0xf4>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	4b2c      	ldr	r3, [pc, #176]	; (8001ca4 <HAL_UART_MspInit+0xf4>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a2b      	ldr	r2, [pc, #172]	; (8001ca4 <HAL_UART_MspInit+0xf4>)
 8001bf8:	f043 0304 	orr.w	r3, r3, #4
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b29      	ldr	r3, [pc, #164]	; (8001ca4 <HAL_UART_MspInit+0xf4>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0304 	and.w	r3, r3, #4
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c0a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c10:	2302      	movs	r3, #2
 8001c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c14:	2301      	movs	r3, #1
 8001c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001c1c:	2308      	movs	r3, #8
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	4619      	mov	r1, r3
 8001c26:	4820      	ldr	r0, [pc, #128]	; (8001ca8 <HAL_UART_MspInit+0xf8>)
 8001c28:	f000 fdfa 	bl	8002820 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001c2c:	4b1f      	ldr	r3, [pc, #124]	; (8001cac <HAL_UART_MspInit+0xfc>)
 8001c2e:	4a20      	ldr	r2, [pc, #128]	; (8001cb0 <HAL_UART_MspInit+0x100>)
 8001c30:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001c32:	4b1e      	ldr	r3, [pc, #120]	; (8001cac <HAL_UART_MspInit+0xfc>)
 8001c34:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c38:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c3a:	4b1c      	ldr	r3, [pc, #112]	; (8001cac <HAL_UART_MspInit+0xfc>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c40:	4b1a      	ldr	r3, [pc, #104]	; (8001cac <HAL_UART_MspInit+0xfc>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c46:	4b19      	ldr	r3, [pc, #100]	; (8001cac <HAL_UART_MspInit+0xfc>)
 8001c48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c4c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c4e:	4b17      	ldr	r3, [pc, #92]	; (8001cac <HAL_UART_MspInit+0xfc>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c54:	4b15      	ldr	r3, [pc, #84]	; (8001cac <HAL_UART_MspInit+0xfc>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001c5a:	4b14      	ldr	r3, [pc, #80]	; (8001cac <HAL_UART_MspInit+0xfc>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c60:	4b12      	ldr	r3, [pc, #72]	; (8001cac <HAL_UART_MspInit+0xfc>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c66:	4b11      	ldr	r3, [pc, #68]	; (8001cac <HAL_UART_MspInit+0xfc>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001c6c:	480f      	ldr	r0, [pc, #60]	; (8001cac <HAL_UART_MspInit+0xfc>)
 8001c6e:	f000 facd 	bl	800220c <HAL_DMA_Init>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001c78:	f7ff ff6a 	bl	8001b50 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <HAL_UART_MspInit+0xfc>)
 8001c80:	635a      	str	r2, [r3, #52]	; 0x34
 8001c82:	4a0a      	ldr	r2, [pc, #40]	; (8001cac <HAL_UART_MspInit+0xfc>)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	2034      	movs	r0, #52	; 0x34
 8001c8e:	f000 fa86 	bl	800219e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001c92:	2034      	movs	r0, #52	; 0x34
 8001c94:	f000 fa9f 	bl	80021d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001c98:	bf00      	nop
 8001c9a:	3728      	adds	r7, #40	; 0x28
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40004c00 	.word	0x40004c00
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40020800 	.word	0x40020800
 8001cac:	20001510 	.word	0x20001510
 8001cb0:	40026040 	.word	0x40026040

08001cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cc6:	e7fe      	b.n	8001cc6 <HardFault_Handler+0x4>

08001cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <MemManage_Handler+0x4>

08001cce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cd2:	e7fe      	b.n	8001cd2 <BusFault_Handler+0x4>

08001cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd8:	e7fe      	b.n	8001cd8 <UsageFault_Handler+0x4>

08001cda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d08:	f000 f94e 	bl	8001fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001d14:	4802      	ldr	r0, [pc, #8]	; (8001d20 <DMA1_Stream2_IRQHandler+0x10>)
 8001d16:	f000 fb49 	bl	80023ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20001510 	.word	0x20001510

08001d24 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001d28:	4802      	ldr	r0, [pc, #8]	; (8001d34 <UART4_IRQHandler+0x10>)
 8001d2a:	f001 fc17 	bl	800355c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20002574 	.word	0x20002574

08001d38 <Linear_SVM_Predict>:
 *      Author: Willie
 */

#include "svm_predict.h"

double Linear_SVM_Predict(Linear_SVM_Model* model, double* observation) {
 8001d38:	b590      	push	{r4, r7, lr}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
	return (SVM_dot_product(model->weight_vector, observation, model->dimension) + model->offset);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	6839      	ldr	r1, [r7, #0]
 8001d4e:	f000 f816 	bl	8001d7e <SVM_dot_product>
 8001d52:	ec51 0b10 	vmov	r0, r1, d0
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d5c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d60:	461a      	mov	r2, r3
 8001d62:	4623      	mov	r3, r4
 8001d64:	f7fe fa3e 	bl	80001e4 <__adddf3>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	460c      	mov	r4, r1
 8001d6c:	ec44 3b17 	vmov	d7, r3, r4
}
 8001d70:	eeb0 0a47 	vmov.f32	s0, s14
 8001d74:	eef0 0a67 	vmov.f32	s1, s15
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd90      	pop	{r4, r7, pc}

08001d7e <SVM_dot_product>:

double SVM_dot_product(double* Vect_A, double* Vect_B, int dimension) {
 8001d7e:	b590      	push	{r4, r7, lr}
 8001d80:	b089      	sub	sp, #36	; 0x24
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	60f8      	str	r0, [r7, #12]
 8001d86:	60b9      	str	r1, [r7, #8]
 8001d88:	607a      	str	r2, [r7, #4]
	double sum = 0.0;
 8001d8a:	f04f 0300 	mov.w	r3, #0
 8001d8e:	f04f 0400 	mov.w	r4, #0
 8001d92:	e9c7 3406 	strd	r3, r4, [r7, #24]

	for (int i = 0; i < dimension; i++) {
 8001d96:	2300      	movs	r3, #0
 8001d98:	617b      	str	r3, [r7, #20]
 8001d9a:	e01e      	b.n	8001dda <SVM_dot_product+0x5c>
		sum += (Vect_A[i] * Vect_B[i]);
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	4413      	add	r3, r2
 8001da4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	68ba      	ldr	r2, [r7, #8]
 8001dae:	4413      	add	r3, r2
 8001db0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001db4:	461a      	mov	r2, r3
 8001db6:	4623      	mov	r3, r4
 8001db8:	f7fe fbca 	bl	8000550 <__aeabi_dmul>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	460c      	mov	r4, r1
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4623      	mov	r3, r4
 8001dc4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001dc8:	f7fe fa0c 	bl	80001e4 <__adddf3>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	460c      	mov	r4, r1
 8001dd0:	e9c7 3406 	strd	r3, r4, [r7, #24]
	for (int i = 0; i < dimension; i++) {
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	617b      	str	r3, [r7, #20]
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	dbdc      	blt.n	8001d9c <SVM_dot_product+0x1e>
	}

	return sum;
 8001de2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001de6:	ec44 3b17 	vmov	d7, r3, r4
}
 8001dea:	eeb0 0a47 	vmov.f32	s0, s14
 8001dee:	eef0 0a67 	vmov.f32	s1, s15
 8001df2:	3724      	adds	r7, #36	; 0x24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd90      	pop	{r4, r7, pc}

08001df8 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e02:	f002 f961 	bl	80040c8 <__errno>
 8001e06:	4602      	mov	r2, r0
 8001e08:	2316      	movs	r3, #22
 8001e0a:	6013      	str	r3, [r2, #0]
	return -1;
 8001e0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <_exit>:

void _exit (int status)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e20:	f04f 31ff 	mov.w	r1, #4294967295
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff ffe7 	bl	8001df8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e2a:	e7fe      	b.n	8001e2a <_exit+0x12>

08001e2c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001e34:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <_sbrk+0x50>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d102      	bne.n	8001e42 <_sbrk+0x16>
		heap_end = &end;
 8001e3c:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <_sbrk+0x50>)
 8001e3e:	4a10      	ldr	r2, [pc, #64]	; (8001e80 <_sbrk+0x54>)
 8001e40:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001e42:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <_sbrk+0x50>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001e48:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <_sbrk+0x50>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4413      	add	r3, r2
 8001e50:	466a      	mov	r2, sp
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d907      	bls.n	8001e66 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001e56:	f002 f937 	bl	80040c8 <__errno>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	230c      	movs	r3, #12
 8001e5e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001e60:	f04f 33ff 	mov.w	r3, #4294967295
 8001e64:	e006      	b.n	8001e74 <_sbrk+0x48>
	}

	heap_end += incr;
 8001e66:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <_sbrk+0x50>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	4a03      	ldr	r2, [pc, #12]	; (8001e7c <_sbrk+0x50>)
 8001e70:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001e72:	68fb      	ldr	r3, [r7, #12]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20001504 	.word	0x20001504
 8001e80:	200025c0 	.word	0x200025c0

08001e84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e88:	4b08      	ldr	r3, [pc, #32]	; (8001eac <SystemInit+0x28>)
 8001e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e8e:	4a07      	ldr	r2, [pc, #28]	; (8001eac <SystemInit+0x28>)
 8001e90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e98:	4b04      	ldr	r3, [pc, #16]	; (8001eac <SystemInit+0x28>)
 8001e9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e9e:	609a      	str	r2, [r3, #8]
#endif
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001eb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ee8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001eb4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001eb6:	e003      	b.n	8001ec0 <LoopCopyDataInit>

08001eb8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001eba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ebc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ebe:	3104      	adds	r1, #4

08001ec0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ec0:	480b      	ldr	r0, [pc, #44]	; (8001ef0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ec2:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ec4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ec6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ec8:	d3f6      	bcc.n	8001eb8 <CopyDataInit>
  ldr  r2, =_sbss
 8001eca:	4a0b      	ldr	r2, [pc, #44]	; (8001ef8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ecc:	e002      	b.n	8001ed4 <LoopFillZerobss>

08001ece <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ece:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ed0:	f842 3b04 	str.w	r3, [r2], #4

08001ed4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ed4:	4b09      	ldr	r3, [pc, #36]	; (8001efc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ed6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ed8:	d3f9      	bcc.n	8001ece <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001eda:	f7ff ffd3 	bl	8001e84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ede:	f002 f90d 	bl	80040fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ee2:	f7ff fd1f 	bl	8001924 <main>
  bx  lr    
 8001ee6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ee8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001eec:	08007550 	.word	0x08007550
  ldr  r0, =_sdata
 8001ef0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ef4:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8001ef8:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8001efc:	200025bc 	.word	0x200025bc

08001f00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f00:	e7fe      	b.n	8001f00 <ADC_IRQHandler>
	...

08001f04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f08:	4b0e      	ldr	r3, [pc, #56]	; (8001f44 <HAL_Init+0x40>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a0d      	ldr	r2, [pc, #52]	; (8001f44 <HAL_Init+0x40>)
 8001f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f14:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <HAL_Init+0x40>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a0a      	ldr	r2, [pc, #40]	; (8001f44 <HAL_Init+0x40>)
 8001f1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f20:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <HAL_Init+0x40>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a07      	ldr	r2, [pc, #28]	; (8001f44 <HAL_Init+0x40>)
 8001f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f2c:	2003      	movs	r0, #3
 8001f2e:	f000 f92b 	bl	8002188 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f32:	2000      	movs	r0, #0
 8001f34:	f000 f808 	bl	8001f48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f38:	f7ff fe12 	bl	8001b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40023c00 	.word	0x40023c00

08001f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f50:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <HAL_InitTick+0x54>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <HAL_InitTick+0x58>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	4619      	mov	r1, r3
 8001f5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 f943 	bl	80021f2 <HAL_SYSTICK_Config>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e00e      	b.n	8001f94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b0f      	cmp	r3, #15
 8001f7a:	d80a      	bhi.n	8001f92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	f04f 30ff 	mov.w	r0, #4294967295
 8001f84:	f000 f90b 	bl	800219e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f88:	4a06      	ldr	r2, [pc, #24]	; (8001fa4 <HAL_InitTick+0x5c>)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	e000      	b.n	8001f94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20000000 	.word	0x20000000
 8001fa0:	20000008 	.word	0x20000008
 8001fa4:	20000004 	.word	0x20000004

08001fa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fac:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <HAL_IncTick+0x20>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <HAL_IncTick+0x24>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	4a04      	ldr	r2, [pc, #16]	; (8001fcc <HAL_IncTick+0x24>)
 8001fba:	6013      	str	r3, [r2, #0]
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	20000008 	.word	0x20000008
 8001fcc:	200025b4 	.word	0x200025b4

08001fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd4:	4b03      	ldr	r3, [pc, #12]	; (8001fe4 <HAL_GetTick+0x14>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	200025b4 	.word	0x200025b4

08001fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff8:	4b0c      	ldr	r3, [pc, #48]	; (800202c <__NVIC_SetPriorityGrouping+0x44>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002004:	4013      	ands	r3, r2
 8002006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800201a:	4a04      	ldr	r2, [pc, #16]	; (800202c <__NVIC_SetPriorityGrouping+0x44>)
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	60d3      	str	r3, [r2, #12]
}
 8002020:	bf00      	nop
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002034:	4b04      	ldr	r3, [pc, #16]	; (8002048 <__NVIC_GetPriorityGrouping+0x18>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	0a1b      	lsrs	r3, r3, #8
 800203a:	f003 0307 	and.w	r3, r3, #7
}
 800203e:	4618      	mov	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205a:	2b00      	cmp	r3, #0
 800205c:	db0b      	blt.n	8002076 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800205e:	79fb      	ldrb	r3, [r7, #7]
 8002060:	f003 021f 	and.w	r2, r3, #31
 8002064:	4907      	ldr	r1, [pc, #28]	; (8002084 <__NVIC_EnableIRQ+0x38>)
 8002066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206a:	095b      	lsrs	r3, r3, #5
 800206c:	2001      	movs	r0, #1
 800206e:	fa00 f202 	lsl.w	r2, r0, r2
 8002072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	e000e100 	.word	0xe000e100

08002088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	6039      	str	r1, [r7, #0]
 8002092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002098:	2b00      	cmp	r3, #0
 800209a:	db0a      	blt.n	80020b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	490c      	ldr	r1, [pc, #48]	; (80020d4 <__NVIC_SetPriority+0x4c>)
 80020a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a6:	0112      	lsls	r2, r2, #4
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	440b      	add	r3, r1
 80020ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b0:	e00a      	b.n	80020c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	4908      	ldr	r1, [pc, #32]	; (80020d8 <__NVIC_SetPriority+0x50>)
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	3b04      	subs	r3, #4
 80020c0:	0112      	lsls	r2, r2, #4
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	440b      	add	r3, r1
 80020c6:	761a      	strb	r2, [r3, #24]
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	e000e100 	.word	0xe000e100
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020dc:	b480      	push	{r7}
 80020de:	b089      	sub	sp, #36	; 0x24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f1c3 0307 	rsb	r3, r3, #7
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	bf28      	it	cs
 80020fa:	2304      	movcs	r3, #4
 80020fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	3304      	adds	r3, #4
 8002102:	2b06      	cmp	r3, #6
 8002104:	d902      	bls.n	800210c <NVIC_EncodePriority+0x30>
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3b03      	subs	r3, #3
 800210a:	e000      	b.n	800210e <NVIC_EncodePriority+0x32>
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002110:	f04f 32ff 	mov.w	r2, #4294967295
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43da      	mvns	r2, r3
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	401a      	ands	r2, r3
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002124:	f04f 31ff 	mov.w	r1, #4294967295
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	fa01 f303 	lsl.w	r3, r1, r3
 800212e:	43d9      	mvns	r1, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002134:	4313      	orrs	r3, r2
         );
}
 8002136:	4618      	mov	r0, r3
 8002138:	3724      	adds	r7, #36	; 0x24
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
	...

08002144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3b01      	subs	r3, #1
 8002150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002154:	d301      	bcc.n	800215a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002156:	2301      	movs	r3, #1
 8002158:	e00f      	b.n	800217a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800215a:	4a0a      	ldr	r2, [pc, #40]	; (8002184 <SysTick_Config+0x40>)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3b01      	subs	r3, #1
 8002160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002162:	210f      	movs	r1, #15
 8002164:	f04f 30ff 	mov.w	r0, #4294967295
 8002168:	f7ff ff8e 	bl	8002088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800216c:	4b05      	ldr	r3, [pc, #20]	; (8002184 <SysTick_Config+0x40>)
 800216e:	2200      	movs	r2, #0
 8002170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002172:	4b04      	ldr	r3, [pc, #16]	; (8002184 <SysTick_Config+0x40>)
 8002174:	2207      	movs	r2, #7
 8002176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	e000e010 	.word	0xe000e010

08002188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff ff29 	bl	8001fe8 <__NVIC_SetPriorityGrouping>
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800219e:	b580      	push	{r7, lr}
 80021a0:	b086      	sub	sp, #24
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	4603      	mov	r3, r0
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	607a      	str	r2, [r7, #4]
 80021aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021b0:	f7ff ff3e 	bl	8002030 <__NVIC_GetPriorityGrouping>
 80021b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68b9      	ldr	r1, [r7, #8]
 80021ba:	6978      	ldr	r0, [r7, #20]
 80021bc:	f7ff ff8e 	bl	80020dc <NVIC_EncodePriority>
 80021c0:	4602      	mov	r2, r0
 80021c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c6:	4611      	mov	r1, r2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff ff5d 	bl	8002088 <__NVIC_SetPriority>
}
 80021ce:	bf00      	nop
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b082      	sub	sp, #8
 80021da:	af00      	add	r7, sp, #0
 80021dc:	4603      	mov	r3, r0
 80021de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff31 	bl	800204c <__NVIC_EnableIRQ>
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b082      	sub	sp, #8
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff ffa2 	bl	8002144 <SysTick_Config>
 8002200:	4603      	mov	r3, r0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
	...

0800220c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002214:	2300      	movs	r3, #0
 8002216:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002218:	f7ff feda 	bl	8001fd0 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e099      	b.n	800235c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2202      	movs	r2, #2
 8002234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0201 	bic.w	r2, r2, #1
 8002246:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002248:	e00f      	b.n	800226a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800224a:	f7ff fec1 	bl	8001fd0 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b05      	cmp	r3, #5
 8002256:	d908      	bls.n	800226a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2220      	movs	r2, #32
 800225c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2203      	movs	r2, #3
 8002262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e078      	b.n	800235c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1e8      	bne.n	800224a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	4b38      	ldr	r3, [pc, #224]	; (8002364 <HAL_DMA_Init+0x158>)
 8002284:	4013      	ands	r3, r2
 8002286:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002296:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	2b04      	cmp	r3, #4
 80022c2:	d107      	bne.n	80022d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022cc:	4313      	orrs	r3, r2
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f023 0307 	bic.w	r3, r3, #7
 80022ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	d117      	bne.n	800232e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	4313      	orrs	r3, r2
 8002306:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00e      	beq.n	800232e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 fa0b 	bl	800272c <DMA_CheckFifoParam>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d008      	beq.n	800232e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2240      	movs	r2, #64	; 0x40
 8002320:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800232a:	2301      	movs	r3, #1
 800232c:	e016      	b.n	800235c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f9c2 	bl	80026c0 <DMA_CalcBaseAndBitshift>
 800233c:	4603      	mov	r3, r0
 800233e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002344:	223f      	movs	r2, #63	; 0x3f
 8002346:	409a      	lsls	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	f010803f 	.word	0xf010803f

08002368 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d004      	beq.n	8002386 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2280      	movs	r2, #128	; 0x80
 8002380:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e00c      	b.n	80023a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2205      	movs	r2, #5
 800238a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 0201 	bic.w	r2, r2, #1
 800239c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80023b8:	4b92      	ldr	r3, [pc, #584]	; (8002604 <HAL_DMA_IRQHandler+0x258>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a92      	ldr	r2, [pc, #584]	; (8002608 <HAL_DMA_IRQHandler+0x25c>)
 80023be:	fba2 2303 	umull	r2, r3, r2, r3
 80023c2:	0a9b      	lsrs	r3, r3, #10
 80023c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d6:	2208      	movs	r2, #8
 80023d8:	409a      	lsls	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	4013      	ands	r3, r2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d01a      	beq.n	8002418 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d013      	beq.n	8002418 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 0204 	bic.w	r2, r2, #4
 80023fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002404:	2208      	movs	r2, #8
 8002406:	409a      	lsls	r2, r3
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002410:	f043 0201 	orr.w	r2, r3, #1
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241c:	2201      	movs	r2, #1
 800241e:	409a      	lsls	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4013      	ands	r3, r2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d012      	beq.n	800244e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00b      	beq.n	800244e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243a:	2201      	movs	r2, #1
 800243c:	409a      	lsls	r2, r3
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002446:	f043 0202 	orr.w	r2, r3, #2
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002452:	2204      	movs	r2, #4
 8002454:	409a      	lsls	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	4013      	ands	r3, r2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d012      	beq.n	8002484 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00b      	beq.n	8002484 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002470:	2204      	movs	r2, #4
 8002472:	409a      	lsls	r2, r3
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247c:	f043 0204 	orr.w	r2, r3, #4
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002488:	2210      	movs	r2, #16
 800248a:	409a      	lsls	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	4013      	ands	r3, r2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d043      	beq.n	800251c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d03c      	beq.n	800251c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a6:	2210      	movs	r2, #16
 80024a8:	409a      	lsls	r2, r3
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d018      	beq.n	80024ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d108      	bne.n	80024dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d024      	beq.n	800251c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	4798      	blx	r3
 80024da:	e01f      	b.n	800251c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d01b      	beq.n	800251c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	4798      	blx	r3
 80024ec:	e016      	b.n	800251c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d107      	bne.n	800250c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 0208 	bic.w	r2, r2, #8
 800250a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002520:	2220      	movs	r2, #32
 8002522:	409a      	lsls	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4013      	ands	r3, r2
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 808e 	beq.w	800264a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0310 	and.w	r3, r3, #16
 8002538:	2b00      	cmp	r3, #0
 800253a:	f000 8086 	beq.w	800264a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002542:	2220      	movs	r2, #32
 8002544:	409a      	lsls	r2, r3
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b05      	cmp	r3, #5
 8002554:	d136      	bne.n	80025c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0216 	bic.w	r2, r2, #22
 8002564:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	695a      	ldr	r2, [r3, #20]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002574:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	2b00      	cmp	r3, #0
 800257c:	d103      	bne.n	8002586 <HAL_DMA_IRQHandler+0x1da>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002582:	2b00      	cmp	r3, #0
 8002584:	d007      	beq.n	8002596 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0208 	bic.w	r2, r2, #8
 8002594:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259a:	223f      	movs	r2, #63	; 0x3f
 800259c:	409a      	lsls	r2, r3
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d07d      	beq.n	80026b6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	4798      	blx	r3
        }
        return;
 80025c2:	e078      	b.n	80026b6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d01c      	beq.n	800260c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d108      	bne.n	80025f2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d030      	beq.n	800264a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	4798      	blx	r3
 80025f0:	e02b      	b.n	800264a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d027      	beq.n	800264a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	4798      	blx	r3
 8002602:	e022      	b.n	800264a <HAL_DMA_IRQHandler+0x29e>
 8002604:	20000000 	.word	0x20000000
 8002608:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10f      	bne.n	800263a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 0210 	bic.w	r2, r2, #16
 8002628:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264e:	2b00      	cmp	r3, #0
 8002650:	d032      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d022      	beq.n	80026a4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2205      	movs	r2, #5
 8002662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 0201 	bic.w	r2, r2, #1
 8002674:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	3301      	adds	r3, #1
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	429a      	cmp	r2, r3
 8002680:	d307      	bcc.n	8002692 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1f2      	bne.n	8002676 <HAL_DMA_IRQHandler+0x2ca>
 8002690:	e000      	b.n	8002694 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002692:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d005      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	4798      	blx	r3
 80026b4:	e000      	b.n	80026b8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80026b6:	bf00      	nop
    }
  }
}
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop

080026c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	3b10      	subs	r3, #16
 80026d0:	4a14      	ldr	r2, [pc, #80]	; (8002724 <DMA_CalcBaseAndBitshift+0x64>)
 80026d2:	fba2 2303 	umull	r2, r3, r2, r3
 80026d6:	091b      	lsrs	r3, r3, #4
 80026d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026da:	4a13      	ldr	r2, [pc, #76]	; (8002728 <DMA_CalcBaseAndBitshift+0x68>)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4413      	add	r3, r2
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	461a      	mov	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	d909      	bls.n	8002702 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026f6:	f023 0303 	bic.w	r3, r3, #3
 80026fa:	1d1a      	adds	r2, r3, #4
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	659a      	str	r2, [r3, #88]	; 0x58
 8002700:	e007      	b.n	8002712 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800270a:	f023 0303 	bic.w	r3, r3, #3
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002716:	4618      	mov	r0, r3
 8002718:	3714      	adds	r7, #20
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	aaaaaaab 	.word	0xaaaaaaab
 8002728:	08007128 	.word	0x08007128

0800272c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002734:	2300      	movs	r3, #0
 8002736:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d11f      	bne.n	8002786 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	2b03      	cmp	r3, #3
 800274a:	d855      	bhi.n	80027f8 <DMA_CheckFifoParam+0xcc>
 800274c:	a201      	add	r2, pc, #4	; (adr r2, 8002754 <DMA_CheckFifoParam+0x28>)
 800274e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002752:	bf00      	nop
 8002754:	08002765 	.word	0x08002765
 8002758:	08002777 	.word	0x08002777
 800275c:	08002765 	.word	0x08002765
 8002760:	080027f9 	.word	0x080027f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002768:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d045      	beq.n	80027fc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002774:	e042      	b.n	80027fc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800277e:	d13f      	bne.n	8002800 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002784:	e03c      	b.n	8002800 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800278e:	d121      	bne.n	80027d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2b03      	cmp	r3, #3
 8002794:	d836      	bhi.n	8002804 <DMA_CheckFifoParam+0xd8>
 8002796:	a201      	add	r2, pc, #4	; (adr r2, 800279c <DMA_CheckFifoParam+0x70>)
 8002798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800279c:	080027ad 	.word	0x080027ad
 80027a0:	080027b3 	.word	0x080027b3
 80027a4:	080027ad 	.word	0x080027ad
 80027a8:	080027c5 	.word	0x080027c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	73fb      	strb	r3, [r7, #15]
      break;
 80027b0:	e02f      	b.n	8002812 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d024      	beq.n	8002808 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027c2:	e021      	b.n	8002808 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027cc:	d11e      	bne.n	800280c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027d2:	e01b      	b.n	800280c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d902      	bls.n	80027e0 <DMA_CheckFifoParam+0xb4>
 80027da:	2b03      	cmp	r3, #3
 80027dc:	d003      	beq.n	80027e6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027de:	e018      	b.n	8002812 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	73fb      	strb	r3, [r7, #15]
      break;
 80027e4:	e015      	b.n	8002812 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00e      	beq.n	8002810 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	73fb      	strb	r3, [r7, #15]
      break;
 80027f6:	e00b      	b.n	8002810 <DMA_CheckFifoParam+0xe4>
      break;
 80027f8:	bf00      	nop
 80027fa:	e00a      	b.n	8002812 <DMA_CheckFifoParam+0xe6>
      break;
 80027fc:	bf00      	nop
 80027fe:	e008      	b.n	8002812 <DMA_CheckFifoParam+0xe6>
      break;
 8002800:	bf00      	nop
 8002802:	e006      	b.n	8002812 <DMA_CheckFifoParam+0xe6>
      break;
 8002804:	bf00      	nop
 8002806:	e004      	b.n	8002812 <DMA_CheckFifoParam+0xe6>
      break;
 8002808:	bf00      	nop
 800280a:	e002      	b.n	8002812 <DMA_CheckFifoParam+0xe6>
      break;   
 800280c:	bf00      	nop
 800280e:	e000      	b.n	8002812 <DMA_CheckFifoParam+0xe6>
      break;
 8002810:	bf00      	nop
    }
  } 
  
  return status; 
 8002812:	7bfb      	ldrb	r3, [r7, #15]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002820:	b480      	push	{r7}
 8002822:	b089      	sub	sp, #36	; 0x24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800282e:	2300      	movs	r3, #0
 8002830:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002832:	2300      	movs	r3, #0
 8002834:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002836:	2300      	movs	r3, #0
 8002838:	61fb      	str	r3, [r7, #28]
 800283a:	e16b      	b.n	8002b14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800283c:	2201      	movs	r2, #1
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	4013      	ands	r3, r2
 800284e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	429a      	cmp	r2, r3
 8002856:	f040 815a 	bne.w	8002b0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d00b      	beq.n	800287a <HAL_GPIO_Init+0x5a>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b02      	cmp	r3, #2
 8002868:	d007      	beq.n	800287a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800286e:	2b11      	cmp	r3, #17
 8002870:	d003      	beq.n	800287a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b12      	cmp	r3, #18
 8002878:	d130      	bne.n	80028dc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	2203      	movs	r2, #3
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43db      	mvns	r3, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4013      	ands	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028b0:	2201      	movs	r2, #1
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4013      	ands	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	091b      	lsrs	r3, r3, #4
 80028c6:	f003 0201 	and.w	r2, r3, #1
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	2203      	movs	r2, #3
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b02      	cmp	r3, #2
 8002912:	d003      	beq.n	800291c <HAL_GPIO_Init+0xfc>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	2b12      	cmp	r3, #18
 800291a:	d123      	bne.n	8002964 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	08da      	lsrs	r2, r3, #3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3208      	adds	r2, #8
 8002924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002928:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	220f      	movs	r2, #15
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4013      	ands	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	691a      	ldr	r2, [r3, #16]
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	08da      	lsrs	r2, r3, #3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	3208      	adds	r2, #8
 800295e:	69b9      	ldr	r1, [r7, #24]
 8002960:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	2203      	movs	r2, #3
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	43db      	mvns	r3, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4013      	ands	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 0203 	and.w	r2, r3, #3
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4313      	orrs	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 80b4 	beq.w	8002b0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	4b5f      	ldr	r3, [pc, #380]	; (8002b28 <HAL_GPIO_Init+0x308>)
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	4a5e      	ldr	r2, [pc, #376]	; (8002b28 <HAL_GPIO_Init+0x308>)
 80029b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b4:	6453      	str	r3, [r2, #68]	; 0x44
 80029b6:	4b5c      	ldr	r3, [pc, #368]	; (8002b28 <HAL_GPIO_Init+0x308>)
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029c2:	4a5a      	ldr	r2, [pc, #360]	; (8002b2c <HAL_GPIO_Init+0x30c>)
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	089b      	lsrs	r3, r3, #2
 80029c8:	3302      	adds	r3, #2
 80029ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	220f      	movs	r2, #15
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43db      	mvns	r3, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4013      	ands	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a51      	ldr	r2, [pc, #324]	; (8002b30 <HAL_GPIO_Init+0x310>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d02b      	beq.n	8002a46 <HAL_GPIO_Init+0x226>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a50      	ldr	r2, [pc, #320]	; (8002b34 <HAL_GPIO_Init+0x314>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d025      	beq.n	8002a42 <HAL_GPIO_Init+0x222>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a4f      	ldr	r2, [pc, #316]	; (8002b38 <HAL_GPIO_Init+0x318>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d01f      	beq.n	8002a3e <HAL_GPIO_Init+0x21e>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a4e      	ldr	r2, [pc, #312]	; (8002b3c <HAL_GPIO_Init+0x31c>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d019      	beq.n	8002a3a <HAL_GPIO_Init+0x21a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a4d      	ldr	r2, [pc, #308]	; (8002b40 <HAL_GPIO_Init+0x320>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d013      	beq.n	8002a36 <HAL_GPIO_Init+0x216>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a4c      	ldr	r2, [pc, #304]	; (8002b44 <HAL_GPIO_Init+0x324>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d00d      	beq.n	8002a32 <HAL_GPIO_Init+0x212>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a4b      	ldr	r2, [pc, #300]	; (8002b48 <HAL_GPIO_Init+0x328>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d007      	beq.n	8002a2e <HAL_GPIO_Init+0x20e>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a4a      	ldr	r2, [pc, #296]	; (8002b4c <HAL_GPIO_Init+0x32c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d101      	bne.n	8002a2a <HAL_GPIO_Init+0x20a>
 8002a26:	2307      	movs	r3, #7
 8002a28:	e00e      	b.n	8002a48 <HAL_GPIO_Init+0x228>
 8002a2a:	2308      	movs	r3, #8
 8002a2c:	e00c      	b.n	8002a48 <HAL_GPIO_Init+0x228>
 8002a2e:	2306      	movs	r3, #6
 8002a30:	e00a      	b.n	8002a48 <HAL_GPIO_Init+0x228>
 8002a32:	2305      	movs	r3, #5
 8002a34:	e008      	b.n	8002a48 <HAL_GPIO_Init+0x228>
 8002a36:	2304      	movs	r3, #4
 8002a38:	e006      	b.n	8002a48 <HAL_GPIO_Init+0x228>
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e004      	b.n	8002a48 <HAL_GPIO_Init+0x228>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e002      	b.n	8002a48 <HAL_GPIO_Init+0x228>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <HAL_GPIO_Init+0x228>
 8002a46:	2300      	movs	r3, #0
 8002a48:	69fa      	ldr	r2, [r7, #28]
 8002a4a:	f002 0203 	and.w	r2, r2, #3
 8002a4e:	0092      	lsls	r2, r2, #2
 8002a50:	4093      	lsls	r3, r2
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a58:	4934      	ldr	r1, [pc, #208]	; (8002b2c <HAL_GPIO_Init+0x30c>)
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	089b      	lsrs	r3, r3, #2
 8002a5e:	3302      	adds	r3, #2
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a66:	4b3a      	ldr	r3, [pc, #232]	; (8002b50 <HAL_GPIO_Init+0x330>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4013      	ands	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a8a:	4a31      	ldr	r2, [pc, #196]	; (8002b50 <HAL_GPIO_Init+0x330>)
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a90:	4b2f      	ldr	r3, [pc, #188]	; (8002b50 <HAL_GPIO_Init+0x330>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d003      	beq.n	8002ab4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ab4:	4a26      	ldr	r2, [pc, #152]	; (8002b50 <HAL_GPIO_Init+0x330>)
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aba:	4b25      	ldr	r3, [pc, #148]	; (8002b50 <HAL_GPIO_Init+0x330>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ade:	4a1c      	ldr	r2, [pc, #112]	; (8002b50 <HAL_GPIO_Init+0x330>)
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ae4:	4b1a      	ldr	r3, [pc, #104]	; (8002b50 <HAL_GPIO_Init+0x330>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d003      	beq.n	8002b08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b08:	4a11      	ldr	r2, [pc, #68]	; (8002b50 <HAL_GPIO_Init+0x330>)
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	3301      	adds	r3, #1
 8002b12:	61fb      	str	r3, [r7, #28]
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	2b0f      	cmp	r3, #15
 8002b18:	f67f ae90 	bls.w	800283c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b1c:	bf00      	nop
 8002b1e:	3724      	adds	r7, #36	; 0x24
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	40013800 	.word	0x40013800
 8002b30:	40020000 	.word	0x40020000
 8002b34:	40020400 	.word	0x40020400
 8002b38:	40020800 	.word	0x40020800
 8002b3c:	40020c00 	.word	0x40020c00
 8002b40:	40021000 	.word	0x40021000
 8002b44:	40021400 	.word	0x40021400
 8002b48:	40021800 	.word	0x40021800
 8002b4c:	40021c00 	.word	0x40021c00
 8002b50:	40013c00 	.word	0x40013c00

08002b54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e25b      	b.n	800301e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d075      	beq.n	8002c5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b72:	4ba3      	ldr	r3, [pc, #652]	; (8002e00 <HAL_RCC_OscConfig+0x2ac>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 030c 	and.w	r3, r3, #12
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d00c      	beq.n	8002b98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b7e:	4ba0      	ldr	r3, [pc, #640]	; (8002e00 <HAL_RCC_OscConfig+0x2ac>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b86:	2b08      	cmp	r3, #8
 8002b88:	d112      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b8a:	4b9d      	ldr	r3, [pc, #628]	; (8002e00 <HAL_RCC_OscConfig+0x2ac>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b96:	d10b      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b98:	4b99      	ldr	r3, [pc, #612]	; (8002e00 <HAL_RCC_OscConfig+0x2ac>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d05b      	beq.n	8002c5c <HAL_RCC_OscConfig+0x108>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d157      	bne.n	8002c5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e236      	b.n	800301e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb8:	d106      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x74>
 8002bba:	4b91      	ldr	r3, [pc, #580]	; (8002e00 <HAL_RCC_OscConfig+0x2ac>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a90      	ldr	r2, [pc, #576]	; (8002e00 <HAL_RCC_OscConfig+0x2ac>)
 8002bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	e01d      	b.n	8002c04 <HAL_RCC_OscConfig+0xb0>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bd0:	d10c      	bne.n	8002bec <HAL_RCC_OscConfig+0x98>
 8002bd2:	4b8b      	ldr	r3, [pc, #556]	; (8002e00 <HAL_RCC_OscConfig+0x2ac>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a8a      	ldr	r2, [pc, #552]	; (8002e00 <HAL_RCC_OscConfig+0x2ac>)
 8002bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	4b88      	ldr	r3, [pc, #544]	; (8002e00 <HAL_RCC_OscConfig+0x2ac>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a87      	ldr	r2, [pc, #540]	; (8002e00 <HAL_RCC_OscConfig+0x2ac>)
 8002be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	e00b      	b.n	8002c04 <HAL_RCC_OscConfig+0xb0>
 8002bec:	4b84      	ldr	r3, [pc, #528]	; (8002e00 <HAL_RCC_OscConfig+0x2ac>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a83      	ldr	r2, [pc, #524]	; (8002e00 <HAL_RCC_OscConfig+0x2ac>)
 8002bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bf6:	6013      	str	r3, [r2, #0]
 8002bf8:	4b81      	ldr	r3, [pc, #516]	; (8002e00 <HAL_RCC_OscConfig+0x2ac>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a80      	ldr	r2, [pc, #512]	; (8002e00 <HAL_RCC_OscConfig+0x2ac>)
 8002bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d013      	beq.n	8002c34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0c:	f7ff f9e0 	bl	8001fd0 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c14:	f7ff f9dc 	bl	8001fd0 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b64      	cmp	r3, #100	; 0x64
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e1fb      	b.n	800301e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c26:	4b76      	ldr	r3, [pc, #472]	; (8002e00 <HAL_RCC_OscConfig+0x2ac>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCC_OscConfig+0xc0>
 8002c32:	e014      	b.n	8002c5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c34:	f7ff f9cc 	bl	8001fd0 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c3c:	f7ff f9c8 	bl	8001fd0 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b64      	cmp	r3, #100	; 0x64
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e1e7      	b.n	800301e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c4e:	4b6c      	ldr	r3, [pc, #432]	; (8002e00 <HAL_RCC_OscConfig+0x2ac>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0xe8>
 8002c5a:	e000      	b.n	8002c5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d063      	beq.n	8002d32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c6a:	4b65      	ldr	r3, [pc, #404]	; (8002e00 <HAL_RCC_OscConfig+0x2ac>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 030c 	and.w	r3, r3, #12
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00b      	beq.n	8002c8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c76:	4b62      	ldr	r3, [pc, #392]	; (8002e00 <HAL_RCC_OscConfig+0x2ac>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c7e:	2b08      	cmp	r3, #8
 8002c80:	d11c      	bne.n	8002cbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c82:	4b5f      	ldr	r3, [pc, #380]	; (8002e00 <HAL_RCC_OscConfig+0x2ac>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d116      	bne.n	8002cbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c8e:	4b5c      	ldr	r3, [pc, #368]	; (8002e00 <HAL_RCC_OscConfig+0x2ac>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d005      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x152>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d001      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e1bb      	b.n	800301e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca6:	4b56      	ldr	r3, [pc, #344]	; (8002e00 <HAL_RCC_OscConfig+0x2ac>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	4952      	ldr	r1, [pc, #328]	; (8002e00 <HAL_RCC_OscConfig+0x2ac>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cba:	e03a      	b.n	8002d32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d020      	beq.n	8002d06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cc4:	4b4f      	ldr	r3, [pc, #316]	; (8002e04 <HAL_RCC_OscConfig+0x2b0>)
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cca:	f7ff f981 	bl	8001fd0 <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cd2:	f7ff f97d 	bl	8001fd0 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e19c      	b.n	800301e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce4:	4b46      	ldr	r3, [pc, #280]	; (8002e00 <HAL_RCC_OscConfig+0x2ac>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0f0      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf0:	4b43      	ldr	r3, [pc, #268]	; (8002e00 <HAL_RCC_OscConfig+0x2ac>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	4940      	ldr	r1, [pc, #256]	; (8002e00 <HAL_RCC_OscConfig+0x2ac>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	600b      	str	r3, [r1, #0]
 8002d04:	e015      	b.n	8002d32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d06:	4b3f      	ldr	r3, [pc, #252]	; (8002e04 <HAL_RCC_OscConfig+0x2b0>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0c:	f7ff f960 	bl	8001fd0 <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d14:	f7ff f95c 	bl	8001fd0 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e17b      	b.n	800301e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d26:	4b36      	ldr	r3, [pc, #216]	; (8002e00 <HAL_RCC_OscConfig+0x2ac>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1f0      	bne.n	8002d14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d030      	beq.n	8002da0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d016      	beq.n	8002d74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d46:	4b30      	ldr	r3, [pc, #192]	; (8002e08 <HAL_RCC_OscConfig+0x2b4>)
 8002d48:	2201      	movs	r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4c:	f7ff f940 	bl	8001fd0 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d54:	f7ff f93c 	bl	8001fd0 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e15b      	b.n	800301e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d66:	4b26      	ldr	r3, [pc, #152]	; (8002e00 <HAL_RCC_OscConfig+0x2ac>)
 8002d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0f0      	beq.n	8002d54 <HAL_RCC_OscConfig+0x200>
 8002d72:	e015      	b.n	8002da0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d74:	4b24      	ldr	r3, [pc, #144]	; (8002e08 <HAL_RCC_OscConfig+0x2b4>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d7a:	f7ff f929 	bl	8001fd0 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d82:	f7ff f925 	bl	8001fd0 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e144      	b.n	800301e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d94:	4b1a      	ldr	r3, [pc, #104]	; (8002e00 <HAL_RCC_OscConfig+0x2ac>)
 8002d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1f0      	bne.n	8002d82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 80a0 	beq.w	8002eee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dae:	2300      	movs	r3, #0
 8002db0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002db2:	4b13      	ldr	r3, [pc, #76]	; (8002e00 <HAL_RCC_OscConfig+0x2ac>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10f      	bne.n	8002dde <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	4b0f      	ldr	r3, [pc, #60]	; (8002e00 <HAL_RCC_OscConfig+0x2ac>)
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	4a0e      	ldr	r2, [pc, #56]	; (8002e00 <HAL_RCC_OscConfig+0x2ac>)
 8002dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dce:	4b0c      	ldr	r3, [pc, #48]	; (8002e00 <HAL_RCC_OscConfig+0x2ac>)
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd6:	60bb      	str	r3, [r7, #8]
 8002dd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dde:	4b0b      	ldr	r3, [pc, #44]	; (8002e0c <HAL_RCC_OscConfig+0x2b8>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d121      	bne.n	8002e2e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dea:	4b08      	ldr	r3, [pc, #32]	; (8002e0c <HAL_RCC_OscConfig+0x2b8>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a07      	ldr	r2, [pc, #28]	; (8002e0c <HAL_RCC_OscConfig+0x2b8>)
 8002df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002df4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002df6:	f7ff f8eb 	bl	8001fd0 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dfc:	e011      	b.n	8002e22 <HAL_RCC_OscConfig+0x2ce>
 8002dfe:	bf00      	nop
 8002e00:	40023800 	.word	0x40023800
 8002e04:	42470000 	.word	0x42470000
 8002e08:	42470e80 	.word	0x42470e80
 8002e0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e10:	f7ff f8de 	bl	8001fd0 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e0fd      	b.n	800301e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e22:	4b81      	ldr	r3, [pc, #516]	; (8003028 <HAL_RCC_OscConfig+0x4d4>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0f0      	beq.n	8002e10 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d106      	bne.n	8002e44 <HAL_RCC_OscConfig+0x2f0>
 8002e36:	4b7d      	ldr	r3, [pc, #500]	; (800302c <HAL_RCC_OscConfig+0x4d8>)
 8002e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3a:	4a7c      	ldr	r2, [pc, #496]	; (800302c <HAL_RCC_OscConfig+0x4d8>)
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	6713      	str	r3, [r2, #112]	; 0x70
 8002e42:	e01c      	b.n	8002e7e <HAL_RCC_OscConfig+0x32a>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	2b05      	cmp	r3, #5
 8002e4a:	d10c      	bne.n	8002e66 <HAL_RCC_OscConfig+0x312>
 8002e4c:	4b77      	ldr	r3, [pc, #476]	; (800302c <HAL_RCC_OscConfig+0x4d8>)
 8002e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e50:	4a76      	ldr	r2, [pc, #472]	; (800302c <HAL_RCC_OscConfig+0x4d8>)
 8002e52:	f043 0304 	orr.w	r3, r3, #4
 8002e56:	6713      	str	r3, [r2, #112]	; 0x70
 8002e58:	4b74      	ldr	r3, [pc, #464]	; (800302c <HAL_RCC_OscConfig+0x4d8>)
 8002e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5c:	4a73      	ldr	r2, [pc, #460]	; (800302c <HAL_RCC_OscConfig+0x4d8>)
 8002e5e:	f043 0301 	orr.w	r3, r3, #1
 8002e62:	6713      	str	r3, [r2, #112]	; 0x70
 8002e64:	e00b      	b.n	8002e7e <HAL_RCC_OscConfig+0x32a>
 8002e66:	4b71      	ldr	r3, [pc, #452]	; (800302c <HAL_RCC_OscConfig+0x4d8>)
 8002e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6a:	4a70      	ldr	r2, [pc, #448]	; (800302c <HAL_RCC_OscConfig+0x4d8>)
 8002e6c:	f023 0301 	bic.w	r3, r3, #1
 8002e70:	6713      	str	r3, [r2, #112]	; 0x70
 8002e72:	4b6e      	ldr	r3, [pc, #440]	; (800302c <HAL_RCC_OscConfig+0x4d8>)
 8002e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e76:	4a6d      	ldr	r2, [pc, #436]	; (800302c <HAL_RCC_OscConfig+0x4d8>)
 8002e78:	f023 0304 	bic.w	r3, r3, #4
 8002e7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d015      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e86:	f7ff f8a3 	bl	8001fd0 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e8c:	e00a      	b.n	8002ea4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e8e:	f7ff f89f 	bl	8001fd0 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e0bc      	b.n	800301e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea4:	4b61      	ldr	r3, [pc, #388]	; (800302c <HAL_RCC_OscConfig+0x4d8>)
 8002ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0ee      	beq.n	8002e8e <HAL_RCC_OscConfig+0x33a>
 8002eb0:	e014      	b.n	8002edc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb2:	f7ff f88d 	bl	8001fd0 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb8:	e00a      	b.n	8002ed0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eba:	f7ff f889 	bl	8001fd0 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e0a6      	b.n	800301e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ed0:	4b56      	ldr	r3, [pc, #344]	; (800302c <HAL_RCC_OscConfig+0x4d8>)
 8002ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1ee      	bne.n	8002eba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002edc:	7dfb      	ldrb	r3, [r7, #23]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d105      	bne.n	8002eee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ee2:	4b52      	ldr	r3, [pc, #328]	; (800302c <HAL_RCC_OscConfig+0x4d8>)
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	4a51      	ldr	r2, [pc, #324]	; (800302c <HAL_RCC_OscConfig+0x4d8>)
 8002ee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 8092 	beq.w	800301c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ef8:	4b4c      	ldr	r3, [pc, #304]	; (800302c <HAL_RCC_OscConfig+0x4d8>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 030c 	and.w	r3, r3, #12
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d05c      	beq.n	8002fbe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d141      	bne.n	8002f90 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0c:	4b48      	ldr	r3, [pc, #288]	; (8003030 <HAL_RCC_OscConfig+0x4dc>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f12:	f7ff f85d 	bl	8001fd0 <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f18:	e008      	b.n	8002f2c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f1a:	f7ff f859 	bl	8001fd0 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e078      	b.n	800301e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2c:	4b3f      	ldr	r3, [pc, #252]	; (800302c <HAL_RCC_OscConfig+0x4d8>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1f0      	bne.n	8002f1a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	69da      	ldr	r2, [r3, #28]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	431a      	orrs	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f46:	019b      	lsls	r3, r3, #6
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4e:	085b      	lsrs	r3, r3, #1
 8002f50:	3b01      	subs	r3, #1
 8002f52:	041b      	lsls	r3, r3, #16
 8002f54:	431a      	orrs	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5a:	061b      	lsls	r3, r3, #24
 8002f5c:	4933      	ldr	r1, [pc, #204]	; (800302c <HAL_RCC_OscConfig+0x4d8>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f62:	4b33      	ldr	r3, [pc, #204]	; (8003030 <HAL_RCC_OscConfig+0x4dc>)
 8002f64:	2201      	movs	r2, #1
 8002f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f68:	f7ff f832 	bl	8001fd0 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f70:	f7ff f82e 	bl	8001fd0 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e04d      	b.n	800301e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f82:	4b2a      	ldr	r3, [pc, #168]	; (800302c <HAL_RCC_OscConfig+0x4d8>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0f0      	beq.n	8002f70 <HAL_RCC_OscConfig+0x41c>
 8002f8e:	e045      	b.n	800301c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f90:	4b27      	ldr	r3, [pc, #156]	; (8003030 <HAL_RCC_OscConfig+0x4dc>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f96:	f7ff f81b 	bl	8001fd0 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f9e:	f7ff f817 	bl	8001fd0 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e036      	b.n	800301e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb0:	4b1e      	ldr	r3, [pc, #120]	; (800302c <HAL_RCC_OscConfig+0x4d8>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1f0      	bne.n	8002f9e <HAL_RCC_OscConfig+0x44a>
 8002fbc:	e02e      	b.n	800301c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d101      	bne.n	8002fca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e029      	b.n	800301e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fca:	4b18      	ldr	r3, [pc, #96]	; (800302c <HAL_RCC_OscConfig+0x4d8>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d11c      	bne.n	8003018 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d115      	bne.n	8003018 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d10d      	bne.n	8003018 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003006:	429a      	cmp	r2, r3
 8003008:	d106      	bne.n	8003018 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003014:	429a      	cmp	r2, r3
 8003016:	d001      	beq.n	800301c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e000      	b.n	800301e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3718      	adds	r7, #24
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40007000 	.word	0x40007000
 800302c:	40023800 	.word	0x40023800
 8003030:	42470060 	.word	0x42470060

08003034 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e0cc      	b.n	80031e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003048:	4b68      	ldr	r3, [pc, #416]	; (80031ec <HAL_RCC_ClockConfig+0x1b8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 030f 	and.w	r3, r3, #15
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d90c      	bls.n	8003070 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003056:	4b65      	ldr	r3, [pc, #404]	; (80031ec <HAL_RCC_ClockConfig+0x1b8>)
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800305e:	4b63      	ldr	r3, [pc, #396]	; (80031ec <HAL_RCC_ClockConfig+0x1b8>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	429a      	cmp	r2, r3
 800306a:	d001      	beq.n	8003070 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e0b8      	b.n	80031e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d020      	beq.n	80030be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b00      	cmp	r3, #0
 8003086:	d005      	beq.n	8003094 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003088:	4b59      	ldr	r3, [pc, #356]	; (80031f0 <HAL_RCC_ClockConfig+0x1bc>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	4a58      	ldr	r2, [pc, #352]	; (80031f0 <HAL_RCC_ClockConfig+0x1bc>)
 800308e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003092:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0308 	and.w	r3, r3, #8
 800309c:	2b00      	cmp	r3, #0
 800309e:	d005      	beq.n	80030ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030a0:	4b53      	ldr	r3, [pc, #332]	; (80031f0 <HAL_RCC_ClockConfig+0x1bc>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	4a52      	ldr	r2, [pc, #328]	; (80031f0 <HAL_RCC_ClockConfig+0x1bc>)
 80030a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030ac:	4b50      	ldr	r3, [pc, #320]	; (80031f0 <HAL_RCC_ClockConfig+0x1bc>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	494d      	ldr	r1, [pc, #308]	; (80031f0 <HAL_RCC_ClockConfig+0x1bc>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d044      	beq.n	8003154 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d107      	bne.n	80030e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d2:	4b47      	ldr	r3, [pc, #284]	; (80031f0 <HAL_RCC_ClockConfig+0x1bc>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d119      	bne.n	8003112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e07f      	b.n	80031e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d003      	beq.n	80030f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ee:	2b03      	cmp	r3, #3
 80030f0:	d107      	bne.n	8003102 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f2:	4b3f      	ldr	r3, [pc, #252]	; (80031f0 <HAL_RCC_ClockConfig+0x1bc>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d109      	bne.n	8003112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e06f      	b.n	80031e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003102:	4b3b      	ldr	r3, [pc, #236]	; (80031f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e067      	b.n	80031e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003112:	4b37      	ldr	r3, [pc, #220]	; (80031f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f023 0203 	bic.w	r2, r3, #3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	4934      	ldr	r1, [pc, #208]	; (80031f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003120:	4313      	orrs	r3, r2
 8003122:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003124:	f7fe ff54 	bl	8001fd0 <HAL_GetTick>
 8003128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312a:	e00a      	b.n	8003142 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800312c:	f7fe ff50 	bl	8001fd0 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	f241 3288 	movw	r2, #5000	; 0x1388
 800313a:	4293      	cmp	r3, r2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e04f      	b.n	80031e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003142:	4b2b      	ldr	r3, [pc, #172]	; (80031f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 020c 	and.w	r2, r3, #12
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	429a      	cmp	r2, r3
 8003152:	d1eb      	bne.n	800312c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003154:	4b25      	ldr	r3, [pc, #148]	; (80031ec <HAL_RCC_ClockConfig+0x1b8>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 030f 	and.w	r3, r3, #15
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	429a      	cmp	r2, r3
 8003160:	d20c      	bcs.n	800317c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003162:	4b22      	ldr	r3, [pc, #136]	; (80031ec <HAL_RCC_ClockConfig+0x1b8>)
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800316a:	4b20      	ldr	r3, [pc, #128]	; (80031ec <HAL_RCC_ClockConfig+0x1b8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 030f 	and.w	r3, r3, #15
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	429a      	cmp	r2, r3
 8003176:	d001      	beq.n	800317c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e032      	b.n	80031e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b00      	cmp	r3, #0
 8003186:	d008      	beq.n	800319a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003188:	4b19      	ldr	r3, [pc, #100]	; (80031f0 <HAL_RCC_ClockConfig+0x1bc>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	4916      	ldr	r1, [pc, #88]	; (80031f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003196:	4313      	orrs	r3, r2
 8003198:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0308 	and.w	r3, r3, #8
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d009      	beq.n	80031ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031a6:	4b12      	ldr	r3, [pc, #72]	; (80031f0 <HAL_RCC_ClockConfig+0x1bc>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	490e      	ldr	r1, [pc, #56]	; (80031f0 <HAL_RCC_ClockConfig+0x1bc>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031ba:	f000 f821 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 80031be:	4601      	mov	r1, r0
 80031c0:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <HAL_RCC_ClockConfig+0x1bc>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	091b      	lsrs	r3, r3, #4
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	4a0a      	ldr	r2, [pc, #40]	; (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 80031cc:	5cd3      	ldrb	r3, [r2, r3]
 80031ce:	fa21 f303 	lsr.w	r3, r1, r3
 80031d2:	4a09      	ldr	r2, [pc, #36]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80031d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031d6:	4b09      	ldr	r3, [pc, #36]	; (80031fc <HAL_RCC_ClockConfig+0x1c8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7fe feb4 	bl	8001f48 <HAL_InitTick>

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	40023c00 	.word	0x40023c00
 80031f0:	40023800 	.word	0x40023800
 80031f4:	08007110 	.word	0x08007110
 80031f8:	20000000 	.word	0x20000000
 80031fc:	20000004 	.word	0x20000004

08003200 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003206:	2300      	movs	r3, #0
 8003208:	607b      	str	r3, [r7, #4]
 800320a:	2300      	movs	r3, #0
 800320c:	60fb      	str	r3, [r7, #12]
 800320e:	2300      	movs	r3, #0
 8003210:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003212:	2300      	movs	r3, #0
 8003214:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003216:	4b63      	ldr	r3, [pc, #396]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 030c 	and.w	r3, r3, #12
 800321e:	2b04      	cmp	r3, #4
 8003220:	d007      	beq.n	8003232 <HAL_RCC_GetSysClockFreq+0x32>
 8003222:	2b08      	cmp	r3, #8
 8003224:	d008      	beq.n	8003238 <HAL_RCC_GetSysClockFreq+0x38>
 8003226:	2b00      	cmp	r3, #0
 8003228:	f040 80b4 	bne.w	8003394 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800322c:	4b5e      	ldr	r3, [pc, #376]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800322e:	60bb      	str	r3, [r7, #8]
       break;
 8003230:	e0b3      	b.n	800339a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003232:	4b5e      	ldr	r3, [pc, #376]	; (80033ac <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003234:	60bb      	str	r3, [r7, #8]
      break;
 8003236:	e0b0      	b.n	800339a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003238:	4b5a      	ldr	r3, [pc, #360]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003240:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003242:	4b58      	ldr	r3, [pc, #352]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d04a      	beq.n	80032e4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800324e:	4b55      	ldr	r3, [pc, #340]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	099b      	lsrs	r3, r3, #6
 8003254:	f04f 0400 	mov.w	r4, #0
 8003258:	f240 11ff 	movw	r1, #511	; 0x1ff
 800325c:	f04f 0200 	mov.w	r2, #0
 8003260:	ea03 0501 	and.w	r5, r3, r1
 8003264:	ea04 0602 	and.w	r6, r4, r2
 8003268:	4629      	mov	r1, r5
 800326a:	4632      	mov	r2, r6
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	f04f 0400 	mov.w	r4, #0
 8003274:	0154      	lsls	r4, r2, #5
 8003276:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800327a:	014b      	lsls	r3, r1, #5
 800327c:	4619      	mov	r1, r3
 800327e:	4622      	mov	r2, r4
 8003280:	1b49      	subs	r1, r1, r5
 8003282:	eb62 0206 	sbc.w	r2, r2, r6
 8003286:	f04f 0300 	mov.w	r3, #0
 800328a:	f04f 0400 	mov.w	r4, #0
 800328e:	0194      	lsls	r4, r2, #6
 8003290:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003294:	018b      	lsls	r3, r1, #6
 8003296:	1a5b      	subs	r3, r3, r1
 8003298:	eb64 0402 	sbc.w	r4, r4, r2
 800329c:	f04f 0100 	mov.w	r1, #0
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	00e2      	lsls	r2, r4, #3
 80032a6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80032aa:	00d9      	lsls	r1, r3, #3
 80032ac:	460b      	mov	r3, r1
 80032ae:	4614      	mov	r4, r2
 80032b0:	195b      	adds	r3, r3, r5
 80032b2:	eb44 0406 	adc.w	r4, r4, r6
 80032b6:	f04f 0100 	mov.w	r1, #0
 80032ba:	f04f 0200 	mov.w	r2, #0
 80032be:	0262      	lsls	r2, r4, #9
 80032c0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80032c4:	0259      	lsls	r1, r3, #9
 80032c6:	460b      	mov	r3, r1
 80032c8:	4614      	mov	r4, r2
 80032ca:	4618      	mov	r0, r3
 80032cc:	4621      	mov	r1, r4
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f04f 0400 	mov.w	r4, #0
 80032d4:	461a      	mov	r2, r3
 80032d6:	4623      	mov	r3, r4
 80032d8:	f7fd fc12 	bl	8000b00 <__aeabi_uldivmod>
 80032dc:	4603      	mov	r3, r0
 80032de:	460c      	mov	r4, r1
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	e049      	b.n	8003378 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032e4:	4b2f      	ldr	r3, [pc, #188]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	099b      	lsrs	r3, r3, #6
 80032ea:	f04f 0400 	mov.w	r4, #0
 80032ee:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032f2:	f04f 0200 	mov.w	r2, #0
 80032f6:	ea03 0501 	and.w	r5, r3, r1
 80032fa:	ea04 0602 	and.w	r6, r4, r2
 80032fe:	4629      	mov	r1, r5
 8003300:	4632      	mov	r2, r6
 8003302:	f04f 0300 	mov.w	r3, #0
 8003306:	f04f 0400 	mov.w	r4, #0
 800330a:	0154      	lsls	r4, r2, #5
 800330c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003310:	014b      	lsls	r3, r1, #5
 8003312:	4619      	mov	r1, r3
 8003314:	4622      	mov	r2, r4
 8003316:	1b49      	subs	r1, r1, r5
 8003318:	eb62 0206 	sbc.w	r2, r2, r6
 800331c:	f04f 0300 	mov.w	r3, #0
 8003320:	f04f 0400 	mov.w	r4, #0
 8003324:	0194      	lsls	r4, r2, #6
 8003326:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800332a:	018b      	lsls	r3, r1, #6
 800332c:	1a5b      	subs	r3, r3, r1
 800332e:	eb64 0402 	sbc.w	r4, r4, r2
 8003332:	f04f 0100 	mov.w	r1, #0
 8003336:	f04f 0200 	mov.w	r2, #0
 800333a:	00e2      	lsls	r2, r4, #3
 800333c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003340:	00d9      	lsls	r1, r3, #3
 8003342:	460b      	mov	r3, r1
 8003344:	4614      	mov	r4, r2
 8003346:	195b      	adds	r3, r3, r5
 8003348:	eb44 0406 	adc.w	r4, r4, r6
 800334c:	f04f 0100 	mov.w	r1, #0
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	02a2      	lsls	r2, r4, #10
 8003356:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800335a:	0299      	lsls	r1, r3, #10
 800335c:	460b      	mov	r3, r1
 800335e:	4614      	mov	r4, r2
 8003360:	4618      	mov	r0, r3
 8003362:	4621      	mov	r1, r4
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f04f 0400 	mov.w	r4, #0
 800336a:	461a      	mov	r2, r3
 800336c:	4623      	mov	r3, r4
 800336e:	f7fd fbc7 	bl	8000b00 <__aeabi_uldivmod>
 8003372:	4603      	mov	r3, r0
 8003374:	460c      	mov	r4, r1
 8003376:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003378:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	0c1b      	lsrs	r3, r3, #16
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	3301      	adds	r3, #1
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003390:	60bb      	str	r3, [r7, #8]
      break;
 8003392:	e002      	b.n	800339a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003394:	4b04      	ldr	r3, [pc, #16]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003396:	60bb      	str	r3, [r7, #8]
      break;
 8003398:	bf00      	nop
    }
  }
  return sysclockfreq;
 800339a:	68bb      	ldr	r3, [r7, #8]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033a4:	40023800 	.word	0x40023800
 80033a8:	00f42400 	.word	0x00f42400
 80033ac:	007a1200 	.word	0x007a1200

080033b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033b4:	4b03      	ldr	r3, [pc, #12]	; (80033c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80033b6:	681b      	ldr	r3, [r3, #0]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	20000000 	.word	0x20000000

080033c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033cc:	f7ff fff0 	bl	80033b0 <HAL_RCC_GetHCLKFreq>
 80033d0:	4601      	mov	r1, r0
 80033d2:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	0a9b      	lsrs	r3, r3, #10
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	4a03      	ldr	r2, [pc, #12]	; (80033ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80033de:	5cd3      	ldrb	r3, [r2, r3]
 80033e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40023800 	.word	0x40023800
 80033ec:	08007120 	.word	0x08007120

080033f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033f4:	f7ff ffdc 	bl	80033b0 <HAL_RCC_GetHCLKFreq>
 80033f8:	4601      	mov	r1, r0
 80033fa:	4b05      	ldr	r3, [pc, #20]	; (8003410 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	0b5b      	lsrs	r3, r3, #13
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	4a03      	ldr	r2, [pc, #12]	; (8003414 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003406:	5cd3      	ldrb	r3, [r2, r3]
 8003408:	fa21 f303 	lsr.w	r3, r1, r3
}
 800340c:	4618      	mov	r0, r3
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40023800 	.word	0x40023800
 8003414:	08007120 	.word	0x08007120

08003418 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e03f      	b.n	80034aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d106      	bne.n	8003444 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7fe fbb6 	bl	8001bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2224      	movs	r2, #36	; 0x24
 8003448:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68da      	ldr	r2, [r3, #12]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800345a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 fab3 	bl	80039c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003470:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	695a      	ldr	r2, [r3, #20]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003480:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68da      	ldr	r2, [r3, #12]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003490:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b085      	sub	sp, #20
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	60f8      	str	r0, [r7, #12]
 80034ba:	60b9      	str	r1, [r7, #8]
 80034bc:	4613      	mov	r3, r2
 80034be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b20      	cmp	r3, #32
 80034ca:	d140      	bne.n	800354e <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d002      	beq.n	80034d8 <HAL_UART_Receive_IT+0x26>
 80034d2:	88fb      	ldrh	r3, [r7, #6]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e039      	b.n	8003550 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d101      	bne.n	80034ea <HAL_UART_Receive_IT+0x38>
 80034e6:	2302      	movs	r3, #2
 80034e8:	e032      	b.n	8003550 <HAL_UART_Receive_IT+0x9e>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	88fa      	ldrh	r2, [r7, #6]
 80034fc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	88fa      	ldrh	r2, [r7, #6]
 8003502:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2222      	movs	r2, #34	; 0x22
 800350e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003528:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	695a      	ldr	r2, [r3, #20]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f042 0201 	orr.w	r2, r2, #1
 8003538:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68da      	ldr	r2, [r3, #12]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f042 0220 	orr.w	r2, r2, #32
 8003548:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	e000      	b.n	8003550 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800354e:	2302      	movs	r3, #2
  }
}
 8003550:	4618      	mov	r0, r3
 8003552:	3714      	adds	r7, #20
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b088      	sub	sp, #32
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800357c:	2300      	movs	r3, #0
 800357e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003580:	2300      	movs	r3, #0
 8003582:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	f003 030f 	and.w	r3, r3, #15
 800358a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10d      	bne.n	80035ae <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	f003 0320 	and.w	r3, r3, #32
 8003598:	2b00      	cmp	r3, #0
 800359a:	d008      	beq.n	80035ae <HAL_UART_IRQHandler+0x52>
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	f003 0320 	and.w	r3, r3, #32
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f98c 	bl	80038c4 <UART_Receive_IT>
      return;
 80035ac:	e0d1      	b.n	8003752 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 80b0 	beq.w	8003716 <HAL_UART_IRQHandler+0x1ba>
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d105      	bne.n	80035cc <HAL_UART_IRQHandler+0x70>
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 80a5 	beq.w	8003716 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00a      	beq.n	80035ec <HAL_UART_IRQHandler+0x90>
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d005      	beq.n	80035ec <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e4:	f043 0201 	orr.w	r2, r3, #1
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f003 0304 	and.w	r3, r3, #4
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00a      	beq.n	800360c <HAL_UART_IRQHandler+0xb0>
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d005      	beq.n	800360c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003604:	f043 0202 	orr.w	r2, r3, #2
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00a      	beq.n	800362c <HAL_UART_IRQHandler+0xd0>
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003624:	f043 0204 	orr.w	r2, r3, #4
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00f      	beq.n	8003656 <HAL_UART_IRQHandler+0xfa>
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	f003 0320 	and.w	r3, r3, #32
 800363c:	2b00      	cmp	r3, #0
 800363e:	d104      	bne.n	800364a <HAL_UART_IRQHandler+0xee>
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d005      	beq.n	8003656 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364e:	f043 0208 	orr.w	r2, r3, #8
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365a:	2b00      	cmp	r3, #0
 800365c:	d078      	beq.n	8003750 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	f003 0320 	and.w	r3, r3, #32
 8003664:	2b00      	cmp	r3, #0
 8003666:	d007      	beq.n	8003678 <HAL_UART_IRQHandler+0x11c>
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	f003 0320 	and.w	r3, r3, #32
 800366e:	2b00      	cmp	r3, #0
 8003670:	d002      	beq.n	8003678 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f926 	bl	80038c4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003682:	2b40      	cmp	r3, #64	; 0x40
 8003684:	bf0c      	ite	eq
 8003686:	2301      	moveq	r3, #1
 8003688:	2300      	movne	r3, #0
 800368a:	b2db      	uxtb	r3, r3
 800368c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003692:	f003 0308 	and.w	r3, r3, #8
 8003696:	2b00      	cmp	r3, #0
 8003698:	d102      	bne.n	80036a0 <HAL_UART_IRQHandler+0x144>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d031      	beq.n	8003704 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f86f 	bl	8003784 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b0:	2b40      	cmp	r3, #64	; 0x40
 80036b2:	d123      	bne.n	80036fc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695a      	ldr	r2, [r3, #20]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036c2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d013      	beq.n	80036f4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d0:	4a21      	ldr	r2, [pc, #132]	; (8003758 <HAL_UART_IRQHandler+0x1fc>)
 80036d2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d8:	4618      	mov	r0, r3
 80036da:	f7fe fe45 	bl	8002368 <HAL_DMA_Abort_IT>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d016      	beq.n	8003712 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036ee:	4610      	mov	r0, r2
 80036f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f2:	e00e      	b.n	8003712 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f83b 	bl	8003770 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036fa:	e00a      	b.n	8003712 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f837 	bl	8003770 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003702:	e006      	b.n	8003712 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f833 	bl	8003770 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003710:	e01e      	b.n	8003750 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003712:	bf00      	nop
    return;
 8003714:	e01c      	b.n	8003750 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800371c:	2b00      	cmp	r3, #0
 800371e:	d008      	beq.n	8003732 <HAL_UART_IRQHandler+0x1d6>
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f85c 	bl	80037e8 <UART_Transmit_IT>
    return;
 8003730:	e00f      	b.n	8003752 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00a      	beq.n	8003752 <HAL_UART_IRQHandler+0x1f6>
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003742:	2b00      	cmp	r3, #0
 8003744:	d005      	beq.n	8003752 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f8a4 	bl	8003894 <UART_EndTransmit_IT>
    return;
 800374c:	bf00      	nop
 800374e:	e000      	b.n	8003752 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003750:	bf00      	nop
  }
}
 8003752:	3720      	adds	r7, #32
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	080037c1 	.word	0x080037c1

0800375c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68da      	ldr	r2, [r3, #12]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800379a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	695a      	ldr	r2, [r3, #20]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 0201 	bic.w	r2, r2, #1
 80037aa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f7ff ffc8 	bl	8003770 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037e0:	bf00      	nop
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b21      	cmp	r3, #33	; 0x21
 80037fa:	d144      	bne.n	8003886 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003804:	d11a      	bne.n	800383c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	881b      	ldrh	r3, [r3, #0]
 8003810:	461a      	mov	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800381a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d105      	bne.n	8003830 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	1c9a      	adds	r2, r3, #2
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	621a      	str	r2, [r3, #32]
 800382e:	e00e      	b.n	800384e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	1c5a      	adds	r2, r3, #1
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	621a      	str	r2, [r3, #32]
 800383a:	e008      	b.n	800384e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a1b      	ldr	r3, [r3, #32]
 8003840:	1c59      	adds	r1, r3, #1
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6211      	str	r1, [r2, #32]
 8003846:	781a      	ldrb	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003852:	b29b      	uxth	r3, r3
 8003854:	3b01      	subs	r3, #1
 8003856:	b29b      	uxth	r3, r3
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	4619      	mov	r1, r3
 800385c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10f      	bne.n	8003882 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003870:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68da      	ldr	r2, [r3, #12]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003880:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003882:	2300      	movs	r3, #0
 8003884:	e000      	b.n	8003888 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003886:	2302      	movs	r3, #2
  }
}
 8003888:	4618      	mov	r0, r3
 800388a:	3714      	adds	r7, #20
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68da      	ldr	r2, [r3, #12]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038aa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7ff ff51 	bl	800375c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b22      	cmp	r3, #34	; 0x22
 80038d6:	d171      	bne.n	80039bc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038e0:	d123      	bne.n	800392a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10e      	bne.n	800390e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003906:	1c9a      	adds	r2, r3, #2
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	629a      	str	r2, [r3, #40]	; 0x28
 800390c:	e029      	b.n	8003962 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	b29b      	uxth	r3, r3
 8003916:	b2db      	uxtb	r3, r3
 8003918:	b29a      	uxth	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	629a      	str	r2, [r3, #40]	; 0x28
 8003928:	e01b      	b.n	8003962 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10a      	bne.n	8003948 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	6858      	ldr	r0, [r3, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393c:	1c59      	adds	r1, r3, #1
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6291      	str	r1, [r2, #40]	; 0x28
 8003942:	b2c2      	uxtb	r2, r0
 8003944:	701a      	strb	r2, [r3, #0]
 8003946:	e00c      	b.n	8003962 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	b2da      	uxtb	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003954:	1c58      	adds	r0, r3, #1
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	6288      	str	r0, [r1, #40]	; 0x28
 800395a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003966:	b29b      	uxth	r3, r3
 8003968:	3b01      	subs	r3, #1
 800396a:	b29b      	uxth	r3, r3
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	4619      	mov	r1, r3
 8003970:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003972:	2b00      	cmp	r3, #0
 8003974:	d120      	bne.n	80039b8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68da      	ldr	r2, [r3, #12]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 0220 	bic.w	r2, r2, #32
 8003984:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003994:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	695a      	ldr	r2, [r3, #20]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 0201 	bic.w	r2, r2, #1
 80039a4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2220      	movs	r2, #32
 80039aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f7fd ff68 	bl	8001884 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80039b4:	2300      	movs	r3, #0
 80039b6:	e002      	b.n	80039be <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80039b8:	2300      	movs	r3, #0
 80039ba:	e000      	b.n	80039be <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80039bc:	2302      	movs	r3, #2
  }
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
	...

080039c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039cc:	b085      	sub	sp, #20
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68da      	ldr	r2, [r3, #12]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	431a      	orrs	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	431a      	orrs	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	69db      	ldr	r3, [r3, #28]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003a0a:	f023 030c 	bic.w	r3, r3, #12
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6812      	ldr	r2, [r2, #0]
 8003a12:	68f9      	ldr	r1, [r7, #12]
 8003a14:	430b      	orrs	r3, r1
 8003a16:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	699a      	ldr	r2, [r3, #24]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a36:	f040 818b 	bne.w	8003d50 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4ac1      	ldr	r2, [pc, #772]	; (8003d44 <UART_SetConfig+0x37c>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d005      	beq.n	8003a50 <UART_SetConfig+0x88>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4abf      	ldr	r2, [pc, #764]	; (8003d48 <UART_SetConfig+0x380>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	f040 80bd 	bne.w	8003bca <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a50:	f7ff fcce 	bl	80033f0 <HAL_RCC_GetPCLK2Freq>
 8003a54:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	461d      	mov	r5, r3
 8003a5a:	f04f 0600 	mov.w	r6, #0
 8003a5e:	46a8      	mov	r8, r5
 8003a60:	46b1      	mov	r9, r6
 8003a62:	eb18 0308 	adds.w	r3, r8, r8
 8003a66:	eb49 0409 	adc.w	r4, r9, r9
 8003a6a:	4698      	mov	r8, r3
 8003a6c:	46a1      	mov	r9, r4
 8003a6e:	eb18 0805 	adds.w	r8, r8, r5
 8003a72:	eb49 0906 	adc.w	r9, r9, r6
 8003a76:	f04f 0100 	mov.w	r1, #0
 8003a7a:	f04f 0200 	mov.w	r2, #0
 8003a7e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a82:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a86:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a8a:	4688      	mov	r8, r1
 8003a8c:	4691      	mov	r9, r2
 8003a8e:	eb18 0005 	adds.w	r0, r8, r5
 8003a92:	eb49 0106 	adc.w	r1, r9, r6
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	461d      	mov	r5, r3
 8003a9c:	f04f 0600 	mov.w	r6, #0
 8003aa0:	196b      	adds	r3, r5, r5
 8003aa2:	eb46 0406 	adc.w	r4, r6, r6
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	4623      	mov	r3, r4
 8003aaa:	f7fd f829 	bl	8000b00 <__aeabi_uldivmod>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	460c      	mov	r4, r1
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	4ba5      	ldr	r3, [pc, #660]	; (8003d4c <UART_SetConfig+0x384>)
 8003ab6:	fba3 2302 	umull	r2, r3, r3, r2
 8003aba:	095b      	lsrs	r3, r3, #5
 8003abc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	461d      	mov	r5, r3
 8003ac4:	f04f 0600 	mov.w	r6, #0
 8003ac8:	46a9      	mov	r9, r5
 8003aca:	46b2      	mov	sl, r6
 8003acc:	eb19 0309 	adds.w	r3, r9, r9
 8003ad0:	eb4a 040a 	adc.w	r4, sl, sl
 8003ad4:	4699      	mov	r9, r3
 8003ad6:	46a2      	mov	sl, r4
 8003ad8:	eb19 0905 	adds.w	r9, r9, r5
 8003adc:	eb4a 0a06 	adc.w	sl, sl, r6
 8003ae0:	f04f 0100 	mov.w	r1, #0
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003aec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003af0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003af4:	4689      	mov	r9, r1
 8003af6:	4692      	mov	sl, r2
 8003af8:	eb19 0005 	adds.w	r0, r9, r5
 8003afc:	eb4a 0106 	adc.w	r1, sl, r6
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	461d      	mov	r5, r3
 8003b06:	f04f 0600 	mov.w	r6, #0
 8003b0a:	196b      	adds	r3, r5, r5
 8003b0c:	eb46 0406 	adc.w	r4, r6, r6
 8003b10:	461a      	mov	r2, r3
 8003b12:	4623      	mov	r3, r4
 8003b14:	f7fc fff4 	bl	8000b00 <__aeabi_uldivmod>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	460c      	mov	r4, r1
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	4b8b      	ldr	r3, [pc, #556]	; (8003d4c <UART_SetConfig+0x384>)
 8003b20:	fba3 1302 	umull	r1, r3, r3, r2
 8003b24:	095b      	lsrs	r3, r3, #5
 8003b26:	2164      	movs	r1, #100	; 0x64
 8003b28:	fb01 f303 	mul.w	r3, r1, r3
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	3332      	adds	r3, #50	; 0x32
 8003b32:	4a86      	ldr	r2, [pc, #536]	; (8003d4c <UART_SetConfig+0x384>)
 8003b34:	fba2 2303 	umull	r2, r3, r2, r3
 8003b38:	095b      	lsrs	r3, r3, #5
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b40:	4498      	add	r8, r3
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	461d      	mov	r5, r3
 8003b46:	f04f 0600 	mov.w	r6, #0
 8003b4a:	46a9      	mov	r9, r5
 8003b4c:	46b2      	mov	sl, r6
 8003b4e:	eb19 0309 	adds.w	r3, r9, r9
 8003b52:	eb4a 040a 	adc.w	r4, sl, sl
 8003b56:	4699      	mov	r9, r3
 8003b58:	46a2      	mov	sl, r4
 8003b5a:	eb19 0905 	adds.w	r9, r9, r5
 8003b5e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b62:	f04f 0100 	mov.w	r1, #0
 8003b66:	f04f 0200 	mov.w	r2, #0
 8003b6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b6e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b72:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b76:	4689      	mov	r9, r1
 8003b78:	4692      	mov	sl, r2
 8003b7a:	eb19 0005 	adds.w	r0, r9, r5
 8003b7e:	eb4a 0106 	adc.w	r1, sl, r6
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	461d      	mov	r5, r3
 8003b88:	f04f 0600 	mov.w	r6, #0
 8003b8c:	196b      	adds	r3, r5, r5
 8003b8e:	eb46 0406 	adc.w	r4, r6, r6
 8003b92:	461a      	mov	r2, r3
 8003b94:	4623      	mov	r3, r4
 8003b96:	f7fc ffb3 	bl	8000b00 <__aeabi_uldivmod>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	460c      	mov	r4, r1
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	4b6a      	ldr	r3, [pc, #424]	; (8003d4c <UART_SetConfig+0x384>)
 8003ba2:	fba3 1302 	umull	r1, r3, r3, r2
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	2164      	movs	r1, #100	; 0x64
 8003baa:	fb01 f303 	mul.w	r3, r1, r3
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	3332      	adds	r3, #50	; 0x32
 8003bb4:	4a65      	ldr	r2, [pc, #404]	; (8003d4c <UART_SetConfig+0x384>)
 8003bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bba:	095b      	lsrs	r3, r3, #5
 8003bbc:	f003 0207 	and.w	r2, r3, #7
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4442      	add	r2, r8
 8003bc6:	609a      	str	r2, [r3, #8]
 8003bc8:	e26f      	b.n	80040aa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bca:	f7ff fbfd 	bl	80033c8 <HAL_RCC_GetPCLK1Freq>
 8003bce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	461d      	mov	r5, r3
 8003bd4:	f04f 0600 	mov.w	r6, #0
 8003bd8:	46a8      	mov	r8, r5
 8003bda:	46b1      	mov	r9, r6
 8003bdc:	eb18 0308 	adds.w	r3, r8, r8
 8003be0:	eb49 0409 	adc.w	r4, r9, r9
 8003be4:	4698      	mov	r8, r3
 8003be6:	46a1      	mov	r9, r4
 8003be8:	eb18 0805 	adds.w	r8, r8, r5
 8003bec:	eb49 0906 	adc.w	r9, r9, r6
 8003bf0:	f04f 0100 	mov.w	r1, #0
 8003bf4:	f04f 0200 	mov.w	r2, #0
 8003bf8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003bfc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003c00:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003c04:	4688      	mov	r8, r1
 8003c06:	4691      	mov	r9, r2
 8003c08:	eb18 0005 	adds.w	r0, r8, r5
 8003c0c:	eb49 0106 	adc.w	r1, r9, r6
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	461d      	mov	r5, r3
 8003c16:	f04f 0600 	mov.w	r6, #0
 8003c1a:	196b      	adds	r3, r5, r5
 8003c1c:	eb46 0406 	adc.w	r4, r6, r6
 8003c20:	461a      	mov	r2, r3
 8003c22:	4623      	mov	r3, r4
 8003c24:	f7fc ff6c 	bl	8000b00 <__aeabi_uldivmod>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	460c      	mov	r4, r1
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	4b47      	ldr	r3, [pc, #284]	; (8003d4c <UART_SetConfig+0x384>)
 8003c30:	fba3 2302 	umull	r2, r3, r3, r2
 8003c34:	095b      	lsrs	r3, r3, #5
 8003c36:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	461d      	mov	r5, r3
 8003c3e:	f04f 0600 	mov.w	r6, #0
 8003c42:	46a9      	mov	r9, r5
 8003c44:	46b2      	mov	sl, r6
 8003c46:	eb19 0309 	adds.w	r3, r9, r9
 8003c4a:	eb4a 040a 	adc.w	r4, sl, sl
 8003c4e:	4699      	mov	r9, r3
 8003c50:	46a2      	mov	sl, r4
 8003c52:	eb19 0905 	adds.w	r9, r9, r5
 8003c56:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c5a:	f04f 0100 	mov.w	r1, #0
 8003c5e:	f04f 0200 	mov.w	r2, #0
 8003c62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c66:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c6a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c6e:	4689      	mov	r9, r1
 8003c70:	4692      	mov	sl, r2
 8003c72:	eb19 0005 	adds.w	r0, r9, r5
 8003c76:	eb4a 0106 	adc.w	r1, sl, r6
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	461d      	mov	r5, r3
 8003c80:	f04f 0600 	mov.w	r6, #0
 8003c84:	196b      	adds	r3, r5, r5
 8003c86:	eb46 0406 	adc.w	r4, r6, r6
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	4623      	mov	r3, r4
 8003c8e:	f7fc ff37 	bl	8000b00 <__aeabi_uldivmod>
 8003c92:	4603      	mov	r3, r0
 8003c94:	460c      	mov	r4, r1
 8003c96:	461a      	mov	r2, r3
 8003c98:	4b2c      	ldr	r3, [pc, #176]	; (8003d4c <UART_SetConfig+0x384>)
 8003c9a:	fba3 1302 	umull	r1, r3, r3, r2
 8003c9e:	095b      	lsrs	r3, r3, #5
 8003ca0:	2164      	movs	r1, #100	; 0x64
 8003ca2:	fb01 f303 	mul.w	r3, r1, r3
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	3332      	adds	r3, #50	; 0x32
 8003cac:	4a27      	ldr	r2, [pc, #156]	; (8003d4c <UART_SetConfig+0x384>)
 8003cae:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb2:	095b      	lsrs	r3, r3, #5
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003cba:	4498      	add	r8, r3
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	461d      	mov	r5, r3
 8003cc0:	f04f 0600 	mov.w	r6, #0
 8003cc4:	46a9      	mov	r9, r5
 8003cc6:	46b2      	mov	sl, r6
 8003cc8:	eb19 0309 	adds.w	r3, r9, r9
 8003ccc:	eb4a 040a 	adc.w	r4, sl, sl
 8003cd0:	4699      	mov	r9, r3
 8003cd2:	46a2      	mov	sl, r4
 8003cd4:	eb19 0905 	adds.w	r9, r9, r5
 8003cd8:	eb4a 0a06 	adc.w	sl, sl, r6
 8003cdc:	f04f 0100 	mov.w	r1, #0
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ce8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003cec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003cf0:	4689      	mov	r9, r1
 8003cf2:	4692      	mov	sl, r2
 8003cf4:	eb19 0005 	adds.w	r0, r9, r5
 8003cf8:	eb4a 0106 	adc.w	r1, sl, r6
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	461d      	mov	r5, r3
 8003d02:	f04f 0600 	mov.w	r6, #0
 8003d06:	196b      	adds	r3, r5, r5
 8003d08:	eb46 0406 	adc.w	r4, r6, r6
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4623      	mov	r3, r4
 8003d10:	f7fc fef6 	bl	8000b00 <__aeabi_uldivmod>
 8003d14:	4603      	mov	r3, r0
 8003d16:	460c      	mov	r4, r1
 8003d18:	461a      	mov	r2, r3
 8003d1a:	4b0c      	ldr	r3, [pc, #48]	; (8003d4c <UART_SetConfig+0x384>)
 8003d1c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d20:	095b      	lsrs	r3, r3, #5
 8003d22:	2164      	movs	r1, #100	; 0x64
 8003d24:	fb01 f303 	mul.w	r3, r1, r3
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	3332      	adds	r3, #50	; 0x32
 8003d2e:	4a07      	ldr	r2, [pc, #28]	; (8003d4c <UART_SetConfig+0x384>)
 8003d30:	fba2 2303 	umull	r2, r3, r2, r3
 8003d34:	095b      	lsrs	r3, r3, #5
 8003d36:	f003 0207 	and.w	r2, r3, #7
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4442      	add	r2, r8
 8003d40:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003d42:	e1b2      	b.n	80040aa <UART_SetConfig+0x6e2>
 8003d44:	40011000 	.word	0x40011000
 8003d48:	40011400 	.word	0x40011400
 8003d4c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4ad7      	ldr	r2, [pc, #860]	; (80040b4 <UART_SetConfig+0x6ec>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d005      	beq.n	8003d66 <UART_SetConfig+0x39e>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4ad6      	ldr	r2, [pc, #856]	; (80040b8 <UART_SetConfig+0x6f0>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	f040 80d1 	bne.w	8003f08 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d66:	f7ff fb43 	bl	80033f0 <HAL_RCC_GetPCLK2Freq>
 8003d6a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	469a      	mov	sl, r3
 8003d70:	f04f 0b00 	mov.w	fp, #0
 8003d74:	46d0      	mov	r8, sl
 8003d76:	46d9      	mov	r9, fp
 8003d78:	eb18 0308 	adds.w	r3, r8, r8
 8003d7c:	eb49 0409 	adc.w	r4, r9, r9
 8003d80:	4698      	mov	r8, r3
 8003d82:	46a1      	mov	r9, r4
 8003d84:	eb18 080a 	adds.w	r8, r8, sl
 8003d88:	eb49 090b 	adc.w	r9, r9, fp
 8003d8c:	f04f 0100 	mov.w	r1, #0
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d98:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d9c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003da0:	4688      	mov	r8, r1
 8003da2:	4691      	mov	r9, r2
 8003da4:	eb1a 0508 	adds.w	r5, sl, r8
 8003da8:	eb4b 0609 	adc.w	r6, fp, r9
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	4619      	mov	r1, r3
 8003db2:	f04f 0200 	mov.w	r2, #0
 8003db6:	f04f 0300 	mov.w	r3, #0
 8003dba:	f04f 0400 	mov.w	r4, #0
 8003dbe:	0094      	lsls	r4, r2, #2
 8003dc0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003dc4:	008b      	lsls	r3, r1, #2
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	4623      	mov	r3, r4
 8003dca:	4628      	mov	r0, r5
 8003dcc:	4631      	mov	r1, r6
 8003dce:	f7fc fe97 	bl	8000b00 <__aeabi_uldivmod>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	460c      	mov	r4, r1
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	4bb8      	ldr	r3, [pc, #736]	; (80040bc <UART_SetConfig+0x6f4>)
 8003dda:	fba3 2302 	umull	r2, r3, r3, r2
 8003dde:	095b      	lsrs	r3, r3, #5
 8003de0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	469b      	mov	fp, r3
 8003de8:	f04f 0c00 	mov.w	ip, #0
 8003dec:	46d9      	mov	r9, fp
 8003dee:	46e2      	mov	sl, ip
 8003df0:	eb19 0309 	adds.w	r3, r9, r9
 8003df4:	eb4a 040a 	adc.w	r4, sl, sl
 8003df8:	4699      	mov	r9, r3
 8003dfa:	46a2      	mov	sl, r4
 8003dfc:	eb19 090b 	adds.w	r9, r9, fp
 8003e00:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e04:	f04f 0100 	mov.w	r1, #0
 8003e08:	f04f 0200 	mov.w	r2, #0
 8003e0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e10:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e14:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e18:	4689      	mov	r9, r1
 8003e1a:	4692      	mov	sl, r2
 8003e1c:	eb1b 0509 	adds.w	r5, fp, r9
 8003e20:	eb4c 060a 	adc.w	r6, ip, sl
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	4619      	mov	r1, r3
 8003e2a:	f04f 0200 	mov.w	r2, #0
 8003e2e:	f04f 0300 	mov.w	r3, #0
 8003e32:	f04f 0400 	mov.w	r4, #0
 8003e36:	0094      	lsls	r4, r2, #2
 8003e38:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e3c:	008b      	lsls	r3, r1, #2
 8003e3e:	461a      	mov	r2, r3
 8003e40:	4623      	mov	r3, r4
 8003e42:	4628      	mov	r0, r5
 8003e44:	4631      	mov	r1, r6
 8003e46:	f7fc fe5b 	bl	8000b00 <__aeabi_uldivmod>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	460c      	mov	r4, r1
 8003e4e:	461a      	mov	r2, r3
 8003e50:	4b9a      	ldr	r3, [pc, #616]	; (80040bc <UART_SetConfig+0x6f4>)
 8003e52:	fba3 1302 	umull	r1, r3, r3, r2
 8003e56:	095b      	lsrs	r3, r3, #5
 8003e58:	2164      	movs	r1, #100	; 0x64
 8003e5a:	fb01 f303 	mul.w	r3, r1, r3
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	011b      	lsls	r3, r3, #4
 8003e62:	3332      	adds	r3, #50	; 0x32
 8003e64:	4a95      	ldr	r2, [pc, #596]	; (80040bc <UART_SetConfig+0x6f4>)
 8003e66:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6a:	095b      	lsrs	r3, r3, #5
 8003e6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e70:	4498      	add	r8, r3
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	469b      	mov	fp, r3
 8003e76:	f04f 0c00 	mov.w	ip, #0
 8003e7a:	46d9      	mov	r9, fp
 8003e7c:	46e2      	mov	sl, ip
 8003e7e:	eb19 0309 	adds.w	r3, r9, r9
 8003e82:	eb4a 040a 	adc.w	r4, sl, sl
 8003e86:	4699      	mov	r9, r3
 8003e88:	46a2      	mov	sl, r4
 8003e8a:	eb19 090b 	adds.w	r9, r9, fp
 8003e8e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e92:	f04f 0100 	mov.w	r1, #0
 8003e96:	f04f 0200 	mov.w	r2, #0
 8003e9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e9e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ea2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ea6:	4689      	mov	r9, r1
 8003ea8:	4692      	mov	sl, r2
 8003eaa:	eb1b 0509 	adds.w	r5, fp, r9
 8003eae:	eb4c 060a 	adc.w	r6, ip, sl
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	f04f 0200 	mov.w	r2, #0
 8003ebc:	f04f 0300 	mov.w	r3, #0
 8003ec0:	f04f 0400 	mov.w	r4, #0
 8003ec4:	0094      	lsls	r4, r2, #2
 8003ec6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003eca:	008b      	lsls	r3, r1, #2
 8003ecc:	461a      	mov	r2, r3
 8003ece:	4623      	mov	r3, r4
 8003ed0:	4628      	mov	r0, r5
 8003ed2:	4631      	mov	r1, r6
 8003ed4:	f7fc fe14 	bl	8000b00 <__aeabi_uldivmod>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	460c      	mov	r4, r1
 8003edc:	461a      	mov	r2, r3
 8003ede:	4b77      	ldr	r3, [pc, #476]	; (80040bc <UART_SetConfig+0x6f4>)
 8003ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ee4:	095b      	lsrs	r3, r3, #5
 8003ee6:	2164      	movs	r1, #100	; 0x64
 8003ee8:	fb01 f303 	mul.w	r3, r1, r3
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	011b      	lsls	r3, r3, #4
 8003ef0:	3332      	adds	r3, #50	; 0x32
 8003ef2:	4a72      	ldr	r2, [pc, #456]	; (80040bc <UART_SetConfig+0x6f4>)
 8003ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef8:	095b      	lsrs	r3, r3, #5
 8003efa:	f003 020f 	and.w	r2, r3, #15
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4442      	add	r2, r8
 8003f04:	609a      	str	r2, [r3, #8]
 8003f06:	e0d0      	b.n	80040aa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f08:	f7ff fa5e 	bl	80033c8 <HAL_RCC_GetPCLK1Freq>
 8003f0c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	469a      	mov	sl, r3
 8003f12:	f04f 0b00 	mov.w	fp, #0
 8003f16:	46d0      	mov	r8, sl
 8003f18:	46d9      	mov	r9, fp
 8003f1a:	eb18 0308 	adds.w	r3, r8, r8
 8003f1e:	eb49 0409 	adc.w	r4, r9, r9
 8003f22:	4698      	mov	r8, r3
 8003f24:	46a1      	mov	r9, r4
 8003f26:	eb18 080a 	adds.w	r8, r8, sl
 8003f2a:	eb49 090b 	adc.w	r9, r9, fp
 8003f2e:	f04f 0100 	mov.w	r1, #0
 8003f32:	f04f 0200 	mov.w	r2, #0
 8003f36:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f3a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f3e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f42:	4688      	mov	r8, r1
 8003f44:	4691      	mov	r9, r2
 8003f46:	eb1a 0508 	adds.w	r5, sl, r8
 8003f4a:	eb4b 0609 	adc.w	r6, fp, r9
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	4619      	mov	r1, r3
 8003f54:	f04f 0200 	mov.w	r2, #0
 8003f58:	f04f 0300 	mov.w	r3, #0
 8003f5c:	f04f 0400 	mov.w	r4, #0
 8003f60:	0094      	lsls	r4, r2, #2
 8003f62:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f66:	008b      	lsls	r3, r1, #2
 8003f68:	461a      	mov	r2, r3
 8003f6a:	4623      	mov	r3, r4
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	4631      	mov	r1, r6
 8003f70:	f7fc fdc6 	bl	8000b00 <__aeabi_uldivmod>
 8003f74:	4603      	mov	r3, r0
 8003f76:	460c      	mov	r4, r1
 8003f78:	461a      	mov	r2, r3
 8003f7a:	4b50      	ldr	r3, [pc, #320]	; (80040bc <UART_SetConfig+0x6f4>)
 8003f7c:	fba3 2302 	umull	r2, r3, r3, r2
 8003f80:	095b      	lsrs	r3, r3, #5
 8003f82:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	469b      	mov	fp, r3
 8003f8a:	f04f 0c00 	mov.w	ip, #0
 8003f8e:	46d9      	mov	r9, fp
 8003f90:	46e2      	mov	sl, ip
 8003f92:	eb19 0309 	adds.w	r3, r9, r9
 8003f96:	eb4a 040a 	adc.w	r4, sl, sl
 8003f9a:	4699      	mov	r9, r3
 8003f9c:	46a2      	mov	sl, r4
 8003f9e:	eb19 090b 	adds.w	r9, r9, fp
 8003fa2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003fa6:	f04f 0100 	mov.w	r1, #0
 8003faa:	f04f 0200 	mov.w	r2, #0
 8003fae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fb2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fb6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fba:	4689      	mov	r9, r1
 8003fbc:	4692      	mov	sl, r2
 8003fbe:	eb1b 0509 	adds.w	r5, fp, r9
 8003fc2:	eb4c 060a 	adc.w	r6, ip, sl
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	4619      	mov	r1, r3
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	f04f 0300 	mov.w	r3, #0
 8003fd4:	f04f 0400 	mov.w	r4, #0
 8003fd8:	0094      	lsls	r4, r2, #2
 8003fda:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003fde:	008b      	lsls	r3, r1, #2
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	4623      	mov	r3, r4
 8003fe4:	4628      	mov	r0, r5
 8003fe6:	4631      	mov	r1, r6
 8003fe8:	f7fc fd8a 	bl	8000b00 <__aeabi_uldivmod>
 8003fec:	4603      	mov	r3, r0
 8003fee:	460c      	mov	r4, r1
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	4b32      	ldr	r3, [pc, #200]	; (80040bc <UART_SetConfig+0x6f4>)
 8003ff4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ff8:	095b      	lsrs	r3, r3, #5
 8003ffa:	2164      	movs	r1, #100	; 0x64
 8003ffc:	fb01 f303 	mul.w	r3, r1, r3
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	011b      	lsls	r3, r3, #4
 8004004:	3332      	adds	r3, #50	; 0x32
 8004006:	4a2d      	ldr	r2, [pc, #180]	; (80040bc <UART_SetConfig+0x6f4>)
 8004008:	fba2 2303 	umull	r2, r3, r2, r3
 800400c:	095b      	lsrs	r3, r3, #5
 800400e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004012:	4498      	add	r8, r3
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	469b      	mov	fp, r3
 8004018:	f04f 0c00 	mov.w	ip, #0
 800401c:	46d9      	mov	r9, fp
 800401e:	46e2      	mov	sl, ip
 8004020:	eb19 0309 	adds.w	r3, r9, r9
 8004024:	eb4a 040a 	adc.w	r4, sl, sl
 8004028:	4699      	mov	r9, r3
 800402a:	46a2      	mov	sl, r4
 800402c:	eb19 090b 	adds.w	r9, r9, fp
 8004030:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004034:	f04f 0100 	mov.w	r1, #0
 8004038:	f04f 0200 	mov.w	r2, #0
 800403c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004040:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004044:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004048:	4689      	mov	r9, r1
 800404a:	4692      	mov	sl, r2
 800404c:	eb1b 0509 	adds.w	r5, fp, r9
 8004050:	eb4c 060a 	adc.w	r6, ip, sl
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	4619      	mov	r1, r3
 800405a:	f04f 0200 	mov.w	r2, #0
 800405e:	f04f 0300 	mov.w	r3, #0
 8004062:	f04f 0400 	mov.w	r4, #0
 8004066:	0094      	lsls	r4, r2, #2
 8004068:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800406c:	008b      	lsls	r3, r1, #2
 800406e:	461a      	mov	r2, r3
 8004070:	4623      	mov	r3, r4
 8004072:	4628      	mov	r0, r5
 8004074:	4631      	mov	r1, r6
 8004076:	f7fc fd43 	bl	8000b00 <__aeabi_uldivmod>
 800407a:	4603      	mov	r3, r0
 800407c:	460c      	mov	r4, r1
 800407e:	461a      	mov	r2, r3
 8004080:	4b0e      	ldr	r3, [pc, #56]	; (80040bc <UART_SetConfig+0x6f4>)
 8004082:	fba3 1302 	umull	r1, r3, r3, r2
 8004086:	095b      	lsrs	r3, r3, #5
 8004088:	2164      	movs	r1, #100	; 0x64
 800408a:	fb01 f303 	mul.w	r3, r1, r3
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	011b      	lsls	r3, r3, #4
 8004092:	3332      	adds	r3, #50	; 0x32
 8004094:	4a09      	ldr	r2, [pc, #36]	; (80040bc <UART_SetConfig+0x6f4>)
 8004096:	fba2 2303 	umull	r2, r3, r2, r3
 800409a:	095b      	lsrs	r3, r3, #5
 800409c:	f003 020f 	and.w	r2, r3, #15
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4442      	add	r2, r8
 80040a6:	609a      	str	r2, [r3, #8]
}
 80040a8:	e7ff      	b.n	80040aa <UART_SetConfig+0x6e2>
 80040aa:	bf00      	nop
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040b4:	40011000 	.word	0x40011000
 80040b8:	40011400 	.word	0x40011400
 80040bc:	51eb851f 	.word	0x51eb851f

080040c0 <atol>:
 80040c0:	220a      	movs	r2, #10
 80040c2:	2100      	movs	r1, #0
 80040c4:	f000 bd34 	b.w	8004b30 <strtol>

080040c8 <__errno>:
 80040c8:	4b01      	ldr	r3, [pc, #4]	; (80040d0 <__errno+0x8>)
 80040ca:	6818      	ldr	r0, [r3, #0]
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	2000000c 	.word	0x2000000c

080040d4 <exit>:
 80040d4:	b508      	push	{r3, lr}
 80040d6:	4b07      	ldr	r3, [pc, #28]	; (80040f4 <exit+0x20>)
 80040d8:	4604      	mov	r4, r0
 80040da:	b113      	cbz	r3, 80040e2 <exit+0xe>
 80040dc:	2100      	movs	r1, #0
 80040de:	f3af 8000 	nop.w
 80040e2:	4b05      	ldr	r3, [pc, #20]	; (80040f8 <exit+0x24>)
 80040e4:	6818      	ldr	r0, [r3, #0]
 80040e6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80040e8:	b103      	cbz	r3, 80040ec <exit+0x18>
 80040ea:	4798      	blx	r3
 80040ec:	4620      	mov	r0, r4
 80040ee:	f7fd fe93 	bl	8001e18 <_exit>
 80040f2:	bf00      	nop
 80040f4:	00000000 	.word	0x00000000
 80040f8:	08007130 	.word	0x08007130

080040fc <__libc_init_array>:
 80040fc:	b570      	push	{r4, r5, r6, lr}
 80040fe:	4e0d      	ldr	r6, [pc, #52]	; (8004134 <__libc_init_array+0x38>)
 8004100:	4c0d      	ldr	r4, [pc, #52]	; (8004138 <__libc_init_array+0x3c>)
 8004102:	1ba4      	subs	r4, r4, r6
 8004104:	10a4      	asrs	r4, r4, #2
 8004106:	2500      	movs	r5, #0
 8004108:	42a5      	cmp	r5, r4
 800410a:	d109      	bne.n	8004120 <__libc_init_array+0x24>
 800410c:	4e0b      	ldr	r6, [pc, #44]	; (800413c <__libc_init_array+0x40>)
 800410e:	4c0c      	ldr	r4, [pc, #48]	; (8004140 <__libc_init_array+0x44>)
 8004110:	f002 fff0 	bl	80070f4 <_init>
 8004114:	1ba4      	subs	r4, r4, r6
 8004116:	10a4      	asrs	r4, r4, #2
 8004118:	2500      	movs	r5, #0
 800411a:	42a5      	cmp	r5, r4
 800411c:	d105      	bne.n	800412a <__libc_init_array+0x2e>
 800411e:	bd70      	pop	{r4, r5, r6, pc}
 8004120:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004124:	4798      	blx	r3
 8004126:	3501      	adds	r5, #1
 8004128:	e7ee      	b.n	8004108 <__libc_init_array+0xc>
 800412a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800412e:	4798      	blx	r3
 8004130:	3501      	adds	r5, #1
 8004132:	e7f2      	b.n	800411a <__libc_init_array+0x1e>
 8004134:	08007548 	.word	0x08007548
 8004138:	08007548 	.word	0x08007548
 800413c:	08007548 	.word	0x08007548
 8004140:	0800754c 	.word	0x0800754c

08004144 <malloc>:
 8004144:	4b02      	ldr	r3, [pc, #8]	; (8004150 <malloc+0xc>)
 8004146:	4601      	mov	r1, r0
 8004148:	6818      	ldr	r0, [r3, #0]
 800414a:	f000 b86d 	b.w	8004228 <_malloc_r>
 800414e:	bf00      	nop
 8004150:	2000000c 	.word	0x2000000c

08004154 <free>:
 8004154:	4b02      	ldr	r3, [pc, #8]	; (8004160 <free+0xc>)
 8004156:	4601      	mov	r1, r0
 8004158:	6818      	ldr	r0, [r3, #0]
 800415a:	f000 b817 	b.w	800418c <_free_r>
 800415e:	bf00      	nop
 8004160:	2000000c 	.word	0x2000000c

08004164 <memcpy>:
 8004164:	b510      	push	{r4, lr}
 8004166:	1e43      	subs	r3, r0, #1
 8004168:	440a      	add	r2, r1
 800416a:	4291      	cmp	r1, r2
 800416c:	d100      	bne.n	8004170 <memcpy+0xc>
 800416e:	bd10      	pop	{r4, pc}
 8004170:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004174:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004178:	e7f7      	b.n	800416a <memcpy+0x6>

0800417a <memset>:
 800417a:	4402      	add	r2, r0
 800417c:	4603      	mov	r3, r0
 800417e:	4293      	cmp	r3, r2
 8004180:	d100      	bne.n	8004184 <memset+0xa>
 8004182:	4770      	bx	lr
 8004184:	f803 1b01 	strb.w	r1, [r3], #1
 8004188:	e7f9      	b.n	800417e <memset+0x4>
	...

0800418c <_free_r>:
 800418c:	b538      	push	{r3, r4, r5, lr}
 800418e:	4605      	mov	r5, r0
 8004190:	2900      	cmp	r1, #0
 8004192:	d045      	beq.n	8004220 <_free_r+0x94>
 8004194:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004198:	1f0c      	subs	r4, r1, #4
 800419a:	2b00      	cmp	r3, #0
 800419c:	bfb8      	it	lt
 800419e:	18e4      	addlt	r4, r4, r3
 80041a0:	f001 fb46 	bl	8005830 <__malloc_lock>
 80041a4:	4a1f      	ldr	r2, [pc, #124]	; (8004224 <_free_r+0x98>)
 80041a6:	6813      	ldr	r3, [r2, #0]
 80041a8:	4610      	mov	r0, r2
 80041aa:	b933      	cbnz	r3, 80041ba <_free_r+0x2e>
 80041ac:	6063      	str	r3, [r4, #4]
 80041ae:	6014      	str	r4, [r2, #0]
 80041b0:	4628      	mov	r0, r5
 80041b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041b6:	f001 bb3c 	b.w	8005832 <__malloc_unlock>
 80041ba:	42a3      	cmp	r3, r4
 80041bc:	d90c      	bls.n	80041d8 <_free_r+0x4c>
 80041be:	6821      	ldr	r1, [r4, #0]
 80041c0:	1862      	adds	r2, r4, r1
 80041c2:	4293      	cmp	r3, r2
 80041c4:	bf04      	itt	eq
 80041c6:	681a      	ldreq	r2, [r3, #0]
 80041c8:	685b      	ldreq	r3, [r3, #4]
 80041ca:	6063      	str	r3, [r4, #4]
 80041cc:	bf04      	itt	eq
 80041ce:	1852      	addeq	r2, r2, r1
 80041d0:	6022      	streq	r2, [r4, #0]
 80041d2:	6004      	str	r4, [r0, #0]
 80041d4:	e7ec      	b.n	80041b0 <_free_r+0x24>
 80041d6:	4613      	mov	r3, r2
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	b10a      	cbz	r2, 80041e0 <_free_r+0x54>
 80041dc:	42a2      	cmp	r2, r4
 80041de:	d9fa      	bls.n	80041d6 <_free_r+0x4a>
 80041e0:	6819      	ldr	r1, [r3, #0]
 80041e2:	1858      	adds	r0, r3, r1
 80041e4:	42a0      	cmp	r0, r4
 80041e6:	d10b      	bne.n	8004200 <_free_r+0x74>
 80041e8:	6820      	ldr	r0, [r4, #0]
 80041ea:	4401      	add	r1, r0
 80041ec:	1858      	adds	r0, r3, r1
 80041ee:	4282      	cmp	r2, r0
 80041f0:	6019      	str	r1, [r3, #0]
 80041f2:	d1dd      	bne.n	80041b0 <_free_r+0x24>
 80041f4:	6810      	ldr	r0, [r2, #0]
 80041f6:	6852      	ldr	r2, [r2, #4]
 80041f8:	605a      	str	r2, [r3, #4]
 80041fa:	4401      	add	r1, r0
 80041fc:	6019      	str	r1, [r3, #0]
 80041fe:	e7d7      	b.n	80041b0 <_free_r+0x24>
 8004200:	d902      	bls.n	8004208 <_free_r+0x7c>
 8004202:	230c      	movs	r3, #12
 8004204:	602b      	str	r3, [r5, #0]
 8004206:	e7d3      	b.n	80041b0 <_free_r+0x24>
 8004208:	6820      	ldr	r0, [r4, #0]
 800420a:	1821      	adds	r1, r4, r0
 800420c:	428a      	cmp	r2, r1
 800420e:	bf04      	itt	eq
 8004210:	6811      	ldreq	r1, [r2, #0]
 8004212:	6852      	ldreq	r2, [r2, #4]
 8004214:	6062      	str	r2, [r4, #4]
 8004216:	bf04      	itt	eq
 8004218:	1809      	addeq	r1, r1, r0
 800421a:	6021      	streq	r1, [r4, #0]
 800421c:	605c      	str	r4, [r3, #4]
 800421e:	e7c7      	b.n	80041b0 <_free_r+0x24>
 8004220:	bd38      	pop	{r3, r4, r5, pc}
 8004222:	bf00      	nop
 8004224:	20001508 	.word	0x20001508

08004228 <_malloc_r>:
 8004228:	b570      	push	{r4, r5, r6, lr}
 800422a:	1ccd      	adds	r5, r1, #3
 800422c:	f025 0503 	bic.w	r5, r5, #3
 8004230:	3508      	adds	r5, #8
 8004232:	2d0c      	cmp	r5, #12
 8004234:	bf38      	it	cc
 8004236:	250c      	movcc	r5, #12
 8004238:	2d00      	cmp	r5, #0
 800423a:	4606      	mov	r6, r0
 800423c:	db01      	blt.n	8004242 <_malloc_r+0x1a>
 800423e:	42a9      	cmp	r1, r5
 8004240:	d903      	bls.n	800424a <_malloc_r+0x22>
 8004242:	230c      	movs	r3, #12
 8004244:	6033      	str	r3, [r6, #0]
 8004246:	2000      	movs	r0, #0
 8004248:	bd70      	pop	{r4, r5, r6, pc}
 800424a:	f001 faf1 	bl	8005830 <__malloc_lock>
 800424e:	4a21      	ldr	r2, [pc, #132]	; (80042d4 <_malloc_r+0xac>)
 8004250:	6814      	ldr	r4, [r2, #0]
 8004252:	4621      	mov	r1, r4
 8004254:	b991      	cbnz	r1, 800427c <_malloc_r+0x54>
 8004256:	4c20      	ldr	r4, [pc, #128]	; (80042d8 <_malloc_r+0xb0>)
 8004258:	6823      	ldr	r3, [r4, #0]
 800425a:	b91b      	cbnz	r3, 8004264 <_malloc_r+0x3c>
 800425c:	4630      	mov	r0, r6
 800425e:	f000 fb87 	bl	8004970 <_sbrk_r>
 8004262:	6020      	str	r0, [r4, #0]
 8004264:	4629      	mov	r1, r5
 8004266:	4630      	mov	r0, r6
 8004268:	f000 fb82 	bl	8004970 <_sbrk_r>
 800426c:	1c43      	adds	r3, r0, #1
 800426e:	d124      	bne.n	80042ba <_malloc_r+0x92>
 8004270:	230c      	movs	r3, #12
 8004272:	6033      	str	r3, [r6, #0]
 8004274:	4630      	mov	r0, r6
 8004276:	f001 fadc 	bl	8005832 <__malloc_unlock>
 800427a:	e7e4      	b.n	8004246 <_malloc_r+0x1e>
 800427c:	680b      	ldr	r3, [r1, #0]
 800427e:	1b5b      	subs	r3, r3, r5
 8004280:	d418      	bmi.n	80042b4 <_malloc_r+0x8c>
 8004282:	2b0b      	cmp	r3, #11
 8004284:	d90f      	bls.n	80042a6 <_malloc_r+0x7e>
 8004286:	600b      	str	r3, [r1, #0]
 8004288:	50cd      	str	r5, [r1, r3]
 800428a:	18cc      	adds	r4, r1, r3
 800428c:	4630      	mov	r0, r6
 800428e:	f001 fad0 	bl	8005832 <__malloc_unlock>
 8004292:	f104 000b 	add.w	r0, r4, #11
 8004296:	1d23      	adds	r3, r4, #4
 8004298:	f020 0007 	bic.w	r0, r0, #7
 800429c:	1ac3      	subs	r3, r0, r3
 800429e:	d0d3      	beq.n	8004248 <_malloc_r+0x20>
 80042a0:	425a      	negs	r2, r3
 80042a2:	50e2      	str	r2, [r4, r3]
 80042a4:	e7d0      	b.n	8004248 <_malloc_r+0x20>
 80042a6:	428c      	cmp	r4, r1
 80042a8:	684b      	ldr	r3, [r1, #4]
 80042aa:	bf16      	itet	ne
 80042ac:	6063      	strne	r3, [r4, #4]
 80042ae:	6013      	streq	r3, [r2, #0]
 80042b0:	460c      	movne	r4, r1
 80042b2:	e7eb      	b.n	800428c <_malloc_r+0x64>
 80042b4:	460c      	mov	r4, r1
 80042b6:	6849      	ldr	r1, [r1, #4]
 80042b8:	e7cc      	b.n	8004254 <_malloc_r+0x2c>
 80042ba:	1cc4      	adds	r4, r0, #3
 80042bc:	f024 0403 	bic.w	r4, r4, #3
 80042c0:	42a0      	cmp	r0, r4
 80042c2:	d005      	beq.n	80042d0 <_malloc_r+0xa8>
 80042c4:	1a21      	subs	r1, r4, r0
 80042c6:	4630      	mov	r0, r6
 80042c8:	f000 fb52 	bl	8004970 <_sbrk_r>
 80042cc:	3001      	adds	r0, #1
 80042ce:	d0cf      	beq.n	8004270 <_malloc_r+0x48>
 80042d0:	6025      	str	r5, [r4, #0]
 80042d2:	e7db      	b.n	800428c <_malloc_r+0x64>
 80042d4:	20001508 	.word	0x20001508
 80042d8:	2000150c 	.word	0x2000150c

080042dc <__cvt>:
 80042dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042e0:	ec55 4b10 	vmov	r4, r5, d0
 80042e4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80042e6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80042ea:	2d00      	cmp	r5, #0
 80042ec:	460e      	mov	r6, r1
 80042ee:	4691      	mov	r9, r2
 80042f0:	4619      	mov	r1, r3
 80042f2:	bfb8      	it	lt
 80042f4:	4622      	movlt	r2, r4
 80042f6:	462b      	mov	r3, r5
 80042f8:	f027 0720 	bic.w	r7, r7, #32
 80042fc:	bfbb      	ittet	lt
 80042fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004302:	461d      	movlt	r5, r3
 8004304:	2300      	movge	r3, #0
 8004306:	232d      	movlt	r3, #45	; 0x2d
 8004308:	bfb8      	it	lt
 800430a:	4614      	movlt	r4, r2
 800430c:	2f46      	cmp	r7, #70	; 0x46
 800430e:	700b      	strb	r3, [r1, #0]
 8004310:	d004      	beq.n	800431c <__cvt+0x40>
 8004312:	2f45      	cmp	r7, #69	; 0x45
 8004314:	d100      	bne.n	8004318 <__cvt+0x3c>
 8004316:	3601      	adds	r6, #1
 8004318:	2102      	movs	r1, #2
 800431a:	e000      	b.n	800431e <__cvt+0x42>
 800431c:	2103      	movs	r1, #3
 800431e:	ab03      	add	r3, sp, #12
 8004320:	9301      	str	r3, [sp, #4]
 8004322:	ab02      	add	r3, sp, #8
 8004324:	9300      	str	r3, [sp, #0]
 8004326:	4632      	mov	r2, r6
 8004328:	4653      	mov	r3, sl
 800432a:	ec45 4b10 	vmov	d0, r4, r5
 800432e:	f000 fca3 	bl	8004c78 <_dtoa_r>
 8004332:	2f47      	cmp	r7, #71	; 0x47
 8004334:	4680      	mov	r8, r0
 8004336:	d102      	bne.n	800433e <__cvt+0x62>
 8004338:	f019 0f01 	tst.w	r9, #1
 800433c:	d026      	beq.n	800438c <__cvt+0xb0>
 800433e:	2f46      	cmp	r7, #70	; 0x46
 8004340:	eb08 0906 	add.w	r9, r8, r6
 8004344:	d111      	bne.n	800436a <__cvt+0x8e>
 8004346:	f898 3000 	ldrb.w	r3, [r8]
 800434a:	2b30      	cmp	r3, #48	; 0x30
 800434c:	d10a      	bne.n	8004364 <__cvt+0x88>
 800434e:	2200      	movs	r2, #0
 8004350:	2300      	movs	r3, #0
 8004352:	4620      	mov	r0, r4
 8004354:	4629      	mov	r1, r5
 8004356:	f7fc fb63 	bl	8000a20 <__aeabi_dcmpeq>
 800435a:	b918      	cbnz	r0, 8004364 <__cvt+0x88>
 800435c:	f1c6 0601 	rsb	r6, r6, #1
 8004360:	f8ca 6000 	str.w	r6, [sl]
 8004364:	f8da 3000 	ldr.w	r3, [sl]
 8004368:	4499      	add	r9, r3
 800436a:	2200      	movs	r2, #0
 800436c:	2300      	movs	r3, #0
 800436e:	4620      	mov	r0, r4
 8004370:	4629      	mov	r1, r5
 8004372:	f7fc fb55 	bl	8000a20 <__aeabi_dcmpeq>
 8004376:	b938      	cbnz	r0, 8004388 <__cvt+0xac>
 8004378:	2230      	movs	r2, #48	; 0x30
 800437a:	9b03      	ldr	r3, [sp, #12]
 800437c:	454b      	cmp	r3, r9
 800437e:	d205      	bcs.n	800438c <__cvt+0xb0>
 8004380:	1c59      	adds	r1, r3, #1
 8004382:	9103      	str	r1, [sp, #12]
 8004384:	701a      	strb	r2, [r3, #0]
 8004386:	e7f8      	b.n	800437a <__cvt+0x9e>
 8004388:	f8cd 900c 	str.w	r9, [sp, #12]
 800438c:	9b03      	ldr	r3, [sp, #12]
 800438e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004390:	eba3 0308 	sub.w	r3, r3, r8
 8004394:	4640      	mov	r0, r8
 8004396:	6013      	str	r3, [r2, #0]
 8004398:	b004      	add	sp, #16
 800439a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800439e <__exponent>:
 800439e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043a0:	2900      	cmp	r1, #0
 80043a2:	4604      	mov	r4, r0
 80043a4:	bfba      	itte	lt
 80043a6:	4249      	neglt	r1, r1
 80043a8:	232d      	movlt	r3, #45	; 0x2d
 80043aa:	232b      	movge	r3, #43	; 0x2b
 80043ac:	2909      	cmp	r1, #9
 80043ae:	f804 2b02 	strb.w	r2, [r4], #2
 80043b2:	7043      	strb	r3, [r0, #1]
 80043b4:	dd20      	ble.n	80043f8 <__exponent+0x5a>
 80043b6:	f10d 0307 	add.w	r3, sp, #7
 80043ba:	461f      	mov	r7, r3
 80043bc:	260a      	movs	r6, #10
 80043be:	fb91 f5f6 	sdiv	r5, r1, r6
 80043c2:	fb06 1115 	mls	r1, r6, r5, r1
 80043c6:	3130      	adds	r1, #48	; 0x30
 80043c8:	2d09      	cmp	r5, #9
 80043ca:	f803 1c01 	strb.w	r1, [r3, #-1]
 80043ce:	f103 32ff 	add.w	r2, r3, #4294967295
 80043d2:	4629      	mov	r1, r5
 80043d4:	dc09      	bgt.n	80043ea <__exponent+0x4c>
 80043d6:	3130      	adds	r1, #48	; 0x30
 80043d8:	3b02      	subs	r3, #2
 80043da:	f802 1c01 	strb.w	r1, [r2, #-1]
 80043de:	42bb      	cmp	r3, r7
 80043e0:	4622      	mov	r2, r4
 80043e2:	d304      	bcc.n	80043ee <__exponent+0x50>
 80043e4:	1a10      	subs	r0, r2, r0
 80043e6:	b003      	add	sp, #12
 80043e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043ea:	4613      	mov	r3, r2
 80043ec:	e7e7      	b.n	80043be <__exponent+0x20>
 80043ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043f2:	f804 2b01 	strb.w	r2, [r4], #1
 80043f6:	e7f2      	b.n	80043de <__exponent+0x40>
 80043f8:	2330      	movs	r3, #48	; 0x30
 80043fa:	4419      	add	r1, r3
 80043fc:	7083      	strb	r3, [r0, #2]
 80043fe:	1d02      	adds	r2, r0, #4
 8004400:	70c1      	strb	r1, [r0, #3]
 8004402:	e7ef      	b.n	80043e4 <__exponent+0x46>

08004404 <_printf_float>:
 8004404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004408:	b08d      	sub	sp, #52	; 0x34
 800440a:	460c      	mov	r4, r1
 800440c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004410:	4616      	mov	r6, r2
 8004412:	461f      	mov	r7, r3
 8004414:	4605      	mov	r5, r0
 8004416:	f001 f9eb 	bl	80057f0 <_localeconv_r>
 800441a:	6803      	ldr	r3, [r0, #0]
 800441c:	9304      	str	r3, [sp, #16]
 800441e:	4618      	mov	r0, r3
 8004420:	f7fb fed2 	bl	80001c8 <strlen>
 8004424:	2300      	movs	r3, #0
 8004426:	930a      	str	r3, [sp, #40]	; 0x28
 8004428:	f8d8 3000 	ldr.w	r3, [r8]
 800442c:	9005      	str	r0, [sp, #20]
 800442e:	3307      	adds	r3, #7
 8004430:	f023 0307 	bic.w	r3, r3, #7
 8004434:	f103 0208 	add.w	r2, r3, #8
 8004438:	f894 a018 	ldrb.w	sl, [r4, #24]
 800443c:	f8d4 b000 	ldr.w	fp, [r4]
 8004440:	f8c8 2000 	str.w	r2, [r8]
 8004444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004448:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800444c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004450:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004454:	9307      	str	r3, [sp, #28]
 8004456:	f8cd 8018 	str.w	r8, [sp, #24]
 800445a:	f04f 32ff 	mov.w	r2, #4294967295
 800445e:	4ba7      	ldr	r3, [pc, #668]	; (80046fc <_printf_float+0x2f8>)
 8004460:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004464:	f7fc fb0e 	bl	8000a84 <__aeabi_dcmpun>
 8004468:	bb70      	cbnz	r0, 80044c8 <_printf_float+0xc4>
 800446a:	f04f 32ff 	mov.w	r2, #4294967295
 800446e:	4ba3      	ldr	r3, [pc, #652]	; (80046fc <_printf_float+0x2f8>)
 8004470:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004474:	f7fc fae8 	bl	8000a48 <__aeabi_dcmple>
 8004478:	bb30      	cbnz	r0, 80044c8 <_printf_float+0xc4>
 800447a:	2200      	movs	r2, #0
 800447c:	2300      	movs	r3, #0
 800447e:	4640      	mov	r0, r8
 8004480:	4649      	mov	r1, r9
 8004482:	f7fc fad7 	bl	8000a34 <__aeabi_dcmplt>
 8004486:	b110      	cbz	r0, 800448e <_printf_float+0x8a>
 8004488:	232d      	movs	r3, #45	; 0x2d
 800448a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800448e:	4a9c      	ldr	r2, [pc, #624]	; (8004700 <_printf_float+0x2fc>)
 8004490:	4b9c      	ldr	r3, [pc, #624]	; (8004704 <_printf_float+0x300>)
 8004492:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004496:	bf8c      	ite	hi
 8004498:	4690      	movhi	r8, r2
 800449a:	4698      	movls	r8, r3
 800449c:	2303      	movs	r3, #3
 800449e:	f02b 0204 	bic.w	r2, fp, #4
 80044a2:	6123      	str	r3, [r4, #16]
 80044a4:	6022      	str	r2, [r4, #0]
 80044a6:	f04f 0900 	mov.w	r9, #0
 80044aa:	9700      	str	r7, [sp, #0]
 80044ac:	4633      	mov	r3, r6
 80044ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80044b0:	4621      	mov	r1, r4
 80044b2:	4628      	mov	r0, r5
 80044b4:	f000 f9e6 	bl	8004884 <_printf_common>
 80044b8:	3001      	adds	r0, #1
 80044ba:	f040 808d 	bne.w	80045d8 <_printf_float+0x1d4>
 80044be:	f04f 30ff 	mov.w	r0, #4294967295
 80044c2:	b00d      	add	sp, #52	; 0x34
 80044c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044c8:	4642      	mov	r2, r8
 80044ca:	464b      	mov	r3, r9
 80044cc:	4640      	mov	r0, r8
 80044ce:	4649      	mov	r1, r9
 80044d0:	f7fc fad8 	bl	8000a84 <__aeabi_dcmpun>
 80044d4:	b110      	cbz	r0, 80044dc <_printf_float+0xd8>
 80044d6:	4a8c      	ldr	r2, [pc, #560]	; (8004708 <_printf_float+0x304>)
 80044d8:	4b8c      	ldr	r3, [pc, #560]	; (800470c <_printf_float+0x308>)
 80044da:	e7da      	b.n	8004492 <_printf_float+0x8e>
 80044dc:	6861      	ldr	r1, [r4, #4]
 80044de:	1c4b      	adds	r3, r1, #1
 80044e0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80044e4:	a80a      	add	r0, sp, #40	; 0x28
 80044e6:	d13e      	bne.n	8004566 <_printf_float+0x162>
 80044e8:	2306      	movs	r3, #6
 80044ea:	6063      	str	r3, [r4, #4]
 80044ec:	2300      	movs	r3, #0
 80044ee:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80044f2:	ab09      	add	r3, sp, #36	; 0x24
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	ec49 8b10 	vmov	d0, r8, r9
 80044fa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80044fe:	6022      	str	r2, [r4, #0]
 8004500:	f8cd a004 	str.w	sl, [sp, #4]
 8004504:	6861      	ldr	r1, [r4, #4]
 8004506:	4628      	mov	r0, r5
 8004508:	f7ff fee8 	bl	80042dc <__cvt>
 800450c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004510:	2b47      	cmp	r3, #71	; 0x47
 8004512:	4680      	mov	r8, r0
 8004514:	d109      	bne.n	800452a <_printf_float+0x126>
 8004516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004518:	1cd8      	adds	r0, r3, #3
 800451a:	db02      	blt.n	8004522 <_printf_float+0x11e>
 800451c:	6862      	ldr	r2, [r4, #4]
 800451e:	4293      	cmp	r3, r2
 8004520:	dd47      	ble.n	80045b2 <_printf_float+0x1ae>
 8004522:	f1aa 0a02 	sub.w	sl, sl, #2
 8004526:	fa5f fa8a 	uxtb.w	sl, sl
 800452a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800452e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004530:	d824      	bhi.n	800457c <_printf_float+0x178>
 8004532:	3901      	subs	r1, #1
 8004534:	4652      	mov	r2, sl
 8004536:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800453a:	9109      	str	r1, [sp, #36]	; 0x24
 800453c:	f7ff ff2f 	bl	800439e <__exponent>
 8004540:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004542:	1813      	adds	r3, r2, r0
 8004544:	2a01      	cmp	r2, #1
 8004546:	4681      	mov	r9, r0
 8004548:	6123      	str	r3, [r4, #16]
 800454a:	dc02      	bgt.n	8004552 <_printf_float+0x14e>
 800454c:	6822      	ldr	r2, [r4, #0]
 800454e:	07d1      	lsls	r1, r2, #31
 8004550:	d501      	bpl.n	8004556 <_printf_float+0x152>
 8004552:	3301      	adds	r3, #1
 8004554:	6123      	str	r3, [r4, #16]
 8004556:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0a5      	beq.n	80044aa <_printf_float+0xa6>
 800455e:	232d      	movs	r3, #45	; 0x2d
 8004560:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004564:	e7a1      	b.n	80044aa <_printf_float+0xa6>
 8004566:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800456a:	f000 8177 	beq.w	800485c <_printf_float+0x458>
 800456e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004572:	d1bb      	bne.n	80044ec <_printf_float+0xe8>
 8004574:	2900      	cmp	r1, #0
 8004576:	d1b9      	bne.n	80044ec <_printf_float+0xe8>
 8004578:	2301      	movs	r3, #1
 800457a:	e7b6      	b.n	80044ea <_printf_float+0xe6>
 800457c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004580:	d119      	bne.n	80045b6 <_printf_float+0x1b2>
 8004582:	2900      	cmp	r1, #0
 8004584:	6863      	ldr	r3, [r4, #4]
 8004586:	dd0c      	ble.n	80045a2 <_printf_float+0x19e>
 8004588:	6121      	str	r1, [r4, #16]
 800458a:	b913      	cbnz	r3, 8004592 <_printf_float+0x18e>
 800458c:	6822      	ldr	r2, [r4, #0]
 800458e:	07d2      	lsls	r2, r2, #31
 8004590:	d502      	bpl.n	8004598 <_printf_float+0x194>
 8004592:	3301      	adds	r3, #1
 8004594:	440b      	add	r3, r1
 8004596:	6123      	str	r3, [r4, #16]
 8004598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800459a:	65a3      	str	r3, [r4, #88]	; 0x58
 800459c:	f04f 0900 	mov.w	r9, #0
 80045a0:	e7d9      	b.n	8004556 <_printf_float+0x152>
 80045a2:	b913      	cbnz	r3, 80045aa <_printf_float+0x1a6>
 80045a4:	6822      	ldr	r2, [r4, #0]
 80045a6:	07d0      	lsls	r0, r2, #31
 80045a8:	d501      	bpl.n	80045ae <_printf_float+0x1aa>
 80045aa:	3302      	adds	r3, #2
 80045ac:	e7f3      	b.n	8004596 <_printf_float+0x192>
 80045ae:	2301      	movs	r3, #1
 80045b0:	e7f1      	b.n	8004596 <_printf_float+0x192>
 80045b2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80045b6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80045ba:	4293      	cmp	r3, r2
 80045bc:	db05      	blt.n	80045ca <_printf_float+0x1c6>
 80045be:	6822      	ldr	r2, [r4, #0]
 80045c0:	6123      	str	r3, [r4, #16]
 80045c2:	07d1      	lsls	r1, r2, #31
 80045c4:	d5e8      	bpl.n	8004598 <_printf_float+0x194>
 80045c6:	3301      	adds	r3, #1
 80045c8:	e7e5      	b.n	8004596 <_printf_float+0x192>
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	bfd4      	ite	le
 80045ce:	f1c3 0302 	rsble	r3, r3, #2
 80045d2:	2301      	movgt	r3, #1
 80045d4:	4413      	add	r3, r2
 80045d6:	e7de      	b.n	8004596 <_printf_float+0x192>
 80045d8:	6823      	ldr	r3, [r4, #0]
 80045da:	055a      	lsls	r2, r3, #21
 80045dc:	d407      	bmi.n	80045ee <_printf_float+0x1ea>
 80045de:	6923      	ldr	r3, [r4, #16]
 80045e0:	4642      	mov	r2, r8
 80045e2:	4631      	mov	r1, r6
 80045e4:	4628      	mov	r0, r5
 80045e6:	47b8      	blx	r7
 80045e8:	3001      	adds	r0, #1
 80045ea:	d12b      	bne.n	8004644 <_printf_float+0x240>
 80045ec:	e767      	b.n	80044be <_printf_float+0xba>
 80045ee:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80045f2:	f240 80dc 	bls.w	80047ae <_printf_float+0x3aa>
 80045f6:	2200      	movs	r2, #0
 80045f8:	2300      	movs	r3, #0
 80045fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80045fe:	f7fc fa0f 	bl	8000a20 <__aeabi_dcmpeq>
 8004602:	2800      	cmp	r0, #0
 8004604:	d033      	beq.n	800466e <_printf_float+0x26a>
 8004606:	2301      	movs	r3, #1
 8004608:	4a41      	ldr	r2, [pc, #260]	; (8004710 <_printf_float+0x30c>)
 800460a:	4631      	mov	r1, r6
 800460c:	4628      	mov	r0, r5
 800460e:	47b8      	blx	r7
 8004610:	3001      	adds	r0, #1
 8004612:	f43f af54 	beq.w	80044be <_printf_float+0xba>
 8004616:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800461a:	429a      	cmp	r2, r3
 800461c:	db02      	blt.n	8004624 <_printf_float+0x220>
 800461e:	6823      	ldr	r3, [r4, #0]
 8004620:	07d8      	lsls	r0, r3, #31
 8004622:	d50f      	bpl.n	8004644 <_printf_float+0x240>
 8004624:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004628:	4631      	mov	r1, r6
 800462a:	4628      	mov	r0, r5
 800462c:	47b8      	blx	r7
 800462e:	3001      	adds	r0, #1
 8004630:	f43f af45 	beq.w	80044be <_printf_float+0xba>
 8004634:	f04f 0800 	mov.w	r8, #0
 8004638:	f104 091a 	add.w	r9, r4, #26
 800463c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800463e:	3b01      	subs	r3, #1
 8004640:	4543      	cmp	r3, r8
 8004642:	dc09      	bgt.n	8004658 <_printf_float+0x254>
 8004644:	6823      	ldr	r3, [r4, #0]
 8004646:	079b      	lsls	r3, r3, #30
 8004648:	f100 8103 	bmi.w	8004852 <_printf_float+0x44e>
 800464c:	68e0      	ldr	r0, [r4, #12]
 800464e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004650:	4298      	cmp	r0, r3
 8004652:	bfb8      	it	lt
 8004654:	4618      	movlt	r0, r3
 8004656:	e734      	b.n	80044c2 <_printf_float+0xbe>
 8004658:	2301      	movs	r3, #1
 800465a:	464a      	mov	r2, r9
 800465c:	4631      	mov	r1, r6
 800465e:	4628      	mov	r0, r5
 8004660:	47b8      	blx	r7
 8004662:	3001      	adds	r0, #1
 8004664:	f43f af2b 	beq.w	80044be <_printf_float+0xba>
 8004668:	f108 0801 	add.w	r8, r8, #1
 800466c:	e7e6      	b.n	800463c <_printf_float+0x238>
 800466e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004670:	2b00      	cmp	r3, #0
 8004672:	dc2b      	bgt.n	80046cc <_printf_float+0x2c8>
 8004674:	2301      	movs	r3, #1
 8004676:	4a26      	ldr	r2, [pc, #152]	; (8004710 <_printf_float+0x30c>)
 8004678:	4631      	mov	r1, r6
 800467a:	4628      	mov	r0, r5
 800467c:	47b8      	blx	r7
 800467e:	3001      	adds	r0, #1
 8004680:	f43f af1d 	beq.w	80044be <_printf_float+0xba>
 8004684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004686:	b923      	cbnz	r3, 8004692 <_printf_float+0x28e>
 8004688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800468a:	b913      	cbnz	r3, 8004692 <_printf_float+0x28e>
 800468c:	6823      	ldr	r3, [r4, #0]
 800468e:	07d9      	lsls	r1, r3, #31
 8004690:	d5d8      	bpl.n	8004644 <_printf_float+0x240>
 8004692:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004696:	4631      	mov	r1, r6
 8004698:	4628      	mov	r0, r5
 800469a:	47b8      	blx	r7
 800469c:	3001      	adds	r0, #1
 800469e:	f43f af0e 	beq.w	80044be <_printf_float+0xba>
 80046a2:	f04f 0900 	mov.w	r9, #0
 80046a6:	f104 0a1a 	add.w	sl, r4, #26
 80046aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046ac:	425b      	negs	r3, r3
 80046ae:	454b      	cmp	r3, r9
 80046b0:	dc01      	bgt.n	80046b6 <_printf_float+0x2b2>
 80046b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046b4:	e794      	b.n	80045e0 <_printf_float+0x1dc>
 80046b6:	2301      	movs	r3, #1
 80046b8:	4652      	mov	r2, sl
 80046ba:	4631      	mov	r1, r6
 80046bc:	4628      	mov	r0, r5
 80046be:	47b8      	blx	r7
 80046c0:	3001      	adds	r0, #1
 80046c2:	f43f aefc 	beq.w	80044be <_printf_float+0xba>
 80046c6:	f109 0901 	add.w	r9, r9, #1
 80046ca:	e7ee      	b.n	80046aa <_printf_float+0x2a6>
 80046cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80046ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80046d0:	429a      	cmp	r2, r3
 80046d2:	bfa8      	it	ge
 80046d4:	461a      	movge	r2, r3
 80046d6:	2a00      	cmp	r2, #0
 80046d8:	4691      	mov	r9, r2
 80046da:	dd07      	ble.n	80046ec <_printf_float+0x2e8>
 80046dc:	4613      	mov	r3, r2
 80046de:	4631      	mov	r1, r6
 80046e0:	4642      	mov	r2, r8
 80046e2:	4628      	mov	r0, r5
 80046e4:	47b8      	blx	r7
 80046e6:	3001      	adds	r0, #1
 80046e8:	f43f aee9 	beq.w	80044be <_printf_float+0xba>
 80046ec:	f104 031a 	add.w	r3, r4, #26
 80046f0:	f04f 0b00 	mov.w	fp, #0
 80046f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046f8:	9306      	str	r3, [sp, #24]
 80046fa:	e015      	b.n	8004728 <_printf_float+0x324>
 80046fc:	7fefffff 	.word	0x7fefffff
 8004700:	08007138 	.word	0x08007138
 8004704:	08007134 	.word	0x08007134
 8004708:	08007140 	.word	0x08007140
 800470c:	0800713c 	.word	0x0800713c
 8004710:	08007144 	.word	0x08007144
 8004714:	2301      	movs	r3, #1
 8004716:	9a06      	ldr	r2, [sp, #24]
 8004718:	4631      	mov	r1, r6
 800471a:	4628      	mov	r0, r5
 800471c:	47b8      	blx	r7
 800471e:	3001      	adds	r0, #1
 8004720:	f43f aecd 	beq.w	80044be <_printf_float+0xba>
 8004724:	f10b 0b01 	add.w	fp, fp, #1
 8004728:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800472c:	ebaa 0309 	sub.w	r3, sl, r9
 8004730:	455b      	cmp	r3, fp
 8004732:	dcef      	bgt.n	8004714 <_printf_float+0x310>
 8004734:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004738:	429a      	cmp	r2, r3
 800473a:	44d0      	add	r8, sl
 800473c:	db15      	blt.n	800476a <_printf_float+0x366>
 800473e:	6823      	ldr	r3, [r4, #0]
 8004740:	07da      	lsls	r2, r3, #31
 8004742:	d412      	bmi.n	800476a <_printf_float+0x366>
 8004744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004746:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004748:	eba3 020a 	sub.w	r2, r3, sl
 800474c:	eba3 0a01 	sub.w	sl, r3, r1
 8004750:	4592      	cmp	sl, r2
 8004752:	bfa8      	it	ge
 8004754:	4692      	movge	sl, r2
 8004756:	f1ba 0f00 	cmp.w	sl, #0
 800475a:	dc0e      	bgt.n	800477a <_printf_float+0x376>
 800475c:	f04f 0800 	mov.w	r8, #0
 8004760:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004764:	f104 091a 	add.w	r9, r4, #26
 8004768:	e019      	b.n	800479e <_printf_float+0x39a>
 800476a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800476e:	4631      	mov	r1, r6
 8004770:	4628      	mov	r0, r5
 8004772:	47b8      	blx	r7
 8004774:	3001      	adds	r0, #1
 8004776:	d1e5      	bne.n	8004744 <_printf_float+0x340>
 8004778:	e6a1      	b.n	80044be <_printf_float+0xba>
 800477a:	4653      	mov	r3, sl
 800477c:	4642      	mov	r2, r8
 800477e:	4631      	mov	r1, r6
 8004780:	4628      	mov	r0, r5
 8004782:	47b8      	blx	r7
 8004784:	3001      	adds	r0, #1
 8004786:	d1e9      	bne.n	800475c <_printf_float+0x358>
 8004788:	e699      	b.n	80044be <_printf_float+0xba>
 800478a:	2301      	movs	r3, #1
 800478c:	464a      	mov	r2, r9
 800478e:	4631      	mov	r1, r6
 8004790:	4628      	mov	r0, r5
 8004792:	47b8      	blx	r7
 8004794:	3001      	adds	r0, #1
 8004796:	f43f ae92 	beq.w	80044be <_printf_float+0xba>
 800479a:	f108 0801 	add.w	r8, r8, #1
 800479e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047a2:	1a9b      	subs	r3, r3, r2
 80047a4:	eba3 030a 	sub.w	r3, r3, sl
 80047a8:	4543      	cmp	r3, r8
 80047aa:	dcee      	bgt.n	800478a <_printf_float+0x386>
 80047ac:	e74a      	b.n	8004644 <_printf_float+0x240>
 80047ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80047b0:	2a01      	cmp	r2, #1
 80047b2:	dc01      	bgt.n	80047b8 <_printf_float+0x3b4>
 80047b4:	07db      	lsls	r3, r3, #31
 80047b6:	d53a      	bpl.n	800482e <_printf_float+0x42a>
 80047b8:	2301      	movs	r3, #1
 80047ba:	4642      	mov	r2, r8
 80047bc:	4631      	mov	r1, r6
 80047be:	4628      	mov	r0, r5
 80047c0:	47b8      	blx	r7
 80047c2:	3001      	adds	r0, #1
 80047c4:	f43f ae7b 	beq.w	80044be <_printf_float+0xba>
 80047c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047cc:	4631      	mov	r1, r6
 80047ce:	4628      	mov	r0, r5
 80047d0:	47b8      	blx	r7
 80047d2:	3001      	adds	r0, #1
 80047d4:	f108 0801 	add.w	r8, r8, #1
 80047d8:	f43f ae71 	beq.w	80044be <_printf_float+0xba>
 80047dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047de:	2200      	movs	r2, #0
 80047e0:	f103 3aff 	add.w	sl, r3, #4294967295
 80047e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80047e8:	2300      	movs	r3, #0
 80047ea:	f7fc f919 	bl	8000a20 <__aeabi_dcmpeq>
 80047ee:	b9c8      	cbnz	r0, 8004824 <_printf_float+0x420>
 80047f0:	4653      	mov	r3, sl
 80047f2:	4642      	mov	r2, r8
 80047f4:	4631      	mov	r1, r6
 80047f6:	4628      	mov	r0, r5
 80047f8:	47b8      	blx	r7
 80047fa:	3001      	adds	r0, #1
 80047fc:	d10e      	bne.n	800481c <_printf_float+0x418>
 80047fe:	e65e      	b.n	80044be <_printf_float+0xba>
 8004800:	2301      	movs	r3, #1
 8004802:	4652      	mov	r2, sl
 8004804:	4631      	mov	r1, r6
 8004806:	4628      	mov	r0, r5
 8004808:	47b8      	blx	r7
 800480a:	3001      	adds	r0, #1
 800480c:	f43f ae57 	beq.w	80044be <_printf_float+0xba>
 8004810:	f108 0801 	add.w	r8, r8, #1
 8004814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004816:	3b01      	subs	r3, #1
 8004818:	4543      	cmp	r3, r8
 800481a:	dcf1      	bgt.n	8004800 <_printf_float+0x3fc>
 800481c:	464b      	mov	r3, r9
 800481e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004822:	e6de      	b.n	80045e2 <_printf_float+0x1de>
 8004824:	f04f 0800 	mov.w	r8, #0
 8004828:	f104 0a1a 	add.w	sl, r4, #26
 800482c:	e7f2      	b.n	8004814 <_printf_float+0x410>
 800482e:	2301      	movs	r3, #1
 8004830:	e7df      	b.n	80047f2 <_printf_float+0x3ee>
 8004832:	2301      	movs	r3, #1
 8004834:	464a      	mov	r2, r9
 8004836:	4631      	mov	r1, r6
 8004838:	4628      	mov	r0, r5
 800483a:	47b8      	blx	r7
 800483c:	3001      	adds	r0, #1
 800483e:	f43f ae3e 	beq.w	80044be <_printf_float+0xba>
 8004842:	f108 0801 	add.w	r8, r8, #1
 8004846:	68e3      	ldr	r3, [r4, #12]
 8004848:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800484a:	1a9b      	subs	r3, r3, r2
 800484c:	4543      	cmp	r3, r8
 800484e:	dcf0      	bgt.n	8004832 <_printf_float+0x42e>
 8004850:	e6fc      	b.n	800464c <_printf_float+0x248>
 8004852:	f04f 0800 	mov.w	r8, #0
 8004856:	f104 0919 	add.w	r9, r4, #25
 800485a:	e7f4      	b.n	8004846 <_printf_float+0x442>
 800485c:	2900      	cmp	r1, #0
 800485e:	f43f ae8b 	beq.w	8004578 <_printf_float+0x174>
 8004862:	2300      	movs	r3, #0
 8004864:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004868:	ab09      	add	r3, sp, #36	; 0x24
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	ec49 8b10 	vmov	d0, r8, r9
 8004870:	6022      	str	r2, [r4, #0]
 8004872:	f8cd a004 	str.w	sl, [sp, #4]
 8004876:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800487a:	4628      	mov	r0, r5
 800487c:	f7ff fd2e 	bl	80042dc <__cvt>
 8004880:	4680      	mov	r8, r0
 8004882:	e648      	b.n	8004516 <_printf_float+0x112>

08004884 <_printf_common>:
 8004884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004888:	4691      	mov	r9, r2
 800488a:	461f      	mov	r7, r3
 800488c:	688a      	ldr	r2, [r1, #8]
 800488e:	690b      	ldr	r3, [r1, #16]
 8004890:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004894:	4293      	cmp	r3, r2
 8004896:	bfb8      	it	lt
 8004898:	4613      	movlt	r3, r2
 800489a:	f8c9 3000 	str.w	r3, [r9]
 800489e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048a2:	4606      	mov	r6, r0
 80048a4:	460c      	mov	r4, r1
 80048a6:	b112      	cbz	r2, 80048ae <_printf_common+0x2a>
 80048a8:	3301      	adds	r3, #1
 80048aa:	f8c9 3000 	str.w	r3, [r9]
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	0699      	lsls	r1, r3, #26
 80048b2:	bf42      	ittt	mi
 80048b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80048b8:	3302      	addmi	r3, #2
 80048ba:	f8c9 3000 	strmi.w	r3, [r9]
 80048be:	6825      	ldr	r5, [r4, #0]
 80048c0:	f015 0506 	ands.w	r5, r5, #6
 80048c4:	d107      	bne.n	80048d6 <_printf_common+0x52>
 80048c6:	f104 0a19 	add.w	sl, r4, #25
 80048ca:	68e3      	ldr	r3, [r4, #12]
 80048cc:	f8d9 2000 	ldr.w	r2, [r9]
 80048d0:	1a9b      	subs	r3, r3, r2
 80048d2:	42ab      	cmp	r3, r5
 80048d4:	dc28      	bgt.n	8004928 <_printf_common+0xa4>
 80048d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80048da:	6822      	ldr	r2, [r4, #0]
 80048dc:	3300      	adds	r3, #0
 80048de:	bf18      	it	ne
 80048e0:	2301      	movne	r3, #1
 80048e2:	0692      	lsls	r2, r2, #26
 80048e4:	d42d      	bmi.n	8004942 <_printf_common+0xbe>
 80048e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048ea:	4639      	mov	r1, r7
 80048ec:	4630      	mov	r0, r6
 80048ee:	47c0      	blx	r8
 80048f0:	3001      	adds	r0, #1
 80048f2:	d020      	beq.n	8004936 <_printf_common+0xb2>
 80048f4:	6823      	ldr	r3, [r4, #0]
 80048f6:	68e5      	ldr	r5, [r4, #12]
 80048f8:	f8d9 2000 	ldr.w	r2, [r9]
 80048fc:	f003 0306 	and.w	r3, r3, #6
 8004900:	2b04      	cmp	r3, #4
 8004902:	bf08      	it	eq
 8004904:	1aad      	subeq	r5, r5, r2
 8004906:	68a3      	ldr	r3, [r4, #8]
 8004908:	6922      	ldr	r2, [r4, #16]
 800490a:	bf0c      	ite	eq
 800490c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004910:	2500      	movne	r5, #0
 8004912:	4293      	cmp	r3, r2
 8004914:	bfc4      	itt	gt
 8004916:	1a9b      	subgt	r3, r3, r2
 8004918:	18ed      	addgt	r5, r5, r3
 800491a:	f04f 0900 	mov.w	r9, #0
 800491e:	341a      	adds	r4, #26
 8004920:	454d      	cmp	r5, r9
 8004922:	d11a      	bne.n	800495a <_printf_common+0xd6>
 8004924:	2000      	movs	r0, #0
 8004926:	e008      	b.n	800493a <_printf_common+0xb6>
 8004928:	2301      	movs	r3, #1
 800492a:	4652      	mov	r2, sl
 800492c:	4639      	mov	r1, r7
 800492e:	4630      	mov	r0, r6
 8004930:	47c0      	blx	r8
 8004932:	3001      	adds	r0, #1
 8004934:	d103      	bne.n	800493e <_printf_common+0xba>
 8004936:	f04f 30ff 	mov.w	r0, #4294967295
 800493a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800493e:	3501      	adds	r5, #1
 8004940:	e7c3      	b.n	80048ca <_printf_common+0x46>
 8004942:	18e1      	adds	r1, r4, r3
 8004944:	1c5a      	adds	r2, r3, #1
 8004946:	2030      	movs	r0, #48	; 0x30
 8004948:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800494c:	4422      	add	r2, r4
 800494e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004952:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004956:	3302      	adds	r3, #2
 8004958:	e7c5      	b.n	80048e6 <_printf_common+0x62>
 800495a:	2301      	movs	r3, #1
 800495c:	4622      	mov	r2, r4
 800495e:	4639      	mov	r1, r7
 8004960:	4630      	mov	r0, r6
 8004962:	47c0      	blx	r8
 8004964:	3001      	adds	r0, #1
 8004966:	d0e6      	beq.n	8004936 <_printf_common+0xb2>
 8004968:	f109 0901 	add.w	r9, r9, #1
 800496c:	e7d8      	b.n	8004920 <_printf_common+0x9c>
	...

08004970 <_sbrk_r>:
 8004970:	b538      	push	{r3, r4, r5, lr}
 8004972:	4c06      	ldr	r4, [pc, #24]	; (800498c <_sbrk_r+0x1c>)
 8004974:	2300      	movs	r3, #0
 8004976:	4605      	mov	r5, r0
 8004978:	4608      	mov	r0, r1
 800497a:	6023      	str	r3, [r4, #0]
 800497c:	f7fd fa56 	bl	8001e2c <_sbrk>
 8004980:	1c43      	adds	r3, r0, #1
 8004982:	d102      	bne.n	800498a <_sbrk_r+0x1a>
 8004984:	6823      	ldr	r3, [r4, #0]
 8004986:	b103      	cbz	r3, 800498a <_sbrk_r+0x1a>
 8004988:	602b      	str	r3, [r5, #0]
 800498a:	bd38      	pop	{r3, r4, r5, pc}
 800498c:	200025b8 	.word	0x200025b8

08004990 <strtok>:
 8004990:	4b13      	ldr	r3, [pc, #76]	; (80049e0 <strtok+0x50>)
 8004992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004996:	681d      	ldr	r5, [r3, #0]
 8004998:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800499a:	4606      	mov	r6, r0
 800499c:	460f      	mov	r7, r1
 800499e:	b9b4      	cbnz	r4, 80049ce <strtok+0x3e>
 80049a0:	2050      	movs	r0, #80	; 0x50
 80049a2:	f7ff fbcf 	bl	8004144 <malloc>
 80049a6:	65a8      	str	r0, [r5, #88]	; 0x58
 80049a8:	e9c0 4400 	strd	r4, r4, [r0]
 80049ac:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80049b0:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80049b4:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80049b8:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80049bc:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80049c0:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80049c4:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80049c8:	6184      	str	r4, [r0, #24]
 80049ca:	7704      	strb	r4, [r0, #28]
 80049cc:	6244      	str	r4, [r0, #36]	; 0x24
 80049ce:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80049d0:	4639      	mov	r1, r7
 80049d2:	4630      	mov	r0, r6
 80049d4:	2301      	movs	r3, #1
 80049d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049da:	f000 b803 	b.w	80049e4 <__strtok_r>
 80049de:	bf00      	nop
 80049e0:	2000000c 	.word	0x2000000c

080049e4 <__strtok_r>:
 80049e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049e6:	b918      	cbnz	r0, 80049f0 <__strtok_r+0xc>
 80049e8:	6810      	ldr	r0, [r2, #0]
 80049ea:	b908      	cbnz	r0, 80049f0 <__strtok_r+0xc>
 80049ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049ee:	4620      	mov	r0, r4
 80049f0:	4604      	mov	r4, r0
 80049f2:	460f      	mov	r7, r1
 80049f4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80049f8:	f817 6b01 	ldrb.w	r6, [r7], #1
 80049fc:	b91e      	cbnz	r6, 8004a06 <__strtok_r+0x22>
 80049fe:	b96d      	cbnz	r5, 8004a1c <__strtok_r+0x38>
 8004a00:	6015      	str	r5, [r2, #0]
 8004a02:	4628      	mov	r0, r5
 8004a04:	e7f2      	b.n	80049ec <__strtok_r+0x8>
 8004a06:	42b5      	cmp	r5, r6
 8004a08:	d1f6      	bne.n	80049f8 <__strtok_r+0x14>
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1ef      	bne.n	80049ee <__strtok_r+0xa>
 8004a0e:	6014      	str	r4, [r2, #0]
 8004a10:	7003      	strb	r3, [r0, #0]
 8004a12:	e7eb      	b.n	80049ec <__strtok_r+0x8>
 8004a14:	462b      	mov	r3, r5
 8004a16:	e00d      	b.n	8004a34 <__strtok_r+0x50>
 8004a18:	b926      	cbnz	r6, 8004a24 <__strtok_r+0x40>
 8004a1a:	461c      	mov	r4, r3
 8004a1c:	4623      	mov	r3, r4
 8004a1e:	460f      	mov	r7, r1
 8004a20:	f813 5b01 	ldrb.w	r5, [r3], #1
 8004a24:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004a28:	42b5      	cmp	r5, r6
 8004a2a:	d1f5      	bne.n	8004a18 <__strtok_r+0x34>
 8004a2c:	2d00      	cmp	r5, #0
 8004a2e:	d0f1      	beq.n	8004a14 <__strtok_r+0x30>
 8004a30:	2100      	movs	r1, #0
 8004a32:	7021      	strb	r1, [r4, #0]
 8004a34:	6013      	str	r3, [r2, #0]
 8004a36:	e7d9      	b.n	80049ec <__strtok_r+0x8>

08004a38 <_strtol_l.isra.0>:
 8004a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a3c:	4680      	mov	r8, r0
 8004a3e:	4689      	mov	r9, r1
 8004a40:	4692      	mov	sl, r2
 8004a42:	461e      	mov	r6, r3
 8004a44:	460f      	mov	r7, r1
 8004a46:	463d      	mov	r5, r7
 8004a48:	9808      	ldr	r0, [sp, #32]
 8004a4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004a4e:	f000 fecb 	bl	80057e8 <__locale_ctype_ptr_l>
 8004a52:	4420      	add	r0, r4
 8004a54:	7843      	ldrb	r3, [r0, #1]
 8004a56:	f013 0308 	ands.w	r3, r3, #8
 8004a5a:	d132      	bne.n	8004ac2 <_strtol_l.isra.0+0x8a>
 8004a5c:	2c2d      	cmp	r4, #45	; 0x2d
 8004a5e:	d132      	bne.n	8004ac6 <_strtol_l.isra.0+0x8e>
 8004a60:	787c      	ldrb	r4, [r7, #1]
 8004a62:	1cbd      	adds	r5, r7, #2
 8004a64:	2201      	movs	r2, #1
 8004a66:	2e00      	cmp	r6, #0
 8004a68:	d05d      	beq.n	8004b26 <_strtol_l.isra.0+0xee>
 8004a6a:	2e10      	cmp	r6, #16
 8004a6c:	d109      	bne.n	8004a82 <_strtol_l.isra.0+0x4a>
 8004a6e:	2c30      	cmp	r4, #48	; 0x30
 8004a70:	d107      	bne.n	8004a82 <_strtol_l.isra.0+0x4a>
 8004a72:	782b      	ldrb	r3, [r5, #0]
 8004a74:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004a78:	2b58      	cmp	r3, #88	; 0x58
 8004a7a:	d14f      	bne.n	8004b1c <_strtol_l.isra.0+0xe4>
 8004a7c:	786c      	ldrb	r4, [r5, #1]
 8004a7e:	2610      	movs	r6, #16
 8004a80:	3502      	adds	r5, #2
 8004a82:	2a00      	cmp	r2, #0
 8004a84:	bf14      	ite	ne
 8004a86:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8004a8a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8004a8e:	2700      	movs	r7, #0
 8004a90:	fbb1 fcf6 	udiv	ip, r1, r6
 8004a94:	4638      	mov	r0, r7
 8004a96:	fb06 1e1c 	mls	lr, r6, ip, r1
 8004a9a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8004a9e:	2b09      	cmp	r3, #9
 8004aa0:	d817      	bhi.n	8004ad2 <_strtol_l.isra.0+0x9a>
 8004aa2:	461c      	mov	r4, r3
 8004aa4:	42a6      	cmp	r6, r4
 8004aa6:	dd23      	ble.n	8004af0 <_strtol_l.isra.0+0xb8>
 8004aa8:	1c7b      	adds	r3, r7, #1
 8004aaa:	d007      	beq.n	8004abc <_strtol_l.isra.0+0x84>
 8004aac:	4584      	cmp	ip, r0
 8004aae:	d31c      	bcc.n	8004aea <_strtol_l.isra.0+0xb2>
 8004ab0:	d101      	bne.n	8004ab6 <_strtol_l.isra.0+0x7e>
 8004ab2:	45a6      	cmp	lr, r4
 8004ab4:	db19      	blt.n	8004aea <_strtol_l.isra.0+0xb2>
 8004ab6:	fb00 4006 	mla	r0, r0, r6, r4
 8004aba:	2701      	movs	r7, #1
 8004abc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004ac0:	e7eb      	b.n	8004a9a <_strtol_l.isra.0+0x62>
 8004ac2:	462f      	mov	r7, r5
 8004ac4:	e7bf      	b.n	8004a46 <_strtol_l.isra.0+0xe>
 8004ac6:	2c2b      	cmp	r4, #43	; 0x2b
 8004ac8:	bf04      	itt	eq
 8004aca:	1cbd      	addeq	r5, r7, #2
 8004acc:	787c      	ldrbeq	r4, [r7, #1]
 8004ace:	461a      	mov	r2, r3
 8004ad0:	e7c9      	b.n	8004a66 <_strtol_l.isra.0+0x2e>
 8004ad2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004ad6:	2b19      	cmp	r3, #25
 8004ad8:	d801      	bhi.n	8004ade <_strtol_l.isra.0+0xa6>
 8004ada:	3c37      	subs	r4, #55	; 0x37
 8004adc:	e7e2      	b.n	8004aa4 <_strtol_l.isra.0+0x6c>
 8004ade:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8004ae2:	2b19      	cmp	r3, #25
 8004ae4:	d804      	bhi.n	8004af0 <_strtol_l.isra.0+0xb8>
 8004ae6:	3c57      	subs	r4, #87	; 0x57
 8004ae8:	e7dc      	b.n	8004aa4 <_strtol_l.isra.0+0x6c>
 8004aea:	f04f 37ff 	mov.w	r7, #4294967295
 8004aee:	e7e5      	b.n	8004abc <_strtol_l.isra.0+0x84>
 8004af0:	1c7b      	adds	r3, r7, #1
 8004af2:	d108      	bne.n	8004b06 <_strtol_l.isra.0+0xce>
 8004af4:	2322      	movs	r3, #34	; 0x22
 8004af6:	f8c8 3000 	str.w	r3, [r8]
 8004afa:	4608      	mov	r0, r1
 8004afc:	f1ba 0f00 	cmp.w	sl, #0
 8004b00:	d107      	bne.n	8004b12 <_strtol_l.isra.0+0xda>
 8004b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b06:	b102      	cbz	r2, 8004b0a <_strtol_l.isra.0+0xd2>
 8004b08:	4240      	negs	r0, r0
 8004b0a:	f1ba 0f00 	cmp.w	sl, #0
 8004b0e:	d0f8      	beq.n	8004b02 <_strtol_l.isra.0+0xca>
 8004b10:	b10f      	cbz	r7, 8004b16 <_strtol_l.isra.0+0xde>
 8004b12:	f105 39ff 	add.w	r9, r5, #4294967295
 8004b16:	f8ca 9000 	str.w	r9, [sl]
 8004b1a:	e7f2      	b.n	8004b02 <_strtol_l.isra.0+0xca>
 8004b1c:	2430      	movs	r4, #48	; 0x30
 8004b1e:	2e00      	cmp	r6, #0
 8004b20:	d1af      	bne.n	8004a82 <_strtol_l.isra.0+0x4a>
 8004b22:	2608      	movs	r6, #8
 8004b24:	e7ad      	b.n	8004a82 <_strtol_l.isra.0+0x4a>
 8004b26:	2c30      	cmp	r4, #48	; 0x30
 8004b28:	d0a3      	beq.n	8004a72 <_strtol_l.isra.0+0x3a>
 8004b2a:	260a      	movs	r6, #10
 8004b2c:	e7a9      	b.n	8004a82 <_strtol_l.isra.0+0x4a>
	...

08004b30 <strtol>:
 8004b30:	4b08      	ldr	r3, [pc, #32]	; (8004b54 <strtol+0x24>)
 8004b32:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b34:	681c      	ldr	r4, [r3, #0]
 8004b36:	4d08      	ldr	r5, [pc, #32]	; (8004b58 <strtol+0x28>)
 8004b38:	6a23      	ldr	r3, [r4, #32]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	bf08      	it	eq
 8004b3e:	462b      	moveq	r3, r5
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	4613      	mov	r3, r2
 8004b44:	460a      	mov	r2, r1
 8004b46:	4601      	mov	r1, r0
 8004b48:	4620      	mov	r0, r4
 8004b4a:	f7ff ff75 	bl	8004a38 <_strtol_l.isra.0>
 8004b4e:	b003      	add	sp, #12
 8004b50:	bd30      	pop	{r4, r5, pc}
 8004b52:	bf00      	nop
 8004b54:	2000000c 	.word	0x2000000c
 8004b58:	20000070 	.word	0x20000070

08004b5c <quorem>:
 8004b5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b60:	6903      	ldr	r3, [r0, #16]
 8004b62:	690c      	ldr	r4, [r1, #16]
 8004b64:	42a3      	cmp	r3, r4
 8004b66:	4680      	mov	r8, r0
 8004b68:	f2c0 8082 	blt.w	8004c70 <quorem+0x114>
 8004b6c:	3c01      	subs	r4, #1
 8004b6e:	f101 0714 	add.w	r7, r1, #20
 8004b72:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004b76:	f100 0614 	add.w	r6, r0, #20
 8004b7a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004b7e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004b82:	eb06 030c 	add.w	r3, r6, ip
 8004b86:	3501      	adds	r5, #1
 8004b88:	eb07 090c 	add.w	r9, r7, ip
 8004b8c:	9301      	str	r3, [sp, #4]
 8004b8e:	fbb0 f5f5 	udiv	r5, r0, r5
 8004b92:	b395      	cbz	r5, 8004bfa <quorem+0x9e>
 8004b94:	f04f 0a00 	mov.w	sl, #0
 8004b98:	4638      	mov	r0, r7
 8004b9a:	46b6      	mov	lr, r6
 8004b9c:	46d3      	mov	fp, sl
 8004b9e:	f850 2b04 	ldr.w	r2, [r0], #4
 8004ba2:	b293      	uxth	r3, r2
 8004ba4:	fb05 a303 	mla	r3, r5, r3, sl
 8004ba8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	ebab 0303 	sub.w	r3, fp, r3
 8004bb2:	0c12      	lsrs	r2, r2, #16
 8004bb4:	f8de b000 	ldr.w	fp, [lr]
 8004bb8:	fb05 a202 	mla	r2, r5, r2, sl
 8004bbc:	fa13 f38b 	uxtah	r3, r3, fp
 8004bc0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004bc4:	fa1f fb82 	uxth.w	fp, r2
 8004bc8:	f8de 2000 	ldr.w	r2, [lr]
 8004bcc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004bd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bda:	4581      	cmp	r9, r0
 8004bdc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004be0:	f84e 3b04 	str.w	r3, [lr], #4
 8004be4:	d2db      	bcs.n	8004b9e <quorem+0x42>
 8004be6:	f856 300c 	ldr.w	r3, [r6, ip]
 8004bea:	b933      	cbnz	r3, 8004bfa <quorem+0x9e>
 8004bec:	9b01      	ldr	r3, [sp, #4]
 8004bee:	3b04      	subs	r3, #4
 8004bf0:	429e      	cmp	r6, r3
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	d330      	bcc.n	8004c58 <quorem+0xfc>
 8004bf6:	f8c8 4010 	str.w	r4, [r8, #16]
 8004bfa:	4640      	mov	r0, r8
 8004bfc:	f001 f830 	bl	8005c60 <__mcmp>
 8004c00:	2800      	cmp	r0, #0
 8004c02:	db25      	blt.n	8004c50 <quorem+0xf4>
 8004c04:	3501      	adds	r5, #1
 8004c06:	4630      	mov	r0, r6
 8004c08:	f04f 0c00 	mov.w	ip, #0
 8004c0c:	f857 2b04 	ldr.w	r2, [r7], #4
 8004c10:	f8d0 e000 	ldr.w	lr, [r0]
 8004c14:	b293      	uxth	r3, r2
 8004c16:	ebac 0303 	sub.w	r3, ip, r3
 8004c1a:	0c12      	lsrs	r2, r2, #16
 8004c1c:	fa13 f38e 	uxtah	r3, r3, lr
 8004c20:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004c24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c2e:	45b9      	cmp	r9, r7
 8004c30:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004c34:	f840 3b04 	str.w	r3, [r0], #4
 8004c38:	d2e8      	bcs.n	8004c0c <quorem+0xb0>
 8004c3a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004c3e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004c42:	b92a      	cbnz	r2, 8004c50 <quorem+0xf4>
 8004c44:	3b04      	subs	r3, #4
 8004c46:	429e      	cmp	r6, r3
 8004c48:	461a      	mov	r2, r3
 8004c4a:	d30b      	bcc.n	8004c64 <quorem+0x108>
 8004c4c:	f8c8 4010 	str.w	r4, [r8, #16]
 8004c50:	4628      	mov	r0, r5
 8004c52:	b003      	add	sp, #12
 8004c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c58:	6812      	ldr	r2, [r2, #0]
 8004c5a:	3b04      	subs	r3, #4
 8004c5c:	2a00      	cmp	r2, #0
 8004c5e:	d1ca      	bne.n	8004bf6 <quorem+0x9a>
 8004c60:	3c01      	subs	r4, #1
 8004c62:	e7c5      	b.n	8004bf0 <quorem+0x94>
 8004c64:	6812      	ldr	r2, [r2, #0]
 8004c66:	3b04      	subs	r3, #4
 8004c68:	2a00      	cmp	r2, #0
 8004c6a:	d1ef      	bne.n	8004c4c <quorem+0xf0>
 8004c6c:	3c01      	subs	r4, #1
 8004c6e:	e7ea      	b.n	8004c46 <quorem+0xea>
 8004c70:	2000      	movs	r0, #0
 8004c72:	e7ee      	b.n	8004c52 <quorem+0xf6>
 8004c74:	0000      	movs	r0, r0
	...

08004c78 <_dtoa_r>:
 8004c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c7c:	ec57 6b10 	vmov	r6, r7, d0
 8004c80:	b097      	sub	sp, #92	; 0x5c
 8004c82:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004c84:	9106      	str	r1, [sp, #24]
 8004c86:	4604      	mov	r4, r0
 8004c88:	920b      	str	r2, [sp, #44]	; 0x2c
 8004c8a:	9312      	str	r3, [sp, #72]	; 0x48
 8004c8c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004c90:	e9cd 6700 	strd	r6, r7, [sp]
 8004c94:	b93d      	cbnz	r5, 8004ca6 <_dtoa_r+0x2e>
 8004c96:	2010      	movs	r0, #16
 8004c98:	f7ff fa54 	bl	8004144 <malloc>
 8004c9c:	6260      	str	r0, [r4, #36]	; 0x24
 8004c9e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004ca2:	6005      	str	r5, [r0, #0]
 8004ca4:	60c5      	str	r5, [r0, #12]
 8004ca6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ca8:	6819      	ldr	r1, [r3, #0]
 8004caa:	b151      	cbz	r1, 8004cc2 <_dtoa_r+0x4a>
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	604a      	str	r2, [r1, #4]
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	4093      	lsls	r3, r2
 8004cb4:	608b      	str	r3, [r1, #8]
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	f000 fdf0 	bl	800589c <_Bfree>
 8004cbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	601a      	str	r2, [r3, #0]
 8004cc2:	1e3b      	subs	r3, r7, #0
 8004cc4:	bfbb      	ittet	lt
 8004cc6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004cca:	9301      	strlt	r3, [sp, #4]
 8004ccc:	2300      	movge	r3, #0
 8004cce:	2201      	movlt	r2, #1
 8004cd0:	bfac      	ite	ge
 8004cd2:	f8c8 3000 	strge.w	r3, [r8]
 8004cd6:	f8c8 2000 	strlt.w	r2, [r8]
 8004cda:	4baf      	ldr	r3, [pc, #700]	; (8004f98 <_dtoa_r+0x320>)
 8004cdc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004ce0:	ea33 0308 	bics.w	r3, r3, r8
 8004ce4:	d114      	bne.n	8004d10 <_dtoa_r+0x98>
 8004ce6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004ce8:	f242 730f 	movw	r3, #9999	; 0x270f
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	9b00      	ldr	r3, [sp, #0]
 8004cf0:	b923      	cbnz	r3, 8004cfc <_dtoa_r+0x84>
 8004cf2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004cf6:	2800      	cmp	r0, #0
 8004cf8:	f000 8542 	beq.w	8005780 <_dtoa_r+0xb08>
 8004cfc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004cfe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8004fac <_dtoa_r+0x334>
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f000 8544 	beq.w	8005790 <_dtoa_r+0xb18>
 8004d08:	f10b 0303 	add.w	r3, fp, #3
 8004d0c:	f000 bd3e 	b.w	800578c <_dtoa_r+0xb14>
 8004d10:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004d14:	2200      	movs	r2, #0
 8004d16:	2300      	movs	r3, #0
 8004d18:	4630      	mov	r0, r6
 8004d1a:	4639      	mov	r1, r7
 8004d1c:	f7fb fe80 	bl	8000a20 <__aeabi_dcmpeq>
 8004d20:	4681      	mov	r9, r0
 8004d22:	b168      	cbz	r0, 8004d40 <_dtoa_r+0xc8>
 8004d24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004d26:	2301      	movs	r3, #1
 8004d28:	6013      	str	r3, [r2, #0]
 8004d2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 8524 	beq.w	800577a <_dtoa_r+0xb02>
 8004d32:	4b9a      	ldr	r3, [pc, #616]	; (8004f9c <_dtoa_r+0x324>)
 8004d34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004d36:	f103 3bff 	add.w	fp, r3, #4294967295
 8004d3a:	6013      	str	r3, [r2, #0]
 8004d3c:	f000 bd28 	b.w	8005790 <_dtoa_r+0xb18>
 8004d40:	aa14      	add	r2, sp, #80	; 0x50
 8004d42:	a915      	add	r1, sp, #84	; 0x54
 8004d44:	ec47 6b10 	vmov	d0, r6, r7
 8004d48:	4620      	mov	r0, r4
 8004d4a:	f001 f800 	bl	8005d4e <__d2b>
 8004d4e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004d52:	9004      	str	r0, [sp, #16]
 8004d54:	2d00      	cmp	r5, #0
 8004d56:	d07c      	beq.n	8004e52 <_dtoa_r+0x1da>
 8004d58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004d5c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8004d60:	46b2      	mov	sl, r6
 8004d62:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8004d66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004d6a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8004d6e:	2200      	movs	r2, #0
 8004d70:	4b8b      	ldr	r3, [pc, #556]	; (8004fa0 <_dtoa_r+0x328>)
 8004d72:	4650      	mov	r0, sl
 8004d74:	4659      	mov	r1, fp
 8004d76:	f7fb fa33 	bl	80001e0 <__aeabi_dsub>
 8004d7a:	a381      	add	r3, pc, #516	; (adr r3, 8004f80 <_dtoa_r+0x308>)
 8004d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d80:	f7fb fbe6 	bl	8000550 <__aeabi_dmul>
 8004d84:	a380      	add	r3, pc, #512	; (adr r3, 8004f88 <_dtoa_r+0x310>)
 8004d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8a:	f7fb fa2b 	bl	80001e4 <__adddf3>
 8004d8e:	4606      	mov	r6, r0
 8004d90:	4628      	mov	r0, r5
 8004d92:	460f      	mov	r7, r1
 8004d94:	f7fb fb72 	bl	800047c <__aeabi_i2d>
 8004d98:	a37d      	add	r3, pc, #500	; (adr r3, 8004f90 <_dtoa_r+0x318>)
 8004d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9e:	f7fb fbd7 	bl	8000550 <__aeabi_dmul>
 8004da2:	4602      	mov	r2, r0
 8004da4:	460b      	mov	r3, r1
 8004da6:	4630      	mov	r0, r6
 8004da8:	4639      	mov	r1, r7
 8004daa:	f7fb fa1b 	bl	80001e4 <__adddf3>
 8004dae:	4606      	mov	r6, r0
 8004db0:	460f      	mov	r7, r1
 8004db2:	f7fb fe7d 	bl	8000ab0 <__aeabi_d2iz>
 8004db6:	2200      	movs	r2, #0
 8004db8:	4682      	mov	sl, r0
 8004dba:	2300      	movs	r3, #0
 8004dbc:	4630      	mov	r0, r6
 8004dbe:	4639      	mov	r1, r7
 8004dc0:	f7fb fe38 	bl	8000a34 <__aeabi_dcmplt>
 8004dc4:	b148      	cbz	r0, 8004dda <_dtoa_r+0x162>
 8004dc6:	4650      	mov	r0, sl
 8004dc8:	f7fb fb58 	bl	800047c <__aeabi_i2d>
 8004dcc:	4632      	mov	r2, r6
 8004dce:	463b      	mov	r3, r7
 8004dd0:	f7fb fe26 	bl	8000a20 <__aeabi_dcmpeq>
 8004dd4:	b908      	cbnz	r0, 8004dda <_dtoa_r+0x162>
 8004dd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004dda:	f1ba 0f16 	cmp.w	sl, #22
 8004dde:	d859      	bhi.n	8004e94 <_dtoa_r+0x21c>
 8004de0:	4970      	ldr	r1, [pc, #448]	; (8004fa4 <_dtoa_r+0x32c>)
 8004de2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004de6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004dea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004dee:	f7fb fe3f 	bl	8000a70 <__aeabi_dcmpgt>
 8004df2:	2800      	cmp	r0, #0
 8004df4:	d050      	beq.n	8004e98 <_dtoa_r+0x220>
 8004df6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	930f      	str	r3, [sp, #60]	; 0x3c
 8004dfe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004e00:	1b5d      	subs	r5, r3, r5
 8004e02:	f1b5 0801 	subs.w	r8, r5, #1
 8004e06:	bf49      	itett	mi
 8004e08:	f1c5 0301 	rsbmi	r3, r5, #1
 8004e0c:	2300      	movpl	r3, #0
 8004e0e:	9305      	strmi	r3, [sp, #20]
 8004e10:	f04f 0800 	movmi.w	r8, #0
 8004e14:	bf58      	it	pl
 8004e16:	9305      	strpl	r3, [sp, #20]
 8004e18:	f1ba 0f00 	cmp.w	sl, #0
 8004e1c:	db3e      	blt.n	8004e9c <_dtoa_r+0x224>
 8004e1e:	2300      	movs	r3, #0
 8004e20:	44d0      	add	r8, sl
 8004e22:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004e26:	9307      	str	r3, [sp, #28]
 8004e28:	9b06      	ldr	r3, [sp, #24]
 8004e2a:	2b09      	cmp	r3, #9
 8004e2c:	f200 8090 	bhi.w	8004f50 <_dtoa_r+0x2d8>
 8004e30:	2b05      	cmp	r3, #5
 8004e32:	bfc4      	itt	gt
 8004e34:	3b04      	subgt	r3, #4
 8004e36:	9306      	strgt	r3, [sp, #24]
 8004e38:	9b06      	ldr	r3, [sp, #24]
 8004e3a:	f1a3 0302 	sub.w	r3, r3, #2
 8004e3e:	bfcc      	ite	gt
 8004e40:	2500      	movgt	r5, #0
 8004e42:	2501      	movle	r5, #1
 8004e44:	2b03      	cmp	r3, #3
 8004e46:	f200 808f 	bhi.w	8004f68 <_dtoa_r+0x2f0>
 8004e4a:	e8df f003 	tbb	[pc, r3]
 8004e4e:	7f7d      	.short	0x7f7d
 8004e50:	7131      	.short	0x7131
 8004e52:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8004e56:	441d      	add	r5, r3
 8004e58:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004e5c:	2820      	cmp	r0, #32
 8004e5e:	dd13      	ble.n	8004e88 <_dtoa_r+0x210>
 8004e60:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004e64:	9b00      	ldr	r3, [sp, #0]
 8004e66:	fa08 f800 	lsl.w	r8, r8, r0
 8004e6a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004e6e:	fa23 f000 	lsr.w	r0, r3, r0
 8004e72:	ea48 0000 	orr.w	r0, r8, r0
 8004e76:	f7fb faf1 	bl	800045c <__aeabi_ui2d>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	4682      	mov	sl, r0
 8004e7e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8004e82:	3d01      	subs	r5, #1
 8004e84:	9313      	str	r3, [sp, #76]	; 0x4c
 8004e86:	e772      	b.n	8004d6e <_dtoa_r+0xf6>
 8004e88:	9b00      	ldr	r3, [sp, #0]
 8004e8a:	f1c0 0020 	rsb	r0, r0, #32
 8004e8e:	fa03 f000 	lsl.w	r0, r3, r0
 8004e92:	e7f0      	b.n	8004e76 <_dtoa_r+0x1fe>
 8004e94:	2301      	movs	r3, #1
 8004e96:	e7b1      	b.n	8004dfc <_dtoa_r+0x184>
 8004e98:	900f      	str	r0, [sp, #60]	; 0x3c
 8004e9a:	e7b0      	b.n	8004dfe <_dtoa_r+0x186>
 8004e9c:	9b05      	ldr	r3, [sp, #20]
 8004e9e:	eba3 030a 	sub.w	r3, r3, sl
 8004ea2:	9305      	str	r3, [sp, #20]
 8004ea4:	f1ca 0300 	rsb	r3, sl, #0
 8004ea8:	9307      	str	r3, [sp, #28]
 8004eaa:	2300      	movs	r3, #0
 8004eac:	930e      	str	r3, [sp, #56]	; 0x38
 8004eae:	e7bb      	b.n	8004e28 <_dtoa_r+0x1b0>
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	930a      	str	r3, [sp, #40]	; 0x28
 8004eb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	dd59      	ble.n	8004f6e <_dtoa_r+0x2f6>
 8004eba:	9302      	str	r3, [sp, #8]
 8004ebc:	4699      	mov	r9, r3
 8004ebe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	6072      	str	r2, [r6, #4]
 8004ec4:	2204      	movs	r2, #4
 8004ec6:	f102 0014 	add.w	r0, r2, #20
 8004eca:	4298      	cmp	r0, r3
 8004ecc:	6871      	ldr	r1, [r6, #4]
 8004ece:	d953      	bls.n	8004f78 <_dtoa_r+0x300>
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	f000 fcaf 	bl	8005834 <_Balloc>
 8004ed6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ed8:	6030      	str	r0, [r6, #0]
 8004eda:	f1b9 0f0e 	cmp.w	r9, #14
 8004ede:	f8d3 b000 	ldr.w	fp, [r3]
 8004ee2:	f200 80e6 	bhi.w	80050b2 <_dtoa_r+0x43a>
 8004ee6:	2d00      	cmp	r5, #0
 8004ee8:	f000 80e3 	beq.w	80050b2 <_dtoa_r+0x43a>
 8004eec:	ed9d 7b00 	vldr	d7, [sp]
 8004ef0:	f1ba 0f00 	cmp.w	sl, #0
 8004ef4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004ef8:	dd74      	ble.n	8004fe4 <_dtoa_r+0x36c>
 8004efa:	4a2a      	ldr	r2, [pc, #168]	; (8004fa4 <_dtoa_r+0x32c>)
 8004efc:	f00a 030f 	and.w	r3, sl, #15
 8004f00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004f04:	ed93 7b00 	vldr	d7, [r3]
 8004f08:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004f0c:	06f0      	lsls	r0, r6, #27
 8004f0e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004f12:	d565      	bpl.n	8004fe0 <_dtoa_r+0x368>
 8004f14:	4b24      	ldr	r3, [pc, #144]	; (8004fa8 <_dtoa_r+0x330>)
 8004f16:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004f1a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004f1e:	f7fb fc41 	bl	80007a4 <__aeabi_ddiv>
 8004f22:	e9cd 0100 	strd	r0, r1, [sp]
 8004f26:	f006 060f 	and.w	r6, r6, #15
 8004f2a:	2503      	movs	r5, #3
 8004f2c:	4f1e      	ldr	r7, [pc, #120]	; (8004fa8 <_dtoa_r+0x330>)
 8004f2e:	e04c      	b.n	8004fca <_dtoa_r+0x352>
 8004f30:	2301      	movs	r3, #1
 8004f32:	930a      	str	r3, [sp, #40]	; 0x28
 8004f34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f36:	4453      	add	r3, sl
 8004f38:	f103 0901 	add.w	r9, r3, #1
 8004f3c:	9302      	str	r3, [sp, #8]
 8004f3e:	464b      	mov	r3, r9
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	bfb8      	it	lt
 8004f44:	2301      	movlt	r3, #1
 8004f46:	e7ba      	b.n	8004ebe <_dtoa_r+0x246>
 8004f48:	2300      	movs	r3, #0
 8004f4a:	e7b2      	b.n	8004eb2 <_dtoa_r+0x23a>
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	e7f0      	b.n	8004f32 <_dtoa_r+0x2ba>
 8004f50:	2501      	movs	r5, #1
 8004f52:	2300      	movs	r3, #0
 8004f54:	9306      	str	r3, [sp, #24]
 8004f56:	950a      	str	r5, [sp, #40]	; 0x28
 8004f58:	f04f 33ff 	mov.w	r3, #4294967295
 8004f5c:	9302      	str	r3, [sp, #8]
 8004f5e:	4699      	mov	r9, r3
 8004f60:	2200      	movs	r2, #0
 8004f62:	2312      	movs	r3, #18
 8004f64:	920b      	str	r2, [sp, #44]	; 0x2c
 8004f66:	e7aa      	b.n	8004ebe <_dtoa_r+0x246>
 8004f68:	2301      	movs	r3, #1
 8004f6a:	930a      	str	r3, [sp, #40]	; 0x28
 8004f6c:	e7f4      	b.n	8004f58 <_dtoa_r+0x2e0>
 8004f6e:	2301      	movs	r3, #1
 8004f70:	9302      	str	r3, [sp, #8]
 8004f72:	4699      	mov	r9, r3
 8004f74:	461a      	mov	r2, r3
 8004f76:	e7f5      	b.n	8004f64 <_dtoa_r+0x2ec>
 8004f78:	3101      	adds	r1, #1
 8004f7a:	6071      	str	r1, [r6, #4]
 8004f7c:	0052      	lsls	r2, r2, #1
 8004f7e:	e7a2      	b.n	8004ec6 <_dtoa_r+0x24e>
 8004f80:	636f4361 	.word	0x636f4361
 8004f84:	3fd287a7 	.word	0x3fd287a7
 8004f88:	8b60c8b3 	.word	0x8b60c8b3
 8004f8c:	3fc68a28 	.word	0x3fc68a28
 8004f90:	509f79fb 	.word	0x509f79fb
 8004f94:	3fd34413 	.word	0x3fd34413
 8004f98:	7ff00000 	.word	0x7ff00000
 8004f9c:	08007145 	.word	0x08007145
 8004fa0:	3ff80000 	.word	0x3ff80000
 8004fa4:	08007188 	.word	0x08007188
 8004fa8:	08007160 	.word	0x08007160
 8004fac:	0800714f 	.word	0x0800714f
 8004fb0:	07f1      	lsls	r1, r6, #31
 8004fb2:	d508      	bpl.n	8004fc6 <_dtoa_r+0x34e>
 8004fb4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004fb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fbc:	f7fb fac8 	bl	8000550 <__aeabi_dmul>
 8004fc0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004fc4:	3501      	adds	r5, #1
 8004fc6:	1076      	asrs	r6, r6, #1
 8004fc8:	3708      	adds	r7, #8
 8004fca:	2e00      	cmp	r6, #0
 8004fcc:	d1f0      	bne.n	8004fb0 <_dtoa_r+0x338>
 8004fce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004fd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004fd6:	f7fb fbe5 	bl	80007a4 <__aeabi_ddiv>
 8004fda:	e9cd 0100 	strd	r0, r1, [sp]
 8004fde:	e01a      	b.n	8005016 <_dtoa_r+0x39e>
 8004fe0:	2502      	movs	r5, #2
 8004fe2:	e7a3      	b.n	8004f2c <_dtoa_r+0x2b4>
 8004fe4:	f000 80a0 	beq.w	8005128 <_dtoa_r+0x4b0>
 8004fe8:	f1ca 0600 	rsb	r6, sl, #0
 8004fec:	4b9f      	ldr	r3, [pc, #636]	; (800526c <_dtoa_r+0x5f4>)
 8004fee:	4fa0      	ldr	r7, [pc, #640]	; (8005270 <_dtoa_r+0x5f8>)
 8004ff0:	f006 020f 	and.w	r2, r6, #15
 8004ff4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005000:	f7fb faa6 	bl	8000550 <__aeabi_dmul>
 8005004:	e9cd 0100 	strd	r0, r1, [sp]
 8005008:	1136      	asrs	r6, r6, #4
 800500a:	2300      	movs	r3, #0
 800500c:	2502      	movs	r5, #2
 800500e:	2e00      	cmp	r6, #0
 8005010:	d17f      	bne.n	8005112 <_dtoa_r+0x49a>
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1e1      	bne.n	8004fda <_dtoa_r+0x362>
 8005016:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005018:	2b00      	cmp	r3, #0
 800501a:	f000 8087 	beq.w	800512c <_dtoa_r+0x4b4>
 800501e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005022:	2200      	movs	r2, #0
 8005024:	4b93      	ldr	r3, [pc, #588]	; (8005274 <_dtoa_r+0x5fc>)
 8005026:	4630      	mov	r0, r6
 8005028:	4639      	mov	r1, r7
 800502a:	f7fb fd03 	bl	8000a34 <__aeabi_dcmplt>
 800502e:	2800      	cmp	r0, #0
 8005030:	d07c      	beq.n	800512c <_dtoa_r+0x4b4>
 8005032:	f1b9 0f00 	cmp.w	r9, #0
 8005036:	d079      	beq.n	800512c <_dtoa_r+0x4b4>
 8005038:	9b02      	ldr	r3, [sp, #8]
 800503a:	2b00      	cmp	r3, #0
 800503c:	dd35      	ble.n	80050aa <_dtoa_r+0x432>
 800503e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005042:	9308      	str	r3, [sp, #32]
 8005044:	4639      	mov	r1, r7
 8005046:	2200      	movs	r2, #0
 8005048:	4b8b      	ldr	r3, [pc, #556]	; (8005278 <_dtoa_r+0x600>)
 800504a:	4630      	mov	r0, r6
 800504c:	f7fb fa80 	bl	8000550 <__aeabi_dmul>
 8005050:	e9cd 0100 	strd	r0, r1, [sp]
 8005054:	9f02      	ldr	r7, [sp, #8]
 8005056:	3501      	adds	r5, #1
 8005058:	4628      	mov	r0, r5
 800505a:	f7fb fa0f 	bl	800047c <__aeabi_i2d>
 800505e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005062:	f7fb fa75 	bl	8000550 <__aeabi_dmul>
 8005066:	2200      	movs	r2, #0
 8005068:	4b84      	ldr	r3, [pc, #528]	; (800527c <_dtoa_r+0x604>)
 800506a:	f7fb f8bb 	bl	80001e4 <__adddf3>
 800506e:	4605      	mov	r5, r0
 8005070:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005074:	2f00      	cmp	r7, #0
 8005076:	d15d      	bne.n	8005134 <_dtoa_r+0x4bc>
 8005078:	2200      	movs	r2, #0
 800507a:	4b81      	ldr	r3, [pc, #516]	; (8005280 <_dtoa_r+0x608>)
 800507c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005080:	f7fb f8ae 	bl	80001e0 <__aeabi_dsub>
 8005084:	462a      	mov	r2, r5
 8005086:	4633      	mov	r3, r6
 8005088:	e9cd 0100 	strd	r0, r1, [sp]
 800508c:	f7fb fcf0 	bl	8000a70 <__aeabi_dcmpgt>
 8005090:	2800      	cmp	r0, #0
 8005092:	f040 8288 	bne.w	80055a6 <_dtoa_r+0x92e>
 8005096:	462a      	mov	r2, r5
 8005098:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800509c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050a0:	f7fb fcc8 	bl	8000a34 <__aeabi_dcmplt>
 80050a4:	2800      	cmp	r0, #0
 80050a6:	f040 827c 	bne.w	80055a2 <_dtoa_r+0x92a>
 80050aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80050ae:	e9cd 2300 	strd	r2, r3, [sp]
 80050b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f2c0 8150 	blt.w	800535a <_dtoa_r+0x6e2>
 80050ba:	f1ba 0f0e 	cmp.w	sl, #14
 80050be:	f300 814c 	bgt.w	800535a <_dtoa_r+0x6e2>
 80050c2:	4b6a      	ldr	r3, [pc, #424]	; (800526c <_dtoa_r+0x5f4>)
 80050c4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80050c8:	ed93 7b00 	vldr	d7, [r3]
 80050cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80050d4:	f280 80d8 	bge.w	8005288 <_dtoa_r+0x610>
 80050d8:	f1b9 0f00 	cmp.w	r9, #0
 80050dc:	f300 80d4 	bgt.w	8005288 <_dtoa_r+0x610>
 80050e0:	f040 825e 	bne.w	80055a0 <_dtoa_r+0x928>
 80050e4:	2200      	movs	r2, #0
 80050e6:	4b66      	ldr	r3, [pc, #408]	; (8005280 <_dtoa_r+0x608>)
 80050e8:	ec51 0b17 	vmov	r0, r1, d7
 80050ec:	f7fb fa30 	bl	8000550 <__aeabi_dmul>
 80050f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050f4:	f7fb fcb2 	bl	8000a5c <__aeabi_dcmpge>
 80050f8:	464f      	mov	r7, r9
 80050fa:	464e      	mov	r6, r9
 80050fc:	2800      	cmp	r0, #0
 80050fe:	f040 8234 	bne.w	800556a <_dtoa_r+0x8f2>
 8005102:	2331      	movs	r3, #49	; 0x31
 8005104:	f10b 0501 	add.w	r5, fp, #1
 8005108:	f88b 3000 	strb.w	r3, [fp]
 800510c:	f10a 0a01 	add.w	sl, sl, #1
 8005110:	e22f      	b.n	8005572 <_dtoa_r+0x8fa>
 8005112:	07f2      	lsls	r2, r6, #31
 8005114:	d505      	bpl.n	8005122 <_dtoa_r+0x4aa>
 8005116:	e9d7 2300 	ldrd	r2, r3, [r7]
 800511a:	f7fb fa19 	bl	8000550 <__aeabi_dmul>
 800511e:	3501      	adds	r5, #1
 8005120:	2301      	movs	r3, #1
 8005122:	1076      	asrs	r6, r6, #1
 8005124:	3708      	adds	r7, #8
 8005126:	e772      	b.n	800500e <_dtoa_r+0x396>
 8005128:	2502      	movs	r5, #2
 800512a:	e774      	b.n	8005016 <_dtoa_r+0x39e>
 800512c:	f8cd a020 	str.w	sl, [sp, #32]
 8005130:	464f      	mov	r7, r9
 8005132:	e791      	b.n	8005058 <_dtoa_r+0x3e0>
 8005134:	4b4d      	ldr	r3, [pc, #308]	; (800526c <_dtoa_r+0x5f4>)
 8005136:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800513a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800513e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005140:	2b00      	cmp	r3, #0
 8005142:	d047      	beq.n	80051d4 <_dtoa_r+0x55c>
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	2000      	movs	r0, #0
 800514a:	494e      	ldr	r1, [pc, #312]	; (8005284 <_dtoa_r+0x60c>)
 800514c:	f7fb fb2a 	bl	80007a4 <__aeabi_ddiv>
 8005150:	462a      	mov	r2, r5
 8005152:	4633      	mov	r3, r6
 8005154:	f7fb f844 	bl	80001e0 <__aeabi_dsub>
 8005158:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800515c:	465d      	mov	r5, fp
 800515e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005162:	f7fb fca5 	bl	8000ab0 <__aeabi_d2iz>
 8005166:	4606      	mov	r6, r0
 8005168:	f7fb f988 	bl	800047c <__aeabi_i2d>
 800516c:	4602      	mov	r2, r0
 800516e:	460b      	mov	r3, r1
 8005170:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005174:	f7fb f834 	bl	80001e0 <__aeabi_dsub>
 8005178:	3630      	adds	r6, #48	; 0x30
 800517a:	f805 6b01 	strb.w	r6, [r5], #1
 800517e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005182:	e9cd 0100 	strd	r0, r1, [sp]
 8005186:	f7fb fc55 	bl	8000a34 <__aeabi_dcmplt>
 800518a:	2800      	cmp	r0, #0
 800518c:	d163      	bne.n	8005256 <_dtoa_r+0x5de>
 800518e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005192:	2000      	movs	r0, #0
 8005194:	4937      	ldr	r1, [pc, #220]	; (8005274 <_dtoa_r+0x5fc>)
 8005196:	f7fb f823 	bl	80001e0 <__aeabi_dsub>
 800519a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800519e:	f7fb fc49 	bl	8000a34 <__aeabi_dcmplt>
 80051a2:	2800      	cmp	r0, #0
 80051a4:	f040 80b7 	bne.w	8005316 <_dtoa_r+0x69e>
 80051a8:	eba5 030b 	sub.w	r3, r5, fp
 80051ac:	429f      	cmp	r7, r3
 80051ae:	f77f af7c 	ble.w	80050aa <_dtoa_r+0x432>
 80051b2:	2200      	movs	r2, #0
 80051b4:	4b30      	ldr	r3, [pc, #192]	; (8005278 <_dtoa_r+0x600>)
 80051b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80051ba:	f7fb f9c9 	bl	8000550 <__aeabi_dmul>
 80051be:	2200      	movs	r2, #0
 80051c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80051c4:	4b2c      	ldr	r3, [pc, #176]	; (8005278 <_dtoa_r+0x600>)
 80051c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051ca:	f7fb f9c1 	bl	8000550 <__aeabi_dmul>
 80051ce:	e9cd 0100 	strd	r0, r1, [sp]
 80051d2:	e7c4      	b.n	800515e <_dtoa_r+0x4e6>
 80051d4:	462a      	mov	r2, r5
 80051d6:	4633      	mov	r3, r6
 80051d8:	f7fb f9ba 	bl	8000550 <__aeabi_dmul>
 80051dc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80051e0:	eb0b 0507 	add.w	r5, fp, r7
 80051e4:	465e      	mov	r6, fp
 80051e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051ea:	f7fb fc61 	bl	8000ab0 <__aeabi_d2iz>
 80051ee:	4607      	mov	r7, r0
 80051f0:	f7fb f944 	bl	800047c <__aeabi_i2d>
 80051f4:	3730      	adds	r7, #48	; 0x30
 80051f6:	4602      	mov	r2, r0
 80051f8:	460b      	mov	r3, r1
 80051fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051fe:	f7fa ffef 	bl	80001e0 <__aeabi_dsub>
 8005202:	f806 7b01 	strb.w	r7, [r6], #1
 8005206:	42ae      	cmp	r6, r5
 8005208:	e9cd 0100 	strd	r0, r1, [sp]
 800520c:	f04f 0200 	mov.w	r2, #0
 8005210:	d126      	bne.n	8005260 <_dtoa_r+0x5e8>
 8005212:	4b1c      	ldr	r3, [pc, #112]	; (8005284 <_dtoa_r+0x60c>)
 8005214:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005218:	f7fa ffe4 	bl	80001e4 <__adddf3>
 800521c:	4602      	mov	r2, r0
 800521e:	460b      	mov	r3, r1
 8005220:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005224:	f7fb fc24 	bl	8000a70 <__aeabi_dcmpgt>
 8005228:	2800      	cmp	r0, #0
 800522a:	d174      	bne.n	8005316 <_dtoa_r+0x69e>
 800522c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005230:	2000      	movs	r0, #0
 8005232:	4914      	ldr	r1, [pc, #80]	; (8005284 <_dtoa_r+0x60c>)
 8005234:	f7fa ffd4 	bl	80001e0 <__aeabi_dsub>
 8005238:	4602      	mov	r2, r0
 800523a:	460b      	mov	r3, r1
 800523c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005240:	f7fb fbf8 	bl	8000a34 <__aeabi_dcmplt>
 8005244:	2800      	cmp	r0, #0
 8005246:	f43f af30 	beq.w	80050aa <_dtoa_r+0x432>
 800524a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800524e:	2b30      	cmp	r3, #48	; 0x30
 8005250:	f105 32ff 	add.w	r2, r5, #4294967295
 8005254:	d002      	beq.n	800525c <_dtoa_r+0x5e4>
 8005256:	f8dd a020 	ldr.w	sl, [sp, #32]
 800525a:	e04a      	b.n	80052f2 <_dtoa_r+0x67a>
 800525c:	4615      	mov	r5, r2
 800525e:	e7f4      	b.n	800524a <_dtoa_r+0x5d2>
 8005260:	4b05      	ldr	r3, [pc, #20]	; (8005278 <_dtoa_r+0x600>)
 8005262:	f7fb f975 	bl	8000550 <__aeabi_dmul>
 8005266:	e9cd 0100 	strd	r0, r1, [sp]
 800526a:	e7bc      	b.n	80051e6 <_dtoa_r+0x56e>
 800526c:	08007188 	.word	0x08007188
 8005270:	08007160 	.word	0x08007160
 8005274:	3ff00000 	.word	0x3ff00000
 8005278:	40240000 	.word	0x40240000
 800527c:	401c0000 	.word	0x401c0000
 8005280:	40140000 	.word	0x40140000
 8005284:	3fe00000 	.word	0x3fe00000
 8005288:	e9dd 6700 	ldrd	r6, r7, [sp]
 800528c:	465d      	mov	r5, fp
 800528e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005292:	4630      	mov	r0, r6
 8005294:	4639      	mov	r1, r7
 8005296:	f7fb fa85 	bl	80007a4 <__aeabi_ddiv>
 800529a:	f7fb fc09 	bl	8000ab0 <__aeabi_d2iz>
 800529e:	4680      	mov	r8, r0
 80052a0:	f7fb f8ec 	bl	800047c <__aeabi_i2d>
 80052a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052a8:	f7fb f952 	bl	8000550 <__aeabi_dmul>
 80052ac:	4602      	mov	r2, r0
 80052ae:	460b      	mov	r3, r1
 80052b0:	4630      	mov	r0, r6
 80052b2:	4639      	mov	r1, r7
 80052b4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80052b8:	f7fa ff92 	bl	80001e0 <__aeabi_dsub>
 80052bc:	f805 6b01 	strb.w	r6, [r5], #1
 80052c0:	eba5 060b 	sub.w	r6, r5, fp
 80052c4:	45b1      	cmp	r9, r6
 80052c6:	4602      	mov	r2, r0
 80052c8:	460b      	mov	r3, r1
 80052ca:	d139      	bne.n	8005340 <_dtoa_r+0x6c8>
 80052cc:	f7fa ff8a 	bl	80001e4 <__adddf3>
 80052d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052d4:	4606      	mov	r6, r0
 80052d6:	460f      	mov	r7, r1
 80052d8:	f7fb fbca 	bl	8000a70 <__aeabi_dcmpgt>
 80052dc:	b9c8      	cbnz	r0, 8005312 <_dtoa_r+0x69a>
 80052de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052e2:	4630      	mov	r0, r6
 80052e4:	4639      	mov	r1, r7
 80052e6:	f7fb fb9b 	bl	8000a20 <__aeabi_dcmpeq>
 80052ea:	b110      	cbz	r0, 80052f2 <_dtoa_r+0x67a>
 80052ec:	f018 0f01 	tst.w	r8, #1
 80052f0:	d10f      	bne.n	8005312 <_dtoa_r+0x69a>
 80052f2:	9904      	ldr	r1, [sp, #16]
 80052f4:	4620      	mov	r0, r4
 80052f6:	f000 fad1 	bl	800589c <_Bfree>
 80052fa:	2300      	movs	r3, #0
 80052fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80052fe:	702b      	strb	r3, [r5, #0]
 8005300:	f10a 0301 	add.w	r3, sl, #1
 8005304:	6013      	str	r3, [r2, #0]
 8005306:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 8241 	beq.w	8005790 <_dtoa_r+0xb18>
 800530e:	601d      	str	r5, [r3, #0]
 8005310:	e23e      	b.n	8005790 <_dtoa_r+0xb18>
 8005312:	f8cd a020 	str.w	sl, [sp, #32]
 8005316:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800531a:	2a39      	cmp	r2, #57	; 0x39
 800531c:	f105 33ff 	add.w	r3, r5, #4294967295
 8005320:	d108      	bne.n	8005334 <_dtoa_r+0x6bc>
 8005322:	459b      	cmp	fp, r3
 8005324:	d10a      	bne.n	800533c <_dtoa_r+0x6c4>
 8005326:	9b08      	ldr	r3, [sp, #32]
 8005328:	3301      	adds	r3, #1
 800532a:	9308      	str	r3, [sp, #32]
 800532c:	2330      	movs	r3, #48	; 0x30
 800532e:	f88b 3000 	strb.w	r3, [fp]
 8005332:	465b      	mov	r3, fp
 8005334:	781a      	ldrb	r2, [r3, #0]
 8005336:	3201      	adds	r2, #1
 8005338:	701a      	strb	r2, [r3, #0]
 800533a:	e78c      	b.n	8005256 <_dtoa_r+0x5de>
 800533c:	461d      	mov	r5, r3
 800533e:	e7ea      	b.n	8005316 <_dtoa_r+0x69e>
 8005340:	2200      	movs	r2, #0
 8005342:	4b9b      	ldr	r3, [pc, #620]	; (80055b0 <_dtoa_r+0x938>)
 8005344:	f7fb f904 	bl	8000550 <__aeabi_dmul>
 8005348:	2200      	movs	r2, #0
 800534a:	2300      	movs	r3, #0
 800534c:	4606      	mov	r6, r0
 800534e:	460f      	mov	r7, r1
 8005350:	f7fb fb66 	bl	8000a20 <__aeabi_dcmpeq>
 8005354:	2800      	cmp	r0, #0
 8005356:	d09a      	beq.n	800528e <_dtoa_r+0x616>
 8005358:	e7cb      	b.n	80052f2 <_dtoa_r+0x67a>
 800535a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800535c:	2a00      	cmp	r2, #0
 800535e:	f000 808b 	beq.w	8005478 <_dtoa_r+0x800>
 8005362:	9a06      	ldr	r2, [sp, #24]
 8005364:	2a01      	cmp	r2, #1
 8005366:	dc6e      	bgt.n	8005446 <_dtoa_r+0x7ce>
 8005368:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800536a:	2a00      	cmp	r2, #0
 800536c:	d067      	beq.n	800543e <_dtoa_r+0x7c6>
 800536e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005372:	9f07      	ldr	r7, [sp, #28]
 8005374:	9d05      	ldr	r5, [sp, #20]
 8005376:	9a05      	ldr	r2, [sp, #20]
 8005378:	2101      	movs	r1, #1
 800537a:	441a      	add	r2, r3
 800537c:	4620      	mov	r0, r4
 800537e:	9205      	str	r2, [sp, #20]
 8005380:	4498      	add	r8, r3
 8005382:	f000 fb2b 	bl	80059dc <__i2b>
 8005386:	4606      	mov	r6, r0
 8005388:	2d00      	cmp	r5, #0
 800538a:	dd0c      	ble.n	80053a6 <_dtoa_r+0x72e>
 800538c:	f1b8 0f00 	cmp.w	r8, #0
 8005390:	dd09      	ble.n	80053a6 <_dtoa_r+0x72e>
 8005392:	4545      	cmp	r5, r8
 8005394:	9a05      	ldr	r2, [sp, #20]
 8005396:	462b      	mov	r3, r5
 8005398:	bfa8      	it	ge
 800539a:	4643      	movge	r3, r8
 800539c:	1ad2      	subs	r2, r2, r3
 800539e:	9205      	str	r2, [sp, #20]
 80053a0:	1aed      	subs	r5, r5, r3
 80053a2:	eba8 0803 	sub.w	r8, r8, r3
 80053a6:	9b07      	ldr	r3, [sp, #28]
 80053a8:	b1eb      	cbz	r3, 80053e6 <_dtoa_r+0x76e>
 80053aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d067      	beq.n	8005480 <_dtoa_r+0x808>
 80053b0:	b18f      	cbz	r7, 80053d6 <_dtoa_r+0x75e>
 80053b2:	4631      	mov	r1, r6
 80053b4:	463a      	mov	r2, r7
 80053b6:	4620      	mov	r0, r4
 80053b8:	f000 fbb0 	bl	8005b1c <__pow5mult>
 80053bc:	9a04      	ldr	r2, [sp, #16]
 80053be:	4601      	mov	r1, r0
 80053c0:	4606      	mov	r6, r0
 80053c2:	4620      	mov	r0, r4
 80053c4:	f000 fb13 	bl	80059ee <__multiply>
 80053c8:	9904      	ldr	r1, [sp, #16]
 80053ca:	9008      	str	r0, [sp, #32]
 80053cc:	4620      	mov	r0, r4
 80053ce:	f000 fa65 	bl	800589c <_Bfree>
 80053d2:	9b08      	ldr	r3, [sp, #32]
 80053d4:	9304      	str	r3, [sp, #16]
 80053d6:	9b07      	ldr	r3, [sp, #28]
 80053d8:	1bda      	subs	r2, r3, r7
 80053da:	d004      	beq.n	80053e6 <_dtoa_r+0x76e>
 80053dc:	9904      	ldr	r1, [sp, #16]
 80053de:	4620      	mov	r0, r4
 80053e0:	f000 fb9c 	bl	8005b1c <__pow5mult>
 80053e4:	9004      	str	r0, [sp, #16]
 80053e6:	2101      	movs	r1, #1
 80053e8:	4620      	mov	r0, r4
 80053ea:	f000 faf7 	bl	80059dc <__i2b>
 80053ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053f0:	4607      	mov	r7, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f000 81d0 	beq.w	8005798 <_dtoa_r+0xb20>
 80053f8:	461a      	mov	r2, r3
 80053fa:	4601      	mov	r1, r0
 80053fc:	4620      	mov	r0, r4
 80053fe:	f000 fb8d 	bl	8005b1c <__pow5mult>
 8005402:	9b06      	ldr	r3, [sp, #24]
 8005404:	2b01      	cmp	r3, #1
 8005406:	4607      	mov	r7, r0
 8005408:	dc40      	bgt.n	800548c <_dtoa_r+0x814>
 800540a:	9b00      	ldr	r3, [sp, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d139      	bne.n	8005484 <_dtoa_r+0x80c>
 8005410:	9b01      	ldr	r3, [sp, #4]
 8005412:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005416:	2b00      	cmp	r3, #0
 8005418:	d136      	bne.n	8005488 <_dtoa_r+0x810>
 800541a:	9b01      	ldr	r3, [sp, #4]
 800541c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005420:	0d1b      	lsrs	r3, r3, #20
 8005422:	051b      	lsls	r3, r3, #20
 8005424:	b12b      	cbz	r3, 8005432 <_dtoa_r+0x7ba>
 8005426:	9b05      	ldr	r3, [sp, #20]
 8005428:	3301      	adds	r3, #1
 800542a:	9305      	str	r3, [sp, #20]
 800542c:	f108 0801 	add.w	r8, r8, #1
 8005430:	2301      	movs	r3, #1
 8005432:	9307      	str	r3, [sp, #28]
 8005434:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005436:	2b00      	cmp	r3, #0
 8005438:	d12a      	bne.n	8005490 <_dtoa_r+0x818>
 800543a:	2001      	movs	r0, #1
 800543c:	e030      	b.n	80054a0 <_dtoa_r+0x828>
 800543e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005440:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005444:	e795      	b.n	8005372 <_dtoa_r+0x6fa>
 8005446:	9b07      	ldr	r3, [sp, #28]
 8005448:	f109 37ff 	add.w	r7, r9, #4294967295
 800544c:	42bb      	cmp	r3, r7
 800544e:	bfbf      	itttt	lt
 8005450:	9b07      	ldrlt	r3, [sp, #28]
 8005452:	9707      	strlt	r7, [sp, #28]
 8005454:	1afa      	sublt	r2, r7, r3
 8005456:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005458:	bfbb      	ittet	lt
 800545a:	189b      	addlt	r3, r3, r2
 800545c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800545e:	1bdf      	subge	r7, r3, r7
 8005460:	2700      	movlt	r7, #0
 8005462:	f1b9 0f00 	cmp.w	r9, #0
 8005466:	bfb5      	itete	lt
 8005468:	9b05      	ldrlt	r3, [sp, #20]
 800546a:	9d05      	ldrge	r5, [sp, #20]
 800546c:	eba3 0509 	sublt.w	r5, r3, r9
 8005470:	464b      	movge	r3, r9
 8005472:	bfb8      	it	lt
 8005474:	2300      	movlt	r3, #0
 8005476:	e77e      	b.n	8005376 <_dtoa_r+0x6fe>
 8005478:	9f07      	ldr	r7, [sp, #28]
 800547a:	9d05      	ldr	r5, [sp, #20]
 800547c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800547e:	e783      	b.n	8005388 <_dtoa_r+0x710>
 8005480:	9a07      	ldr	r2, [sp, #28]
 8005482:	e7ab      	b.n	80053dc <_dtoa_r+0x764>
 8005484:	2300      	movs	r3, #0
 8005486:	e7d4      	b.n	8005432 <_dtoa_r+0x7ba>
 8005488:	9b00      	ldr	r3, [sp, #0]
 800548a:	e7d2      	b.n	8005432 <_dtoa_r+0x7ba>
 800548c:	2300      	movs	r3, #0
 800548e:	9307      	str	r3, [sp, #28]
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005496:	6918      	ldr	r0, [r3, #16]
 8005498:	f000 fa52 	bl	8005940 <__hi0bits>
 800549c:	f1c0 0020 	rsb	r0, r0, #32
 80054a0:	4440      	add	r0, r8
 80054a2:	f010 001f 	ands.w	r0, r0, #31
 80054a6:	d047      	beq.n	8005538 <_dtoa_r+0x8c0>
 80054a8:	f1c0 0320 	rsb	r3, r0, #32
 80054ac:	2b04      	cmp	r3, #4
 80054ae:	dd3b      	ble.n	8005528 <_dtoa_r+0x8b0>
 80054b0:	9b05      	ldr	r3, [sp, #20]
 80054b2:	f1c0 001c 	rsb	r0, r0, #28
 80054b6:	4403      	add	r3, r0
 80054b8:	9305      	str	r3, [sp, #20]
 80054ba:	4405      	add	r5, r0
 80054bc:	4480      	add	r8, r0
 80054be:	9b05      	ldr	r3, [sp, #20]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	dd05      	ble.n	80054d0 <_dtoa_r+0x858>
 80054c4:	461a      	mov	r2, r3
 80054c6:	9904      	ldr	r1, [sp, #16]
 80054c8:	4620      	mov	r0, r4
 80054ca:	f000 fb75 	bl	8005bb8 <__lshift>
 80054ce:	9004      	str	r0, [sp, #16]
 80054d0:	f1b8 0f00 	cmp.w	r8, #0
 80054d4:	dd05      	ble.n	80054e2 <_dtoa_r+0x86a>
 80054d6:	4639      	mov	r1, r7
 80054d8:	4642      	mov	r2, r8
 80054da:	4620      	mov	r0, r4
 80054dc:	f000 fb6c 	bl	8005bb8 <__lshift>
 80054e0:	4607      	mov	r7, r0
 80054e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80054e4:	b353      	cbz	r3, 800553c <_dtoa_r+0x8c4>
 80054e6:	4639      	mov	r1, r7
 80054e8:	9804      	ldr	r0, [sp, #16]
 80054ea:	f000 fbb9 	bl	8005c60 <__mcmp>
 80054ee:	2800      	cmp	r0, #0
 80054f0:	da24      	bge.n	800553c <_dtoa_r+0x8c4>
 80054f2:	2300      	movs	r3, #0
 80054f4:	220a      	movs	r2, #10
 80054f6:	9904      	ldr	r1, [sp, #16]
 80054f8:	4620      	mov	r0, r4
 80054fa:	f000 f9e6 	bl	80058ca <__multadd>
 80054fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005500:	9004      	str	r0, [sp, #16]
 8005502:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005506:	2b00      	cmp	r3, #0
 8005508:	f000 814d 	beq.w	80057a6 <_dtoa_r+0xb2e>
 800550c:	2300      	movs	r3, #0
 800550e:	4631      	mov	r1, r6
 8005510:	220a      	movs	r2, #10
 8005512:	4620      	mov	r0, r4
 8005514:	f000 f9d9 	bl	80058ca <__multadd>
 8005518:	9b02      	ldr	r3, [sp, #8]
 800551a:	2b00      	cmp	r3, #0
 800551c:	4606      	mov	r6, r0
 800551e:	dc4f      	bgt.n	80055c0 <_dtoa_r+0x948>
 8005520:	9b06      	ldr	r3, [sp, #24]
 8005522:	2b02      	cmp	r3, #2
 8005524:	dd4c      	ble.n	80055c0 <_dtoa_r+0x948>
 8005526:	e011      	b.n	800554c <_dtoa_r+0x8d4>
 8005528:	d0c9      	beq.n	80054be <_dtoa_r+0x846>
 800552a:	9a05      	ldr	r2, [sp, #20]
 800552c:	331c      	adds	r3, #28
 800552e:	441a      	add	r2, r3
 8005530:	9205      	str	r2, [sp, #20]
 8005532:	441d      	add	r5, r3
 8005534:	4498      	add	r8, r3
 8005536:	e7c2      	b.n	80054be <_dtoa_r+0x846>
 8005538:	4603      	mov	r3, r0
 800553a:	e7f6      	b.n	800552a <_dtoa_r+0x8b2>
 800553c:	f1b9 0f00 	cmp.w	r9, #0
 8005540:	dc38      	bgt.n	80055b4 <_dtoa_r+0x93c>
 8005542:	9b06      	ldr	r3, [sp, #24]
 8005544:	2b02      	cmp	r3, #2
 8005546:	dd35      	ble.n	80055b4 <_dtoa_r+0x93c>
 8005548:	f8cd 9008 	str.w	r9, [sp, #8]
 800554c:	9b02      	ldr	r3, [sp, #8]
 800554e:	b963      	cbnz	r3, 800556a <_dtoa_r+0x8f2>
 8005550:	4639      	mov	r1, r7
 8005552:	2205      	movs	r2, #5
 8005554:	4620      	mov	r0, r4
 8005556:	f000 f9b8 	bl	80058ca <__multadd>
 800555a:	4601      	mov	r1, r0
 800555c:	4607      	mov	r7, r0
 800555e:	9804      	ldr	r0, [sp, #16]
 8005560:	f000 fb7e 	bl	8005c60 <__mcmp>
 8005564:	2800      	cmp	r0, #0
 8005566:	f73f adcc 	bgt.w	8005102 <_dtoa_r+0x48a>
 800556a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800556c:	465d      	mov	r5, fp
 800556e:	ea6f 0a03 	mvn.w	sl, r3
 8005572:	f04f 0900 	mov.w	r9, #0
 8005576:	4639      	mov	r1, r7
 8005578:	4620      	mov	r0, r4
 800557a:	f000 f98f 	bl	800589c <_Bfree>
 800557e:	2e00      	cmp	r6, #0
 8005580:	f43f aeb7 	beq.w	80052f2 <_dtoa_r+0x67a>
 8005584:	f1b9 0f00 	cmp.w	r9, #0
 8005588:	d005      	beq.n	8005596 <_dtoa_r+0x91e>
 800558a:	45b1      	cmp	r9, r6
 800558c:	d003      	beq.n	8005596 <_dtoa_r+0x91e>
 800558e:	4649      	mov	r1, r9
 8005590:	4620      	mov	r0, r4
 8005592:	f000 f983 	bl	800589c <_Bfree>
 8005596:	4631      	mov	r1, r6
 8005598:	4620      	mov	r0, r4
 800559a:	f000 f97f 	bl	800589c <_Bfree>
 800559e:	e6a8      	b.n	80052f2 <_dtoa_r+0x67a>
 80055a0:	2700      	movs	r7, #0
 80055a2:	463e      	mov	r6, r7
 80055a4:	e7e1      	b.n	800556a <_dtoa_r+0x8f2>
 80055a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80055aa:	463e      	mov	r6, r7
 80055ac:	e5a9      	b.n	8005102 <_dtoa_r+0x48a>
 80055ae:	bf00      	nop
 80055b0:	40240000 	.word	0x40240000
 80055b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055b6:	f8cd 9008 	str.w	r9, [sp, #8]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f000 80fa 	beq.w	80057b4 <_dtoa_r+0xb3c>
 80055c0:	2d00      	cmp	r5, #0
 80055c2:	dd05      	ble.n	80055d0 <_dtoa_r+0x958>
 80055c4:	4631      	mov	r1, r6
 80055c6:	462a      	mov	r2, r5
 80055c8:	4620      	mov	r0, r4
 80055ca:	f000 faf5 	bl	8005bb8 <__lshift>
 80055ce:	4606      	mov	r6, r0
 80055d0:	9b07      	ldr	r3, [sp, #28]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d04c      	beq.n	8005670 <_dtoa_r+0x9f8>
 80055d6:	6871      	ldr	r1, [r6, #4]
 80055d8:	4620      	mov	r0, r4
 80055da:	f000 f92b 	bl	8005834 <_Balloc>
 80055de:	6932      	ldr	r2, [r6, #16]
 80055e0:	3202      	adds	r2, #2
 80055e2:	4605      	mov	r5, r0
 80055e4:	0092      	lsls	r2, r2, #2
 80055e6:	f106 010c 	add.w	r1, r6, #12
 80055ea:	300c      	adds	r0, #12
 80055ec:	f7fe fdba 	bl	8004164 <memcpy>
 80055f0:	2201      	movs	r2, #1
 80055f2:	4629      	mov	r1, r5
 80055f4:	4620      	mov	r0, r4
 80055f6:	f000 fadf 	bl	8005bb8 <__lshift>
 80055fa:	9b00      	ldr	r3, [sp, #0]
 80055fc:	f8cd b014 	str.w	fp, [sp, #20]
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	46b1      	mov	r9, r6
 8005606:	9307      	str	r3, [sp, #28]
 8005608:	4606      	mov	r6, r0
 800560a:	4639      	mov	r1, r7
 800560c:	9804      	ldr	r0, [sp, #16]
 800560e:	f7ff faa5 	bl	8004b5c <quorem>
 8005612:	4649      	mov	r1, r9
 8005614:	4605      	mov	r5, r0
 8005616:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800561a:	9804      	ldr	r0, [sp, #16]
 800561c:	f000 fb20 	bl	8005c60 <__mcmp>
 8005620:	4632      	mov	r2, r6
 8005622:	9000      	str	r0, [sp, #0]
 8005624:	4639      	mov	r1, r7
 8005626:	4620      	mov	r0, r4
 8005628:	f000 fb34 	bl	8005c94 <__mdiff>
 800562c:	68c3      	ldr	r3, [r0, #12]
 800562e:	4602      	mov	r2, r0
 8005630:	bb03      	cbnz	r3, 8005674 <_dtoa_r+0x9fc>
 8005632:	4601      	mov	r1, r0
 8005634:	9008      	str	r0, [sp, #32]
 8005636:	9804      	ldr	r0, [sp, #16]
 8005638:	f000 fb12 	bl	8005c60 <__mcmp>
 800563c:	9a08      	ldr	r2, [sp, #32]
 800563e:	4603      	mov	r3, r0
 8005640:	4611      	mov	r1, r2
 8005642:	4620      	mov	r0, r4
 8005644:	9308      	str	r3, [sp, #32]
 8005646:	f000 f929 	bl	800589c <_Bfree>
 800564a:	9b08      	ldr	r3, [sp, #32]
 800564c:	b9a3      	cbnz	r3, 8005678 <_dtoa_r+0xa00>
 800564e:	9a06      	ldr	r2, [sp, #24]
 8005650:	b992      	cbnz	r2, 8005678 <_dtoa_r+0xa00>
 8005652:	9a07      	ldr	r2, [sp, #28]
 8005654:	b982      	cbnz	r2, 8005678 <_dtoa_r+0xa00>
 8005656:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800565a:	d029      	beq.n	80056b0 <_dtoa_r+0xa38>
 800565c:	9b00      	ldr	r3, [sp, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	dd01      	ble.n	8005666 <_dtoa_r+0x9ee>
 8005662:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005666:	9b05      	ldr	r3, [sp, #20]
 8005668:	1c5d      	adds	r5, r3, #1
 800566a:	f883 8000 	strb.w	r8, [r3]
 800566e:	e782      	b.n	8005576 <_dtoa_r+0x8fe>
 8005670:	4630      	mov	r0, r6
 8005672:	e7c2      	b.n	80055fa <_dtoa_r+0x982>
 8005674:	2301      	movs	r3, #1
 8005676:	e7e3      	b.n	8005640 <_dtoa_r+0x9c8>
 8005678:	9a00      	ldr	r2, [sp, #0]
 800567a:	2a00      	cmp	r2, #0
 800567c:	db04      	blt.n	8005688 <_dtoa_r+0xa10>
 800567e:	d125      	bne.n	80056cc <_dtoa_r+0xa54>
 8005680:	9a06      	ldr	r2, [sp, #24]
 8005682:	bb1a      	cbnz	r2, 80056cc <_dtoa_r+0xa54>
 8005684:	9a07      	ldr	r2, [sp, #28]
 8005686:	bb0a      	cbnz	r2, 80056cc <_dtoa_r+0xa54>
 8005688:	2b00      	cmp	r3, #0
 800568a:	ddec      	ble.n	8005666 <_dtoa_r+0x9ee>
 800568c:	2201      	movs	r2, #1
 800568e:	9904      	ldr	r1, [sp, #16]
 8005690:	4620      	mov	r0, r4
 8005692:	f000 fa91 	bl	8005bb8 <__lshift>
 8005696:	4639      	mov	r1, r7
 8005698:	9004      	str	r0, [sp, #16]
 800569a:	f000 fae1 	bl	8005c60 <__mcmp>
 800569e:	2800      	cmp	r0, #0
 80056a0:	dc03      	bgt.n	80056aa <_dtoa_r+0xa32>
 80056a2:	d1e0      	bne.n	8005666 <_dtoa_r+0x9ee>
 80056a4:	f018 0f01 	tst.w	r8, #1
 80056a8:	d0dd      	beq.n	8005666 <_dtoa_r+0x9ee>
 80056aa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80056ae:	d1d8      	bne.n	8005662 <_dtoa_r+0x9ea>
 80056b0:	9b05      	ldr	r3, [sp, #20]
 80056b2:	9a05      	ldr	r2, [sp, #20]
 80056b4:	1c5d      	adds	r5, r3, #1
 80056b6:	2339      	movs	r3, #57	; 0x39
 80056b8:	7013      	strb	r3, [r2, #0]
 80056ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80056be:	2b39      	cmp	r3, #57	; 0x39
 80056c0:	f105 32ff 	add.w	r2, r5, #4294967295
 80056c4:	d04f      	beq.n	8005766 <_dtoa_r+0xaee>
 80056c6:	3301      	adds	r3, #1
 80056c8:	7013      	strb	r3, [r2, #0]
 80056ca:	e754      	b.n	8005576 <_dtoa_r+0x8fe>
 80056cc:	9a05      	ldr	r2, [sp, #20]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f102 0501 	add.w	r5, r2, #1
 80056d4:	dd06      	ble.n	80056e4 <_dtoa_r+0xa6c>
 80056d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80056da:	d0e9      	beq.n	80056b0 <_dtoa_r+0xa38>
 80056dc:	f108 0801 	add.w	r8, r8, #1
 80056e0:	9b05      	ldr	r3, [sp, #20]
 80056e2:	e7c2      	b.n	800566a <_dtoa_r+0x9f2>
 80056e4:	9a02      	ldr	r2, [sp, #8]
 80056e6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80056ea:	eba5 030b 	sub.w	r3, r5, fp
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d021      	beq.n	8005736 <_dtoa_r+0xabe>
 80056f2:	2300      	movs	r3, #0
 80056f4:	220a      	movs	r2, #10
 80056f6:	9904      	ldr	r1, [sp, #16]
 80056f8:	4620      	mov	r0, r4
 80056fa:	f000 f8e6 	bl	80058ca <__multadd>
 80056fe:	45b1      	cmp	r9, r6
 8005700:	9004      	str	r0, [sp, #16]
 8005702:	f04f 0300 	mov.w	r3, #0
 8005706:	f04f 020a 	mov.w	r2, #10
 800570a:	4649      	mov	r1, r9
 800570c:	4620      	mov	r0, r4
 800570e:	d105      	bne.n	800571c <_dtoa_r+0xaa4>
 8005710:	f000 f8db 	bl	80058ca <__multadd>
 8005714:	4681      	mov	r9, r0
 8005716:	4606      	mov	r6, r0
 8005718:	9505      	str	r5, [sp, #20]
 800571a:	e776      	b.n	800560a <_dtoa_r+0x992>
 800571c:	f000 f8d5 	bl	80058ca <__multadd>
 8005720:	4631      	mov	r1, r6
 8005722:	4681      	mov	r9, r0
 8005724:	2300      	movs	r3, #0
 8005726:	220a      	movs	r2, #10
 8005728:	4620      	mov	r0, r4
 800572a:	f000 f8ce 	bl	80058ca <__multadd>
 800572e:	4606      	mov	r6, r0
 8005730:	e7f2      	b.n	8005718 <_dtoa_r+0xaa0>
 8005732:	f04f 0900 	mov.w	r9, #0
 8005736:	2201      	movs	r2, #1
 8005738:	9904      	ldr	r1, [sp, #16]
 800573a:	4620      	mov	r0, r4
 800573c:	f000 fa3c 	bl	8005bb8 <__lshift>
 8005740:	4639      	mov	r1, r7
 8005742:	9004      	str	r0, [sp, #16]
 8005744:	f000 fa8c 	bl	8005c60 <__mcmp>
 8005748:	2800      	cmp	r0, #0
 800574a:	dcb6      	bgt.n	80056ba <_dtoa_r+0xa42>
 800574c:	d102      	bne.n	8005754 <_dtoa_r+0xadc>
 800574e:	f018 0f01 	tst.w	r8, #1
 8005752:	d1b2      	bne.n	80056ba <_dtoa_r+0xa42>
 8005754:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005758:	2b30      	cmp	r3, #48	; 0x30
 800575a:	f105 32ff 	add.w	r2, r5, #4294967295
 800575e:	f47f af0a 	bne.w	8005576 <_dtoa_r+0x8fe>
 8005762:	4615      	mov	r5, r2
 8005764:	e7f6      	b.n	8005754 <_dtoa_r+0xadc>
 8005766:	4593      	cmp	fp, r2
 8005768:	d105      	bne.n	8005776 <_dtoa_r+0xafe>
 800576a:	2331      	movs	r3, #49	; 0x31
 800576c:	f10a 0a01 	add.w	sl, sl, #1
 8005770:	f88b 3000 	strb.w	r3, [fp]
 8005774:	e6ff      	b.n	8005576 <_dtoa_r+0x8fe>
 8005776:	4615      	mov	r5, r2
 8005778:	e79f      	b.n	80056ba <_dtoa_r+0xa42>
 800577a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80057e0 <_dtoa_r+0xb68>
 800577e:	e007      	b.n	8005790 <_dtoa_r+0xb18>
 8005780:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005782:	f8df b060 	ldr.w	fp, [pc, #96]	; 80057e4 <_dtoa_r+0xb6c>
 8005786:	b11b      	cbz	r3, 8005790 <_dtoa_r+0xb18>
 8005788:	f10b 0308 	add.w	r3, fp, #8
 800578c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800578e:	6013      	str	r3, [r2, #0]
 8005790:	4658      	mov	r0, fp
 8005792:	b017      	add	sp, #92	; 0x5c
 8005794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005798:	9b06      	ldr	r3, [sp, #24]
 800579a:	2b01      	cmp	r3, #1
 800579c:	f77f ae35 	ble.w	800540a <_dtoa_r+0x792>
 80057a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057a2:	9307      	str	r3, [sp, #28]
 80057a4:	e649      	b.n	800543a <_dtoa_r+0x7c2>
 80057a6:	9b02      	ldr	r3, [sp, #8]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	dc03      	bgt.n	80057b4 <_dtoa_r+0xb3c>
 80057ac:	9b06      	ldr	r3, [sp, #24]
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	f73f aecc 	bgt.w	800554c <_dtoa_r+0x8d4>
 80057b4:	465d      	mov	r5, fp
 80057b6:	4639      	mov	r1, r7
 80057b8:	9804      	ldr	r0, [sp, #16]
 80057ba:	f7ff f9cf 	bl	8004b5c <quorem>
 80057be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80057c2:	f805 8b01 	strb.w	r8, [r5], #1
 80057c6:	9a02      	ldr	r2, [sp, #8]
 80057c8:	eba5 030b 	sub.w	r3, r5, fp
 80057cc:	429a      	cmp	r2, r3
 80057ce:	ddb0      	ble.n	8005732 <_dtoa_r+0xaba>
 80057d0:	2300      	movs	r3, #0
 80057d2:	220a      	movs	r2, #10
 80057d4:	9904      	ldr	r1, [sp, #16]
 80057d6:	4620      	mov	r0, r4
 80057d8:	f000 f877 	bl	80058ca <__multadd>
 80057dc:	9004      	str	r0, [sp, #16]
 80057de:	e7ea      	b.n	80057b6 <_dtoa_r+0xb3e>
 80057e0:	08007144 	.word	0x08007144
 80057e4:	08007146 	.word	0x08007146

080057e8 <__locale_ctype_ptr_l>:
 80057e8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80057ec:	4770      	bx	lr
	...

080057f0 <_localeconv_r>:
 80057f0:	4b04      	ldr	r3, [pc, #16]	; (8005804 <_localeconv_r+0x14>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6a18      	ldr	r0, [r3, #32]
 80057f6:	4b04      	ldr	r3, [pc, #16]	; (8005808 <_localeconv_r+0x18>)
 80057f8:	2800      	cmp	r0, #0
 80057fa:	bf08      	it	eq
 80057fc:	4618      	moveq	r0, r3
 80057fe:	30f0      	adds	r0, #240	; 0xf0
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	2000000c 	.word	0x2000000c
 8005808:	20000070 	.word	0x20000070

0800580c <__ascii_mbtowc>:
 800580c:	b082      	sub	sp, #8
 800580e:	b901      	cbnz	r1, 8005812 <__ascii_mbtowc+0x6>
 8005810:	a901      	add	r1, sp, #4
 8005812:	b142      	cbz	r2, 8005826 <__ascii_mbtowc+0x1a>
 8005814:	b14b      	cbz	r3, 800582a <__ascii_mbtowc+0x1e>
 8005816:	7813      	ldrb	r3, [r2, #0]
 8005818:	600b      	str	r3, [r1, #0]
 800581a:	7812      	ldrb	r2, [r2, #0]
 800581c:	1c10      	adds	r0, r2, #0
 800581e:	bf18      	it	ne
 8005820:	2001      	movne	r0, #1
 8005822:	b002      	add	sp, #8
 8005824:	4770      	bx	lr
 8005826:	4610      	mov	r0, r2
 8005828:	e7fb      	b.n	8005822 <__ascii_mbtowc+0x16>
 800582a:	f06f 0001 	mvn.w	r0, #1
 800582e:	e7f8      	b.n	8005822 <__ascii_mbtowc+0x16>

08005830 <__malloc_lock>:
 8005830:	4770      	bx	lr

08005832 <__malloc_unlock>:
 8005832:	4770      	bx	lr

08005834 <_Balloc>:
 8005834:	b570      	push	{r4, r5, r6, lr}
 8005836:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005838:	4604      	mov	r4, r0
 800583a:	460e      	mov	r6, r1
 800583c:	b93d      	cbnz	r5, 800584e <_Balloc+0x1a>
 800583e:	2010      	movs	r0, #16
 8005840:	f7fe fc80 	bl	8004144 <malloc>
 8005844:	6260      	str	r0, [r4, #36]	; 0x24
 8005846:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800584a:	6005      	str	r5, [r0, #0]
 800584c:	60c5      	str	r5, [r0, #12]
 800584e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005850:	68eb      	ldr	r3, [r5, #12]
 8005852:	b183      	cbz	r3, 8005876 <_Balloc+0x42>
 8005854:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800585c:	b9b8      	cbnz	r0, 800588e <_Balloc+0x5a>
 800585e:	2101      	movs	r1, #1
 8005860:	fa01 f506 	lsl.w	r5, r1, r6
 8005864:	1d6a      	adds	r2, r5, #5
 8005866:	0092      	lsls	r2, r2, #2
 8005868:	4620      	mov	r0, r4
 800586a:	f000 fabf 	bl	8005dec <_calloc_r>
 800586e:	b160      	cbz	r0, 800588a <_Balloc+0x56>
 8005870:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005874:	e00e      	b.n	8005894 <_Balloc+0x60>
 8005876:	2221      	movs	r2, #33	; 0x21
 8005878:	2104      	movs	r1, #4
 800587a:	4620      	mov	r0, r4
 800587c:	f000 fab6 	bl	8005dec <_calloc_r>
 8005880:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005882:	60e8      	str	r0, [r5, #12]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1e4      	bne.n	8005854 <_Balloc+0x20>
 800588a:	2000      	movs	r0, #0
 800588c:	bd70      	pop	{r4, r5, r6, pc}
 800588e:	6802      	ldr	r2, [r0, #0]
 8005890:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005894:	2300      	movs	r3, #0
 8005896:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800589a:	e7f7      	b.n	800588c <_Balloc+0x58>

0800589c <_Bfree>:
 800589c:	b570      	push	{r4, r5, r6, lr}
 800589e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80058a0:	4606      	mov	r6, r0
 80058a2:	460d      	mov	r5, r1
 80058a4:	b93c      	cbnz	r4, 80058b6 <_Bfree+0x1a>
 80058a6:	2010      	movs	r0, #16
 80058a8:	f7fe fc4c 	bl	8004144 <malloc>
 80058ac:	6270      	str	r0, [r6, #36]	; 0x24
 80058ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80058b2:	6004      	str	r4, [r0, #0]
 80058b4:	60c4      	str	r4, [r0, #12]
 80058b6:	b13d      	cbz	r5, 80058c8 <_Bfree+0x2c>
 80058b8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80058ba:	686a      	ldr	r2, [r5, #4]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80058c2:	6029      	str	r1, [r5, #0]
 80058c4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80058c8:	bd70      	pop	{r4, r5, r6, pc}

080058ca <__multadd>:
 80058ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058ce:	690d      	ldr	r5, [r1, #16]
 80058d0:	461f      	mov	r7, r3
 80058d2:	4606      	mov	r6, r0
 80058d4:	460c      	mov	r4, r1
 80058d6:	f101 0c14 	add.w	ip, r1, #20
 80058da:	2300      	movs	r3, #0
 80058dc:	f8dc 0000 	ldr.w	r0, [ip]
 80058e0:	b281      	uxth	r1, r0
 80058e2:	fb02 7101 	mla	r1, r2, r1, r7
 80058e6:	0c0f      	lsrs	r7, r1, #16
 80058e8:	0c00      	lsrs	r0, r0, #16
 80058ea:	fb02 7000 	mla	r0, r2, r0, r7
 80058ee:	b289      	uxth	r1, r1
 80058f0:	3301      	adds	r3, #1
 80058f2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80058f6:	429d      	cmp	r5, r3
 80058f8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80058fc:	f84c 1b04 	str.w	r1, [ip], #4
 8005900:	dcec      	bgt.n	80058dc <__multadd+0x12>
 8005902:	b1d7      	cbz	r7, 800593a <__multadd+0x70>
 8005904:	68a3      	ldr	r3, [r4, #8]
 8005906:	42ab      	cmp	r3, r5
 8005908:	dc12      	bgt.n	8005930 <__multadd+0x66>
 800590a:	6861      	ldr	r1, [r4, #4]
 800590c:	4630      	mov	r0, r6
 800590e:	3101      	adds	r1, #1
 8005910:	f7ff ff90 	bl	8005834 <_Balloc>
 8005914:	6922      	ldr	r2, [r4, #16]
 8005916:	3202      	adds	r2, #2
 8005918:	f104 010c 	add.w	r1, r4, #12
 800591c:	4680      	mov	r8, r0
 800591e:	0092      	lsls	r2, r2, #2
 8005920:	300c      	adds	r0, #12
 8005922:	f7fe fc1f 	bl	8004164 <memcpy>
 8005926:	4621      	mov	r1, r4
 8005928:	4630      	mov	r0, r6
 800592a:	f7ff ffb7 	bl	800589c <_Bfree>
 800592e:	4644      	mov	r4, r8
 8005930:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005934:	3501      	adds	r5, #1
 8005936:	615f      	str	r7, [r3, #20]
 8005938:	6125      	str	r5, [r4, #16]
 800593a:	4620      	mov	r0, r4
 800593c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005940 <__hi0bits>:
 8005940:	0c02      	lsrs	r2, r0, #16
 8005942:	0412      	lsls	r2, r2, #16
 8005944:	4603      	mov	r3, r0
 8005946:	b9b2      	cbnz	r2, 8005976 <__hi0bits+0x36>
 8005948:	0403      	lsls	r3, r0, #16
 800594a:	2010      	movs	r0, #16
 800594c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005950:	bf04      	itt	eq
 8005952:	021b      	lsleq	r3, r3, #8
 8005954:	3008      	addeq	r0, #8
 8005956:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800595a:	bf04      	itt	eq
 800595c:	011b      	lsleq	r3, r3, #4
 800595e:	3004      	addeq	r0, #4
 8005960:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005964:	bf04      	itt	eq
 8005966:	009b      	lsleq	r3, r3, #2
 8005968:	3002      	addeq	r0, #2
 800596a:	2b00      	cmp	r3, #0
 800596c:	db06      	blt.n	800597c <__hi0bits+0x3c>
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	d503      	bpl.n	800597a <__hi0bits+0x3a>
 8005972:	3001      	adds	r0, #1
 8005974:	4770      	bx	lr
 8005976:	2000      	movs	r0, #0
 8005978:	e7e8      	b.n	800594c <__hi0bits+0xc>
 800597a:	2020      	movs	r0, #32
 800597c:	4770      	bx	lr

0800597e <__lo0bits>:
 800597e:	6803      	ldr	r3, [r0, #0]
 8005980:	f013 0207 	ands.w	r2, r3, #7
 8005984:	4601      	mov	r1, r0
 8005986:	d00b      	beq.n	80059a0 <__lo0bits+0x22>
 8005988:	07da      	lsls	r2, r3, #31
 800598a:	d423      	bmi.n	80059d4 <__lo0bits+0x56>
 800598c:	0798      	lsls	r0, r3, #30
 800598e:	bf49      	itett	mi
 8005990:	085b      	lsrmi	r3, r3, #1
 8005992:	089b      	lsrpl	r3, r3, #2
 8005994:	2001      	movmi	r0, #1
 8005996:	600b      	strmi	r3, [r1, #0]
 8005998:	bf5c      	itt	pl
 800599a:	600b      	strpl	r3, [r1, #0]
 800599c:	2002      	movpl	r0, #2
 800599e:	4770      	bx	lr
 80059a0:	b298      	uxth	r0, r3
 80059a2:	b9a8      	cbnz	r0, 80059d0 <__lo0bits+0x52>
 80059a4:	0c1b      	lsrs	r3, r3, #16
 80059a6:	2010      	movs	r0, #16
 80059a8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80059ac:	bf04      	itt	eq
 80059ae:	0a1b      	lsreq	r3, r3, #8
 80059b0:	3008      	addeq	r0, #8
 80059b2:	071a      	lsls	r2, r3, #28
 80059b4:	bf04      	itt	eq
 80059b6:	091b      	lsreq	r3, r3, #4
 80059b8:	3004      	addeq	r0, #4
 80059ba:	079a      	lsls	r2, r3, #30
 80059bc:	bf04      	itt	eq
 80059be:	089b      	lsreq	r3, r3, #2
 80059c0:	3002      	addeq	r0, #2
 80059c2:	07da      	lsls	r2, r3, #31
 80059c4:	d402      	bmi.n	80059cc <__lo0bits+0x4e>
 80059c6:	085b      	lsrs	r3, r3, #1
 80059c8:	d006      	beq.n	80059d8 <__lo0bits+0x5a>
 80059ca:	3001      	adds	r0, #1
 80059cc:	600b      	str	r3, [r1, #0]
 80059ce:	4770      	bx	lr
 80059d0:	4610      	mov	r0, r2
 80059d2:	e7e9      	b.n	80059a8 <__lo0bits+0x2a>
 80059d4:	2000      	movs	r0, #0
 80059d6:	4770      	bx	lr
 80059d8:	2020      	movs	r0, #32
 80059da:	4770      	bx	lr

080059dc <__i2b>:
 80059dc:	b510      	push	{r4, lr}
 80059de:	460c      	mov	r4, r1
 80059e0:	2101      	movs	r1, #1
 80059e2:	f7ff ff27 	bl	8005834 <_Balloc>
 80059e6:	2201      	movs	r2, #1
 80059e8:	6144      	str	r4, [r0, #20]
 80059ea:	6102      	str	r2, [r0, #16]
 80059ec:	bd10      	pop	{r4, pc}

080059ee <__multiply>:
 80059ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059f2:	4614      	mov	r4, r2
 80059f4:	690a      	ldr	r2, [r1, #16]
 80059f6:	6923      	ldr	r3, [r4, #16]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	bfb8      	it	lt
 80059fc:	460b      	movlt	r3, r1
 80059fe:	4688      	mov	r8, r1
 8005a00:	bfbc      	itt	lt
 8005a02:	46a0      	movlt	r8, r4
 8005a04:	461c      	movlt	r4, r3
 8005a06:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005a0a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005a0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005a12:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005a16:	eb07 0609 	add.w	r6, r7, r9
 8005a1a:	42b3      	cmp	r3, r6
 8005a1c:	bfb8      	it	lt
 8005a1e:	3101      	addlt	r1, #1
 8005a20:	f7ff ff08 	bl	8005834 <_Balloc>
 8005a24:	f100 0514 	add.w	r5, r0, #20
 8005a28:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005a2c:	462b      	mov	r3, r5
 8005a2e:	2200      	movs	r2, #0
 8005a30:	4573      	cmp	r3, lr
 8005a32:	d316      	bcc.n	8005a62 <__multiply+0x74>
 8005a34:	f104 0214 	add.w	r2, r4, #20
 8005a38:	f108 0114 	add.w	r1, r8, #20
 8005a3c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005a40:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005a44:	9300      	str	r3, [sp, #0]
 8005a46:	9b00      	ldr	r3, [sp, #0]
 8005a48:	9201      	str	r2, [sp, #4]
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d80c      	bhi.n	8005a68 <__multiply+0x7a>
 8005a4e:	2e00      	cmp	r6, #0
 8005a50:	dd03      	ble.n	8005a5a <__multiply+0x6c>
 8005a52:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d05d      	beq.n	8005b16 <__multiply+0x128>
 8005a5a:	6106      	str	r6, [r0, #16]
 8005a5c:	b003      	add	sp, #12
 8005a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a62:	f843 2b04 	str.w	r2, [r3], #4
 8005a66:	e7e3      	b.n	8005a30 <__multiply+0x42>
 8005a68:	f8b2 b000 	ldrh.w	fp, [r2]
 8005a6c:	f1bb 0f00 	cmp.w	fp, #0
 8005a70:	d023      	beq.n	8005aba <__multiply+0xcc>
 8005a72:	4689      	mov	r9, r1
 8005a74:	46ac      	mov	ip, r5
 8005a76:	f04f 0800 	mov.w	r8, #0
 8005a7a:	f859 4b04 	ldr.w	r4, [r9], #4
 8005a7e:	f8dc a000 	ldr.w	sl, [ip]
 8005a82:	b2a3      	uxth	r3, r4
 8005a84:	fa1f fa8a 	uxth.w	sl, sl
 8005a88:	fb0b a303 	mla	r3, fp, r3, sl
 8005a8c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005a90:	f8dc 4000 	ldr.w	r4, [ip]
 8005a94:	4443      	add	r3, r8
 8005a96:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005a9a:	fb0b 840a 	mla	r4, fp, sl, r8
 8005a9e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005aa2:	46e2      	mov	sl, ip
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005aaa:	454f      	cmp	r7, r9
 8005aac:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005ab0:	f84a 3b04 	str.w	r3, [sl], #4
 8005ab4:	d82b      	bhi.n	8005b0e <__multiply+0x120>
 8005ab6:	f8cc 8004 	str.w	r8, [ip, #4]
 8005aba:	9b01      	ldr	r3, [sp, #4]
 8005abc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005ac0:	3204      	adds	r2, #4
 8005ac2:	f1ba 0f00 	cmp.w	sl, #0
 8005ac6:	d020      	beq.n	8005b0a <__multiply+0x11c>
 8005ac8:	682b      	ldr	r3, [r5, #0]
 8005aca:	4689      	mov	r9, r1
 8005acc:	46a8      	mov	r8, r5
 8005ace:	f04f 0b00 	mov.w	fp, #0
 8005ad2:	f8b9 c000 	ldrh.w	ip, [r9]
 8005ad6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005ada:	fb0a 440c 	mla	r4, sl, ip, r4
 8005ade:	445c      	add	r4, fp
 8005ae0:	46c4      	mov	ip, r8
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005ae8:	f84c 3b04 	str.w	r3, [ip], #4
 8005aec:	f859 3b04 	ldr.w	r3, [r9], #4
 8005af0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005af4:	0c1b      	lsrs	r3, r3, #16
 8005af6:	fb0a b303 	mla	r3, sl, r3, fp
 8005afa:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005afe:	454f      	cmp	r7, r9
 8005b00:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005b04:	d805      	bhi.n	8005b12 <__multiply+0x124>
 8005b06:	f8c8 3004 	str.w	r3, [r8, #4]
 8005b0a:	3504      	adds	r5, #4
 8005b0c:	e79b      	b.n	8005a46 <__multiply+0x58>
 8005b0e:	46d4      	mov	ip, sl
 8005b10:	e7b3      	b.n	8005a7a <__multiply+0x8c>
 8005b12:	46e0      	mov	r8, ip
 8005b14:	e7dd      	b.n	8005ad2 <__multiply+0xe4>
 8005b16:	3e01      	subs	r6, #1
 8005b18:	e799      	b.n	8005a4e <__multiply+0x60>
	...

08005b1c <__pow5mult>:
 8005b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b20:	4615      	mov	r5, r2
 8005b22:	f012 0203 	ands.w	r2, r2, #3
 8005b26:	4606      	mov	r6, r0
 8005b28:	460f      	mov	r7, r1
 8005b2a:	d007      	beq.n	8005b3c <__pow5mult+0x20>
 8005b2c:	3a01      	subs	r2, #1
 8005b2e:	4c21      	ldr	r4, [pc, #132]	; (8005bb4 <__pow5mult+0x98>)
 8005b30:	2300      	movs	r3, #0
 8005b32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005b36:	f7ff fec8 	bl	80058ca <__multadd>
 8005b3a:	4607      	mov	r7, r0
 8005b3c:	10ad      	asrs	r5, r5, #2
 8005b3e:	d035      	beq.n	8005bac <__pow5mult+0x90>
 8005b40:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005b42:	b93c      	cbnz	r4, 8005b54 <__pow5mult+0x38>
 8005b44:	2010      	movs	r0, #16
 8005b46:	f7fe fafd 	bl	8004144 <malloc>
 8005b4a:	6270      	str	r0, [r6, #36]	; 0x24
 8005b4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005b50:	6004      	str	r4, [r0, #0]
 8005b52:	60c4      	str	r4, [r0, #12]
 8005b54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005b58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005b5c:	b94c      	cbnz	r4, 8005b72 <__pow5mult+0x56>
 8005b5e:	f240 2171 	movw	r1, #625	; 0x271
 8005b62:	4630      	mov	r0, r6
 8005b64:	f7ff ff3a 	bl	80059dc <__i2b>
 8005b68:	2300      	movs	r3, #0
 8005b6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8005b6e:	4604      	mov	r4, r0
 8005b70:	6003      	str	r3, [r0, #0]
 8005b72:	f04f 0800 	mov.w	r8, #0
 8005b76:	07eb      	lsls	r3, r5, #31
 8005b78:	d50a      	bpl.n	8005b90 <__pow5mult+0x74>
 8005b7a:	4639      	mov	r1, r7
 8005b7c:	4622      	mov	r2, r4
 8005b7e:	4630      	mov	r0, r6
 8005b80:	f7ff ff35 	bl	80059ee <__multiply>
 8005b84:	4639      	mov	r1, r7
 8005b86:	4681      	mov	r9, r0
 8005b88:	4630      	mov	r0, r6
 8005b8a:	f7ff fe87 	bl	800589c <_Bfree>
 8005b8e:	464f      	mov	r7, r9
 8005b90:	106d      	asrs	r5, r5, #1
 8005b92:	d00b      	beq.n	8005bac <__pow5mult+0x90>
 8005b94:	6820      	ldr	r0, [r4, #0]
 8005b96:	b938      	cbnz	r0, 8005ba8 <__pow5mult+0x8c>
 8005b98:	4622      	mov	r2, r4
 8005b9a:	4621      	mov	r1, r4
 8005b9c:	4630      	mov	r0, r6
 8005b9e:	f7ff ff26 	bl	80059ee <__multiply>
 8005ba2:	6020      	str	r0, [r4, #0]
 8005ba4:	f8c0 8000 	str.w	r8, [r0]
 8005ba8:	4604      	mov	r4, r0
 8005baa:	e7e4      	b.n	8005b76 <__pow5mult+0x5a>
 8005bac:	4638      	mov	r0, r7
 8005bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bb2:	bf00      	nop
 8005bb4:	08007250 	.word	0x08007250

08005bb8 <__lshift>:
 8005bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bbc:	460c      	mov	r4, r1
 8005bbe:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005bc2:	6923      	ldr	r3, [r4, #16]
 8005bc4:	6849      	ldr	r1, [r1, #4]
 8005bc6:	eb0a 0903 	add.w	r9, sl, r3
 8005bca:	68a3      	ldr	r3, [r4, #8]
 8005bcc:	4607      	mov	r7, r0
 8005bce:	4616      	mov	r6, r2
 8005bd0:	f109 0501 	add.w	r5, r9, #1
 8005bd4:	42ab      	cmp	r3, r5
 8005bd6:	db32      	blt.n	8005c3e <__lshift+0x86>
 8005bd8:	4638      	mov	r0, r7
 8005bda:	f7ff fe2b 	bl	8005834 <_Balloc>
 8005bde:	2300      	movs	r3, #0
 8005be0:	4680      	mov	r8, r0
 8005be2:	f100 0114 	add.w	r1, r0, #20
 8005be6:	461a      	mov	r2, r3
 8005be8:	4553      	cmp	r3, sl
 8005bea:	db2b      	blt.n	8005c44 <__lshift+0x8c>
 8005bec:	6920      	ldr	r0, [r4, #16]
 8005bee:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005bf2:	f104 0314 	add.w	r3, r4, #20
 8005bf6:	f016 021f 	ands.w	r2, r6, #31
 8005bfa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005bfe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005c02:	d025      	beq.n	8005c50 <__lshift+0x98>
 8005c04:	f1c2 0e20 	rsb	lr, r2, #32
 8005c08:	2000      	movs	r0, #0
 8005c0a:	681e      	ldr	r6, [r3, #0]
 8005c0c:	468a      	mov	sl, r1
 8005c0e:	4096      	lsls	r6, r2
 8005c10:	4330      	orrs	r0, r6
 8005c12:	f84a 0b04 	str.w	r0, [sl], #4
 8005c16:	f853 0b04 	ldr.w	r0, [r3], #4
 8005c1a:	459c      	cmp	ip, r3
 8005c1c:	fa20 f00e 	lsr.w	r0, r0, lr
 8005c20:	d814      	bhi.n	8005c4c <__lshift+0x94>
 8005c22:	6048      	str	r0, [r1, #4]
 8005c24:	b108      	cbz	r0, 8005c2a <__lshift+0x72>
 8005c26:	f109 0502 	add.w	r5, r9, #2
 8005c2a:	3d01      	subs	r5, #1
 8005c2c:	4638      	mov	r0, r7
 8005c2e:	f8c8 5010 	str.w	r5, [r8, #16]
 8005c32:	4621      	mov	r1, r4
 8005c34:	f7ff fe32 	bl	800589c <_Bfree>
 8005c38:	4640      	mov	r0, r8
 8005c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c3e:	3101      	adds	r1, #1
 8005c40:	005b      	lsls	r3, r3, #1
 8005c42:	e7c7      	b.n	8005bd4 <__lshift+0x1c>
 8005c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005c48:	3301      	adds	r3, #1
 8005c4a:	e7cd      	b.n	8005be8 <__lshift+0x30>
 8005c4c:	4651      	mov	r1, sl
 8005c4e:	e7dc      	b.n	8005c0a <__lshift+0x52>
 8005c50:	3904      	subs	r1, #4
 8005c52:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c56:	f841 2f04 	str.w	r2, [r1, #4]!
 8005c5a:	459c      	cmp	ip, r3
 8005c5c:	d8f9      	bhi.n	8005c52 <__lshift+0x9a>
 8005c5e:	e7e4      	b.n	8005c2a <__lshift+0x72>

08005c60 <__mcmp>:
 8005c60:	6903      	ldr	r3, [r0, #16]
 8005c62:	690a      	ldr	r2, [r1, #16]
 8005c64:	1a9b      	subs	r3, r3, r2
 8005c66:	b530      	push	{r4, r5, lr}
 8005c68:	d10c      	bne.n	8005c84 <__mcmp+0x24>
 8005c6a:	0092      	lsls	r2, r2, #2
 8005c6c:	3014      	adds	r0, #20
 8005c6e:	3114      	adds	r1, #20
 8005c70:	1884      	adds	r4, r0, r2
 8005c72:	4411      	add	r1, r2
 8005c74:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005c78:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005c7c:	4295      	cmp	r5, r2
 8005c7e:	d003      	beq.n	8005c88 <__mcmp+0x28>
 8005c80:	d305      	bcc.n	8005c8e <__mcmp+0x2e>
 8005c82:	2301      	movs	r3, #1
 8005c84:	4618      	mov	r0, r3
 8005c86:	bd30      	pop	{r4, r5, pc}
 8005c88:	42a0      	cmp	r0, r4
 8005c8a:	d3f3      	bcc.n	8005c74 <__mcmp+0x14>
 8005c8c:	e7fa      	b.n	8005c84 <__mcmp+0x24>
 8005c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c92:	e7f7      	b.n	8005c84 <__mcmp+0x24>

08005c94 <__mdiff>:
 8005c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c98:	460d      	mov	r5, r1
 8005c9a:	4607      	mov	r7, r0
 8005c9c:	4611      	mov	r1, r2
 8005c9e:	4628      	mov	r0, r5
 8005ca0:	4614      	mov	r4, r2
 8005ca2:	f7ff ffdd 	bl	8005c60 <__mcmp>
 8005ca6:	1e06      	subs	r6, r0, #0
 8005ca8:	d108      	bne.n	8005cbc <__mdiff+0x28>
 8005caa:	4631      	mov	r1, r6
 8005cac:	4638      	mov	r0, r7
 8005cae:	f7ff fdc1 	bl	8005834 <_Balloc>
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cbc:	bfa4      	itt	ge
 8005cbe:	4623      	movge	r3, r4
 8005cc0:	462c      	movge	r4, r5
 8005cc2:	4638      	mov	r0, r7
 8005cc4:	6861      	ldr	r1, [r4, #4]
 8005cc6:	bfa6      	itte	ge
 8005cc8:	461d      	movge	r5, r3
 8005cca:	2600      	movge	r6, #0
 8005ccc:	2601      	movlt	r6, #1
 8005cce:	f7ff fdb1 	bl	8005834 <_Balloc>
 8005cd2:	692b      	ldr	r3, [r5, #16]
 8005cd4:	60c6      	str	r6, [r0, #12]
 8005cd6:	6926      	ldr	r6, [r4, #16]
 8005cd8:	f105 0914 	add.w	r9, r5, #20
 8005cdc:	f104 0214 	add.w	r2, r4, #20
 8005ce0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005ce4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005ce8:	f100 0514 	add.w	r5, r0, #20
 8005cec:	f04f 0e00 	mov.w	lr, #0
 8005cf0:	f852 ab04 	ldr.w	sl, [r2], #4
 8005cf4:	f859 4b04 	ldr.w	r4, [r9], #4
 8005cf8:	fa1e f18a 	uxtah	r1, lr, sl
 8005cfc:	b2a3      	uxth	r3, r4
 8005cfe:	1ac9      	subs	r1, r1, r3
 8005d00:	0c23      	lsrs	r3, r4, #16
 8005d02:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005d06:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005d0a:	b289      	uxth	r1, r1
 8005d0c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005d10:	45c8      	cmp	r8, r9
 8005d12:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005d16:	4694      	mov	ip, r2
 8005d18:	f845 3b04 	str.w	r3, [r5], #4
 8005d1c:	d8e8      	bhi.n	8005cf0 <__mdiff+0x5c>
 8005d1e:	45bc      	cmp	ip, r7
 8005d20:	d304      	bcc.n	8005d2c <__mdiff+0x98>
 8005d22:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005d26:	b183      	cbz	r3, 8005d4a <__mdiff+0xb6>
 8005d28:	6106      	str	r6, [r0, #16]
 8005d2a:	e7c5      	b.n	8005cb8 <__mdiff+0x24>
 8005d2c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005d30:	fa1e f381 	uxtah	r3, lr, r1
 8005d34:	141a      	asrs	r2, r3, #16
 8005d36:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d40:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005d44:	f845 3b04 	str.w	r3, [r5], #4
 8005d48:	e7e9      	b.n	8005d1e <__mdiff+0x8a>
 8005d4a:	3e01      	subs	r6, #1
 8005d4c:	e7e9      	b.n	8005d22 <__mdiff+0x8e>

08005d4e <__d2b>:
 8005d4e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005d52:	460e      	mov	r6, r1
 8005d54:	2101      	movs	r1, #1
 8005d56:	ec59 8b10 	vmov	r8, r9, d0
 8005d5a:	4615      	mov	r5, r2
 8005d5c:	f7ff fd6a 	bl	8005834 <_Balloc>
 8005d60:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005d64:	4607      	mov	r7, r0
 8005d66:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005d6a:	bb34      	cbnz	r4, 8005dba <__d2b+0x6c>
 8005d6c:	9301      	str	r3, [sp, #4]
 8005d6e:	f1b8 0300 	subs.w	r3, r8, #0
 8005d72:	d027      	beq.n	8005dc4 <__d2b+0x76>
 8005d74:	a802      	add	r0, sp, #8
 8005d76:	f840 3d08 	str.w	r3, [r0, #-8]!
 8005d7a:	f7ff fe00 	bl	800597e <__lo0bits>
 8005d7e:	9900      	ldr	r1, [sp, #0]
 8005d80:	b1f0      	cbz	r0, 8005dc0 <__d2b+0x72>
 8005d82:	9a01      	ldr	r2, [sp, #4]
 8005d84:	f1c0 0320 	rsb	r3, r0, #32
 8005d88:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8c:	430b      	orrs	r3, r1
 8005d8e:	40c2      	lsrs	r2, r0
 8005d90:	617b      	str	r3, [r7, #20]
 8005d92:	9201      	str	r2, [sp, #4]
 8005d94:	9b01      	ldr	r3, [sp, #4]
 8005d96:	61bb      	str	r3, [r7, #24]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	bf14      	ite	ne
 8005d9c:	2102      	movne	r1, #2
 8005d9e:	2101      	moveq	r1, #1
 8005da0:	6139      	str	r1, [r7, #16]
 8005da2:	b1c4      	cbz	r4, 8005dd6 <__d2b+0x88>
 8005da4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005da8:	4404      	add	r4, r0
 8005daa:	6034      	str	r4, [r6, #0]
 8005dac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005db0:	6028      	str	r0, [r5, #0]
 8005db2:	4638      	mov	r0, r7
 8005db4:	b003      	add	sp, #12
 8005db6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005dba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005dbe:	e7d5      	b.n	8005d6c <__d2b+0x1e>
 8005dc0:	6179      	str	r1, [r7, #20]
 8005dc2:	e7e7      	b.n	8005d94 <__d2b+0x46>
 8005dc4:	a801      	add	r0, sp, #4
 8005dc6:	f7ff fdda 	bl	800597e <__lo0bits>
 8005dca:	9b01      	ldr	r3, [sp, #4]
 8005dcc:	617b      	str	r3, [r7, #20]
 8005dce:	2101      	movs	r1, #1
 8005dd0:	6139      	str	r1, [r7, #16]
 8005dd2:	3020      	adds	r0, #32
 8005dd4:	e7e5      	b.n	8005da2 <__d2b+0x54>
 8005dd6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005dda:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005dde:	6030      	str	r0, [r6, #0]
 8005de0:	6918      	ldr	r0, [r3, #16]
 8005de2:	f7ff fdad 	bl	8005940 <__hi0bits>
 8005de6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005dea:	e7e1      	b.n	8005db0 <__d2b+0x62>

08005dec <_calloc_r>:
 8005dec:	b538      	push	{r3, r4, r5, lr}
 8005dee:	fb02 f401 	mul.w	r4, r2, r1
 8005df2:	4621      	mov	r1, r4
 8005df4:	f7fe fa18 	bl	8004228 <_malloc_r>
 8005df8:	4605      	mov	r5, r0
 8005dfa:	b118      	cbz	r0, 8005e04 <_calloc_r+0x18>
 8005dfc:	4622      	mov	r2, r4
 8005dfe:	2100      	movs	r1, #0
 8005e00:	f7fe f9bb 	bl	800417a <memset>
 8005e04:	4628      	mov	r0, r5
 8005e06:	bd38      	pop	{r3, r4, r5, pc}

08005e08 <__ascii_wctomb>:
 8005e08:	b149      	cbz	r1, 8005e1e <__ascii_wctomb+0x16>
 8005e0a:	2aff      	cmp	r2, #255	; 0xff
 8005e0c:	bf85      	ittet	hi
 8005e0e:	238a      	movhi	r3, #138	; 0x8a
 8005e10:	6003      	strhi	r3, [r0, #0]
 8005e12:	700a      	strbls	r2, [r1, #0]
 8005e14:	f04f 30ff 	movhi.w	r0, #4294967295
 8005e18:	bf98      	it	ls
 8005e1a:	2001      	movls	r0, #1
 8005e1c:	4770      	bx	lr
 8005e1e:	4608      	mov	r0, r1
 8005e20:	4770      	bx	lr
 8005e22:	0000      	movs	r0, r0
 8005e24:	0000      	movs	r0, r0
	...

08005e28 <cos>:
 8005e28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005e2a:	ec51 0b10 	vmov	r0, r1, d0
 8005e2e:	4a1e      	ldr	r2, [pc, #120]	; (8005ea8 <cos+0x80>)
 8005e30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005e34:	4293      	cmp	r3, r2
 8005e36:	dc06      	bgt.n	8005e46 <cos+0x1e>
 8005e38:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8005ea0 <cos+0x78>
 8005e3c:	f000 fb80 	bl	8006540 <__kernel_cos>
 8005e40:	ec51 0b10 	vmov	r0, r1, d0
 8005e44:	e007      	b.n	8005e56 <cos+0x2e>
 8005e46:	4a19      	ldr	r2, [pc, #100]	; (8005eac <cos+0x84>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	dd09      	ble.n	8005e60 <cos+0x38>
 8005e4c:	ee10 2a10 	vmov	r2, s0
 8005e50:	460b      	mov	r3, r1
 8005e52:	f7fa f9c5 	bl	80001e0 <__aeabi_dsub>
 8005e56:	ec41 0b10 	vmov	d0, r0, r1
 8005e5a:	b005      	add	sp, #20
 8005e5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005e60:	4668      	mov	r0, sp
 8005e62:	f000 f8c9 	bl	8005ff8 <__ieee754_rem_pio2>
 8005e66:	f000 0003 	and.w	r0, r0, #3
 8005e6a:	2801      	cmp	r0, #1
 8005e6c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005e70:	ed9d 0b00 	vldr	d0, [sp]
 8005e74:	d007      	beq.n	8005e86 <cos+0x5e>
 8005e76:	2802      	cmp	r0, #2
 8005e78:	d00e      	beq.n	8005e98 <cos+0x70>
 8005e7a:	2800      	cmp	r0, #0
 8005e7c:	d0de      	beq.n	8005e3c <cos+0x14>
 8005e7e:	2001      	movs	r0, #1
 8005e80:	f000 ff66 	bl	8006d50 <__kernel_sin>
 8005e84:	e7dc      	b.n	8005e40 <cos+0x18>
 8005e86:	f000 ff63 	bl	8006d50 <__kernel_sin>
 8005e8a:	ec53 2b10 	vmov	r2, r3, d0
 8005e8e:	ee10 0a10 	vmov	r0, s0
 8005e92:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005e96:	e7de      	b.n	8005e56 <cos+0x2e>
 8005e98:	f000 fb52 	bl	8006540 <__kernel_cos>
 8005e9c:	e7f5      	b.n	8005e8a <cos+0x62>
 8005e9e:	bf00      	nop
	...
 8005ea8:	3fe921fb 	.word	0x3fe921fb
 8005eac:	7fefffff 	.word	0x7fefffff

08005eb0 <sin>:
 8005eb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005eb2:	ec51 0b10 	vmov	r0, r1, d0
 8005eb6:	4a20      	ldr	r2, [pc, #128]	; (8005f38 <sin+0x88>)
 8005eb8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	dc07      	bgt.n	8005ed0 <sin+0x20>
 8005ec0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8005f30 <sin+0x80>
 8005ec4:	2000      	movs	r0, #0
 8005ec6:	f000 ff43 	bl	8006d50 <__kernel_sin>
 8005eca:	ec51 0b10 	vmov	r0, r1, d0
 8005ece:	e007      	b.n	8005ee0 <sin+0x30>
 8005ed0:	4a1a      	ldr	r2, [pc, #104]	; (8005f3c <sin+0x8c>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	dd09      	ble.n	8005eea <sin+0x3a>
 8005ed6:	ee10 2a10 	vmov	r2, s0
 8005eda:	460b      	mov	r3, r1
 8005edc:	f7fa f980 	bl	80001e0 <__aeabi_dsub>
 8005ee0:	ec41 0b10 	vmov	d0, r0, r1
 8005ee4:	b005      	add	sp, #20
 8005ee6:	f85d fb04 	ldr.w	pc, [sp], #4
 8005eea:	4668      	mov	r0, sp
 8005eec:	f000 f884 	bl	8005ff8 <__ieee754_rem_pio2>
 8005ef0:	f000 0003 	and.w	r0, r0, #3
 8005ef4:	2801      	cmp	r0, #1
 8005ef6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005efa:	ed9d 0b00 	vldr	d0, [sp]
 8005efe:	d004      	beq.n	8005f0a <sin+0x5a>
 8005f00:	2802      	cmp	r0, #2
 8005f02:	d005      	beq.n	8005f10 <sin+0x60>
 8005f04:	b970      	cbnz	r0, 8005f24 <sin+0x74>
 8005f06:	2001      	movs	r0, #1
 8005f08:	e7dd      	b.n	8005ec6 <sin+0x16>
 8005f0a:	f000 fb19 	bl	8006540 <__kernel_cos>
 8005f0e:	e7dc      	b.n	8005eca <sin+0x1a>
 8005f10:	2001      	movs	r0, #1
 8005f12:	f000 ff1d 	bl	8006d50 <__kernel_sin>
 8005f16:	ec53 2b10 	vmov	r2, r3, d0
 8005f1a:	ee10 0a10 	vmov	r0, s0
 8005f1e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005f22:	e7dd      	b.n	8005ee0 <sin+0x30>
 8005f24:	f000 fb0c 	bl	8006540 <__kernel_cos>
 8005f28:	e7f5      	b.n	8005f16 <sin+0x66>
 8005f2a:	bf00      	nop
 8005f2c:	f3af 8000 	nop.w
	...
 8005f38:	3fe921fb 	.word	0x3fe921fb
 8005f3c:	7fefffff 	.word	0x7fefffff

08005f40 <sqrt>:
 8005f40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f44:	ed2d 8b02 	vpush	{d8}
 8005f48:	b08b      	sub	sp, #44	; 0x2c
 8005f4a:	ec55 4b10 	vmov	r4, r5, d0
 8005f4e:	f000 fa45 	bl	80063dc <__ieee754_sqrt>
 8005f52:	4b26      	ldr	r3, [pc, #152]	; (8005fec <sqrt+0xac>)
 8005f54:	eeb0 8a40 	vmov.f32	s16, s0
 8005f58:	eef0 8a60 	vmov.f32	s17, s1
 8005f5c:	f993 6000 	ldrsb.w	r6, [r3]
 8005f60:	1c73      	adds	r3, r6, #1
 8005f62:	d02a      	beq.n	8005fba <sqrt+0x7a>
 8005f64:	4622      	mov	r2, r4
 8005f66:	462b      	mov	r3, r5
 8005f68:	4620      	mov	r0, r4
 8005f6a:	4629      	mov	r1, r5
 8005f6c:	f7fa fd8a 	bl	8000a84 <__aeabi_dcmpun>
 8005f70:	4607      	mov	r7, r0
 8005f72:	bb10      	cbnz	r0, 8005fba <sqrt+0x7a>
 8005f74:	f04f 0800 	mov.w	r8, #0
 8005f78:	f04f 0900 	mov.w	r9, #0
 8005f7c:	4642      	mov	r2, r8
 8005f7e:	464b      	mov	r3, r9
 8005f80:	4620      	mov	r0, r4
 8005f82:	4629      	mov	r1, r5
 8005f84:	f7fa fd56 	bl	8000a34 <__aeabi_dcmplt>
 8005f88:	b1b8      	cbz	r0, 8005fba <sqrt+0x7a>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	9300      	str	r3, [sp, #0]
 8005f8e:	4b18      	ldr	r3, [pc, #96]	; (8005ff0 <sqrt+0xb0>)
 8005f90:	9301      	str	r3, [sp, #4]
 8005f92:	9708      	str	r7, [sp, #32]
 8005f94:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005f98:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005f9c:	b9b6      	cbnz	r6, 8005fcc <sqrt+0x8c>
 8005f9e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005fa2:	4668      	mov	r0, sp
 8005fa4:	f001 f81c 	bl	8006fe0 <matherr>
 8005fa8:	b1d0      	cbz	r0, 8005fe0 <sqrt+0xa0>
 8005faa:	9b08      	ldr	r3, [sp, #32]
 8005fac:	b11b      	cbz	r3, 8005fb6 <sqrt+0x76>
 8005fae:	f7fe f88b 	bl	80040c8 <__errno>
 8005fb2:	9b08      	ldr	r3, [sp, #32]
 8005fb4:	6003      	str	r3, [r0, #0]
 8005fb6:	ed9d 8b06 	vldr	d8, [sp, #24]
 8005fba:	eeb0 0a48 	vmov.f32	s0, s16
 8005fbe:	eef0 0a68 	vmov.f32	s1, s17
 8005fc2:	b00b      	add	sp, #44	; 0x2c
 8005fc4:	ecbd 8b02 	vpop	{d8}
 8005fc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005fcc:	4642      	mov	r2, r8
 8005fce:	464b      	mov	r3, r9
 8005fd0:	4640      	mov	r0, r8
 8005fd2:	4649      	mov	r1, r9
 8005fd4:	f7fa fbe6 	bl	80007a4 <__aeabi_ddiv>
 8005fd8:	2e02      	cmp	r6, #2
 8005fda:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005fde:	d1e0      	bne.n	8005fa2 <sqrt+0x62>
 8005fe0:	f7fe f872 	bl	80040c8 <__errno>
 8005fe4:	2321      	movs	r3, #33	; 0x21
 8005fe6:	6003      	str	r3, [r0, #0]
 8005fe8:	e7df      	b.n	8005faa <sqrt+0x6a>
 8005fea:	bf00      	nop
 8005fec:	200001dc 	.word	0x200001dc
 8005ff0:	0800735d 	.word	0x0800735d
 8005ff4:	00000000 	.word	0x00000000

08005ff8 <__ieee754_rem_pio2>:
 8005ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ffc:	ec57 6b10 	vmov	r6, r7, d0
 8006000:	4bc3      	ldr	r3, [pc, #780]	; (8006310 <__ieee754_rem_pio2+0x318>)
 8006002:	b08d      	sub	sp, #52	; 0x34
 8006004:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006008:	4598      	cmp	r8, r3
 800600a:	4604      	mov	r4, r0
 800600c:	9704      	str	r7, [sp, #16]
 800600e:	dc07      	bgt.n	8006020 <__ieee754_rem_pio2+0x28>
 8006010:	2200      	movs	r2, #0
 8006012:	2300      	movs	r3, #0
 8006014:	ed84 0b00 	vstr	d0, [r4]
 8006018:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800601c:	2500      	movs	r5, #0
 800601e:	e027      	b.n	8006070 <__ieee754_rem_pio2+0x78>
 8006020:	4bbc      	ldr	r3, [pc, #752]	; (8006314 <__ieee754_rem_pio2+0x31c>)
 8006022:	4598      	cmp	r8, r3
 8006024:	dc75      	bgt.n	8006112 <__ieee754_rem_pio2+0x11a>
 8006026:	9b04      	ldr	r3, [sp, #16]
 8006028:	4dbb      	ldr	r5, [pc, #748]	; (8006318 <__ieee754_rem_pio2+0x320>)
 800602a:	2b00      	cmp	r3, #0
 800602c:	ee10 0a10 	vmov	r0, s0
 8006030:	a3a9      	add	r3, pc, #676	; (adr r3, 80062d8 <__ieee754_rem_pio2+0x2e0>)
 8006032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006036:	4639      	mov	r1, r7
 8006038:	dd36      	ble.n	80060a8 <__ieee754_rem_pio2+0xb0>
 800603a:	f7fa f8d1 	bl	80001e0 <__aeabi_dsub>
 800603e:	45a8      	cmp	r8, r5
 8006040:	4606      	mov	r6, r0
 8006042:	460f      	mov	r7, r1
 8006044:	d018      	beq.n	8006078 <__ieee754_rem_pio2+0x80>
 8006046:	a3a6      	add	r3, pc, #664	; (adr r3, 80062e0 <__ieee754_rem_pio2+0x2e8>)
 8006048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604c:	f7fa f8c8 	bl	80001e0 <__aeabi_dsub>
 8006050:	4602      	mov	r2, r0
 8006052:	460b      	mov	r3, r1
 8006054:	e9c4 2300 	strd	r2, r3, [r4]
 8006058:	4630      	mov	r0, r6
 800605a:	4639      	mov	r1, r7
 800605c:	f7fa f8c0 	bl	80001e0 <__aeabi_dsub>
 8006060:	a39f      	add	r3, pc, #636	; (adr r3, 80062e0 <__ieee754_rem_pio2+0x2e8>)
 8006062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006066:	f7fa f8bb 	bl	80001e0 <__aeabi_dsub>
 800606a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800606e:	2501      	movs	r5, #1
 8006070:	4628      	mov	r0, r5
 8006072:	b00d      	add	sp, #52	; 0x34
 8006074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006078:	a39b      	add	r3, pc, #620	; (adr r3, 80062e8 <__ieee754_rem_pio2+0x2f0>)
 800607a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607e:	f7fa f8af 	bl	80001e0 <__aeabi_dsub>
 8006082:	a39b      	add	r3, pc, #620	; (adr r3, 80062f0 <__ieee754_rem_pio2+0x2f8>)
 8006084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006088:	4606      	mov	r6, r0
 800608a:	460f      	mov	r7, r1
 800608c:	f7fa f8a8 	bl	80001e0 <__aeabi_dsub>
 8006090:	4602      	mov	r2, r0
 8006092:	460b      	mov	r3, r1
 8006094:	e9c4 2300 	strd	r2, r3, [r4]
 8006098:	4630      	mov	r0, r6
 800609a:	4639      	mov	r1, r7
 800609c:	f7fa f8a0 	bl	80001e0 <__aeabi_dsub>
 80060a0:	a393      	add	r3, pc, #588	; (adr r3, 80062f0 <__ieee754_rem_pio2+0x2f8>)
 80060a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a6:	e7de      	b.n	8006066 <__ieee754_rem_pio2+0x6e>
 80060a8:	f7fa f89c 	bl	80001e4 <__adddf3>
 80060ac:	45a8      	cmp	r8, r5
 80060ae:	4606      	mov	r6, r0
 80060b0:	460f      	mov	r7, r1
 80060b2:	d016      	beq.n	80060e2 <__ieee754_rem_pio2+0xea>
 80060b4:	a38a      	add	r3, pc, #552	; (adr r3, 80062e0 <__ieee754_rem_pio2+0x2e8>)
 80060b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ba:	f7fa f893 	bl	80001e4 <__adddf3>
 80060be:	4602      	mov	r2, r0
 80060c0:	460b      	mov	r3, r1
 80060c2:	e9c4 2300 	strd	r2, r3, [r4]
 80060c6:	4630      	mov	r0, r6
 80060c8:	4639      	mov	r1, r7
 80060ca:	f7fa f889 	bl	80001e0 <__aeabi_dsub>
 80060ce:	a384      	add	r3, pc, #528	; (adr r3, 80062e0 <__ieee754_rem_pio2+0x2e8>)
 80060d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d4:	f7fa f886 	bl	80001e4 <__adddf3>
 80060d8:	f04f 35ff 	mov.w	r5, #4294967295
 80060dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80060e0:	e7c6      	b.n	8006070 <__ieee754_rem_pio2+0x78>
 80060e2:	a381      	add	r3, pc, #516	; (adr r3, 80062e8 <__ieee754_rem_pio2+0x2f0>)
 80060e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e8:	f7fa f87c 	bl	80001e4 <__adddf3>
 80060ec:	a380      	add	r3, pc, #512	; (adr r3, 80062f0 <__ieee754_rem_pio2+0x2f8>)
 80060ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f2:	4606      	mov	r6, r0
 80060f4:	460f      	mov	r7, r1
 80060f6:	f7fa f875 	bl	80001e4 <__adddf3>
 80060fa:	4602      	mov	r2, r0
 80060fc:	460b      	mov	r3, r1
 80060fe:	e9c4 2300 	strd	r2, r3, [r4]
 8006102:	4630      	mov	r0, r6
 8006104:	4639      	mov	r1, r7
 8006106:	f7fa f86b 	bl	80001e0 <__aeabi_dsub>
 800610a:	a379      	add	r3, pc, #484	; (adr r3, 80062f0 <__ieee754_rem_pio2+0x2f8>)
 800610c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006110:	e7e0      	b.n	80060d4 <__ieee754_rem_pio2+0xdc>
 8006112:	4b82      	ldr	r3, [pc, #520]	; (800631c <__ieee754_rem_pio2+0x324>)
 8006114:	4598      	cmp	r8, r3
 8006116:	f300 80d0 	bgt.w	80062ba <__ieee754_rem_pio2+0x2c2>
 800611a:	f000 fed3 	bl	8006ec4 <fabs>
 800611e:	ec57 6b10 	vmov	r6, r7, d0
 8006122:	ee10 0a10 	vmov	r0, s0
 8006126:	a374      	add	r3, pc, #464	; (adr r3, 80062f8 <__ieee754_rem_pio2+0x300>)
 8006128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612c:	4639      	mov	r1, r7
 800612e:	f7fa fa0f 	bl	8000550 <__aeabi_dmul>
 8006132:	2200      	movs	r2, #0
 8006134:	4b7a      	ldr	r3, [pc, #488]	; (8006320 <__ieee754_rem_pio2+0x328>)
 8006136:	f7fa f855 	bl	80001e4 <__adddf3>
 800613a:	f7fa fcb9 	bl	8000ab0 <__aeabi_d2iz>
 800613e:	4605      	mov	r5, r0
 8006140:	f7fa f99c 	bl	800047c <__aeabi_i2d>
 8006144:	a364      	add	r3, pc, #400	; (adr r3, 80062d8 <__ieee754_rem_pio2+0x2e0>)
 8006146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800614e:	f7fa f9ff 	bl	8000550 <__aeabi_dmul>
 8006152:	4602      	mov	r2, r0
 8006154:	460b      	mov	r3, r1
 8006156:	4630      	mov	r0, r6
 8006158:	4639      	mov	r1, r7
 800615a:	f7fa f841 	bl	80001e0 <__aeabi_dsub>
 800615e:	a360      	add	r3, pc, #384	; (adr r3, 80062e0 <__ieee754_rem_pio2+0x2e8>)
 8006160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006164:	4682      	mov	sl, r0
 8006166:	468b      	mov	fp, r1
 8006168:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800616c:	f7fa f9f0 	bl	8000550 <__aeabi_dmul>
 8006170:	2d1f      	cmp	r5, #31
 8006172:	4606      	mov	r6, r0
 8006174:	460f      	mov	r7, r1
 8006176:	dc0c      	bgt.n	8006192 <__ieee754_rem_pio2+0x19a>
 8006178:	1e6a      	subs	r2, r5, #1
 800617a:	4b6a      	ldr	r3, [pc, #424]	; (8006324 <__ieee754_rem_pio2+0x32c>)
 800617c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006180:	4543      	cmp	r3, r8
 8006182:	d006      	beq.n	8006192 <__ieee754_rem_pio2+0x19a>
 8006184:	4632      	mov	r2, r6
 8006186:	463b      	mov	r3, r7
 8006188:	4650      	mov	r0, sl
 800618a:	4659      	mov	r1, fp
 800618c:	f7fa f828 	bl	80001e0 <__aeabi_dsub>
 8006190:	e00e      	b.n	80061b0 <__ieee754_rem_pio2+0x1b8>
 8006192:	4632      	mov	r2, r6
 8006194:	463b      	mov	r3, r7
 8006196:	4650      	mov	r0, sl
 8006198:	4659      	mov	r1, fp
 800619a:	f7fa f821 	bl	80001e0 <__aeabi_dsub>
 800619e:	ea4f 5328 	mov.w	r3, r8, asr #20
 80061a2:	9305      	str	r3, [sp, #20]
 80061a4:	9a05      	ldr	r2, [sp, #20]
 80061a6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	2b10      	cmp	r3, #16
 80061ae:	dc02      	bgt.n	80061b6 <__ieee754_rem_pio2+0x1be>
 80061b0:	e9c4 0100 	strd	r0, r1, [r4]
 80061b4:	e039      	b.n	800622a <__ieee754_rem_pio2+0x232>
 80061b6:	a34c      	add	r3, pc, #304	; (adr r3, 80062e8 <__ieee754_rem_pio2+0x2f0>)
 80061b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061c0:	f7fa f9c6 	bl	8000550 <__aeabi_dmul>
 80061c4:	4606      	mov	r6, r0
 80061c6:	460f      	mov	r7, r1
 80061c8:	4602      	mov	r2, r0
 80061ca:	460b      	mov	r3, r1
 80061cc:	4650      	mov	r0, sl
 80061ce:	4659      	mov	r1, fp
 80061d0:	f7fa f806 	bl	80001e0 <__aeabi_dsub>
 80061d4:	4602      	mov	r2, r0
 80061d6:	460b      	mov	r3, r1
 80061d8:	4680      	mov	r8, r0
 80061da:	4689      	mov	r9, r1
 80061dc:	4650      	mov	r0, sl
 80061de:	4659      	mov	r1, fp
 80061e0:	f7f9 fffe 	bl	80001e0 <__aeabi_dsub>
 80061e4:	4632      	mov	r2, r6
 80061e6:	463b      	mov	r3, r7
 80061e8:	f7f9 fffa 	bl	80001e0 <__aeabi_dsub>
 80061ec:	a340      	add	r3, pc, #256	; (adr r3, 80062f0 <__ieee754_rem_pio2+0x2f8>)
 80061ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f2:	4606      	mov	r6, r0
 80061f4:	460f      	mov	r7, r1
 80061f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061fa:	f7fa f9a9 	bl	8000550 <__aeabi_dmul>
 80061fe:	4632      	mov	r2, r6
 8006200:	463b      	mov	r3, r7
 8006202:	f7f9 ffed 	bl	80001e0 <__aeabi_dsub>
 8006206:	4602      	mov	r2, r0
 8006208:	460b      	mov	r3, r1
 800620a:	4606      	mov	r6, r0
 800620c:	460f      	mov	r7, r1
 800620e:	4640      	mov	r0, r8
 8006210:	4649      	mov	r1, r9
 8006212:	f7f9 ffe5 	bl	80001e0 <__aeabi_dsub>
 8006216:	9a05      	ldr	r2, [sp, #20]
 8006218:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	2b31      	cmp	r3, #49	; 0x31
 8006220:	dc20      	bgt.n	8006264 <__ieee754_rem_pio2+0x26c>
 8006222:	e9c4 0100 	strd	r0, r1, [r4]
 8006226:	46c2      	mov	sl, r8
 8006228:	46cb      	mov	fp, r9
 800622a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800622e:	4650      	mov	r0, sl
 8006230:	4642      	mov	r2, r8
 8006232:	464b      	mov	r3, r9
 8006234:	4659      	mov	r1, fp
 8006236:	f7f9 ffd3 	bl	80001e0 <__aeabi_dsub>
 800623a:	463b      	mov	r3, r7
 800623c:	4632      	mov	r2, r6
 800623e:	f7f9 ffcf 	bl	80001e0 <__aeabi_dsub>
 8006242:	9b04      	ldr	r3, [sp, #16]
 8006244:	2b00      	cmp	r3, #0
 8006246:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800624a:	f6bf af11 	bge.w	8006070 <__ieee754_rem_pio2+0x78>
 800624e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006252:	6063      	str	r3, [r4, #4]
 8006254:	f8c4 8000 	str.w	r8, [r4]
 8006258:	60a0      	str	r0, [r4, #8]
 800625a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800625e:	60e3      	str	r3, [r4, #12]
 8006260:	426d      	negs	r5, r5
 8006262:	e705      	b.n	8006070 <__ieee754_rem_pio2+0x78>
 8006264:	a326      	add	r3, pc, #152	; (adr r3, 8006300 <__ieee754_rem_pio2+0x308>)
 8006266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800626e:	f7fa f96f 	bl	8000550 <__aeabi_dmul>
 8006272:	4606      	mov	r6, r0
 8006274:	460f      	mov	r7, r1
 8006276:	4602      	mov	r2, r0
 8006278:	460b      	mov	r3, r1
 800627a:	4640      	mov	r0, r8
 800627c:	4649      	mov	r1, r9
 800627e:	f7f9 ffaf 	bl	80001e0 <__aeabi_dsub>
 8006282:	4602      	mov	r2, r0
 8006284:	460b      	mov	r3, r1
 8006286:	4682      	mov	sl, r0
 8006288:	468b      	mov	fp, r1
 800628a:	4640      	mov	r0, r8
 800628c:	4649      	mov	r1, r9
 800628e:	f7f9 ffa7 	bl	80001e0 <__aeabi_dsub>
 8006292:	4632      	mov	r2, r6
 8006294:	463b      	mov	r3, r7
 8006296:	f7f9 ffa3 	bl	80001e0 <__aeabi_dsub>
 800629a:	a31b      	add	r3, pc, #108	; (adr r3, 8006308 <__ieee754_rem_pio2+0x310>)
 800629c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a0:	4606      	mov	r6, r0
 80062a2:	460f      	mov	r7, r1
 80062a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062a8:	f7fa f952 	bl	8000550 <__aeabi_dmul>
 80062ac:	4632      	mov	r2, r6
 80062ae:	463b      	mov	r3, r7
 80062b0:	f7f9 ff96 	bl	80001e0 <__aeabi_dsub>
 80062b4:	4606      	mov	r6, r0
 80062b6:	460f      	mov	r7, r1
 80062b8:	e764      	b.n	8006184 <__ieee754_rem_pio2+0x18c>
 80062ba:	4b1b      	ldr	r3, [pc, #108]	; (8006328 <__ieee754_rem_pio2+0x330>)
 80062bc:	4598      	cmp	r8, r3
 80062be:	dd35      	ble.n	800632c <__ieee754_rem_pio2+0x334>
 80062c0:	ee10 2a10 	vmov	r2, s0
 80062c4:	463b      	mov	r3, r7
 80062c6:	4630      	mov	r0, r6
 80062c8:	4639      	mov	r1, r7
 80062ca:	f7f9 ff89 	bl	80001e0 <__aeabi_dsub>
 80062ce:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80062d2:	e9c4 0100 	strd	r0, r1, [r4]
 80062d6:	e6a1      	b.n	800601c <__ieee754_rem_pio2+0x24>
 80062d8:	54400000 	.word	0x54400000
 80062dc:	3ff921fb 	.word	0x3ff921fb
 80062e0:	1a626331 	.word	0x1a626331
 80062e4:	3dd0b461 	.word	0x3dd0b461
 80062e8:	1a600000 	.word	0x1a600000
 80062ec:	3dd0b461 	.word	0x3dd0b461
 80062f0:	2e037073 	.word	0x2e037073
 80062f4:	3ba3198a 	.word	0x3ba3198a
 80062f8:	6dc9c883 	.word	0x6dc9c883
 80062fc:	3fe45f30 	.word	0x3fe45f30
 8006300:	2e000000 	.word	0x2e000000
 8006304:	3ba3198a 	.word	0x3ba3198a
 8006308:	252049c1 	.word	0x252049c1
 800630c:	397b839a 	.word	0x397b839a
 8006310:	3fe921fb 	.word	0x3fe921fb
 8006314:	4002d97b 	.word	0x4002d97b
 8006318:	3ff921fb 	.word	0x3ff921fb
 800631c:	413921fb 	.word	0x413921fb
 8006320:	3fe00000 	.word	0x3fe00000
 8006324:	08007364 	.word	0x08007364
 8006328:	7fefffff 	.word	0x7fefffff
 800632c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8006330:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8006334:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8006338:	4630      	mov	r0, r6
 800633a:	460f      	mov	r7, r1
 800633c:	f7fa fbb8 	bl	8000ab0 <__aeabi_d2iz>
 8006340:	f7fa f89c 	bl	800047c <__aeabi_i2d>
 8006344:	4602      	mov	r2, r0
 8006346:	460b      	mov	r3, r1
 8006348:	4630      	mov	r0, r6
 800634a:	4639      	mov	r1, r7
 800634c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006350:	f7f9 ff46 	bl	80001e0 <__aeabi_dsub>
 8006354:	2200      	movs	r2, #0
 8006356:	4b1f      	ldr	r3, [pc, #124]	; (80063d4 <__ieee754_rem_pio2+0x3dc>)
 8006358:	f7fa f8fa 	bl	8000550 <__aeabi_dmul>
 800635c:	460f      	mov	r7, r1
 800635e:	4606      	mov	r6, r0
 8006360:	f7fa fba6 	bl	8000ab0 <__aeabi_d2iz>
 8006364:	f7fa f88a 	bl	800047c <__aeabi_i2d>
 8006368:	4602      	mov	r2, r0
 800636a:	460b      	mov	r3, r1
 800636c:	4630      	mov	r0, r6
 800636e:	4639      	mov	r1, r7
 8006370:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006374:	f7f9 ff34 	bl	80001e0 <__aeabi_dsub>
 8006378:	2200      	movs	r2, #0
 800637a:	4b16      	ldr	r3, [pc, #88]	; (80063d4 <__ieee754_rem_pio2+0x3dc>)
 800637c:	f7fa f8e8 	bl	8000550 <__aeabi_dmul>
 8006380:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006384:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8006388:	f04f 0803 	mov.w	r8, #3
 800638c:	2600      	movs	r6, #0
 800638e:	2700      	movs	r7, #0
 8006390:	4632      	mov	r2, r6
 8006392:	463b      	mov	r3, r7
 8006394:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8006398:	f108 3aff 	add.w	sl, r8, #4294967295
 800639c:	f7fa fb40 	bl	8000a20 <__aeabi_dcmpeq>
 80063a0:	b9b0      	cbnz	r0, 80063d0 <__ieee754_rem_pio2+0x3d8>
 80063a2:	4b0d      	ldr	r3, [pc, #52]	; (80063d8 <__ieee754_rem_pio2+0x3e0>)
 80063a4:	9301      	str	r3, [sp, #4]
 80063a6:	2302      	movs	r3, #2
 80063a8:	9300      	str	r3, [sp, #0]
 80063aa:	462a      	mov	r2, r5
 80063ac:	4643      	mov	r3, r8
 80063ae:	4621      	mov	r1, r4
 80063b0:	a806      	add	r0, sp, #24
 80063b2:	f000 f98d 	bl	80066d0 <__kernel_rem_pio2>
 80063b6:	9b04      	ldr	r3, [sp, #16]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	4605      	mov	r5, r0
 80063bc:	f6bf ae58 	bge.w	8006070 <__ieee754_rem_pio2+0x78>
 80063c0:	6863      	ldr	r3, [r4, #4]
 80063c2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80063c6:	6063      	str	r3, [r4, #4]
 80063c8:	68e3      	ldr	r3, [r4, #12]
 80063ca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80063ce:	e746      	b.n	800625e <__ieee754_rem_pio2+0x266>
 80063d0:	46d0      	mov	r8, sl
 80063d2:	e7dd      	b.n	8006390 <__ieee754_rem_pio2+0x398>
 80063d4:	41700000 	.word	0x41700000
 80063d8:	080073e4 	.word	0x080073e4

080063dc <__ieee754_sqrt>:
 80063dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063e0:	4955      	ldr	r1, [pc, #340]	; (8006538 <__ieee754_sqrt+0x15c>)
 80063e2:	ec55 4b10 	vmov	r4, r5, d0
 80063e6:	43a9      	bics	r1, r5
 80063e8:	462b      	mov	r3, r5
 80063ea:	462a      	mov	r2, r5
 80063ec:	d112      	bne.n	8006414 <__ieee754_sqrt+0x38>
 80063ee:	ee10 2a10 	vmov	r2, s0
 80063f2:	ee10 0a10 	vmov	r0, s0
 80063f6:	4629      	mov	r1, r5
 80063f8:	f7fa f8aa 	bl	8000550 <__aeabi_dmul>
 80063fc:	4602      	mov	r2, r0
 80063fe:	460b      	mov	r3, r1
 8006400:	4620      	mov	r0, r4
 8006402:	4629      	mov	r1, r5
 8006404:	f7f9 feee 	bl	80001e4 <__adddf3>
 8006408:	4604      	mov	r4, r0
 800640a:	460d      	mov	r5, r1
 800640c:	ec45 4b10 	vmov	d0, r4, r5
 8006410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006414:	2d00      	cmp	r5, #0
 8006416:	ee10 0a10 	vmov	r0, s0
 800641a:	4621      	mov	r1, r4
 800641c:	dc0f      	bgt.n	800643e <__ieee754_sqrt+0x62>
 800641e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006422:	4330      	orrs	r0, r6
 8006424:	d0f2      	beq.n	800640c <__ieee754_sqrt+0x30>
 8006426:	b155      	cbz	r5, 800643e <__ieee754_sqrt+0x62>
 8006428:	ee10 2a10 	vmov	r2, s0
 800642c:	4620      	mov	r0, r4
 800642e:	4629      	mov	r1, r5
 8006430:	f7f9 fed6 	bl	80001e0 <__aeabi_dsub>
 8006434:	4602      	mov	r2, r0
 8006436:	460b      	mov	r3, r1
 8006438:	f7fa f9b4 	bl	80007a4 <__aeabi_ddiv>
 800643c:	e7e4      	b.n	8006408 <__ieee754_sqrt+0x2c>
 800643e:	151b      	asrs	r3, r3, #20
 8006440:	d073      	beq.n	800652a <__ieee754_sqrt+0x14e>
 8006442:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006446:	07dd      	lsls	r5, r3, #31
 8006448:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800644c:	bf48      	it	mi
 800644e:	0fc8      	lsrmi	r0, r1, #31
 8006450:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006454:	bf44      	itt	mi
 8006456:	0049      	lslmi	r1, r1, #1
 8006458:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800645c:	2500      	movs	r5, #0
 800645e:	1058      	asrs	r0, r3, #1
 8006460:	0fcb      	lsrs	r3, r1, #31
 8006462:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8006466:	0049      	lsls	r1, r1, #1
 8006468:	2316      	movs	r3, #22
 800646a:	462c      	mov	r4, r5
 800646c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006470:	19a7      	adds	r7, r4, r6
 8006472:	4297      	cmp	r7, r2
 8006474:	bfde      	ittt	le
 8006476:	19bc      	addle	r4, r7, r6
 8006478:	1bd2      	suble	r2, r2, r7
 800647a:	19ad      	addle	r5, r5, r6
 800647c:	0fcf      	lsrs	r7, r1, #31
 800647e:	3b01      	subs	r3, #1
 8006480:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8006484:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006488:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800648c:	d1f0      	bne.n	8006470 <__ieee754_sqrt+0x94>
 800648e:	f04f 0c20 	mov.w	ip, #32
 8006492:	469e      	mov	lr, r3
 8006494:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006498:	42a2      	cmp	r2, r4
 800649a:	eb06 070e 	add.w	r7, r6, lr
 800649e:	dc02      	bgt.n	80064a6 <__ieee754_sqrt+0xca>
 80064a0:	d112      	bne.n	80064c8 <__ieee754_sqrt+0xec>
 80064a2:	428f      	cmp	r7, r1
 80064a4:	d810      	bhi.n	80064c8 <__ieee754_sqrt+0xec>
 80064a6:	2f00      	cmp	r7, #0
 80064a8:	eb07 0e06 	add.w	lr, r7, r6
 80064ac:	da42      	bge.n	8006534 <__ieee754_sqrt+0x158>
 80064ae:	f1be 0f00 	cmp.w	lr, #0
 80064b2:	db3f      	blt.n	8006534 <__ieee754_sqrt+0x158>
 80064b4:	f104 0801 	add.w	r8, r4, #1
 80064b8:	1b12      	subs	r2, r2, r4
 80064ba:	428f      	cmp	r7, r1
 80064bc:	bf88      	it	hi
 80064be:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80064c2:	1bc9      	subs	r1, r1, r7
 80064c4:	4433      	add	r3, r6
 80064c6:	4644      	mov	r4, r8
 80064c8:	0052      	lsls	r2, r2, #1
 80064ca:	f1bc 0c01 	subs.w	ip, ip, #1
 80064ce:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80064d2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80064d6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80064da:	d1dd      	bne.n	8006498 <__ieee754_sqrt+0xbc>
 80064dc:	430a      	orrs	r2, r1
 80064de:	d006      	beq.n	80064ee <__ieee754_sqrt+0x112>
 80064e0:	1c5c      	adds	r4, r3, #1
 80064e2:	bf13      	iteet	ne
 80064e4:	3301      	addne	r3, #1
 80064e6:	3501      	addeq	r5, #1
 80064e8:	4663      	moveq	r3, ip
 80064ea:	f023 0301 	bicne.w	r3, r3, #1
 80064ee:	106a      	asrs	r2, r5, #1
 80064f0:	085b      	lsrs	r3, r3, #1
 80064f2:	07e9      	lsls	r1, r5, #31
 80064f4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80064f8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80064fc:	bf48      	it	mi
 80064fe:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8006502:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8006506:	461c      	mov	r4, r3
 8006508:	e780      	b.n	800640c <__ieee754_sqrt+0x30>
 800650a:	0aca      	lsrs	r2, r1, #11
 800650c:	3815      	subs	r0, #21
 800650e:	0549      	lsls	r1, r1, #21
 8006510:	2a00      	cmp	r2, #0
 8006512:	d0fa      	beq.n	800650a <__ieee754_sqrt+0x12e>
 8006514:	02d6      	lsls	r6, r2, #11
 8006516:	d50a      	bpl.n	800652e <__ieee754_sqrt+0x152>
 8006518:	f1c3 0420 	rsb	r4, r3, #32
 800651c:	fa21 f404 	lsr.w	r4, r1, r4
 8006520:	1e5d      	subs	r5, r3, #1
 8006522:	4099      	lsls	r1, r3
 8006524:	4322      	orrs	r2, r4
 8006526:	1b43      	subs	r3, r0, r5
 8006528:	e78b      	b.n	8006442 <__ieee754_sqrt+0x66>
 800652a:	4618      	mov	r0, r3
 800652c:	e7f0      	b.n	8006510 <__ieee754_sqrt+0x134>
 800652e:	0052      	lsls	r2, r2, #1
 8006530:	3301      	adds	r3, #1
 8006532:	e7ef      	b.n	8006514 <__ieee754_sqrt+0x138>
 8006534:	46a0      	mov	r8, r4
 8006536:	e7bf      	b.n	80064b8 <__ieee754_sqrt+0xdc>
 8006538:	7ff00000 	.word	0x7ff00000
 800653c:	00000000 	.word	0x00000000

08006540 <__kernel_cos>:
 8006540:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006544:	ec59 8b10 	vmov	r8, r9, d0
 8006548:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800654c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8006550:	ed2d 8b02 	vpush	{d8}
 8006554:	eeb0 8a41 	vmov.f32	s16, s2
 8006558:	eef0 8a61 	vmov.f32	s17, s3
 800655c:	da07      	bge.n	800656e <__kernel_cos+0x2e>
 800655e:	ee10 0a10 	vmov	r0, s0
 8006562:	4649      	mov	r1, r9
 8006564:	f7fa faa4 	bl	8000ab0 <__aeabi_d2iz>
 8006568:	2800      	cmp	r0, #0
 800656a:	f000 8089 	beq.w	8006680 <__kernel_cos+0x140>
 800656e:	4642      	mov	r2, r8
 8006570:	464b      	mov	r3, r9
 8006572:	4640      	mov	r0, r8
 8006574:	4649      	mov	r1, r9
 8006576:	f7f9 ffeb 	bl	8000550 <__aeabi_dmul>
 800657a:	2200      	movs	r2, #0
 800657c:	4b4e      	ldr	r3, [pc, #312]	; (80066b8 <__kernel_cos+0x178>)
 800657e:	4604      	mov	r4, r0
 8006580:	460d      	mov	r5, r1
 8006582:	f7f9 ffe5 	bl	8000550 <__aeabi_dmul>
 8006586:	a340      	add	r3, pc, #256	; (adr r3, 8006688 <__kernel_cos+0x148>)
 8006588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658c:	4682      	mov	sl, r0
 800658e:	468b      	mov	fp, r1
 8006590:	4620      	mov	r0, r4
 8006592:	4629      	mov	r1, r5
 8006594:	f7f9 ffdc 	bl	8000550 <__aeabi_dmul>
 8006598:	a33d      	add	r3, pc, #244	; (adr r3, 8006690 <__kernel_cos+0x150>)
 800659a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659e:	f7f9 fe21 	bl	80001e4 <__adddf3>
 80065a2:	4622      	mov	r2, r4
 80065a4:	462b      	mov	r3, r5
 80065a6:	f7f9 ffd3 	bl	8000550 <__aeabi_dmul>
 80065aa:	a33b      	add	r3, pc, #236	; (adr r3, 8006698 <__kernel_cos+0x158>)
 80065ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b0:	f7f9 fe16 	bl	80001e0 <__aeabi_dsub>
 80065b4:	4622      	mov	r2, r4
 80065b6:	462b      	mov	r3, r5
 80065b8:	f7f9 ffca 	bl	8000550 <__aeabi_dmul>
 80065bc:	a338      	add	r3, pc, #224	; (adr r3, 80066a0 <__kernel_cos+0x160>)
 80065be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c2:	f7f9 fe0f 	bl	80001e4 <__adddf3>
 80065c6:	4622      	mov	r2, r4
 80065c8:	462b      	mov	r3, r5
 80065ca:	f7f9 ffc1 	bl	8000550 <__aeabi_dmul>
 80065ce:	a336      	add	r3, pc, #216	; (adr r3, 80066a8 <__kernel_cos+0x168>)
 80065d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d4:	f7f9 fe04 	bl	80001e0 <__aeabi_dsub>
 80065d8:	4622      	mov	r2, r4
 80065da:	462b      	mov	r3, r5
 80065dc:	f7f9 ffb8 	bl	8000550 <__aeabi_dmul>
 80065e0:	a333      	add	r3, pc, #204	; (adr r3, 80066b0 <__kernel_cos+0x170>)
 80065e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e6:	f7f9 fdfd 	bl	80001e4 <__adddf3>
 80065ea:	4622      	mov	r2, r4
 80065ec:	462b      	mov	r3, r5
 80065ee:	f7f9 ffaf 	bl	8000550 <__aeabi_dmul>
 80065f2:	4622      	mov	r2, r4
 80065f4:	462b      	mov	r3, r5
 80065f6:	f7f9 ffab 	bl	8000550 <__aeabi_dmul>
 80065fa:	ec53 2b18 	vmov	r2, r3, d8
 80065fe:	4604      	mov	r4, r0
 8006600:	460d      	mov	r5, r1
 8006602:	4640      	mov	r0, r8
 8006604:	4649      	mov	r1, r9
 8006606:	f7f9 ffa3 	bl	8000550 <__aeabi_dmul>
 800660a:	460b      	mov	r3, r1
 800660c:	4602      	mov	r2, r0
 800660e:	4629      	mov	r1, r5
 8006610:	4620      	mov	r0, r4
 8006612:	f7f9 fde5 	bl	80001e0 <__aeabi_dsub>
 8006616:	4b29      	ldr	r3, [pc, #164]	; (80066bc <__kernel_cos+0x17c>)
 8006618:	429e      	cmp	r6, r3
 800661a:	4680      	mov	r8, r0
 800661c:	4689      	mov	r9, r1
 800661e:	dc11      	bgt.n	8006644 <__kernel_cos+0x104>
 8006620:	4602      	mov	r2, r0
 8006622:	460b      	mov	r3, r1
 8006624:	4650      	mov	r0, sl
 8006626:	4659      	mov	r1, fp
 8006628:	f7f9 fdda 	bl	80001e0 <__aeabi_dsub>
 800662c:	460b      	mov	r3, r1
 800662e:	4924      	ldr	r1, [pc, #144]	; (80066c0 <__kernel_cos+0x180>)
 8006630:	4602      	mov	r2, r0
 8006632:	2000      	movs	r0, #0
 8006634:	f7f9 fdd4 	bl	80001e0 <__aeabi_dsub>
 8006638:	ecbd 8b02 	vpop	{d8}
 800663c:	ec41 0b10 	vmov	d0, r0, r1
 8006640:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006644:	4b1f      	ldr	r3, [pc, #124]	; (80066c4 <__kernel_cos+0x184>)
 8006646:	491e      	ldr	r1, [pc, #120]	; (80066c0 <__kernel_cos+0x180>)
 8006648:	429e      	cmp	r6, r3
 800664a:	bfcc      	ite	gt
 800664c:	4d1e      	ldrgt	r5, [pc, #120]	; (80066c8 <__kernel_cos+0x188>)
 800664e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8006652:	2400      	movs	r4, #0
 8006654:	4622      	mov	r2, r4
 8006656:	462b      	mov	r3, r5
 8006658:	2000      	movs	r0, #0
 800665a:	f7f9 fdc1 	bl	80001e0 <__aeabi_dsub>
 800665e:	4622      	mov	r2, r4
 8006660:	4606      	mov	r6, r0
 8006662:	460f      	mov	r7, r1
 8006664:	462b      	mov	r3, r5
 8006666:	4650      	mov	r0, sl
 8006668:	4659      	mov	r1, fp
 800666a:	f7f9 fdb9 	bl	80001e0 <__aeabi_dsub>
 800666e:	4642      	mov	r2, r8
 8006670:	464b      	mov	r3, r9
 8006672:	f7f9 fdb5 	bl	80001e0 <__aeabi_dsub>
 8006676:	4602      	mov	r2, r0
 8006678:	460b      	mov	r3, r1
 800667a:	4630      	mov	r0, r6
 800667c:	4639      	mov	r1, r7
 800667e:	e7d9      	b.n	8006634 <__kernel_cos+0xf4>
 8006680:	2000      	movs	r0, #0
 8006682:	490f      	ldr	r1, [pc, #60]	; (80066c0 <__kernel_cos+0x180>)
 8006684:	e7d8      	b.n	8006638 <__kernel_cos+0xf8>
 8006686:	bf00      	nop
 8006688:	be8838d4 	.word	0xbe8838d4
 800668c:	bda8fae9 	.word	0xbda8fae9
 8006690:	bdb4b1c4 	.word	0xbdb4b1c4
 8006694:	3e21ee9e 	.word	0x3e21ee9e
 8006698:	809c52ad 	.word	0x809c52ad
 800669c:	3e927e4f 	.word	0x3e927e4f
 80066a0:	19cb1590 	.word	0x19cb1590
 80066a4:	3efa01a0 	.word	0x3efa01a0
 80066a8:	16c15177 	.word	0x16c15177
 80066ac:	3f56c16c 	.word	0x3f56c16c
 80066b0:	5555554c 	.word	0x5555554c
 80066b4:	3fa55555 	.word	0x3fa55555
 80066b8:	3fe00000 	.word	0x3fe00000
 80066bc:	3fd33332 	.word	0x3fd33332
 80066c0:	3ff00000 	.word	0x3ff00000
 80066c4:	3fe90000 	.word	0x3fe90000
 80066c8:	3fd20000 	.word	0x3fd20000
 80066cc:	00000000 	.word	0x00000000

080066d0 <__kernel_rem_pio2>:
 80066d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066d4:	ed2d 8b02 	vpush	{d8}
 80066d8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80066dc:	1ed4      	subs	r4, r2, #3
 80066de:	9308      	str	r3, [sp, #32]
 80066e0:	9101      	str	r1, [sp, #4]
 80066e2:	4bc5      	ldr	r3, [pc, #788]	; (80069f8 <__kernel_rem_pio2+0x328>)
 80066e4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80066e6:	9009      	str	r0, [sp, #36]	; 0x24
 80066e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80066ec:	9304      	str	r3, [sp, #16]
 80066ee:	9b08      	ldr	r3, [sp, #32]
 80066f0:	3b01      	subs	r3, #1
 80066f2:	9307      	str	r3, [sp, #28]
 80066f4:	2318      	movs	r3, #24
 80066f6:	fb94 f4f3 	sdiv	r4, r4, r3
 80066fa:	f06f 0317 	mvn.w	r3, #23
 80066fe:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8006702:	fb04 3303 	mla	r3, r4, r3, r3
 8006706:	eb03 0a02 	add.w	sl, r3, r2
 800670a:	9b04      	ldr	r3, [sp, #16]
 800670c:	9a07      	ldr	r2, [sp, #28]
 800670e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80069e8 <__kernel_rem_pio2+0x318>
 8006712:	eb03 0802 	add.w	r8, r3, r2
 8006716:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006718:	1aa7      	subs	r7, r4, r2
 800671a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800671e:	ae22      	add	r6, sp, #136	; 0x88
 8006720:	2500      	movs	r5, #0
 8006722:	4545      	cmp	r5, r8
 8006724:	dd13      	ble.n	800674e <__kernel_rem_pio2+0x7e>
 8006726:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 80069e8 <__kernel_rem_pio2+0x318>
 800672a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800672e:	2600      	movs	r6, #0
 8006730:	9b04      	ldr	r3, [sp, #16]
 8006732:	429e      	cmp	r6, r3
 8006734:	dc32      	bgt.n	800679c <__kernel_rem_pio2+0xcc>
 8006736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006738:	9302      	str	r3, [sp, #8]
 800673a:	9b08      	ldr	r3, [sp, #32]
 800673c:	199d      	adds	r5, r3, r6
 800673e:	ab22      	add	r3, sp, #136	; 0x88
 8006740:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006744:	9306      	str	r3, [sp, #24]
 8006746:	ec59 8b18 	vmov	r8, r9, d8
 800674a:	2700      	movs	r7, #0
 800674c:	e01f      	b.n	800678e <__kernel_rem_pio2+0xbe>
 800674e:	42ef      	cmn	r7, r5
 8006750:	d407      	bmi.n	8006762 <__kernel_rem_pio2+0x92>
 8006752:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006756:	f7f9 fe91 	bl	800047c <__aeabi_i2d>
 800675a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800675e:	3501      	adds	r5, #1
 8006760:	e7df      	b.n	8006722 <__kernel_rem_pio2+0x52>
 8006762:	ec51 0b18 	vmov	r0, r1, d8
 8006766:	e7f8      	b.n	800675a <__kernel_rem_pio2+0x8a>
 8006768:	9906      	ldr	r1, [sp, #24]
 800676a:	9d02      	ldr	r5, [sp, #8]
 800676c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8006770:	9106      	str	r1, [sp, #24]
 8006772:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8006776:	9502      	str	r5, [sp, #8]
 8006778:	f7f9 feea 	bl	8000550 <__aeabi_dmul>
 800677c:	4602      	mov	r2, r0
 800677e:	460b      	mov	r3, r1
 8006780:	4640      	mov	r0, r8
 8006782:	4649      	mov	r1, r9
 8006784:	f7f9 fd2e 	bl	80001e4 <__adddf3>
 8006788:	3701      	adds	r7, #1
 800678a:	4680      	mov	r8, r0
 800678c:	4689      	mov	r9, r1
 800678e:	9b07      	ldr	r3, [sp, #28]
 8006790:	429f      	cmp	r7, r3
 8006792:	dde9      	ble.n	8006768 <__kernel_rem_pio2+0x98>
 8006794:	e8eb 8902 	strd	r8, r9, [fp], #8
 8006798:	3601      	adds	r6, #1
 800679a:	e7c9      	b.n	8006730 <__kernel_rem_pio2+0x60>
 800679c:	9b04      	ldr	r3, [sp, #16]
 800679e:	aa0e      	add	r2, sp, #56	; 0x38
 80067a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80067a4:	930c      	str	r3, [sp, #48]	; 0x30
 80067a6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80067a8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80067ac:	9c04      	ldr	r4, [sp, #16]
 80067ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80067b0:	ab9a      	add	r3, sp, #616	; 0x268
 80067b2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80067b6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80067ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 80067be:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80067c2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80067c6:	ab9a      	add	r3, sp, #616	; 0x268
 80067c8:	445b      	add	r3, fp
 80067ca:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80067ce:	2500      	movs	r5, #0
 80067d0:	1b63      	subs	r3, r4, r5
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	dc78      	bgt.n	80068c8 <__kernel_rem_pio2+0x1f8>
 80067d6:	4650      	mov	r0, sl
 80067d8:	ec49 8b10 	vmov	d0, r8, r9
 80067dc:	f000 fc04 	bl	8006fe8 <scalbn>
 80067e0:	ec57 6b10 	vmov	r6, r7, d0
 80067e4:	2200      	movs	r2, #0
 80067e6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80067ea:	ee10 0a10 	vmov	r0, s0
 80067ee:	4639      	mov	r1, r7
 80067f0:	f7f9 feae 	bl	8000550 <__aeabi_dmul>
 80067f4:	ec41 0b10 	vmov	d0, r0, r1
 80067f8:	f000 fb6e 	bl	8006ed8 <floor>
 80067fc:	2200      	movs	r2, #0
 80067fe:	ec51 0b10 	vmov	r0, r1, d0
 8006802:	4b7e      	ldr	r3, [pc, #504]	; (80069fc <__kernel_rem_pio2+0x32c>)
 8006804:	f7f9 fea4 	bl	8000550 <__aeabi_dmul>
 8006808:	4602      	mov	r2, r0
 800680a:	460b      	mov	r3, r1
 800680c:	4630      	mov	r0, r6
 800680e:	4639      	mov	r1, r7
 8006810:	f7f9 fce6 	bl	80001e0 <__aeabi_dsub>
 8006814:	460f      	mov	r7, r1
 8006816:	4606      	mov	r6, r0
 8006818:	f7fa f94a 	bl	8000ab0 <__aeabi_d2iz>
 800681c:	9006      	str	r0, [sp, #24]
 800681e:	f7f9 fe2d 	bl	800047c <__aeabi_i2d>
 8006822:	4602      	mov	r2, r0
 8006824:	460b      	mov	r3, r1
 8006826:	4630      	mov	r0, r6
 8006828:	4639      	mov	r1, r7
 800682a:	f7f9 fcd9 	bl	80001e0 <__aeabi_dsub>
 800682e:	f1ba 0f00 	cmp.w	sl, #0
 8006832:	4606      	mov	r6, r0
 8006834:	460f      	mov	r7, r1
 8006836:	dd6c      	ble.n	8006912 <__kernel_rem_pio2+0x242>
 8006838:	1e62      	subs	r2, r4, #1
 800683a:	ab0e      	add	r3, sp, #56	; 0x38
 800683c:	f1ca 0118 	rsb	r1, sl, #24
 8006840:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006844:	9d06      	ldr	r5, [sp, #24]
 8006846:	fa40 f301 	asr.w	r3, r0, r1
 800684a:	441d      	add	r5, r3
 800684c:	408b      	lsls	r3, r1
 800684e:	1ac0      	subs	r0, r0, r3
 8006850:	ab0e      	add	r3, sp, #56	; 0x38
 8006852:	9506      	str	r5, [sp, #24]
 8006854:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006858:	f1ca 0317 	rsb	r3, sl, #23
 800685c:	fa40 f303 	asr.w	r3, r0, r3
 8006860:	9302      	str	r3, [sp, #8]
 8006862:	9b02      	ldr	r3, [sp, #8]
 8006864:	2b00      	cmp	r3, #0
 8006866:	dd62      	ble.n	800692e <__kernel_rem_pio2+0x25e>
 8006868:	9b06      	ldr	r3, [sp, #24]
 800686a:	2200      	movs	r2, #0
 800686c:	3301      	adds	r3, #1
 800686e:	9306      	str	r3, [sp, #24]
 8006870:	4615      	mov	r5, r2
 8006872:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006876:	4294      	cmp	r4, r2
 8006878:	f300 8095 	bgt.w	80069a6 <__kernel_rem_pio2+0x2d6>
 800687c:	f1ba 0f00 	cmp.w	sl, #0
 8006880:	dd07      	ble.n	8006892 <__kernel_rem_pio2+0x1c2>
 8006882:	f1ba 0f01 	cmp.w	sl, #1
 8006886:	f000 80a2 	beq.w	80069ce <__kernel_rem_pio2+0x2fe>
 800688a:	f1ba 0f02 	cmp.w	sl, #2
 800688e:	f000 80c1 	beq.w	8006a14 <__kernel_rem_pio2+0x344>
 8006892:	9b02      	ldr	r3, [sp, #8]
 8006894:	2b02      	cmp	r3, #2
 8006896:	d14a      	bne.n	800692e <__kernel_rem_pio2+0x25e>
 8006898:	4632      	mov	r2, r6
 800689a:	463b      	mov	r3, r7
 800689c:	2000      	movs	r0, #0
 800689e:	4958      	ldr	r1, [pc, #352]	; (8006a00 <__kernel_rem_pio2+0x330>)
 80068a0:	f7f9 fc9e 	bl	80001e0 <__aeabi_dsub>
 80068a4:	4606      	mov	r6, r0
 80068a6:	460f      	mov	r7, r1
 80068a8:	2d00      	cmp	r5, #0
 80068aa:	d040      	beq.n	800692e <__kernel_rem_pio2+0x25e>
 80068ac:	4650      	mov	r0, sl
 80068ae:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80069f0 <__kernel_rem_pio2+0x320>
 80068b2:	f000 fb99 	bl	8006fe8 <scalbn>
 80068b6:	4630      	mov	r0, r6
 80068b8:	4639      	mov	r1, r7
 80068ba:	ec53 2b10 	vmov	r2, r3, d0
 80068be:	f7f9 fc8f 	bl	80001e0 <__aeabi_dsub>
 80068c2:	4606      	mov	r6, r0
 80068c4:	460f      	mov	r7, r1
 80068c6:	e032      	b.n	800692e <__kernel_rem_pio2+0x25e>
 80068c8:	2200      	movs	r2, #0
 80068ca:	4b4e      	ldr	r3, [pc, #312]	; (8006a04 <__kernel_rem_pio2+0x334>)
 80068cc:	4640      	mov	r0, r8
 80068ce:	4649      	mov	r1, r9
 80068d0:	f7f9 fe3e 	bl	8000550 <__aeabi_dmul>
 80068d4:	f7fa f8ec 	bl	8000ab0 <__aeabi_d2iz>
 80068d8:	f7f9 fdd0 	bl	800047c <__aeabi_i2d>
 80068dc:	2200      	movs	r2, #0
 80068de:	4b4a      	ldr	r3, [pc, #296]	; (8006a08 <__kernel_rem_pio2+0x338>)
 80068e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068e4:	f7f9 fe34 	bl	8000550 <__aeabi_dmul>
 80068e8:	4602      	mov	r2, r0
 80068ea:	460b      	mov	r3, r1
 80068ec:	4640      	mov	r0, r8
 80068ee:	4649      	mov	r1, r9
 80068f0:	f7f9 fc76 	bl	80001e0 <__aeabi_dsub>
 80068f4:	f7fa f8dc 	bl	8000ab0 <__aeabi_d2iz>
 80068f8:	ab0e      	add	r3, sp, #56	; 0x38
 80068fa:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80068fe:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8006902:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006906:	f7f9 fc6d 	bl	80001e4 <__adddf3>
 800690a:	3501      	adds	r5, #1
 800690c:	4680      	mov	r8, r0
 800690e:	4689      	mov	r9, r1
 8006910:	e75e      	b.n	80067d0 <__kernel_rem_pio2+0x100>
 8006912:	d105      	bne.n	8006920 <__kernel_rem_pio2+0x250>
 8006914:	1e63      	subs	r3, r4, #1
 8006916:	aa0e      	add	r2, sp, #56	; 0x38
 8006918:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800691c:	15c3      	asrs	r3, r0, #23
 800691e:	e79f      	b.n	8006860 <__kernel_rem_pio2+0x190>
 8006920:	2200      	movs	r2, #0
 8006922:	4b3a      	ldr	r3, [pc, #232]	; (8006a0c <__kernel_rem_pio2+0x33c>)
 8006924:	f7fa f89a 	bl	8000a5c <__aeabi_dcmpge>
 8006928:	2800      	cmp	r0, #0
 800692a:	d139      	bne.n	80069a0 <__kernel_rem_pio2+0x2d0>
 800692c:	9002      	str	r0, [sp, #8]
 800692e:	2200      	movs	r2, #0
 8006930:	2300      	movs	r3, #0
 8006932:	4630      	mov	r0, r6
 8006934:	4639      	mov	r1, r7
 8006936:	f7fa f873 	bl	8000a20 <__aeabi_dcmpeq>
 800693a:	2800      	cmp	r0, #0
 800693c:	f000 80c7 	beq.w	8006ace <__kernel_rem_pio2+0x3fe>
 8006940:	1e65      	subs	r5, r4, #1
 8006942:	462b      	mov	r3, r5
 8006944:	2200      	movs	r2, #0
 8006946:	9904      	ldr	r1, [sp, #16]
 8006948:	428b      	cmp	r3, r1
 800694a:	da6a      	bge.n	8006a22 <__kernel_rem_pio2+0x352>
 800694c:	2a00      	cmp	r2, #0
 800694e:	f000 8088 	beq.w	8006a62 <__kernel_rem_pio2+0x392>
 8006952:	ab0e      	add	r3, sp, #56	; 0x38
 8006954:	f1aa 0a18 	sub.w	sl, sl, #24
 8006958:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800695c:	2b00      	cmp	r3, #0
 800695e:	f000 80b4 	beq.w	8006aca <__kernel_rem_pio2+0x3fa>
 8006962:	4650      	mov	r0, sl
 8006964:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80069f0 <__kernel_rem_pio2+0x320>
 8006968:	f000 fb3e 	bl	8006fe8 <scalbn>
 800696c:	00ec      	lsls	r4, r5, #3
 800696e:	ab72      	add	r3, sp, #456	; 0x1c8
 8006970:	191e      	adds	r6, r3, r4
 8006972:	ec59 8b10 	vmov	r8, r9, d0
 8006976:	f106 0a08 	add.w	sl, r6, #8
 800697a:	462f      	mov	r7, r5
 800697c:	2f00      	cmp	r7, #0
 800697e:	f280 80df 	bge.w	8006b40 <__kernel_rem_pio2+0x470>
 8006982:	ed9f 8b19 	vldr	d8, [pc, #100]	; 80069e8 <__kernel_rem_pio2+0x318>
 8006986:	f04f 0a00 	mov.w	sl, #0
 800698a:	eba5 030a 	sub.w	r3, r5, sl
 800698e:	2b00      	cmp	r3, #0
 8006990:	f2c0 810a 	blt.w	8006ba8 <__kernel_rem_pio2+0x4d8>
 8006994:	f8df b078 	ldr.w	fp, [pc, #120]	; 8006a10 <__kernel_rem_pio2+0x340>
 8006998:	ec59 8b18 	vmov	r8, r9, d8
 800699c:	2700      	movs	r7, #0
 800699e:	e0f5      	b.n	8006b8c <__kernel_rem_pio2+0x4bc>
 80069a0:	2302      	movs	r3, #2
 80069a2:	9302      	str	r3, [sp, #8]
 80069a4:	e760      	b.n	8006868 <__kernel_rem_pio2+0x198>
 80069a6:	ab0e      	add	r3, sp, #56	; 0x38
 80069a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ac:	b94d      	cbnz	r5, 80069c2 <__kernel_rem_pio2+0x2f2>
 80069ae:	b12b      	cbz	r3, 80069bc <__kernel_rem_pio2+0x2ec>
 80069b0:	a80e      	add	r0, sp, #56	; 0x38
 80069b2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80069b6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80069ba:	2301      	movs	r3, #1
 80069bc:	3201      	adds	r2, #1
 80069be:	461d      	mov	r5, r3
 80069c0:	e759      	b.n	8006876 <__kernel_rem_pio2+0x1a6>
 80069c2:	a80e      	add	r0, sp, #56	; 0x38
 80069c4:	1acb      	subs	r3, r1, r3
 80069c6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80069ca:	462b      	mov	r3, r5
 80069cc:	e7f6      	b.n	80069bc <__kernel_rem_pio2+0x2ec>
 80069ce:	1e62      	subs	r2, r4, #1
 80069d0:	ab0e      	add	r3, sp, #56	; 0x38
 80069d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069d6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80069da:	a90e      	add	r1, sp, #56	; 0x38
 80069dc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80069e0:	e757      	b.n	8006892 <__kernel_rem_pio2+0x1c2>
 80069e2:	bf00      	nop
 80069e4:	f3af 8000 	nop.w
	...
 80069f4:	3ff00000 	.word	0x3ff00000
 80069f8:	08007530 	.word	0x08007530
 80069fc:	40200000 	.word	0x40200000
 8006a00:	3ff00000 	.word	0x3ff00000
 8006a04:	3e700000 	.word	0x3e700000
 8006a08:	41700000 	.word	0x41700000
 8006a0c:	3fe00000 	.word	0x3fe00000
 8006a10:	080074f0 	.word	0x080074f0
 8006a14:	1e62      	subs	r2, r4, #1
 8006a16:	ab0e      	add	r3, sp, #56	; 0x38
 8006a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a1c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006a20:	e7db      	b.n	80069da <__kernel_rem_pio2+0x30a>
 8006a22:	a90e      	add	r1, sp, #56	; 0x38
 8006a24:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	430a      	orrs	r2, r1
 8006a2c:	e78b      	b.n	8006946 <__kernel_rem_pio2+0x276>
 8006a2e:	3301      	adds	r3, #1
 8006a30:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006a34:	2900      	cmp	r1, #0
 8006a36:	d0fa      	beq.n	8006a2e <__kernel_rem_pio2+0x35e>
 8006a38:	9a08      	ldr	r2, [sp, #32]
 8006a3a:	4422      	add	r2, r4
 8006a3c:	00d2      	lsls	r2, r2, #3
 8006a3e:	a922      	add	r1, sp, #136	; 0x88
 8006a40:	18e3      	adds	r3, r4, r3
 8006a42:	9206      	str	r2, [sp, #24]
 8006a44:	440a      	add	r2, r1
 8006a46:	9302      	str	r3, [sp, #8]
 8006a48:	f10b 0108 	add.w	r1, fp, #8
 8006a4c:	f102 0308 	add.w	r3, r2, #8
 8006a50:	1c66      	adds	r6, r4, #1
 8006a52:	910a      	str	r1, [sp, #40]	; 0x28
 8006a54:	2500      	movs	r5, #0
 8006a56:	930d      	str	r3, [sp, #52]	; 0x34
 8006a58:	9b02      	ldr	r3, [sp, #8]
 8006a5a:	42b3      	cmp	r3, r6
 8006a5c:	da04      	bge.n	8006a68 <__kernel_rem_pio2+0x398>
 8006a5e:	461c      	mov	r4, r3
 8006a60:	e6a6      	b.n	80067b0 <__kernel_rem_pio2+0xe0>
 8006a62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a64:	2301      	movs	r3, #1
 8006a66:	e7e3      	b.n	8006a30 <__kernel_rem_pio2+0x360>
 8006a68:	9b06      	ldr	r3, [sp, #24]
 8006a6a:	18ef      	adds	r7, r5, r3
 8006a6c:	ab22      	add	r3, sp, #136	; 0x88
 8006a6e:	441f      	add	r7, r3
 8006a70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a72:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006a76:	f7f9 fd01 	bl	800047c <__aeabi_i2d>
 8006a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a7c:	461c      	mov	r4, r3
 8006a7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a80:	e9c7 0100 	strd	r0, r1, [r7]
 8006a84:	eb03 0b05 	add.w	fp, r3, r5
 8006a88:	2700      	movs	r7, #0
 8006a8a:	f04f 0800 	mov.w	r8, #0
 8006a8e:	f04f 0900 	mov.w	r9, #0
 8006a92:	9b07      	ldr	r3, [sp, #28]
 8006a94:	429f      	cmp	r7, r3
 8006a96:	dd08      	ble.n	8006aaa <__kernel_rem_pio2+0x3da>
 8006a98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a9a:	aa72      	add	r2, sp, #456	; 0x1c8
 8006a9c:	18eb      	adds	r3, r5, r3
 8006a9e:	4413      	add	r3, r2
 8006aa0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8006aa4:	3601      	adds	r6, #1
 8006aa6:	3508      	adds	r5, #8
 8006aa8:	e7d6      	b.n	8006a58 <__kernel_rem_pio2+0x388>
 8006aaa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006aae:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8006ab2:	f7f9 fd4d 	bl	8000550 <__aeabi_dmul>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	460b      	mov	r3, r1
 8006aba:	4640      	mov	r0, r8
 8006abc:	4649      	mov	r1, r9
 8006abe:	f7f9 fb91 	bl	80001e4 <__adddf3>
 8006ac2:	3701      	adds	r7, #1
 8006ac4:	4680      	mov	r8, r0
 8006ac6:	4689      	mov	r9, r1
 8006ac8:	e7e3      	b.n	8006a92 <__kernel_rem_pio2+0x3c2>
 8006aca:	3d01      	subs	r5, #1
 8006acc:	e741      	b.n	8006952 <__kernel_rem_pio2+0x282>
 8006ace:	f1ca 0000 	rsb	r0, sl, #0
 8006ad2:	ec47 6b10 	vmov	d0, r6, r7
 8006ad6:	f000 fa87 	bl	8006fe8 <scalbn>
 8006ada:	ec57 6b10 	vmov	r6, r7, d0
 8006ade:	2200      	movs	r2, #0
 8006ae0:	4b99      	ldr	r3, [pc, #612]	; (8006d48 <__kernel_rem_pio2+0x678>)
 8006ae2:	ee10 0a10 	vmov	r0, s0
 8006ae6:	4639      	mov	r1, r7
 8006ae8:	f7f9 ffb8 	bl	8000a5c <__aeabi_dcmpge>
 8006aec:	b1f8      	cbz	r0, 8006b2e <__kernel_rem_pio2+0x45e>
 8006aee:	2200      	movs	r2, #0
 8006af0:	4b96      	ldr	r3, [pc, #600]	; (8006d4c <__kernel_rem_pio2+0x67c>)
 8006af2:	4630      	mov	r0, r6
 8006af4:	4639      	mov	r1, r7
 8006af6:	f7f9 fd2b 	bl	8000550 <__aeabi_dmul>
 8006afa:	f7f9 ffd9 	bl	8000ab0 <__aeabi_d2iz>
 8006afe:	4680      	mov	r8, r0
 8006b00:	f7f9 fcbc 	bl	800047c <__aeabi_i2d>
 8006b04:	2200      	movs	r2, #0
 8006b06:	4b90      	ldr	r3, [pc, #576]	; (8006d48 <__kernel_rem_pio2+0x678>)
 8006b08:	f7f9 fd22 	bl	8000550 <__aeabi_dmul>
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	4602      	mov	r2, r0
 8006b10:	4639      	mov	r1, r7
 8006b12:	4630      	mov	r0, r6
 8006b14:	f7f9 fb64 	bl	80001e0 <__aeabi_dsub>
 8006b18:	f7f9 ffca 	bl	8000ab0 <__aeabi_d2iz>
 8006b1c:	1c65      	adds	r5, r4, #1
 8006b1e:	ab0e      	add	r3, sp, #56	; 0x38
 8006b20:	f10a 0a18 	add.w	sl, sl, #24
 8006b24:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006b28:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006b2c:	e719      	b.n	8006962 <__kernel_rem_pio2+0x292>
 8006b2e:	4630      	mov	r0, r6
 8006b30:	4639      	mov	r1, r7
 8006b32:	f7f9 ffbd 	bl	8000ab0 <__aeabi_d2iz>
 8006b36:	ab0e      	add	r3, sp, #56	; 0x38
 8006b38:	4625      	mov	r5, r4
 8006b3a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006b3e:	e710      	b.n	8006962 <__kernel_rem_pio2+0x292>
 8006b40:	ab0e      	add	r3, sp, #56	; 0x38
 8006b42:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8006b46:	f7f9 fc99 	bl	800047c <__aeabi_i2d>
 8006b4a:	4642      	mov	r2, r8
 8006b4c:	464b      	mov	r3, r9
 8006b4e:	f7f9 fcff 	bl	8000550 <__aeabi_dmul>
 8006b52:	2200      	movs	r2, #0
 8006b54:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8006b58:	4b7c      	ldr	r3, [pc, #496]	; (8006d4c <__kernel_rem_pio2+0x67c>)
 8006b5a:	4640      	mov	r0, r8
 8006b5c:	4649      	mov	r1, r9
 8006b5e:	f7f9 fcf7 	bl	8000550 <__aeabi_dmul>
 8006b62:	3f01      	subs	r7, #1
 8006b64:	4680      	mov	r8, r0
 8006b66:	4689      	mov	r9, r1
 8006b68:	e708      	b.n	800697c <__kernel_rem_pio2+0x2ac>
 8006b6a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8006b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b72:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8006b76:	f7f9 fceb 	bl	8000550 <__aeabi_dmul>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	4640      	mov	r0, r8
 8006b80:	4649      	mov	r1, r9
 8006b82:	f7f9 fb2f 	bl	80001e4 <__adddf3>
 8006b86:	3701      	adds	r7, #1
 8006b88:	4680      	mov	r8, r0
 8006b8a:	4689      	mov	r9, r1
 8006b8c:	9b04      	ldr	r3, [sp, #16]
 8006b8e:	429f      	cmp	r7, r3
 8006b90:	dc01      	bgt.n	8006b96 <__kernel_rem_pio2+0x4c6>
 8006b92:	45ba      	cmp	sl, r7
 8006b94:	dae9      	bge.n	8006b6a <__kernel_rem_pio2+0x49a>
 8006b96:	ab4a      	add	r3, sp, #296	; 0x128
 8006b98:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006b9c:	e9c3 8900 	strd	r8, r9, [r3]
 8006ba0:	f10a 0a01 	add.w	sl, sl, #1
 8006ba4:	3e08      	subs	r6, #8
 8006ba6:	e6f0      	b.n	800698a <__kernel_rem_pio2+0x2ba>
 8006ba8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8006baa:	2b03      	cmp	r3, #3
 8006bac:	d85b      	bhi.n	8006c66 <__kernel_rem_pio2+0x596>
 8006bae:	e8df f003 	tbb	[pc, r3]
 8006bb2:	264a      	.short	0x264a
 8006bb4:	0226      	.short	0x0226
 8006bb6:	ab9a      	add	r3, sp, #616	; 0x268
 8006bb8:	441c      	add	r4, r3
 8006bba:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8006bbe:	46a2      	mov	sl, r4
 8006bc0:	46ab      	mov	fp, r5
 8006bc2:	f1bb 0f00 	cmp.w	fp, #0
 8006bc6:	dc6c      	bgt.n	8006ca2 <__kernel_rem_pio2+0x5d2>
 8006bc8:	46a2      	mov	sl, r4
 8006bca:	46ab      	mov	fp, r5
 8006bcc:	f1bb 0f01 	cmp.w	fp, #1
 8006bd0:	f300 8086 	bgt.w	8006ce0 <__kernel_rem_pio2+0x610>
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	2d01      	cmp	r5, #1
 8006bda:	f300 80a0 	bgt.w	8006d1e <__kernel_rem_pio2+0x64e>
 8006bde:	9b02      	ldr	r3, [sp, #8]
 8006be0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8006be4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f040 809e 	bne.w	8006d2a <__kernel_rem_pio2+0x65a>
 8006bee:	9b01      	ldr	r3, [sp, #4]
 8006bf0:	e9c3 7800 	strd	r7, r8, [r3]
 8006bf4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006bf8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006bfc:	e033      	b.n	8006c66 <__kernel_rem_pio2+0x596>
 8006bfe:	3408      	adds	r4, #8
 8006c00:	ab4a      	add	r3, sp, #296	; 0x128
 8006c02:	441c      	add	r4, r3
 8006c04:	462e      	mov	r6, r5
 8006c06:	2000      	movs	r0, #0
 8006c08:	2100      	movs	r1, #0
 8006c0a:	2e00      	cmp	r6, #0
 8006c0c:	da3a      	bge.n	8006c84 <__kernel_rem_pio2+0x5b4>
 8006c0e:	9b02      	ldr	r3, [sp, #8]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d03d      	beq.n	8006c90 <__kernel_rem_pio2+0x5c0>
 8006c14:	4602      	mov	r2, r0
 8006c16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c1a:	9c01      	ldr	r4, [sp, #4]
 8006c1c:	e9c4 2300 	strd	r2, r3, [r4]
 8006c20:	4602      	mov	r2, r0
 8006c22:	460b      	mov	r3, r1
 8006c24:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8006c28:	f7f9 fada 	bl	80001e0 <__aeabi_dsub>
 8006c2c:	ae4c      	add	r6, sp, #304	; 0x130
 8006c2e:	2401      	movs	r4, #1
 8006c30:	42a5      	cmp	r5, r4
 8006c32:	da30      	bge.n	8006c96 <__kernel_rem_pio2+0x5c6>
 8006c34:	9b02      	ldr	r3, [sp, #8]
 8006c36:	b113      	cbz	r3, 8006c3e <__kernel_rem_pio2+0x56e>
 8006c38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	9b01      	ldr	r3, [sp, #4]
 8006c40:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006c44:	e00f      	b.n	8006c66 <__kernel_rem_pio2+0x596>
 8006c46:	ab9a      	add	r3, sp, #616	; 0x268
 8006c48:	441c      	add	r4, r3
 8006c4a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8006c4e:	2000      	movs	r0, #0
 8006c50:	2100      	movs	r1, #0
 8006c52:	2d00      	cmp	r5, #0
 8006c54:	da10      	bge.n	8006c78 <__kernel_rem_pio2+0x5a8>
 8006c56:	9b02      	ldr	r3, [sp, #8]
 8006c58:	b113      	cbz	r3, 8006c60 <__kernel_rem_pio2+0x590>
 8006c5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c5e:	4619      	mov	r1, r3
 8006c60:	9b01      	ldr	r3, [sp, #4]
 8006c62:	e9c3 0100 	strd	r0, r1, [r3]
 8006c66:	9b06      	ldr	r3, [sp, #24]
 8006c68:	f003 0007 	and.w	r0, r3, #7
 8006c6c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8006c70:	ecbd 8b02 	vpop	{d8}
 8006c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c78:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006c7c:	f7f9 fab2 	bl	80001e4 <__adddf3>
 8006c80:	3d01      	subs	r5, #1
 8006c82:	e7e6      	b.n	8006c52 <__kernel_rem_pio2+0x582>
 8006c84:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006c88:	f7f9 faac 	bl	80001e4 <__adddf3>
 8006c8c:	3e01      	subs	r6, #1
 8006c8e:	e7bc      	b.n	8006c0a <__kernel_rem_pio2+0x53a>
 8006c90:	4602      	mov	r2, r0
 8006c92:	460b      	mov	r3, r1
 8006c94:	e7c1      	b.n	8006c1a <__kernel_rem_pio2+0x54a>
 8006c96:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8006c9a:	f7f9 faa3 	bl	80001e4 <__adddf3>
 8006c9e:	3401      	adds	r4, #1
 8006ca0:	e7c6      	b.n	8006c30 <__kernel_rem_pio2+0x560>
 8006ca2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8006ca6:	ed3a 7b02 	vldmdb	sl!, {d7}
 8006caa:	4640      	mov	r0, r8
 8006cac:	ec53 2b17 	vmov	r2, r3, d7
 8006cb0:	4649      	mov	r1, r9
 8006cb2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006cb6:	f7f9 fa95 	bl	80001e4 <__adddf3>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	4606      	mov	r6, r0
 8006cc0:	460f      	mov	r7, r1
 8006cc2:	4640      	mov	r0, r8
 8006cc4:	4649      	mov	r1, r9
 8006cc6:	f7f9 fa8b 	bl	80001e0 <__aeabi_dsub>
 8006cca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cce:	f7f9 fa89 	bl	80001e4 <__adddf3>
 8006cd2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006cd6:	e9ca 0100 	strd	r0, r1, [sl]
 8006cda:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8006cde:	e770      	b.n	8006bc2 <__kernel_rem_pio2+0x4f2>
 8006ce0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8006ce4:	ed3a 7b02 	vldmdb	sl!, {d7}
 8006ce8:	4630      	mov	r0, r6
 8006cea:	ec53 2b17 	vmov	r2, r3, d7
 8006cee:	4639      	mov	r1, r7
 8006cf0:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006cf4:	f7f9 fa76 	bl	80001e4 <__adddf3>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	4680      	mov	r8, r0
 8006cfe:	4689      	mov	r9, r1
 8006d00:	4630      	mov	r0, r6
 8006d02:	4639      	mov	r1, r7
 8006d04:	f7f9 fa6c 	bl	80001e0 <__aeabi_dsub>
 8006d08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d0c:	f7f9 fa6a 	bl	80001e4 <__adddf3>
 8006d10:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d14:	e9ca 0100 	strd	r0, r1, [sl]
 8006d18:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8006d1c:	e756      	b.n	8006bcc <__kernel_rem_pio2+0x4fc>
 8006d1e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006d22:	f7f9 fa5f 	bl	80001e4 <__adddf3>
 8006d26:	3d01      	subs	r5, #1
 8006d28:	e756      	b.n	8006bd8 <__kernel_rem_pio2+0x508>
 8006d2a:	9b01      	ldr	r3, [sp, #4]
 8006d2c:	9a01      	ldr	r2, [sp, #4]
 8006d2e:	601f      	str	r7, [r3, #0]
 8006d30:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8006d34:	605c      	str	r4, [r3, #4]
 8006d36:	609d      	str	r5, [r3, #8]
 8006d38:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006d3c:	60d3      	str	r3, [r2, #12]
 8006d3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d42:	6110      	str	r0, [r2, #16]
 8006d44:	6153      	str	r3, [r2, #20]
 8006d46:	e78e      	b.n	8006c66 <__kernel_rem_pio2+0x596>
 8006d48:	41700000 	.word	0x41700000
 8006d4c:	3e700000 	.word	0x3e700000

08006d50 <__kernel_sin>:
 8006d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d54:	ec55 4b10 	vmov	r4, r5, d0
 8006d58:	b085      	sub	sp, #20
 8006d5a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006d5e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006d62:	ed8d 1b00 	vstr	d1, [sp]
 8006d66:	9002      	str	r0, [sp, #8]
 8006d68:	da06      	bge.n	8006d78 <__kernel_sin+0x28>
 8006d6a:	ee10 0a10 	vmov	r0, s0
 8006d6e:	4629      	mov	r1, r5
 8006d70:	f7f9 fe9e 	bl	8000ab0 <__aeabi_d2iz>
 8006d74:	2800      	cmp	r0, #0
 8006d76:	d051      	beq.n	8006e1c <__kernel_sin+0xcc>
 8006d78:	4622      	mov	r2, r4
 8006d7a:	462b      	mov	r3, r5
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	4629      	mov	r1, r5
 8006d80:	f7f9 fbe6 	bl	8000550 <__aeabi_dmul>
 8006d84:	4682      	mov	sl, r0
 8006d86:	468b      	mov	fp, r1
 8006d88:	4602      	mov	r2, r0
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	4629      	mov	r1, r5
 8006d90:	f7f9 fbde 	bl	8000550 <__aeabi_dmul>
 8006d94:	a341      	add	r3, pc, #260	; (adr r3, 8006e9c <__kernel_sin+0x14c>)
 8006d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9a:	4680      	mov	r8, r0
 8006d9c:	4689      	mov	r9, r1
 8006d9e:	4650      	mov	r0, sl
 8006da0:	4659      	mov	r1, fp
 8006da2:	f7f9 fbd5 	bl	8000550 <__aeabi_dmul>
 8006da6:	a33f      	add	r3, pc, #252	; (adr r3, 8006ea4 <__kernel_sin+0x154>)
 8006da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dac:	f7f9 fa18 	bl	80001e0 <__aeabi_dsub>
 8006db0:	4652      	mov	r2, sl
 8006db2:	465b      	mov	r3, fp
 8006db4:	f7f9 fbcc 	bl	8000550 <__aeabi_dmul>
 8006db8:	a33c      	add	r3, pc, #240	; (adr r3, 8006eac <__kernel_sin+0x15c>)
 8006dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dbe:	f7f9 fa11 	bl	80001e4 <__adddf3>
 8006dc2:	4652      	mov	r2, sl
 8006dc4:	465b      	mov	r3, fp
 8006dc6:	f7f9 fbc3 	bl	8000550 <__aeabi_dmul>
 8006dca:	a33a      	add	r3, pc, #232	; (adr r3, 8006eb4 <__kernel_sin+0x164>)
 8006dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd0:	f7f9 fa06 	bl	80001e0 <__aeabi_dsub>
 8006dd4:	4652      	mov	r2, sl
 8006dd6:	465b      	mov	r3, fp
 8006dd8:	f7f9 fbba 	bl	8000550 <__aeabi_dmul>
 8006ddc:	a337      	add	r3, pc, #220	; (adr r3, 8006ebc <__kernel_sin+0x16c>)
 8006dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de2:	f7f9 f9ff 	bl	80001e4 <__adddf3>
 8006de6:	9b02      	ldr	r3, [sp, #8]
 8006de8:	4606      	mov	r6, r0
 8006dea:	460f      	mov	r7, r1
 8006dec:	b9db      	cbnz	r3, 8006e26 <__kernel_sin+0xd6>
 8006dee:	4602      	mov	r2, r0
 8006df0:	460b      	mov	r3, r1
 8006df2:	4650      	mov	r0, sl
 8006df4:	4659      	mov	r1, fp
 8006df6:	f7f9 fbab 	bl	8000550 <__aeabi_dmul>
 8006dfa:	a325      	add	r3, pc, #148	; (adr r3, 8006e90 <__kernel_sin+0x140>)
 8006dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e00:	f7f9 f9ee 	bl	80001e0 <__aeabi_dsub>
 8006e04:	4642      	mov	r2, r8
 8006e06:	464b      	mov	r3, r9
 8006e08:	f7f9 fba2 	bl	8000550 <__aeabi_dmul>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	460b      	mov	r3, r1
 8006e10:	4620      	mov	r0, r4
 8006e12:	4629      	mov	r1, r5
 8006e14:	f7f9 f9e6 	bl	80001e4 <__adddf3>
 8006e18:	4604      	mov	r4, r0
 8006e1a:	460d      	mov	r5, r1
 8006e1c:	ec45 4b10 	vmov	d0, r4, r5
 8006e20:	b005      	add	sp, #20
 8006e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e26:	2200      	movs	r2, #0
 8006e28:	4b1b      	ldr	r3, [pc, #108]	; (8006e98 <__kernel_sin+0x148>)
 8006e2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e2e:	f7f9 fb8f 	bl	8000550 <__aeabi_dmul>
 8006e32:	4632      	mov	r2, r6
 8006e34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e38:	463b      	mov	r3, r7
 8006e3a:	4640      	mov	r0, r8
 8006e3c:	4649      	mov	r1, r9
 8006e3e:	f7f9 fb87 	bl	8000550 <__aeabi_dmul>
 8006e42:	4602      	mov	r2, r0
 8006e44:	460b      	mov	r3, r1
 8006e46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e4a:	f7f9 f9c9 	bl	80001e0 <__aeabi_dsub>
 8006e4e:	4652      	mov	r2, sl
 8006e50:	465b      	mov	r3, fp
 8006e52:	f7f9 fb7d 	bl	8000550 <__aeabi_dmul>
 8006e56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e5a:	f7f9 f9c1 	bl	80001e0 <__aeabi_dsub>
 8006e5e:	a30c      	add	r3, pc, #48	; (adr r3, 8006e90 <__kernel_sin+0x140>)
 8006e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e64:	4606      	mov	r6, r0
 8006e66:	460f      	mov	r7, r1
 8006e68:	4640      	mov	r0, r8
 8006e6a:	4649      	mov	r1, r9
 8006e6c:	f7f9 fb70 	bl	8000550 <__aeabi_dmul>
 8006e70:	4602      	mov	r2, r0
 8006e72:	460b      	mov	r3, r1
 8006e74:	4630      	mov	r0, r6
 8006e76:	4639      	mov	r1, r7
 8006e78:	f7f9 f9b4 	bl	80001e4 <__adddf3>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	460b      	mov	r3, r1
 8006e80:	4620      	mov	r0, r4
 8006e82:	4629      	mov	r1, r5
 8006e84:	f7f9 f9ac 	bl	80001e0 <__aeabi_dsub>
 8006e88:	e7c6      	b.n	8006e18 <__kernel_sin+0xc8>
 8006e8a:	bf00      	nop
 8006e8c:	f3af 8000 	nop.w
 8006e90:	55555549 	.word	0x55555549
 8006e94:	3fc55555 	.word	0x3fc55555
 8006e98:	3fe00000 	.word	0x3fe00000
 8006e9c:	5acfd57c 	.word	0x5acfd57c
 8006ea0:	3de5d93a 	.word	0x3de5d93a
 8006ea4:	8a2b9ceb 	.word	0x8a2b9ceb
 8006ea8:	3e5ae5e6 	.word	0x3e5ae5e6
 8006eac:	57b1fe7d 	.word	0x57b1fe7d
 8006eb0:	3ec71de3 	.word	0x3ec71de3
 8006eb4:	19c161d5 	.word	0x19c161d5
 8006eb8:	3f2a01a0 	.word	0x3f2a01a0
 8006ebc:	1110f8a6 	.word	0x1110f8a6
 8006ec0:	3f811111 	.word	0x3f811111

08006ec4 <fabs>:
 8006ec4:	ec51 0b10 	vmov	r0, r1, d0
 8006ec8:	ee10 2a10 	vmov	r2, s0
 8006ecc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006ed0:	ec43 2b10 	vmov	d0, r2, r3
 8006ed4:	4770      	bx	lr
	...

08006ed8 <floor>:
 8006ed8:	ec51 0b10 	vmov	r0, r1, d0
 8006edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ee0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006ee4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006ee8:	2e13      	cmp	r6, #19
 8006eea:	460c      	mov	r4, r1
 8006eec:	ee10 5a10 	vmov	r5, s0
 8006ef0:	4680      	mov	r8, r0
 8006ef2:	dc34      	bgt.n	8006f5e <floor+0x86>
 8006ef4:	2e00      	cmp	r6, #0
 8006ef6:	da16      	bge.n	8006f26 <floor+0x4e>
 8006ef8:	a335      	add	r3, pc, #212	; (adr r3, 8006fd0 <floor+0xf8>)
 8006efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efe:	f7f9 f971 	bl	80001e4 <__adddf3>
 8006f02:	2200      	movs	r2, #0
 8006f04:	2300      	movs	r3, #0
 8006f06:	f7f9 fdb3 	bl	8000a70 <__aeabi_dcmpgt>
 8006f0a:	b148      	cbz	r0, 8006f20 <floor+0x48>
 8006f0c:	2c00      	cmp	r4, #0
 8006f0e:	da59      	bge.n	8006fc4 <floor+0xec>
 8006f10:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006f14:	4a30      	ldr	r2, [pc, #192]	; (8006fd8 <floor+0x100>)
 8006f16:	432b      	orrs	r3, r5
 8006f18:	2500      	movs	r5, #0
 8006f1a:	42ab      	cmp	r3, r5
 8006f1c:	bf18      	it	ne
 8006f1e:	4614      	movne	r4, r2
 8006f20:	4621      	mov	r1, r4
 8006f22:	4628      	mov	r0, r5
 8006f24:	e025      	b.n	8006f72 <floor+0x9a>
 8006f26:	4f2d      	ldr	r7, [pc, #180]	; (8006fdc <floor+0x104>)
 8006f28:	4137      	asrs	r7, r6
 8006f2a:	ea01 0307 	and.w	r3, r1, r7
 8006f2e:	4303      	orrs	r3, r0
 8006f30:	d01f      	beq.n	8006f72 <floor+0x9a>
 8006f32:	a327      	add	r3, pc, #156	; (adr r3, 8006fd0 <floor+0xf8>)
 8006f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f38:	f7f9 f954 	bl	80001e4 <__adddf3>
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	2300      	movs	r3, #0
 8006f40:	f7f9 fd96 	bl	8000a70 <__aeabi_dcmpgt>
 8006f44:	2800      	cmp	r0, #0
 8006f46:	d0eb      	beq.n	8006f20 <floor+0x48>
 8006f48:	2c00      	cmp	r4, #0
 8006f4a:	bfbe      	ittt	lt
 8006f4c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006f50:	fa43 f606 	asrlt.w	r6, r3, r6
 8006f54:	19a4      	addlt	r4, r4, r6
 8006f56:	ea24 0407 	bic.w	r4, r4, r7
 8006f5a:	2500      	movs	r5, #0
 8006f5c:	e7e0      	b.n	8006f20 <floor+0x48>
 8006f5e:	2e33      	cmp	r6, #51	; 0x33
 8006f60:	dd0b      	ble.n	8006f7a <floor+0xa2>
 8006f62:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006f66:	d104      	bne.n	8006f72 <floor+0x9a>
 8006f68:	ee10 2a10 	vmov	r2, s0
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	f7f9 f939 	bl	80001e4 <__adddf3>
 8006f72:	ec41 0b10 	vmov	d0, r0, r1
 8006f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f7a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f82:	fa23 f707 	lsr.w	r7, r3, r7
 8006f86:	4207      	tst	r7, r0
 8006f88:	d0f3      	beq.n	8006f72 <floor+0x9a>
 8006f8a:	a311      	add	r3, pc, #68	; (adr r3, 8006fd0 <floor+0xf8>)
 8006f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f90:	f7f9 f928 	bl	80001e4 <__adddf3>
 8006f94:	2200      	movs	r2, #0
 8006f96:	2300      	movs	r3, #0
 8006f98:	f7f9 fd6a 	bl	8000a70 <__aeabi_dcmpgt>
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	d0bf      	beq.n	8006f20 <floor+0x48>
 8006fa0:	2c00      	cmp	r4, #0
 8006fa2:	da02      	bge.n	8006faa <floor+0xd2>
 8006fa4:	2e14      	cmp	r6, #20
 8006fa6:	d103      	bne.n	8006fb0 <floor+0xd8>
 8006fa8:	3401      	adds	r4, #1
 8006faa:	ea25 0507 	bic.w	r5, r5, r7
 8006fae:	e7b7      	b.n	8006f20 <floor+0x48>
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006fb6:	fa03 f606 	lsl.w	r6, r3, r6
 8006fba:	4435      	add	r5, r6
 8006fbc:	4545      	cmp	r5, r8
 8006fbe:	bf38      	it	cc
 8006fc0:	18e4      	addcc	r4, r4, r3
 8006fc2:	e7f2      	b.n	8006faa <floor+0xd2>
 8006fc4:	2500      	movs	r5, #0
 8006fc6:	462c      	mov	r4, r5
 8006fc8:	e7aa      	b.n	8006f20 <floor+0x48>
 8006fca:	bf00      	nop
 8006fcc:	f3af 8000 	nop.w
 8006fd0:	8800759c 	.word	0x8800759c
 8006fd4:	7e37e43c 	.word	0x7e37e43c
 8006fd8:	bff00000 	.word	0xbff00000
 8006fdc:	000fffff 	.word	0x000fffff

08006fe0 <matherr>:
 8006fe0:	2000      	movs	r0, #0
 8006fe2:	4770      	bx	lr
 8006fe4:	0000      	movs	r0, r0
	...

08006fe8 <scalbn>:
 8006fe8:	b570      	push	{r4, r5, r6, lr}
 8006fea:	ec55 4b10 	vmov	r4, r5, d0
 8006fee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	462b      	mov	r3, r5
 8006ff6:	b9aa      	cbnz	r2, 8007024 <scalbn+0x3c>
 8006ff8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006ffc:	4323      	orrs	r3, r4
 8006ffe:	d03b      	beq.n	8007078 <scalbn+0x90>
 8007000:	4b31      	ldr	r3, [pc, #196]	; (80070c8 <scalbn+0xe0>)
 8007002:	4629      	mov	r1, r5
 8007004:	2200      	movs	r2, #0
 8007006:	ee10 0a10 	vmov	r0, s0
 800700a:	f7f9 faa1 	bl	8000550 <__aeabi_dmul>
 800700e:	4b2f      	ldr	r3, [pc, #188]	; (80070cc <scalbn+0xe4>)
 8007010:	429e      	cmp	r6, r3
 8007012:	4604      	mov	r4, r0
 8007014:	460d      	mov	r5, r1
 8007016:	da12      	bge.n	800703e <scalbn+0x56>
 8007018:	a327      	add	r3, pc, #156	; (adr r3, 80070b8 <scalbn+0xd0>)
 800701a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701e:	f7f9 fa97 	bl	8000550 <__aeabi_dmul>
 8007022:	e009      	b.n	8007038 <scalbn+0x50>
 8007024:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007028:	428a      	cmp	r2, r1
 800702a:	d10c      	bne.n	8007046 <scalbn+0x5e>
 800702c:	ee10 2a10 	vmov	r2, s0
 8007030:	4620      	mov	r0, r4
 8007032:	4629      	mov	r1, r5
 8007034:	f7f9 f8d6 	bl	80001e4 <__adddf3>
 8007038:	4604      	mov	r4, r0
 800703a:	460d      	mov	r5, r1
 800703c:	e01c      	b.n	8007078 <scalbn+0x90>
 800703e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007042:	460b      	mov	r3, r1
 8007044:	3a36      	subs	r2, #54	; 0x36
 8007046:	4432      	add	r2, r6
 8007048:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800704c:	428a      	cmp	r2, r1
 800704e:	dd0b      	ble.n	8007068 <scalbn+0x80>
 8007050:	ec45 4b11 	vmov	d1, r4, r5
 8007054:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80070c0 <scalbn+0xd8>
 8007058:	f000 f83c 	bl	80070d4 <copysign>
 800705c:	a318      	add	r3, pc, #96	; (adr r3, 80070c0 <scalbn+0xd8>)
 800705e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007062:	ec51 0b10 	vmov	r0, r1, d0
 8007066:	e7da      	b.n	800701e <scalbn+0x36>
 8007068:	2a00      	cmp	r2, #0
 800706a:	dd08      	ble.n	800707e <scalbn+0x96>
 800706c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007070:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007074:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007078:	ec45 4b10 	vmov	d0, r4, r5
 800707c:	bd70      	pop	{r4, r5, r6, pc}
 800707e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007082:	da0d      	bge.n	80070a0 <scalbn+0xb8>
 8007084:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007088:	429e      	cmp	r6, r3
 800708a:	ec45 4b11 	vmov	d1, r4, r5
 800708e:	dce1      	bgt.n	8007054 <scalbn+0x6c>
 8007090:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80070b8 <scalbn+0xd0>
 8007094:	f000 f81e 	bl	80070d4 <copysign>
 8007098:	a307      	add	r3, pc, #28	; (adr r3, 80070b8 <scalbn+0xd0>)
 800709a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709e:	e7e0      	b.n	8007062 <scalbn+0x7a>
 80070a0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80070a4:	3236      	adds	r2, #54	; 0x36
 80070a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80070aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80070ae:	4620      	mov	r0, r4
 80070b0:	4629      	mov	r1, r5
 80070b2:	2200      	movs	r2, #0
 80070b4:	4b06      	ldr	r3, [pc, #24]	; (80070d0 <scalbn+0xe8>)
 80070b6:	e7b2      	b.n	800701e <scalbn+0x36>
 80070b8:	c2f8f359 	.word	0xc2f8f359
 80070bc:	01a56e1f 	.word	0x01a56e1f
 80070c0:	8800759c 	.word	0x8800759c
 80070c4:	7e37e43c 	.word	0x7e37e43c
 80070c8:	43500000 	.word	0x43500000
 80070cc:	ffff3cb0 	.word	0xffff3cb0
 80070d0:	3c900000 	.word	0x3c900000

080070d4 <copysign>:
 80070d4:	ec51 0b10 	vmov	r0, r1, d0
 80070d8:	ee11 0a90 	vmov	r0, s3
 80070dc:	ee10 2a10 	vmov	r2, s0
 80070e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80070e4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80070e8:	ea41 0300 	orr.w	r3, r1, r0
 80070ec:	ec43 2b10 	vmov	d0, r2, r3
 80070f0:	4770      	bx	lr
	...

080070f4 <_init>:
 80070f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070f6:	bf00      	nop
 80070f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070fa:	bc08      	pop	{r3}
 80070fc:	469e      	mov	lr, r3
 80070fe:	4770      	bx	lr

08007100 <_fini>:
 8007100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007102:	bf00      	nop
 8007104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007106:	bc08      	pop	{r3}
 8007108:	469e      	mov	lr, r3
 800710a:	4770      	bx	lr
