
CandC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000957c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  08009710  08009710  00019710  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bc0  08009bc0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009bc0  08009bc0  00019bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bc8  08009bc8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bc8  08009bc8  00019bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bcc  08009bcc  00019bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009bd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d3c  200001e0  08009db0  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001f1c  08009db0  00021f1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e9a7  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002238  00000000  00000000  0002ebb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e20  00000000  00000000  00030df0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d08  00000000  00000000  00031c10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022969  00000000  00000000  00032918  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a7ea  00000000  00000000  00055281  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cfebc  00000000  00000000  0005fa6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012f927  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004900  00000000  00000000  0012f9a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080096f4 	.word	0x080096f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	080096f4 	.word	0x080096f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <bit_reverse>:
	return j;
}



int bit_reverse(int N, int l) {
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
	int ans = 0, i;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
	for (i = 0; i<l; ++i)
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	e014      	b.n	8000ee6 <bit_reverse+0x3e>
		if (N & (1 << i))    ans |= (1 << l - 1 - i);
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	fa42 f303 	asr.w	r3, r2, r3
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d009      	beq.n	8000ee0 <bit_reverse+0x38>
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	1e5a      	subs	r2, r3, #1
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	60fb      	str	r3, [r7, #12]
	for (i = 0; i<l; ++i)
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	dbe6      	blt.n	8000ebc <bit_reverse+0x14>
	return(ans);
 8000eee:	68fb      	ldr	r3, [r7, #12]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	0000      	movs	r0, r0
	...

08000f00 <FFTcore>:


void FFTcore(int Nr, int Nc, double* Ar, int Ldr, double* Ai, int Ldi, char tran, char flag) {
 8000f00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f04:	b0a8      	sub	sp, #160	; 0xa0
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	60f8      	str	r0, [r7, #12]
 8000f0a:	60b9      	str	r1, [r7, #8]
 8000f0c:	607a      	str	r2, [r7, #4]
 8000f0e:	603b      	str	r3, [r7, #0]

	int N, M, d, K = 0, k = 0, l = 1, L = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000f16:	2300      	movs	r3, #0
 8000f18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000f22:	2300      	movs	r3, #0
 8000f24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	double Wr, Wi, C1r, C1i, C2r, C2i, Dr, Di;

	if (tran == 't') {
 8000f28:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 8000f2c:	2b74      	cmp	r3, #116	; 0x74
 8000f2e:	d10a      	bne.n	8000f46 <FFTcore+0x46>
		d = N = Nc;
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000f36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000f3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		M = Nr;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000f44:	e011      	b.n	8000f6a <FFTcore+0x6a>
	}
	else if (tran == 'n') {
 8000f46:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 8000f4a:	2b6e      	cmp	r3, #110	; 0x6e
 8000f4c:	d10a      	bne.n	8000f64 <FFTcore+0x64>
		d = N = Nr;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000f54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000f58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		M = Nc;
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000f62:	e002      	b.n	8000f6a <FFTcore+0x6a>
	}
	else {
		//("tran can be either 'n' or 't'\n");
		exit(1);
 8000f64:	2001      	movs	r0, #1
 8000f66:	f005 f8d9 	bl	800611c <exit>
	}

	do
	{
		d /= 2;
 8000f6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000f6e:	0fda      	lsrs	r2, r3, #31
 8000f70:	4413      	add	r3, r2
 8000f72:	105b      	asrs	r3, r3, #1
 8000f74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		K = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		while (K<N) {
 8000f7e:	e1cc      	b.n	800131a <FFTcore+0x41a>
			k = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			while (k<d) {
 8000f86:	e1b9      	b.n	80012fc <FFTcore+0x3fc>
				int it, Ind1 = K + k, Ind2 = K + k + d;
 8000f88:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000f8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000f90:	4413      	add	r3, r2
 8000f92:	667b      	str	r3, [r7, #100]	; 0x64
 8000f94:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000f98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000f9c:	4413      	add	r3, r2
 8000f9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000fa2:	4413      	add	r3, r2
 8000fa4:	663b      	str	r3, [r7, #96]	; 0x60
				Wr = cos(2 * M_PI*k*l / N);
 8000fa6:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000faa:	f7ff fabb 	bl	8000524 <__aeabi_i2d>
 8000fae:	f20f 5318 	addw	r3, pc, #1304	; 0x518
 8000fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb6:	f7ff fb1f 	bl	80005f8 <__aeabi_dmul>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	4690      	mov	r8, r2
 8000fc0:	4699      	mov	r9, r3
 8000fc2:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8000fc6:	f7ff faad 	bl	8000524 <__aeabi_i2d>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	460b      	mov	r3, r1
 8000fce:	4640      	mov	r0, r8
 8000fd0:	4649      	mov	r1, r9
 8000fd2:	f7ff fb11 	bl	80005f8 <__aeabi_dmul>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4690      	mov	r8, r2
 8000fdc:	4699      	mov	r9, r3
 8000fde:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8000fe2:	f7ff fa9f 	bl	8000524 <__aeabi_i2d>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4640      	mov	r0, r8
 8000fec:	4649      	mov	r1, r9
 8000fee:	f7ff fc2d 	bl	800084c <__aeabi_ddiv>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	ec43 2b17 	vmov	d7, r2, r3
 8000ffa:	eeb0 0a47 	vmov.f32	s0, s14
 8000ffe:	eef0 0a67 	vmov.f32	s1, s15
 8001002:	f007 fa11 	bl	8008428 <cos>
 8001006:	ed87 0b16 	vstr	d0, [r7, #88]	; 0x58
				Wi = (flag == 'f') ? -sin(2 * M_PI*k*l / N) : sin(2 * M_PI*k*l / N);
 800100a:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800100e:	2b66      	cmp	r3, #102	; 0x66
 8001010:	d135      	bne.n	800107e <FFTcore+0x17e>
 8001012:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001016:	f7ff fa85 	bl	8000524 <__aeabi_i2d>
 800101a:	f20f 43ac 	addw	r3, pc, #1196	; 0x4ac
 800101e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001022:	f7ff fae9 	bl	80005f8 <__aeabi_dmul>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	4690      	mov	r8, r2
 800102c:	4699      	mov	r9, r3
 800102e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001032:	f7ff fa77 	bl	8000524 <__aeabi_i2d>
 8001036:	4602      	mov	r2, r0
 8001038:	460b      	mov	r3, r1
 800103a:	4640      	mov	r0, r8
 800103c:	4649      	mov	r1, r9
 800103e:	f7ff fadb 	bl	80005f8 <__aeabi_dmul>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	4690      	mov	r8, r2
 8001048:	4699      	mov	r9, r3
 800104a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800104e:	f7ff fa69 	bl	8000524 <__aeabi_i2d>
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
 8001056:	4640      	mov	r0, r8
 8001058:	4649      	mov	r1, r9
 800105a:	f7ff fbf7 	bl	800084c <__aeabi_ddiv>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	ec43 2b17 	vmov	d7, r2, r3
 8001066:	eeb0 0a47 	vmov.f32	s0, s14
 800106a:	eef0 0a67 	vmov.f32	s1, s15
 800106e:	f007 fa1f 	bl	80084b0 <sin>
 8001072:	ec53 2b10 	vmov	r2, r3, d0
 8001076:	4614      	mov	r4, r2
 8001078:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800107c:	e031      	b.n	80010e2 <FFTcore+0x1e2>
 800107e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001082:	f7ff fa4f 	bl	8000524 <__aeabi_i2d>
 8001086:	f20f 4340 	addw	r3, pc, #1088	; 0x440
 800108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108e:	f7ff fab3 	bl	80005f8 <__aeabi_dmul>
 8001092:	4603      	mov	r3, r0
 8001094:	460c      	mov	r4, r1
 8001096:	4625      	mov	r5, r4
 8001098:	461c      	mov	r4, r3
 800109a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800109e:	f7ff fa41 	bl	8000524 <__aeabi_i2d>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	4620      	mov	r0, r4
 80010a8:	4629      	mov	r1, r5
 80010aa:	f7ff faa5 	bl	80005f8 <__aeabi_dmul>
 80010ae:	4603      	mov	r3, r0
 80010b0:	460c      	mov	r4, r1
 80010b2:	4625      	mov	r5, r4
 80010b4:	461c      	mov	r4, r3
 80010b6:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80010ba:	f7ff fa33 	bl	8000524 <__aeabi_i2d>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	4620      	mov	r0, r4
 80010c4:	4629      	mov	r1, r5
 80010c6:	f7ff fbc1 	bl	800084c <__aeabi_ddiv>
 80010ca:	4603      	mov	r3, r0
 80010cc:	460c      	mov	r4, r1
 80010ce:	ec44 3b17 	vmov	d7, r3, r4
 80010d2:	eeb0 0a47 	vmov.f32	s0, s14
 80010d6:	eef0 0a67 	vmov.f32	s1, s15
 80010da:	f007 f9e9 	bl	80084b0 <sin>
 80010de:	ec55 4b10 	vmov	r4, r5, d0
 80010e2:	e9c7 4514 	strd	r4, r5, [r7, #80]	; 0x50

				for (it = 0; it<M; ++it) {
 80010e6:	2300      	movs	r3, #0
 80010e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80010ec:	e0fa      	b.n	80012e4 <FFTcore+0x3e4>
					int rind1 = (tran == 't') ? Ind1 * Ldr + it : Ind1 + Ldr * it;
 80010ee:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 80010f2:	2b74      	cmp	r3, #116	; 0x74
 80010f4:	d107      	bne.n	8001106 <FFTcore+0x206>
 80010f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	fb02 f203 	mul.w	r2, r2, r3
 80010fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001102:	4413      	add	r3, r2
 8001104:	e006      	b.n	8001114 <FFTcore+0x214>
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800110c:	fb02 f203 	mul.w	r2, r2, r3
 8001110:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001112:	4413      	add	r3, r2
 8001114:	64fb      	str	r3, [r7, #76]	; 0x4c
					int iind1 = (tran == 't') ? Ind1 * Ldi + it : Ind1 + Ldi * it;
 8001116:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 800111a:	2b74      	cmp	r3, #116	; 0x74
 800111c:	d108      	bne.n	8001130 <FFTcore+0x230>
 800111e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001120:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001124:	fb02 f203 	mul.w	r2, r2, r3
 8001128:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800112c:	4413      	add	r3, r2
 800112e:	e007      	b.n	8001140 <FFTcore+0x240>
 8001130:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001134:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001138:	fb02 f203 	mul.w	r2, r2, r3
 800113c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800113e:	4413      	add	r3, r2
 8001140:	64bb      	str	r3, [r7, #72]	; 0x48
					int rind2 = (tran == 't') ? Ind2 * Ldr + it : Ind2 + Ldr * it;
 8001142:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 8001146:	2b74      	cmp	r3, #116	; 0x74
 8001148:	d107      	bne.n	800115a <FFTcore+0x25a>
 800114a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	fb02 f203 	mul.w	r2, r2, r3
 8001152:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001156:	4413      	add	r3, r2
 8001158:	e006      	b.n	8001168 <FFTcore+0x268>
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001160:	fb02 f203 	mul.w	r2, r2, r3
 8001164:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001166:	4413      	add	r3, r2
 8001168:	647b      	str	r3, [r7, #68]	; 0x44
					int iind2 = (tran == 't') ? Ind2 * Ldi + it : Ind2 + Ldi * it;
 800116a:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 800116e:	2b74      	cmp	r3, #116	; 0x74
 8001170:	d108      	bne.n	8001184 <FFTcore+0x284>
 8001172:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001174:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001178:	fb02 f203 	mul.w	r2, r2, r3
 800117c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001180:	4413      	add	r3, r2
 8001182:	e007      	b.n	8001194 <FFTcore+0x294>
 8001184:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001188:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800118c:	fb02 f203 	mul.w	r2, r2, r3
 8001190:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001192:	4413      	add	r3, r2
 8001194:	643b      	str	r3, [r7, #64]	; 0x40

					C1r = Ar[rind1] + Ar[rind2];
 8001196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ae:	f7ff f86d 	bl	800028c <__adddf3>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
					C1i = Ai[iind1] + Ai[iind2];
 80011ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80011c2:	4413      	add	r3, r2
 80011c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80011d0:	4413      	add	r3, r2
 80011d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d6:	f7ff f859 	bl	800028c <__adddf3>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
					Dr = Ar[rind1] - Ar[rind2];
 80011e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fa:	f7ff f845 	bl	8000288 <__aeabi_dsub>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
					Di = Ai[iind1] - Ai[iind2];
 8001206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800120e:	4413      	add	r3, r2
 8001210:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800121c:	4413      	add	r3, r2
 800121e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001222:	f7ff f831 	bl	8000288 <__aeabi_dsub>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	e9c7 2308 	strd	r2, r3, [r7, #32]
					C2r = Dr * Wr - Di * Wi;
 800122e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001232:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001236:	f7ff f9df 	bl	80005f8 <__aeabi_dmul>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	4690      	mov	r8, r2
 8001240:	4699      	mov	r9, r3
 8001242:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001246:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800124a:	f7ff f9d5 	bl	80005f8 <__aeabi_dmul>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4640      	mov	r0, r8
 8001254:	4649      	mov	r1, r9
 8001256:	f7ff f817 	bl	8000288 <__aeabi_dsub>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	e9c7 2306 	strd	r2, r3, [r7, #24]
					C2i = Dr * Wi + Di * Wr;
 8001262:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001266:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800126a:	f7ff f9c5 	bl	80005f8 <__aeabi_dmul>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4690      	mov	r8, r2
 8001274:	4699      	mov	r9, r3
 8001276:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800127a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800127e:	f7ff f9bb 	bl	80005f8 <__aeabi_dmul>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4640      	mov	r0, r8
 8001288:	4649      	mov	r1, r9
 800128a:	f7fe ffff 	bl	800028c <__adddf3>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	e9c7 2304 	strd	r2, r3, [r7, #16]
					Ar[rind1] = C1r;
 8001296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	18d1      	adds	r1, r2, r3
 800129e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80012a2:	e9c1 2300 	strd	r2, r3, [r1]
					Ai[iind1] = C1i;
 80012a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80012ae:	18d1      	adds	r1, r2, r3
 80012b0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80012b4:	e9c1 2300 	strd	r2, r3, [r1]
					Ar[rind2] = C2r;
 80012b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	18d1      	adds	r1, r2, r3
 80012c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012c4:	e9c1 2300 	strd	r2, r3, [r1]
					Ai[iind2] = C2i;
 80012c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80012d0:	18d1      	adds	r1, r2, r3
 80012d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012d6:	e9c1 2300 	strd	r2, r3, [r1]
				for (it = 0; it<M; ++it) {
 80012da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80012de:	3301      	adds	r3, #1
 80012e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80012e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80012e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80012ec:	429a      	cmp	r2, r3
 80012ee:	f6ff aefe 	blt.w	80010ee <FFTcore+0x1ee>
				}
				++k;
 80012f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012f6:	3301      	adds	r3, #1
 80012f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			while (k<d) {
 80012fc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001300:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001304:	429a      	cmp	r2, r3
 8001306:	f6ff ae3f 	blt.w	8000f88 <FFTcore+0x88>
			}
			K += 2 * d;
 800130a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001314:	4413      	add	r3, r2
 8001316:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		while (K<N) {
 800131a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800131e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001322:	429a      	cmp	r2, r3
 8001324:	f6ff ae2c 	blt.w	8000f80 <FFTcore+0x80>
		}
		l *= 2;
 8001328:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		++L;
 8001332:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001336:	3301      	adds	r3, #1
 8001338:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	} while (d>1);
 800133c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001340:	2b01      	cmp	r3, #1
 8001342:	f73f ae12 	bgt.w	8000f6a <FFTcore+0x6a>

	for (d = 0; d<N; ++d) {
 8001346:	2300      	movs	r3, #0
 8001348:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800134c:	e0af      	b.n	80014ae <FFTcore+0x5ae>
		k = bit_reverse(d, L);
 800134e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8001352:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8001356:	f7ff fda7 	bl	8000ea8 <bit_reverse>
 800135a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		if (d < k) {
 800135e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001362:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001366:	429a      	cmp	r2, r3
 8001368:	f280 809c 	bge.w	80014a4 <FFTcore+0x5a4>
			int it;
			for (it = 0; it<M; ++it) {
 800136c:	2300      	movs	r3, #0
 800136e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001370:	e092      	b.n	8001498 <FFTcore+0x598>
				int ind1 = (tran == 't') ? d * Ldr + it : d + Ldr * it;
 8001372:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 8001376:	2b74      	cmp	r3, #116	; 0x74
 8001378:	d107      	bne.n	800138a <FFTcore+0x48a>
 800137a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800137e:	683a      	ldr	r2, [r7, #0]
 8001380:	fb02 f203 	mul.w	r2, r2, r3
 8001384:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001386:	4413      	add	r3, r2
 8001388:	e006      	b.n	8001398 <FFTcore+0x498>
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800138e:	fb02 f203 	mul.w	r2, r2, r3
 8001392:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001396:	4413      	add	r3, r2
 8001398:	67bb      	str	r3, [r7, #120]	; 0x78
				int ind2 = (tran == 't') ? k * Ldr + it : k + Ldr * it;
 800139a:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 800139e:	2b74      	cmp	r3, #116	; 0x74
 80013a0:	d107      	bne.n	80013b2 <FFTcore+0x4b2>
 80013a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	fb02 f203 	mul.w	r2, r2, r3
 80013ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80013ae:	4413      	add	r3, r2
 80013b0:	e006      	b.n	80013c0 <FFTcore+0x4c0>
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80013b6:	fb02 f203 	mul.w	r2, r2, r3
 80013ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80013be:	4413      	add	r3, r2
 80013c0:	677b      	str	r3, [r7, #116]	; 0x74
				double temp = Ar[ind1];
 80013c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80013ce:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
				Ar[ind1] = Ar[ind2];
 80013d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80013dc:	00d2      	lsls	r2, r2, #3
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	440a      	add	r2, r1
 80013e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80013e6:	e9c2 3400 	strd	r3, r4, [r2]
				Ar[ind2] = temp;
 80013ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	441a      	add	r2, r3
 80013f2:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80013f6:	e9c2 3400 	strd	r3, r4, [r2]

				ind1 = (tran == 't') ? d * Ldi + it : d + Ldi * it;
 80013fa:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 80013fe:	2b74      	cmp	r3, #116	; 0x74
 8001400:	d108      	bne.n	8001414 <FFTcore+0x514>
 8001402:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001406:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800140a:	fb02 f203 	mul.w	r2, r2, r3
 800140e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001410:	4413      	add	r3, r2
 8001412:	e007      	b.n	8001424 <FFTcore+0x524>
 8001414:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001418:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800141a:	fb02 f203 	mul.w	r2, r2, r3
 800141e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001422:	4413      	add	r3, r2
 8001424:	67bb      	str	r3, [r7, #120]	; 0x78
				ind2 = (tran == 't') ? k * Ldi + it : k + Ldi * it;
 8001426:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 800142a:	2b74      	cmp	r3, #116	; 0x74
 800142c:	d108      	bne.n	8001440 <FFTcore+0x540>
 800142e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001432:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001436:	fb02 f203 	mul.w	r2, r2, r3
 800143a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800143c:	4413      	add	r3, r2
 800143e:	e007      	b.n	8001450 <FFTcore+0x550>
 8001440:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001444:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001446:	fb02 f203 	mul.w	r2, r2, r3
 800144a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800144e:	4413      	add	r3, r2
 8001450:	677b      	str	r3, [r7, #116]	; 0x74
				temp = Ai[ind1];
 8001452:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800145a:	4413      	add	r3, r2
 800145c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001460:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
				Ai[ind1] = Ai[ind2];
 8001464:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800146c:	4413      	add	r3, r2
 800146e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001470:	00d2      	lsls	r2, r2, #3
 8001472:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001476:	440a      	add	r2, r1
 8001478:	e9d3 3400 	ldrd	r3, r4, [r3]
 800147c:	e9c2 3400 	strd	r3, r4, [r2]
				Ai[ind2] = temp;
 8001480:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001488:	441a      	add	r2, r3
 800148a:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800148e:	e9c2 3400 	strd	r3, r4, [r2]
			for (it = 0; it<M; ++it) {
 8001492:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001494:	3301      	adds	r3, #1
 8001496:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001498:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800149a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800149e:	429a      	cmp	r2, r3
 80014a0:	f6ff af67 	blt.w	8001372 <FFTcore+0x472>
	for (d = 0; d<N; ++d) {
 80014a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80014a8:	3301      	adds	r3, #1
 80014aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80014ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80014b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80014b6:	429a      	cmp	r2, r3
 80014b8:	f6ff af49 	blt.w	800134e <FFTcore+0x44e>
			}
		}
	}
}
 80014bc:	bf00      	nop
 80014be:	37a0      	adds	r7, #160	; 0xa0
 80014c0:	46bd      	mov	sp, r7
 80014c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014c6:	bf00      	nop
 80014c8:	54442d18 	.word	0x54442d18
 80014cc:	401921fb 	.word	0x401921fb

080014d0 <DCT2>:

void DCT2(int N, double* x) {
 80014d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014d4:	b092      	sub	sp, #72	; 0x48
 80014d6:	af04      	add	r7, sp, #16
 80014d8:	6078      	str	r0, [r7, #4]
 80014da:	6039      	str	r1, [r7, #0]
	double* Ar = (double*)malloc(4 * N * sizeof(double));
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	015b      	lsls	r3, r3, #5
 80014e0:	4618      	mov	r0, r3
 80014e2:	f004 fe53 	bl	800618c <malloc>
 80014e6:	4603      	mov	r3, r0
 80014e8:	633b      	str	r3, [r7, #48]	; 0x30
	//assert(Ar != NULL);
	double* Ai = Ar + 2 * N;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	011b      	lsls	r3, r3, #4
 80014ee:	461a      	mov	r2, r3
 80014f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014f2:	4413      	add	r3, r2
 80014f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	memset(Ar, 0, 4 * N * sizeof(double));
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	015b      	lsls	r3, r3, #5
 80014fa:	461a      	mov	r2, r3
 80014fc:	2100      	movs	r1, #0
 80014fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001500:	f004 fe5f 	bl	80061c2 <memset>
	int n;
	for (n = 0; n<N; ++n) Ar[n] = x[n];
 8001504:	2300      	movs	r3, #0
 8001506:	637b      	str	r3, [r7, #52]	; 0x34
 8001508:	e00e      	b.n	8001528 <DCT2+0x58>
 800150a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	4413      	add	r3, r2
 8001512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001514:	00d2      	lsls	r2, r2, #3
 8001516:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001518:	440a      	add	r2, r1
 800151a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800151e:	e9c2 3400 	strd	r3, r4, [r2]
 8001522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001524:	3301      	adds	r3, #1
 8001526:	637b      	str	r3, [r7, #52]	; 0x34
 8001528:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	429a      	cmp	r2, r3
 800152e:	dbec      	blt.n	800150a <DCT2+0x3a>
	for (n = N; n<2 * N; ++n) Ar[n] = x[2 * N - 1 - n];
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	637b      	str	r3, [r7, #52]	; 0x34
 8001534:	e012      	b.n	800155c <DCT2+0x8c>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	1e5a      	subs	r2, r3, #1
 800153c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	4413      	add	r3, r2
 8001546:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001548:	00d2      	lsls	r2, r2, #3
 800154a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800154c:	440a      	add	r2, r1
 800154e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001552:	e9c2 3400 	strd	r3, r4, [r2]
 8001556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001558:	3301      	adds	r3, #1
 800155a:	637b      	str	r3, [r7, #52]	; 0x34
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001562:	429a      	cmp	r2, r3
 8001564:	dbe7      	blt.n	8001536 <DCT2+0x66>
	FFTcore(2 * N, 1, Ar, 2 * n, Ai, 2 * n, 'n', 'f');
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	0058      	lsls	r0, r3, #1
 800156a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800156c:	0059      	lsls	r1, r3, #1
 800156e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	2266      	movs	r2, #102	; 0x66
 8001574:	9203      	str	r2, [sp, #12]
 8001576:	226e      	movs	r2, #110	; 0x6e
 8001578:	9202      	str	r2, [sp, #8]
 800157a:	9301      	str	r3, [sp, #4]
 800157c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	460b      	mov	r3, r1
 8001582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001584:	2101      	movs	r1, #1
 8001586:	f7ff fcbb 	bl	8000f00 <FFTcore>
	double g = M_PI / (2 * N), p = sqrt(2.0 / N), po = sqrt(1.0 / N);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe ffc8 	bl	8000524 <__aeabi_i2d>
 8001594:	4603      	mov	r3, r0
 8001596:	460c      	mov	r4, r1
 8001598:	461a      	mov	r2, r3
 800159a:	4623      	mov	r3, r4
 800159c:	a161      	add	r1, pc, #388	; (adr r1, 8001724 <DCT2+0x254>)
 800159e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015a2:	f7ff f953 	bl	800084c <__aeabi_ddiv>
 80015a6:	4603      	mov	r3, r0
 80015a8:	460c      	mov	r4, r1
 80015aa:	e9c7 3408 	strd	r3, r4, [r7, #32]
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7fe ffb8 	bl	8000524 <__aeabi_i2d>
 80015b4:	4603      	mov	r3, r0
 80015b6:	460c      	mov	r4, r1
 80015b8:	461a      	mov	r2, r3
 80015ba:	4623      	mov	r3, r4
 80015bc:	f04f 0000 	mov.w	r0, #0
 80015c0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80015c4:	f7ff f942 	bl	800084c <__aeabi_ddiv>
 80015c8:	4603      	mov	r3, r0
 80015ca:	460c      	mov	r4, r1
 80015cc:	ec44 3b17 	vmov	d7, r3, r4
 80015d0:	eeb0 0a47 	vmov.f32	s0, s14
 80015d4:	eef0 0a67 	vmov.f32	s1, s15
 80015d8:	f006 ffb2 	bl	8008540 <sqrt>
 80015dc:	ed87 0b06 	vstr	d0, [r7, #24]
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7fe ff9f 	bl	8000524 <__aeabi_i2d>
 80015e6:	4603      	mov	r3, r0
 80015e8:	460c      	mov	r4, r1
 80015ea:	461a      	mov	r2, r3
 80015ec:	4623      	mov	r3, r4
 80015ee:	f04f 0000 	mov.w	r0, #0
 80015f2:	494b      	ldr	r1, [pc, #300]	; (8001720 <DCT2+0x250>)
 80015f4:	f7ff f92a 	bl	800084c <__aeabi_ddiv>
 80015f8:	4603      	mov	r3, r0
 80015fa:	460c      	mov	r4, r1
 80015fc:	ec44 3b17 	vmov	d7, r3, r4
 8001600:	eeb0 0a47 	vmov.f32	s0, s14
 8001604:	eef0 0a67 	vmov.f32	s1, s15
 8001608:	f006 ff9a 	bl	8008540 <sqrt>
 800160c:	ed87 0b04 	vstr	d0, [r7, #16]
	for (n = 0; n<N; ++n) {
 8001610:	2300      	movs	r3, #0
 8001612:	637b      	str	r3, [r7, #52]	; 0x34
 8001614:	e076      	b.n	8001704 <DCT2+0x234>
		double z = (Ar[n] * cos(n*g) + Ai[n] * sin(n*g)) / 2;
 8001616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800161c:	4413      	add	r3, r2
 800161e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001622:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001624:	f7fe ff7e 	bl	8000524 <__aeabi_i2d>
 8001628:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800162c:	f7fe ffe4 	bl	80005f8 <__aeabi_dmul>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	ec43 2b17 	vmov	d7, r2, r3
 8001638:	eeb0 0a47 	vmov.f32	s0, s14
 800163c:	eef0 0a67 	vmov.f32	s1, s15
 8001640:	f006 fef2 	bl	8008428 <cos>
 8001644:	ec53 2b10 	vmov	r2, r3, d0
 8001648:	4620      	mov	r0, r4
 800164a:	4629      	mov	r1, r5
 800164c:	f7fe ffd4 	bl	80005f8 <__aeabi_dmul>
 8001650:	4603      	mov	r3, r0
 8001652:	460c      	mov	r4, r1
 8001654:	4698      	mov	r8, r3
 8001656:	46a1      	mov	r9, r4
 8001658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800165e:	4413      	add	r3, r2
 8001660:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001664:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001666:	f7fe ff5d 	bl	8000524 <__aeabi_i2d>
 800166a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800166e:	f7fe ffc3 	bl	80005f8 <__aeabi_dmul>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	ec43 2b17 	vmov	d7, r2, r3
 800167a:	eeb0 0a47 	vmov.f32	s0, s14
 800167e:	eef0 0a67 	vmov.f32	s1, s15
 8001682:	f006 ff15 	bl	80084b0 <sin>
 8001686:	ec53 2b10 	vmov	r2, r3, d0
 800168a:	4620      	mov	r0, r4
 800168c:	4629      	mov	r1, r5
 800168e:	f7fe ffb3 	bl	80005f8 <__aeabi_dmul>
 8001692:	4603      	mov	r3, r0
 8001694:	460c      	mov	r4, r1
 8001696:	461a      	mov	r2, r3
 8001698:	4623      	mov	r3, r4
 800169a:	4640      	mov	r0, r8
 800169c:	4649      	mov	r1, r9
 800169e:	f7fe fdf5 	bl	800028c <__adddf3>
 80016a2:	4603      	mov	r3, r0
 80016a4:	460c      	mov	r4, r1
 80016a6:	4618      	mov	r0, r3
 80016a8:	4621      	mov	r1, r4
 80016aa:	f04f 0200 	mov.w	r2, #0
 80016ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016b2:	f7ff f8cb 	bl	800084c <__aeabi_ddiv>
 80016b6:	4603      	mov	r3, r0
 80016b8:	460c      	mov	r4, r1
 80016ba:	e9c7 3402 	strd	r3, r4, [r7, #8]
		if (n == 0) x[n] = po * z;
 80016be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d10e      	bne.n	80016e2 <DCT2+0x212>
 80016c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	18d5      	adds	r5, r2, r3
 80016cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016d4:	f7fe ff90 	bl	80005f8 <__aeabi_dmul>
 80016d8:	4603      	mov	r3, r0
 80016da:	460c      	mov	r4, r1
 80016dc:	e9c5 3400 	strd	r3, r4, [r5]
 80016e0:	e00d      	b.n	80016fe <DCT2+0x22e>
		else     x[n] = p * z;
 80016e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	18d5      	adds	r5, r2, r3
 80016ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016f2:	f7fe ff81 	bl	80005f8 <__aeabi_dmul>
 80016f6:	4603      	mov	r3, r0
 80016f8:	460c      	mov	r4, r1
 80016fa:	e9c5 3400 	strd	r3, r4, [r5]
	for (n = 0; n<N; ++n) {
 80016fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001700:	3301      	adds	r3, #1
 8001702:	637b      	str	r3, [r7, #52]	; 0x34
 8001704:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	429a      	cmp	r2, r3
 800170a:	db84      	blt.n	8001616 <DCT2+0x146>
	}
	free(Ar);
 800170c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800170e:	f004 fd45 	bl	800619c <free>
}
 8001712:	bf00      	nop
 8001714:	3738      	adds	r7, #56	; 0x38
 8001716:	46bd      	mov	sp, r7
 8001718:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800171c:	f3af 8000 	nop.w
 8001720:	3ff00000 	.word	0x3ff00000
 8001724:	54442d18 	.word	0x54442d18
 8001728:	400921fb 	.word	0x400921fb

0800172c <dct_test>:


void dct_test(double * z, double * data, int m) {
 800172c:	b590      	push	{r4, r7, lr}
 800172e:	b087      	sub	sp, #28
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]

	int i;
	for (i = 0; i < m; ++i) z[i] =  data[i];
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	e00e      	b.n	800175c <dct_test+0x30>
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	68ba      	ldr	r2, [r7, #8]
 8001744:	4413      	add	r3, r2
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	00d2      	lsls	r2, r2, #3
 800174a:	68f9      	ldr	r1, [r7, #12]
 800174c:	440a      	add	r2, r1
 800174e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001752:	e9c2 3400 	strd	r3, r4, [r2]
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	3301      	adds	r3, #1
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	697a      	ldr	r2, [r7, #20]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	429a      	cmp	r2, r3
 8001762:	dbec      	blt.n	800173e <dct_test+0x12>

	DCT2(m, z);
 8001764:	68f9      	ldr	r1, [r7, #12]
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff feb2 	bl	80014d0 <DCT2>
}
 800176c:	bf00      	nop
 800176e:	371c      	adds	r7, #28
 8001770:	46bd      	mov	sp, r7
 8001772:	bd90      	pop	{r4, r7, pc}
 8001774:	0000      	movs	r0, r0
	...

08001778 <parse_buffer>:
unsigned char RX_data[EPOCH_LENGTH_SAMPLES * CHARS_PER_SAMPLE] = {0};
double parsed_epoch_data[EPOCH_LENGTH_SAMPLES] = {0};
Linear_SVM_Model SVM;
uint32_t adc_values[7];        /**< The ADC Values are saved here */

int parse_buffer(void) {
 8001778:	b590      	push	{r4, r7, lr}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
	char delim[] = "\n";
 800177e:	230a      	movs	r3, #10
 8001780:	803b      	strh	r3, [r7, #0]
	char *ptr = strtok((char*)RX_data, delim);
 8001782:	463b      	mov	r3, r7
 8001784:	4619      	mov	r1, r3
 8001786:	4824      	ldr	r0, [pc, #144]	; (8001818 <parse_buffer+0xa0>)
 8001788:	f005 fa6c 	bl	8006c64 <strtok>
 800178c:	60f8      	str	r0, [r7, #12]
	int sample_number = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	60bb      	str	r3, [r7, #8]
	while(ptr != NULL)
 8001792:	e032      	b.n	80017fa <parse_buffer+0x82>
	{
		long value = atol(ptr);
 8001794:	68f8      	ldr	r0, [r7, #12]
 8001796:	f004 fcb7 	bl	8006108 <atol>
 800179a:	6078      	str	r0, [r7, #4]
		if (SVM.complete) { // this should be svm.complete
 800179c:	4b1f      	ldr	r3, [pc, #124]	; (800181c <parse_buffer+0xa4>)
 800179e:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d010      	beq.n	80017c8 <parse_buffer+0x50>
			parsed_epoch_data[sample_number] = ((double)value) / EEG_SCALE_FACTOR;
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7fe febc 	bl	8000524 <__aeabi_i2d>
 80017ac:	a318      	add	r3, pc, #96	; (adr r3, 8001810 <parse_buffer+0x98>)
 80017ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b2:	f7ff f84b 	bl	800084c <__aeabi_ddiv>
 80017b6:	4603      	mov	r3, r0
 80017b8:	460c      	mov	r4, r1
 80017ba:	4919      	ldr	r1, [pc, #100]	; (8001820 <parse_buffer+0xa8>)
 80017bc:	68ba      	ldr	r2, [r7, #8]
 80017be:	00d2      	lsls	r2, r2, #3
 80017c0:	440a      	add	r2, r1
 80017c2:	e9c2 3400 	strd	r3, r4, [r2]
 80017c6:	e00f      	b.n	80017e8 <parse_buffer+0x70>
		}
		else {
			parsed_epoch_data[sample_number] = ((double)value) / SVM_SCALE_FACTOR;
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7fe feab 	bl	8000524 <__aeabi_i2d>
 80017ce:	a310      	add	r3, pc, #64	; (adr r3, 8001810 <parse_buffer+0x98>)
 80017d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d4:	f7ff f83a 	bl	800084c <__aeabi_ddiv>
 80017d8:	4603      	mov	r3, r0
 80017da:	460c      	mov	r4, r1
 80017dc:	4910      	ldr	r1, [pc, #64]	; (8001820 <parse_buffer+0xa8>)
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	00d2      	lsls	r2, r2, #3
 80017e2:	440a      	add	r2, r1
 80017e4:	e9c2 3400 	strd	r3, r4, [r2]
		}
		sample_number++;
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	3301      	adds	r3, #1
 80017ec:	60bb      	str	r3, [r7, #8]
		ptr = strtok(NULL, delim);
 80017ee:	463b      	mov	r3, r7
 80017f0:	4619      	mov	r1, r3
 80017f2:	2000      	movs	r0, #0
 80017f4:	f005 fa36 	bl	8006c64 <strtok>
 80017f8:	60f8      	str	r0, [r7, #12]
	while(ptr != NULL)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1c9      	bne.n	8001794 <parse_buffer+0x1c>
	}
	return sample_number;
 8001800:	68bb      	ldr	r3, [r7, #8]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3714      	adds	r7, #20
 8001806:	46bd      	mov	sp, r7
 8001808:	bd90      	pop	{r4, r7, pc}
 800180a:	bf00      	nop
 800180c:	f3af 8000 	nop.w
 8001810:	00000000 	.word	0x00000000
 8001814:	40f86a00 	.word	0x40f86a00
 8001818:	200001fc 	.word	0x200001fc
 800181c:	20001570 	.word	0x20001570
 8001820:	20000d00 	.word	0x20000d00

08001824 <process_sample>:

void process_sample(double coeffs[]) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
    parse_buffer();
 800182c:	f7ff ffa4 	bl	8001778 <parse_buffer>
	// Process this epoch
	int number_of_samples = sizeof(parsed_epoch_data) / sizeof(double);
 8001830:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001834:	60fb      	str	r3, [r7, #12]

	dct_test(coeffs, parsed_epoch_data, number_of_samples);
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	4903      	ldr	r1, [pc, #12]	; (8001848 <process_sample+0x24>)
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7ff ff76 	bl	800172c <dct_test>
		HAL_UART_Transmit(&huart4, (unsigned char *)data_string, CHARS_PER_SAMPLE, 0xFFFF);
		HAL_UART_Transmit(&huart4, (unsigned char *)"\n\r", 3, 0xFFFF);
	}
#endif

}
 8001840:	bf00      	nop
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000d00 	.word	0x20000d00

0800184c <build_model>:
	}

}
#endif

void build_model(void) {
 800184c:	b5b0      	push	{r4, r5, r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
	parse_buffer();
 8001852:	f7ff ff91 	bl	8001778 <parse_buffer>
	if (SVM.has_vector == 0) {
 8001856:	4b3c      	ldr	r3, [pc, #240]	; (8001948 <build_model+0xfc>)
 8001858:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 800185c:	2b00      	cmp	r3, #0
 800185e:	d14f      	bne.n	8001900 <build_model+0xb4>
 8001860:	466b      	mov	r3, sp
 8001862:	461d      	mov	r5, r3
		/* Load the weight vector */
		int number_of_weights = sizeof(parsed_epoch_data) / sizeof(double);   // Get the number of coefficients in the weight vector
 8001864:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001868:	60bb      	str	r3, [r7, #8]
		double vect[number_of_weights];      // This is an array to hold the weights once converted to double from long
 800186a:	68b8      	ldr	r0, [r7, #8]
 800186c:	1e43      	subs	r3, r0, #1
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	4603      	mov	r3, r0
 8001872:	4619      	mov	r1, r3
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	f04f 0300 	mov.w	r3, #0
 800187c:	f04f 0400 	mov.w	r4, #0
 8001880:	0194      	lsls	r4, r2, #6
 8001882:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001886:	018b      	lsls	r3, r1, #6
 8001888:	4603      	mov	r3, r0
 800188a:	4619      	mov	r1, r3
 800188c:	f04f 0200 	mov.w	r2, #0
 8001890:	f04f 0300 	mov.w	r3, #0
 8001894:	f04f 0400 	mov.w	r4, #0
 8001898:	0194      	lsls	r4, r2, #6
 800189a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800189e:	018b      	lsls	r3, r1, #6
 80018a0:	4603      	mov	r3, r0
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	3307      	adds	r3, #7
 80018a6:	3307      	adds	r3, #7
 80018a8:	08db      	lsrs	r3, r3, #3
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	ebad 0d03 	sub.w	sp, sp, r3
 80018b0:	466b      	mov	r3, sp
 80018b2:	3307      	adds	r3, #7
 80018b4:	08db      	lsrs	r3, r3, #3
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	603b      	str	r3, [r7, #0]
		for (int i = 0; i < number_of_weights; i++) {
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	e00e      	b.n	80018de <build_model+0x92>
			vect[i] = (parsed_epoch_data[i]); // Convert the weight to double then divide by the scale factor
 80018c0:	4a22      	ldr	r2, [pc, #136]	; (800194c <build_model+0x100>)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	4413      	add	r3, r2
 80018c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80018cc:	6839      	ldr	r1, [r7, #0]
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	00d2      	lsls	r2, r2, #3
 80018d2:	440a      	add	r2, r1
 80018d4:	e9c2 3400 	strd	r3, r4, [r2]
		for (int i = 0; i < number_of_weights; i++) {
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	3301      	adds	r3, #1
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	dbec      	blt.n	80018c0 <build_model+0x74>
		}
		//SVM->weight_vector = malloc(number_of_weights * sizeof(double));
		memcpy(SVM.weight_vector, vect, sizeof(vect));   // Store the scaled weights into the model, SVM.weight_vector is no longer NULL
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	4602      	mov	r2, r0
 80018ea:	00d2      	lsls	r2, r2, #3
 80018ec:	4619      	mov	r1, r3
 80018ee:	4816      	ldr	r0, [pc, #88]	; (8001948 <build_model+0xfc>)
 80018f0:	f004 fc5c 	bl	80061ac <memcpy>
		SVM.has_vector = 1;
 80018f4:	4b14      	ldr	r3, [pc, #80]	; (8001948 <build_model+0xfc>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
 80018fc:	46ad      	mov	sp, r5
		SVM.complete = 1;
#ifdef PRINTING_MODEL
		print_model(SVM);
#endif
	}
}
 80018fe:	e01e      	b.n	800193e <build_model+0xf2>
		SVM.scale = (parsed_epoch_data[0]);
 8001900:	4b12      	ldr	r3, [pc, #72]	; (800194c <build_model+0x100>)
 8001902:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001906:	4a10      	ldr	r2, [pc, #64]	; (8001948 <build_model+0xfc>)
 8001908:	f602 0208 	addw	r2, r2, #2056	; 0x808
 800190c:	e9c2 3400 	strd	r3, r4, [r2]
		SVM.offset = (parsed_epoch_data[1]);
 8001910:	4b0e      	ldr	r3, [pc, #56]	; (800194c <build_model+0x100>)
 8001912:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001916:	4a0c      	ldr	r2, [pc, #48]	; (8001948 <build_model+0xfc>)
 8001918:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800191c:	e9c2 3400 	strd	r3, r4, [r2]
		SVM.dimension = (parsed_epoch_data[2]);
 8001920:	4b0a      	ldr	r3, [pc, #40]	; (800194c <build_model+0x100>)
 8001922:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001926:	4618      	mov	r0, r3
 8001928:	4621      	mov	r1, r4
 800192a:	f7ff f915 	bl	8000b58 <__aeabi_d2iz>
 800192e:	4602      	mov	r2, r0
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <build_model+0xfc>)
 8001932:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
		SVM.complete = 1;
 8001936:	4b04      	ldr	r3, [pc, #16]	; (8001948 <build_model+0xfc>)
 8001938:	2201      	movs	r2, #1
 800193a:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
}
 800193e:	bf00      	nop
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bdb0      	pop	{r4, r5, r7, pc}
 8001946:	bf00      	nop
 8001948:	20001570 	.word	0x20001570
 800194c:	20000d00 	.word	0x20000d00

08001950 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001950:	b580      	push	{r7, lr}
 8001952:	f5ad 6d01 	sub.w	sp, sp, #2064	; 0x810
 8001956:	af00      	add	r7, sp, #0
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	6018      	str	r0, [r3, #0]
	if (SVM.complete) { //should be complete not not complete
 800195c:	4b1e      	ldr	r3, [pc, #120]	; (80019d8 <HAL_UART_RxCpltCallback+0x88>)
 800195e:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8001962:	2b00      	cmp	r3, #0
 8001964:	d02a      	beq.n	80019bc <HAL_UART_RxCpltCallback+0x6c>
		double coeffs[EPOCH_LENGTH_SAMPLES] = {0};
 8001966:	f107 0308 	add.w	r3, r7, #8
 800196a:	4618      	mov	r0, r3
 800196c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001970:	461a      	mov	r2, r3
 8001972:	2100      	movs	r1, #0
 8001974:	f004 fc25 	bl	80061c2 <memset>
        process_sample(coeffs);
 8001978:	f107 0308 	add.w	r3, r7, #8
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff51 	bl	8001824 <process_sample>
        double prediction = Linear_SVM_Predict(&SVM, coeffs);
 8001982:	f107 0308 	add.w	r3, r7, #8
 8001986:	4619      	mov	r1, r3
 8001988:	4813      	ldr	r0, [pc, #76]	; (80019d8 <HAL_UART_RxCpltCallback+0x88>)
 800198a:	f000 fed1 	bl	8002730 <Linear_SVM_Predict>
 800198e:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001992:	ed83 0b00 	vstr	d0, [r3]
        if (prediction < 0) {
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	f04f 0300 	mov.w	r3, #0
 800199e:	f607 0108 	addw	r1, r7, #2056	; 0x808
 80019a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019a6:	f7ff f899 	bl	8000adc <__aeabi_dcmplt>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d002      	beq.n	80019b6 <HAL_UART_RxCpltCallback+0x66>
        	open_hand();
 80019b0:	f000 f858 	bl	8001a64 <open_hand>
 80019b4:	e004      	b.n	80019c0 <HAL_UART_RxCpltCallback+0x70>
        }
        else {
        	close_hand();
 80019b6:	f000 f833 	bl	8001a20 <close_hand>
 80019ba:	e001      	b.n	80019c0 <HAL_UART_RxCpltCallback+0x70>
        }
	}
	else {        //This happens when we haven't got the model yet
		/* Get the model */
		build_model();
 80019bc:	f7ff ff46 	bl	800184c <build_model>
	}
	HAL_UART_Receive_IT(&huart4, RX_data, EPOCH_LENGTH_SAMPLES * CHARS_PER_SAMPLE); // Start listening. You now have 1 epoch to process this epoch
 80019c0:	f44f 6230 	mov.w	r2, #2816	; 0xb00
 80019c4:	4905      	ldr	r1, [pc, #20]	; (80019dc <HAL_UART_RxCpltCallback+0x8c>)
 80019c6:	4806      	ldr	r0, [pc, #24]	; (80019e0 <HAL_UART_RxCpltCallback+0x90>)
 80019c8:	f003 fd4c 	bl	8005464 <HAL_UART_Receive_IT>
}
 80019cc:	bf00      	nop
 80019ce:	f507 6701 	add.w	r7, r7, #2064	; 0x810
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20001570 	.word	0x20001570
 80019dc:	200001fc 	.word	0x200001fc
 80019e0:	20001eb8 	.word	0x20001eb8

080019e4 <user_pwm_setvalue>:

void user_pwm_setvalue(long value, TIM_HandleTypeDef* timer, uint32_t channel)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08c      	sub	sp, #48	; 0x30
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
    TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019f0:	2360      	movs	r3, #96	; 0x60
 80019f2:	617b      	str	r3, [r7, #20]
    sConfigOC.Pulse = value;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	61bb      	str	r3, [r7, #24]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019f8:	2300      	movs	r3, #0
 80019fa:	61fb      	str	r3, [r7, #28]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019fc:	2300      	movs	r3, #0
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_TIM_PWM_ConfigChannel(timer, &sConfigOC, channel);
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	4619      	mov	r1, r3
 8001a08:	68b8      	ldr	r0, [r7, #8]
 8001a0a:	f002 ff3b 	bl	8004884 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(timer, channel);
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	68b8      	ldr	r0, [r7, #8]
 8001a12:	f002 fef9 	bl	8004808 <HAL_TIM_PWM_Start>
}
 8001a16:	bf00      	nop
 8001a18:	3730      	adds	r7, #48	; 0x30
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <close_hand>:

void close_hand(void) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
	  user_pwm_setvalue(32, &htim3, TIM_CHANNEL_1);
 8001a24:	2200      	movs	r2, #0
 8001a26:	490d      	ldr	r1, [pc, #52]	; (8001a5c <close_hand+0x3c>)
 8001a28:	2020      	movs	r0, #32
 8001a2a:	f7ff ffdb 	bl	80019e4 <user_pwm_setvalue>
	  user_pwm_setvalue(28, &htim3, TIM_CHANNEL_2);
 8001a2e:	2204      	movs	r2, #4
 8001a30:	490a      	ldr	r1, [pc, #40]	; (8001a5c <close_hand+0x3c>)
 8001a32:	201c      	movs	r0, #28
 8001a34:	f7ff ffd6 	bl	80019e4 <user_pwm_setvalue>
	  user_pwm_setvalue(25, &htim3, TIM_CHANNEL_3);
 8001a38:	2208      	movs	r2, #8
 8001a3a:	4908      	ldr	r1, [pc, #32]	; (8001a5c <close_hand+0x3c>)
 8001a3c:	2019      	movs	r0, #25
 8001a3e:	f7ff ffd1 	bl	80019e4 <user_pwm_setvalue>
	  user_pwm_setvalue(25, &htim3, TIM_CHANNEL_4);
 8001a42:	220c      	movs	r2, #12
 8001a44:	4905      	ldr	r1, [pc, #20]	; (8001a5c <close_hand+0x3c>)
 8001a46:	2019      	movs	r0, #25
 8001a48:	f7ff ffcc 	bl	80019e4 <user_pwm_setvalue>
	  user_pwm_setvalue(25, &htim4, TIM_CHANNEL_1);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	4904      	ldr	r1, [pc, #16]	; (8001a60 <close_hand+0x40>)
 8001a50:	2019      	movs	r0, #25
 8001a52:	f7ff ffc7 	bl	80019e4 <user_pwm_setvalue>
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20001dd0 	.word	0x20001dd0
 8001a60:	20001d90 	.word	0x20001d90

08001a64 <open_hand>:

void open_hand(void) {
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
	  user_pwm_setvalue(11, &htim3, TIM_CHANNEL_1);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	490d      	ldr	r1, [pc, #52]	; (8001aa0 <open_hand+0x3c>)
 8001a6c:	200b      	movs	r0, #11
 8001a6e:	f7ff ffb9 	bl	80019e4 <user_pwm_setvalue>
	  user_pwm_setvalue(11, &htim3, TIM_CHANNEL_2);
 8001a72:	2204      	movs	r2, #4
 8001a74:	490a      	ldr	r1, [pc, #40]	; (8001aa0 <open_hand+0x3c>)
 8001a76:	200b      	movs	r0, #11
 8001a78:	f7ff ffb4 	bl	80019e4 <user_pwm_setvalue>
	  user_pwm_setvalue(11, &htim3, TIM_CHANNEL_3);
 8001a7c:	2208      	movs	r2, #8
 8001a7e:	4908      	ldr	r1, [pc, #32]	; (8001aa0 <open_hand+0x3c>)
 8001a80:	200b      	movs	r0, #11
 8001a82:	f7ff ffaf 	bl	80019e4 <user_pwm_setvalue>
	  user_pwm_setvalue(11, &htim3, TIM_CHANNEL_4);
 8001a86:	220c      	movs	r2, #12
 8001a88:	4905      	ldr	r1, [pc, #20]	; (8001aa0 <open_hand+0x3c>)
 8001a8a:	200b      	movs	r0, #11
 8001a8c:	f7ff ffaa 	bl	80019e4 <user_pwm_setvalue>
	  user_pwm_setvalue(12, &htim4, TIM_CHANNEL_1);
 8001a90:	2200      	movs	r2, #0
 8001a92:	4904      	ldr	r1, [pc, #16]	; (8001aa4 <open_hand+0x40>)
 8001a94:	200c      	movs	r0, #12
 8001a96:	f7ff ffa5 	bl	80019e4 <user_pwm_setvalue>
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20001dd0 	.word	0x20001dd0
 8001aa4:	20001d90 	.word	0x20001d90

08001aa8 <convert_ADC_to_volts>:

double convert_ADC_to_volts(uint32_t adc_count) {
 8001aa8:	b590      	push	{r4, r7, lr}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	return ((double)adc_count * ((ADC_VREF) / (ADC_MAX_COUNT)) * FEEDBACK_GAIN);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7fe fd27 	bl	8000504 <__aeabi_ui2d>
 8001ab6:	a30d      	add	r3, pc, #52	; (adr r3, 8001aec <convert_ADC_to_volts+0x44>)
 8001ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abc:	f7fe fd9c 	bl	80005f8 <__aeabi_dmul>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	460c      	mov	r4, r1
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	4621      	mov	r1, r4
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <convert_ADC_to_volts+0x40>)
 8001ace:	f7fe fd93 	bl	80005f8 <__aeabi_dmul>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	460c      	mov	r4, r1
 8001ad6:	ec44 3b17 	vmov	d7, r3, r4
}
 8001ada:	eeb0 0a47 	vmov.f32	s0, s14
 8001ade:	eef0 0a67 	vmov.f32	s1, s15
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd90      	pop	{r4, r7, pc}
 8001ae8:	40180000 	.word	0x40180000
 8001aec:	e734d9b4 	.word	0xe734d9b4
 8001af0:	3f4a680c 	.word	0x3f4a680c

08001af4 <ohms_law>:

double ohms_law(double volts, double resistance) {
 8001af4:	b590      	push	{r4, r7, lr}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	ed87 0b02 	vstr	d0, [r7, #8]
 8001afe:	ed87 1b00 	vstr	d1, [r7]
	if (resistance) {
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b0e:	f7fe ffdb 	bl	8000ac8 <__aeabi_dcmpeq>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d108      	bne.n	8001b2a <ohms_law+0x36>
	return (volts / resistance);
 8001b18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b1c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b20:	f7fe fe94 	bl	800084c <__aeabi_ddiv>
 8001b24:	4603      	mov	r3, r0
 8001b26:	460c      	mov	r4, r1
 8001b28:	e003      	b.n	8001b32 <ohms_law+0x3e>
	}
	return 0;
 8001b2a:	f04f 0300 	mov.w	r3, #0
 8001b2e:	f04f 0400 	mov.w	r4, #0
 8001b32:	ec44 3b17 	vmov	d7, r3, r4
}
 8001b36:	eeb0 0a47 	vmov.f32	s0, s14
 8001b3a:	eef0 0a67 	vmov.f32	s1, s15
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd90      	pop	{r4, r7, pc}
 8001b44:	0000      	movs	r0, r0
	...

08001b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b09f      	sub	sp, #124	; 0x7c
 8001b4c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b4e:	f000 fed5 	bl	80028fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b52:	f000 f8c5 	bl	8001ce0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b56:	f000 fb4d 	bl	80021f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b5a:	f000 fb15 	bl	8002188 <MX_DMA_Init>
  MX_ADC1_Init();
 8001b5e:	f000 f929 	bl	8001db4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001b62:	f000 f9cd 	bl	8001f00 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001b66:	f000 fa63 	bl	8002030 <MX_TIM4_Init>
  MX_UART4_Init();
 8001b6a:	f000 fae3 	bl	8002134 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  SVM.has_vector = 0;
 8001b6e:	4b52      	ldr	r3, [pc, #328]	; (8001cb8 <main+0x170>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  SVM.complete = 0;
 8001b76:	4b50      	ldr	r3, [pc, #320]	; (8001cb8 <main+0x170>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
  HAL_UART_Receive_IT(&huart4, RX_data, EPOCH_LENGTH_SAMPLES * CHARS_PER_SAMPLE);
 8001b7e:	f44f 6230 	mov.w	r2, #2816	; 0xb00
 8001b82:	494e      	ldr	r1, [pc, #312]	; (8001cbc <main+0x174>)
 8001b84:	484e      	ldr	r0, [pc, #312]	; (8001cc0 <main+0x178>)
 8001b86:	f003 fc6d 	bl	8005464 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	484d      	ldr	r0, [pc, #308]	; (8001cc4 <main+0x17c>)
 8001b8e:	f002 fe3b 	bl	8004808 <HAL_TIM_PWM_Start>
  close_hand();
 8001b92:	f7ff ff45 	bl	8001a20 <close_hand>

  HAL_ADC_Start_DMA(&hadc1, adc_values, 7);    /**< Starts the ADC in DMA Mode */
 8001b96:	2207      	movs	r2, #7
 8001b98:	494b      	ldr	r1, [pc, #300]	; (8001cc8 <main+0x180>)
 8001b9a:	484c      	ldr	r0, [pc, #304]	; (8001ccc <main+0x184>)
 8001b9c:	f000 ff86 	bl	8002aac <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive_IT(&huart4, RX_data, EPOCH_LENGTH_SAMPLES * CHARS_PER_SAMPLE);
 8001ba0:	f44f 6230 	mov.w	r2, #2816	; 0xb00
 8001ba4:	4945      	ldr	r1, [pc, #276]	; (8001cbc <main+0x174>)
 8001ba6:	4846      	ldr	r0, [pc, #280]	; (8001cc0 <main+0x178>)
 8001ba8:	f003 fc5c 	bl	8005464 <HAL_UART_Receive_IT>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  double index_volts = convert_ADC_to_volts(adc_values[1]);    // Read voltage after index sense resistor
 8001bac:	4b46      	ldr	r3, [pc, #280]	; (8001cc8 <main+0x180>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff79 	bl	8001aa8 <convert_ADC_to_volts>
 8001bb6:	ed87 0b1c 	vstr	d0, [r7, #112]	; 0x70
	  double ref_volts = convert_ADC_to_volts(adc_values[0]);        // Read voltage before sense resistors
 8001bba:	4b43      	ldr	r3, [pc, #268]	; (8001cc8 <main+0x180>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff ff72 	bl	8001aa8 <convert_ADC_to_volts>
 8001bc4:	ed87 0b1a 	vstr	d0, [r7, #104]	; 0x68
	  double index_current = ohms_law(ref_volts - index_volts, 0.05);   // Compute voltage drop, then divide by 50mOhm sense resistor
 8001bc8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001bcc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001bd0:	f7fe fb5a 	bl	8000288 <__aeabi_dsub>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	460c      	mov	r4, r1
 8001bd8:	ec44 3b17 	vmov	d7, r3, r4
 8001bdc:	ed9f 1b34 	vldr	d1, [pc, #208]	; 8001cb0 <main+0x168>
 8001be0:	eeb0 0a47 	vmov.f32	s0, s14
 8001be4:	eef0 0a67 	vmov.f32	s1, s15
 8001be8:	f7ff ff84 	bl	8001af4 <ohms_law>
 8001bec:	ed87 0b18 	vstr	d0, [r7, #96]	; 0x60
	  index_current *= 1000;
 8001bf0:	f04f 0200 	mov.w	r2, #0
 8001bf4:	4b36      	ldr	r3, [pc, #216]	; (8001cd0 <main+0x188>)
 8001bf6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001bfa:	f7fe fcfd 	bl	80005f8 <__aeabi_dmul>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	460c      	mov	r4, r1
 8001c02:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	  char index_current_ma[30];
	  snprintf(index_current_ma, 30, "Index Current mA:\t%010ld\n", (long)index_current);
 8001c06:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001c0a:	f7fe ffa5 	bl	8000b58 <__aeabi_d2iz>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001c14:	4a2f      	ldr	r2, [pc, #188]	; (8001cd4 <main+0x18c>)
 8001c16:	211e      	movs	r1, #30
 8001c18:	f004 fff0 	bl	8006bfc <sniprintf>

	  index_volts *= 1000;
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	4b2b      	ldr	r3, [pc, #172]	; (8001cd0 <main+0x188>)
 8001c22:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001c26:	f7fe fce7 	bl	80005f8 <__aeabi_dmul>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	460c      	mov	r4, r1
 8001c2e:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	  char index_volts_mv[30];
	  snprintf(index_volts_mv, 28, "Index Volts mV:\t%010ld\n", (long)index_volts);
 8001c32:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001c36:	f7fe ff8f 	bl	8000b58 <__aeabi_d2iz>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	f107 0020 	add.w	r0, r7, #32
 8001c40:	4a25      	ldr	r2, [pc, #148]	; (8001cd8 <main+0x190>)
 8001c42:	211c      	movs	r1, #28
 8001c44:	f004 ffda 	bl	8006bfc <sniprintf>

	  ref_volts *= 1000;
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	4b20      	ldr	r3, [pc, #128]	; (8001cd0 <main+0x188>)
 8001c4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001c52:	f7fe fcd1 	bl	80005f8 <__aeabi_dmul>
 8001c56:	4603      	mov	r3, r0
 8001c58:	460c      	mov	r4, r1
 8001c5a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	  char ref_volts_mv[30];
	  snprintf(ref_volts_mv, 29, "Supply Volts mV:\t%010ld\n", (long)ref_volts);
 8001c5e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001c62:	f7fe ff79 	bl	8000b58 <__aeabi_d2iz>
 8001c66:	4603      	mov	r3, r0
 8001c68:	4638      	mov	r0, r7
 8001c6a:	4a1c      	ldr	r2, [pc, #112]	; (8001cdc <main+0x194>)
 8001c6c:	211d      	movs	r1, #29
 8001c6e:	f004 ffc5 	bl	8006bfc <sniprintf>


	  HAL_UART_Transmit(&huart4, (unsigned char *)index_current_ma, 12, 0xFFFF);
 8001c72:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001c76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c7a:	220c      	movs	r2, #12
 8001c7c:	4810      	ldr	r0, [pc, #64]	; (8001cc0 <main+0x178>)
 8001c7e:	f003 fb58 	bl	8005332 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart4, (unsigned char *)index_volts_mv, 12, 0xFFFF);
 8001c82:	f107 0120 	add.w	r1, r7, #32
 8001c86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c8a:	220c      	movs	r2, #12
 8001c8c:	480c      	ldr	r0, [pc, #48]	; (8001cc0 <main+0x178>)
 8001c8e:	f003 fb50 	bl	8005332 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart4, (unsigned char *)ref_volts_mv, 12, 0xFFFF);
 8001c92:	4639      	mov	r1, r7
 8001c94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c98:	220c      	movs	r2, #12
 8001c9a:	4809      	ldr	r0, [pc, #36]	; (8001cc0 <main+0x178>)
 8001c9c:	f003 fb49 	bl	8005332 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8001ca0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ca4:	f000 fe9c 	bl	80029e0 <HAL_Delay>
  {
 8001ca8:	e77a      	b.n	8001ba0 <main+0x58>
 8001caa:	bf00      	nop
 8001cac:	f3af 8000 	nop.w
 8001cb0:	9999999a 	.word	0x9999999a
 8001cb4:	3fa99999 	.word	0x3fa99999
 8001cb8:	20001570 	.word	0x20001570
 8001cbc:	200001fc 	.word	0x200001fc
 8001cc0:	20001eb8 	.word	0x20001eb8
 8001cc4:	20001dd0 	.word	0x20001dd0
 8001cc8:	20001ef8 	.word	0x20001ef8
 8001ccc:	20001e10 	.word	0x20001e10
 8001cd0:	408f4000 	.word	0x408f4000
 8001cd4:	08009710 	.word	0x08009710
 8001cd8:	0800972c 	.word	0x0800972c
 8001cdc:	08009744 	.word	0x08009744

08001ce0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b094      	sub	sp, #80	; 0x50
 8001ce4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ce6:	f107 0320 	add.w	r3, r7, #32
 8001cea:	2230      	movs	r2, #48	; 0x30
 8001cec:	2100      	movs	r1, #0
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f004 fa67 	bl	80061c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cf4:	f107 030c 	add.w	r3, r7, #12
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d04:	2300      	movs	r3, #0
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	4b28      	ldr	r3, [pc, #160]	; (8001dac <SystemClock_Config+0xcc>)
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0c:	4a27      	ldr	r2, [pc, #156]	; (8001dac <SystemClock_Config+0xcc>)
 8001d0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d12:	6413      	str	r3, [r2, #64]	; 0x40
 8001d14:	4b25      	ldr	r3, [pc, #148]	; (8001dac <SystemClock_Config+0xcc>)
 8001d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d20:	2300      	movs	r3, #0
 8001d22:	607b      	str	r3, [r7, #4]
 8001d24:	4b22      	ldr	r3, [pc, #136]	; (8001db0 <SystemClock_Config+0xd0>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a21      	ldr	r2, [pc, #132]	; (8001db0 <SystemClock_Config+0xd0>)
 8001d2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d2e:	6013      	str	r3, [r2, #0]
 8001d30:	4b1f      	ldr	r3, [pc, #124]	; (8001db0 <SystemClock_Config+0xd0>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d38:	607b      	str	r3, [r7, #4]
 8001d3a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d46:	2302      	movs	r3, #2
 8001d48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d50:	2304      	movs	r3, #4
 8001d52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001d54:	23a8      	movs	r3, #168	; 0xa8
 8001d56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d5c:	2304      	movs	r3, #4
 8001d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d60:	f107 0320 	add.w	r3, r7, #32
 8001d64:	4618      	mov	r0, r3
 8001d66:	f002 f88d 	bl	8003e84 <HAL_RCC_OscConfig>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d70:	f000 fa92 	bl	8002298 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d74:	230f      	movs	r3, #15
 8001d76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d80:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d8c:	f107 030c 	add.w	r3, r7, #12
 8001d90:	2105      	movs	r1, #5
 8001d92:	4618      	mov	r0, r3
 8001d94:	f002 fae6 	bl	8004364 <HAL_RCC_ClockConfig>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001d9e:	f000 fa7b 	bl	8002298 <Error_Handler>
  }
}
 8001da2:	bf00      	nop
 8001da4:	3750      	adds	r7, #80	; 0x50
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40007000 	.word	0x40007000

08001db4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001dba:	463b      	mov	r3, r7
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001dc6:	4b4b      	ldr	r3, [pc, #300]	; (8001ef4 <MX_ADC1_Init+0x140>)
 8001dc8:	4a4b      	ldr	r2, [pc, #300]	; (8001ef8 <MX_ADC1_Init+0x144>)
 8001dca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001dcc:	4b49      	ldr	r3, [pc, #292]	; (8001ef4 <MX_ADC1_Init+0x140>)
 8001dce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001dd2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001dd4:	4b47      	ldr	r3, [pc, #284]	; (8001ef4 <MX_ADC1_Init+0x140>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001dda:	4b46      	ldr	r3, [pc, #280]	; (8001ef4 <MX_ADC1_Init+0x140>)
 8001ddc:	2201      	movs	r2, #1
 8001dde:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001de0:	4b44      	ldr	r3, [pc, #272]	; (8001ef4 <MX_ADC1_Init+0x140>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001de6:	4b43      	ldr	r3, [pc, #268]	; (8001ef4 <MX_ADC1_Init+0x140>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001dee:	4b41      	ldr	r3, [pc, #260]	; (8001ef4 <MX_ADC1_Init+0x140>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001df4:	4b3f      	ldr	r3, [pc, #252]	; (8001ef4 <MX_ADC1_Init+0x140>)
 8001df6:	4a41      	ldr	r2, [pc, #260]	; (8001efc <MX_ADC1_Init+0x148>)
 8001df8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001dfa:	4b3e      	ldr	r3, [pc, #248]	; (8001ef4 <MX_ADC1_Init+0x140>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 8001e00:	4b3c      	ldr	r3, [pc, #240]	; (8001ef4 <MX_ADC1_Init+0x140>)
 8001e02:	2207      	movs	r2, #7
 8001e04:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001e06:	4b3b      	ldr	r3, [pc, #236]	; (8001ef4 <MX_ADC1_Init+0x140>)
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e0e:	4b39      	ldr	r3, [pc, #228]	; (8001ef4 <MX_ADC1_Init+0x140>)
 8001e10:	2201      	movs	r2, #1
 8001e12:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e14:	4837      	ldr	r0, [pc, #220]	; (8001ef4 <MX_ADC1_Init+0x140>)
 8001e16:	f000 fe05 	bl	8002a24 <HAL_ADC_Init>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001e20:	f000 fa3a 	bl	8002298 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e30:	463b      	mov	r3, r7
 8001e32:	4619      	mov	r1, r3
 8001e34:	482f      	ldr	r0, [pc, #188]	; (8001ef4 <MX_ADC1_Init+0x140>)
 8001e36:	f000 ff49 	bl	8002ccc <HAL_ADC_ConfigChannel>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001e40:	f000 fa2a 	bl	8002298 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001e44:	230d      	movs	r3, #13
 8001e46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e4c:	463b      	mov	r3, r7
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4828      	ldr	r0, [pc, #160]	; (8001ef4 <MX_ADC1_Init+0x140>)
 8001e52:	f000 ff3b 	bl	8002ccc <HAL_ADC_ConfigChannel>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001e5c:	f000 fa1c 	bl	8002298 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001e60:	230c      	movs	r3, #12
 8001e62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001e64:	2303      	movs	r3, #3
 8001e66:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e68:	463b      	mov	r3, r7
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4821      	ldr	r0, [pc, #132]	; (8001ef4 <MX_ADC1_Init+0x140>)
 8001e6e:	f000 ff2d 	bl	8002ccc <HAL_ADC_ConfigChannel>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001e78:	f000 fa0e 	bl	8002298 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001e7c:	230b      	movs	r3, #11
 8001e7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001e80:	2304      	movs	r3, #4
 8001e82:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e84:	463b      	mov	r3, r7
 8001e86:	4619      	mov	r1, r3
 8001e88:	481a      	ldr	r0, [pc, #104]	; (8001ef4 <MX_ADC1_Init+0x140>)
 8001e8a:	f000 ff1f 	bl	8002ccc <HAL_ADC_ConfigChannel>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001e94:	f000 fa00 	bl	8002298 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001e98:	230a      	movs	r3, #10
 8001e9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001e9c:	2305      	movs	r3, #5
 8001e9e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ea0:	463b      	mov	r3, r7
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4813      	ldr	r0, [pc, #76]	; (8001ef4 <MX_ADC1_Init+0x140>)
 8001ea6:	f000 ff11 	bl	8002ccc <HAL_ADC_ConfigChannel>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001eb0:	f000 f9f2 	bl	8002298 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001eb4:	230e      	movs	r3, #14
 8001eb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001eb8:	2306      	movs	r3, #6
 8001eba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ebc:	463b      	mov	r3, r7
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	480c      	ldr	r0, [pc, #48]	; (8001ef4 <MX_ADC1_Init+0x140>)
 8001ec2:	f000 ff03 	bl	8002ccc <HAL_ADC_ConfigChannel>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001ecc:	f000 f9e4 	bl	8002298 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001ed0:	230f      	movs	r3, #15
 8001ed2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001ed4:	2307      	movs	r3, #7
 8001ed6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ed8:	463b      	mov	r3, r7
 8001eda:	4619      	mov	r1, r3
 8001edc:	4805      	ldr	r0, [pc, #20]	; (8001ef4 <MX_ADC1_Init+0x140>)
 8001ede:	f000 fef5 	bl	8002ccc <HAL_ADC_ConfigChannel>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001ee8:	f000 f9d6 	bl	8002298 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001eec:	bf00      	nop
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20001e10 	.word	0x20001e10
 8001ef8:	40012000 	.word	0x40012000
 8001efc:	0f000001 	.word	0x0f000001

08001f00 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08e      	sub	sp, #56	; 0x38
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	605a      	str	r2, [r3, #4]
 8001f10:	609a      	str	r2, [r3, #8]
 8001f12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f14:	f107 0320 	add.w	r3, r7, #32
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f1e:	1d3b      	adds	r3, r7, #4
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
 8001f2c:	615a      	str	r2, [r3, #20]
 8001f2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f30:	4b3d      	ldr	r3, [pc, #244]	; (8002028 <MX_TIM3_Init+0x128>)
 8001f32:	4a3e      	ldr	r2, [pc, #248]	; (800202c <MX_TIM3_Init+0x12c>)
 8001f34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4800;
 8001f36:	4b3c      	ldr	r3, [pc, #240]	; (8002028 <MX_TIM3_Init+0x128>)
 8001f38:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8001f3c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f3e:	4b3a      	ldr	r3, [pc, #232]	; (8002028 <MX_TIM3_Init+0x128>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 324;
 8001f44:	4b38      	ldr	r3, [pc, #224]	; (8002028 <MX_TIM3_Init+0x128>)
 8001f46:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8001f4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f4c:	4b36      	ldr	r3, [pc, #216]	; (8002028 <MX_TIM3_Init+0x128>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f52:	4b35      	ldr	r3, [pc, #212]	; (8002028 <MX_TIM3_Init+0x128>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f58:	4833      	ldr	r0, [pc, #204]	; (8002028 <MX_TIM3_Init+0x128>)
 8001f5a:	f002 fbf5 	bl	8004748 <HAL_TIM_Base_Init>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001f64:	f000 f998 	bl	8002298 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f72:	4619      	mov	r1, r3
 8001f74:	482c      	ldr	r0, [pc, #176]	; (8002028 <MX_TIM3_Init+0x128>)
 8001f76:	f002 fd4b 	bl	8004a10 <HAL_TIM_ConfigClockSource>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001f80:	f000 f98a 	bl	8002298 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f84:	4828      	ldr	r0, [pc, #160]	; (8002028 <MX_TIM3_Init+0x128>)
 8001f86:	f002 fc0a 	bl	800479e <HAL_TIM_PWM_Init>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001f90:	f000 f982 	bl	8002298 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f94:	2300      	movs	r3, #0
 8001f96:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f9c:	f107 0320 	add.w	r3, r7, #32
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4821      	ldr	r0, [pc, #132]	; (8002028 <MX_TIM3_Init+0x128>)
 8001fa4:	f003 f8fc 	bl	80051a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001fae:	f000 f973 	bl	8002298 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fb2:	2360      	movs	r3, #96	; 0x60
 8001fb4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20;
 8001fb6:	2314      	movs	r3, #20
 8001fb8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fc2:	1d3b      	adds	r3, r7, #4
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4817      	ldr	r0, [pc, #92]	; (8002028 <MX_TIM3_Init+0x128>)
 8001fca:	f002 fc5b 	bl	8004884 <HAL_TIM_PWM_ConfigChannel>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001fd4:	f000 f960 	bl	8002298 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fd8:	1d3b      	adds	r3, r7, #4
 8001fda:	2204      	movs	r2, #4
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4812      	ldr	r0, [pc, #72]	; (8002028 <MX_TIM3_Init+0x128>)
 8001fe0:	f002 fc50 	bl	8004884 <HAL_TIM_PWM_ConfigChannel>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001fea:	f000 f955 	bl	8002298 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	2208      	movs	r2, #8
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	480c      	ldr	r0, [pc, #48]	; (8002028 <MX_TIM3_Init+0x128>)
 8001ff6:	f002 fc45 	bl	8004884 <HAL_TIM_PWM_ConfigChannel>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8002000:	f000 f94a 	bl	8002298 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002004:	1d3b      	adds	r3, r7, #4
 8002006:	220c      	movs	r2, #12
 8002008:	4619      	mov	r1, r3
 800200a:	4807      	ldr	r0, [pc, #28]	; (8002028 <MX_TIM3_Init+0x128>)
 800200c:	f002 fc3a 	bl	8004884 <HAL_TIM_PWM_ConfigChannel>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8002016:	f000 f93f 	bl	8002298 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800201a:	4803      	ldr	r0, [pc, #12]	; (8002028 <MX_TIM3_Init+0x128>)
 800201c:	f000 fa38 	bl	8002490 <HAL_TIM_MspPostInit>

}
 8002020:	bf00      	nop
 8002022:	3738      	adds	r7, #56	; 0x38
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20001dd0 	.word	0x20001dd0
 800202c:	40000400 	.word	0x40000400

08002030 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08e      	sub	sp, #56	; 0x38
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002036:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	605a      	str	r2, [r3, #4]
 8002040:	609a      	str	r2, [r3, #8]
 8002042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002044:	f107 0320 	add.w	r3, r7, #32
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800204e:	1d3b      	adds	r3, r7, #4
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	611a      	str	r2, [r3, #16]
 800205c:	615a      	str	r2, [r3, #20]
 800205e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002060:	4b32      	ldr	r3, [pc, #200]	; (800212c <MX_TIM4_Init+0xfc>)
 8002062:	4a33      	ldr	r2, [pc, #204]	; (8002130 <MX_TIM4_Init+0x100>)
 8002064:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4800;
 8002066:	4b31      	ldr	r3, [pc, #196]	; (800212c <MX_TIM4_Init+0xfc>)
 8002068:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 800206c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800206e:	4b2f      	ldr	r3, [pc, #188]	; (800212c <MX_TIM4_Init+0xfc>)
 8002070:	2200      	movs	r2, #0
 8002072:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 324;
 8002074:	4b2d      	ldr	r3, [pc, #180]	; (800212c <MX_TIM4_Init+0xfc>)
 8002076:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800207a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800207c:	4b2b      	ldr	r3, [pc, #172]	; (800212c <MX_TIM4_Init+0xfc>)
 800207e:	2200      	movs	r2, #0
 8002080:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002082:	4b2a      	ldr	r3, [pc, #168]	; (800212c <MX_TIM4_Init+0xfc>)
 8002084:	2200      	movs	r2, #0
 8002086:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002088:	4828      	ldr	r0, [pc, #160]	; (800212c <MX_TIM4_Init+0xfc>)
 800208a:	f002 fb5d 	bl	8004748 <HAL_TIM_Base_Init>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8002094:	f000 f900 	bl	8002298 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002098:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800209c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800209e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020a2:	4619      	mov	r1, r3
 80020a4:	4821      	ldr	r0, [pc, #132]	; (800212c <MX_TIM4_Init+0xfc>)
 80020a6:	f002 fcb3 	bl	8004a10 <HAL_TIM_ConfigClockSource>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80020b0:	f000 f8f2 	bl	8002298 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80020b4:	481d      	ldr	r0, [pc, #116]	; (800212c <MX_TIM4_Init+0xfc>)
 80020b6:	f002 fb72 	bl	800479e <HAL_TIM_PWM_Init>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80020c0:	f000 f8ea 	bl	8002298 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020c4:	2300      	movs	r3, #0
 80020c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c8:	2300      	movs	r3, #0
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80020cc:	f107 0320 	add.w	r3, r7, #32
 80020d0:	4619      	mov	r1, r3
 80020d2:	4816      	ldr	r0, [pc, #88]	; (800212c <MX_TIM4_Init+0xfc>)
 80020d4:	f003 f864 	bl	80051a0 <HAL_TIMEx_MasterConfigSynchronization>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80020de:	f000 f8db 	bl	8002298 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020e2:	2360      	movs	r3, #96	; 0x60
 80020e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20;
 80020e6:	2314      	movs	r3, #20
 80020e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020f2:	1d3b      	adds	r3, r7, #4
 80020f4:	2200      	movs	r2, #0
 80020f6:	4619      	mov	r1, r3
 80020f8:	480c      	ldr	r0, [pc, #48]	; (800212c <MX_TIM4_Init+0xfc>)
 80020fa:	f002 fbc3 	bl	8004884 <HAL_TIM_PWM_ConfigChannel>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002104:	f000 f8c8 	bl	8002298 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002108:	1d3b      	adds	r3, r7, #4
 800210a:	2204      	movs	r2, #4
 800210c:	4619      	mov	r1, r3
 800210e:	4807      	ldr	r0, [pc, #28]	; (800212c <MX_TIM4_Init+0xfc>)
 8002110:	f002 fbb8 	bl	8004884 <HAL_TIM_PWM_ConfigChannel>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 800211a:	f000 f8bd 	bl	8002298 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800211e:	4803      	ldr	r0, [pc, #12]	; (800212c <MX_TIM4_Init+0xfc>)
 8002120:	f000 f9b6 	bl	8002490 <HAL_TIM_MspPostInit>

}
 8002124:	bf00      	nop
 8002126:	3738      	adds	r7, #56	; 0x38
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	20001d90 	.word	0x20001d90
 8002130:	40000800 	.word	0x40000800

08002134 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002138:	4b11      	ldr	r3, [pc, #68]	; (8002180 <MX_UART4_Init+0x4c>)
 800213a:	4a12      	ldr	r2, [pc, #72]	; (8002184 <MX_UART4_Init+0x50>)
 800213c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 800213e:	4b10      	ldr	r3, [pc, #64]	; (8002180 <MX_UART4_Init+0x4c>)
 8002140:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002144:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002146:	4b0e      	ldr	r3, [pc, #56]	; (8002180 <MX_UART4_Init+0x4c>)
 8002148:	2200      	movs	r2, #0
 800214a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800214c:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <MX_UART4_Init+0x4c>)
 800214e:	2200      	movs	r2, #0
 8002150:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002152:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <MX_UART4_Init+0x4c>)
 8002154:	2200      	movs	r2, #0
 8002156:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002158:	4b09      	ldr	r3, [pc, #36]	; (8002180 <MX_UART4_Init+0x4c>)
 800215a:	220c      	movs	r2, #12
 800215c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800215e:	4b08      	ldr	r3, [pc, #32]	; (8002180 <MX_UART4_Init+0x4c>)
 8002160:	2200      	movs	r2, #0
 8002162:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002164:	4b06      	ldr	r3, [pc, #24]	; (8002180 <MX_UART4_Init+0x4c>)
 8002166:	2200      	movs	r2, #0
 8002168:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800216a:	4805      	ldr	r0, [pc, #20]	; (8002180 <MX_UART4_Init+0x4c>)
 800216c:	f003 f894 	bl	8005298 <HAL_UART_Init>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002176:	f000 f88f 	bl	8002298 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800217a:	bf00      	nop
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20001eb8 	.word	0x20001eb8
 8002184:	40004c00 	.word	0x40004c00

08002188 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	607b      	str	r3, [r7, #4]
 8002192:	4b17      	ldr	r3, [pc, #92]	; (80021f0 <MX_DMA_Init+0x68>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	4a16      	ldr	r2, [pc, #88]	; (80021f0 <MX_DMA_Init+0x68>)
 8002198:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800219c:	6313      	str	r3, [r2, #48]	; 0x30
 800219e:	4b14      	ldr	r3, [pc, #80]	; (80021f0 <MX_DMA_Init+0x68>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a6:	607b      	str	r3, [r7, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	603b      	str	r3, [r7, #0]
 80021ae:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <MX_DMA_Init+0x68>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	4a0f      	ldr	r2, [pc, #60]	; (80021f0 <MX_DMA_Init+0x68>)
 80021b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021b8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ba:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <MX_DMA_Init+0x68>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021c2:	603b      	str	r3, [r7, #0]
 80021c4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80021c6:	2200      	movs	r2, #0
 80021c8:	2100      	movs	r1, #0
 80021ca:	200d      	movs	r0, #13
 80021cc:	f001 f8f9 	bl	80033c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80021d0:	200d      	movs	r0, #13
 80021d2:	f001 f912 	bl	80033fa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80021d6:	2200      	movs	r2, #0
 80021d8:	2100      	movs	r1, #0
 80021da:	2038      	movs	r0, #56	; 0x38
 80021dc:	f001 f8f1 	bl	80033c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80021e0:	2038      	movs	r0, #56	; 0x38
 80021e2:	f001 f90a 	bl	80033fa <HAL_NVIC_EnableIRQ>

}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40023800 	.word	0x40023800

080021f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	617b      	str	r3, [r7, #20]
 80021fe:	4b25      	ldr	r3, [pc, #148]	; (8002294 <MX_GPIO_Init+0xa0>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	4a24      	ldr	r2, [pc, #144]	; (8002294 <MX_GPIO_Init+0xa0>)
 8002204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002208:	6313      	str	r3, [r2, #48]	; 0x30
 800220a:	4b22      	ldr	r3, [pc, #136]	; (8002294 <MX_GPIO_Init+0xa0>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002212:	617b      	str	r3, [r7, #20]
 8002214:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	4b1e      	ldr	r3, [pc, #120]	; (8002294 <MX_GPIO_Init+0xa0>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	4a1d      	ldr	r2, [pc, #116]	; (8002294 <MX_GPIO_Init+0xa0>)
 8002220:	f043 0304 	orr.w	r3, r3, #4
 8002224:	6313      	str	r3, [r2, #48]	; 0x30
 8002226:	4b1b      	ldr	r3, [pc, #108]	; (8002294 <MX_GPIO_Init+0xa0>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	4b17      	ldr	r3, [pc, #92]	; (8002294 <MX_GPIO_Init+0xa0>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	4a16      	ldr	r2, [pc, #88]	; (8002294 <MX_GPIO_Init+0xa0>)
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	6313      	str	r3, [r2, #48]	; 0x30
 8002242:	4b14      	ldr	r3, [pc, #80]	; (8002294 <MX_GPIO_Init+0xa0>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	4b10      	ldr	r3, [pc, #64]	; (8002294 <MX_GPIO_Init+0xa0>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a0f      	ldr	r2, [pc, #60]	; (8002294 <MX_GPIO_Init+0xa0>)
 8002258:	f043 0302 	orr.w	r3, r3, #2
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b0d      	ldr	r3, [pc, #52]	; (8002294 <MX_GPIO_Init+0xa0>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	60bb      	str	r3, [r7, #8]
 8002268:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	607b      	str	r3, [r7, #4]
 800226e:	4b09      	ldr	r3, [pc, #36]	; (8002294 <MX_GPIO_Init+0xa0>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	4a08      	ldr	r2, [pc, #32]	; (8002294 <MX_GPIO_Init+0xa0>)
 8002274:	f043 0308 	orr.w	r3, r3, #8
 8002278:	6313      	str	r3, [r2, #48]	; 0x30
 800227a:	4b06      	ldr	r3, [pc, #24]	; (8002294 <MX_GPIO_Init+0xa0>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	607b      	str	r3, [r7, #4]
 8002284:	687b      	ldr	r3, [r7, #4]

}
 8002286:	bf00      	nop
 8002288:	371c      	adds	r7, #28
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	40023800 	.word	0x40023800

08002298 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
	...

080022a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	607b      	str	r3, [r7, #4]
 80022b2:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <HAL_MspInit+0x4c>)
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	4a0f      	ldr	r2, [pc, #60]	; (80022f4 <HAL_MspInit+0x4c>)
 80022b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022bc:	6453      	str	r3, [r2, #68]	; 0x44
 80022be:	4b0d      	ldr	r3, [pc, #52]	; (80022f4 <HAL_MspInit+0x4c>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022c6:	607b      	str	r3, [r7, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	603b      	str	r3, [r7, #0]
 80022ce:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <HAL_MspInit+0x4c>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	4a08      	ldr	r2, [pc, #32]	; (80022f4 <HAL_MspInit+0x4c>)
 80022d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d8:	6413      	str	r3, [r2, #64]	; 0x40
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_MspInit+0x4c>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e2:	603b      	str	r3, [r7, #0]
 80022e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	40023800 	.word	0x40023800

080022f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08a      	sub	sp, #40	; 0x28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002300:	f107 0314 	add.w	r3, r7, #20
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	60da      	str	r2, [r3, #12]
 800230e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a3c      	ldr	r2, [pc, #240]	; (8002408 <HAL_ADC_MspInit+0x110>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d171      	bne.n	80023fe <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	613b      	str	r3, [r7, #16]
 800231e:	4b3b      	ldr	r3, [pc, #236]	; (800240c <HAL_ADC_MspInit+0x114>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002322:	4a3a      	ldr	r2, [pc, #232]	; (800240c <HAL_ADC_MspInit+0x114>)
 8002324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002328:	6453      	str	r3, [r2, #68]	; 0x44
 800232a:	4b38      	ldr	r3, [pc, #224]	; (800240c <HAL_ADC_MspInit+0x114>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002332:	613b      	str	r3, [r7, #16]
 8002334:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	4b34      	ldr	r3, [pc, #208]	; (800240c <HAL_ADC_MspInit+0x114>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	4a33      	ldr	r2, [pc, #204]	; (800240c <HAL_ADC_MspInit+0x114>)
 8002340:	f043 0304 	orr.w	r3, r3, #4
 8002344:	6313      	str	r3, [r2, #48]	; 0x30
 8002346:	4b31      	ldr	r3, [pc, #196]	; (800240c <HAL_ADC_MspInit+0x114>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	4b2d      	ldr	r3, [pc, #180]	; (800240c <HAL_ADC_MspInit+0x114>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	4a2c      	ldr	r2, [pc, #176]	; (800240c <HAL_ADC_MspInit+0x114>)
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	6313      	str	r3, [r2, #48]	; 0x30
 8002362:	4b2a      	ldr	r3, [pc, #168]	; (800240c <HAL_ADC_MspInit+0x114>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> ADC1_IN13
    PA0-WKUP     ------> ADC1_IN0
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15 
    */
    GPIO_InitStruct.Pin = Ring_AD_Pin|Middle_ADC_Pin|Index_ADC_Pin|Thumb_ADC_Pin 
 800236e:	233f      	movs	r3, #63	; 0x3f
 8002370:	617b      	str	r3, [r7, #20]
                          |Pinky_ADC_Pin|Wrist_ADC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002372:	2303      	movs	r3, #3
 8002374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002376:	2300      	movs	r3, #0
 8002378:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800237a:	f107 0314 	add.w	r3, r7, #20
 800237e:	4619      	mov	r1, r3
 8002380:	4823      	ldr	r0, [pc, #140]	; (8002410 <HAL_ADC_MspInit+0x118>)
 8002382:	f001 fbe5 	bl	8003b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VSUPPLY_ADC_Pin;
 8002386:	2301      	movs	r3, #1
 8002388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800238a:	2303      	movs	r3, #3
 800238c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VSUPPLY_ADC_GPIO_Port, &GPIO_InitStruct);
 8002392:	f107 0314 	add.w	r3, r7, #20
 8002396:	4619      	mov	r1, r3
 8002398:	481e      	ldr	r0, [pc, #120]	; (8002414 <HAL_ADC_MspInit+0x11c>)
 800239a:	f001 fbd9 	bl	8003b50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800239e:	4b1e      	ldr	r3, [pc, #120]	; (8002418 <HAL_ADC_MspInit+0x120>)
 80023a0:	4a1e      	ldr	r2, [pc, #120]	; (800241c <HAL_ADC_MspInit+0x124>)
 80023a2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80023a4:	4b1c      	ldr	r3, [pc, #112]	; (8002418 <HAL_ADC_MspInit+0x120>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023aa:	4b1b      	ldr	r3, [pc, #108]	; (8002418 <HAL_ADC_MspInit+0x120>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80023b0:	4b19      	ldr	r3, [pc, #100]	; (8002418 <HAL_ADC_MspInit+0x120>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80023b6:	4b18      	ldr	r3, [pc, #96]	; (8002418 <HAL_ADC_MspInit+0x120>)
 80023b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023bc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80023be:	4b16      	ldr	r3, [pc, #88]	; (8002418 <HAL_ADC_MspInit+0x120>)
 80023c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023c4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80023c6:	4b14      	ldr	r3, [pc, #80]	; (8002418 <HAL_ADC_MspInit+0x120>)
 80023c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023cc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80023ce:	4b12      	ldr	r3, [pc, #72]	; (8002418 <HAL_ADC_MspInit+0x120>)
 80023d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023d4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80023d6:	4b10      	ldr	r3, [pc, #64]	; (8002418 <HAL_ADC_MspInit+0x120>)
 80023d8:	2200      	movs	r2, #0
 80023da:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023dc:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <HAL_ADC_MspInit+0x120>)
 80023de:	2200      	movs	r2, #0
 80023e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80023e2:	480d      	ldr	r0, [pc, #52]	; (8002418 <HAL_ADC_MspInit+0x120>)
 80023e4:	f001 f824 	bl	8003430 <HAL_DMA_Init>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80023ee:	f7ff ff53 	bl	8002298 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a08      	ldr	r2, [pc, #32]	; (8002418 <HAL_ADC_MspInit+0x120>)
 80023f6:	639a      	str	r2, [r3, #56]	; 0x38
 80023f8:	4a07      	ldr	r2, [pc, #28]	; (8002418 <HAL_ADC_MspInit+0x120>)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80023fe:	bf00      	nop
 8002400:	3728      	adds	r7, #40	; 0x28
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40012000 	.word	0x40012000
 800240c:	40023800 	.word	0x40023800
 8002410:	40020800 	.word	0x40020800
 8002414:	40020000 	.word	0x40020000
 8002418:	20001e58 	.word	0x20001e58
 800241c:	40026410 	.word	0x40026410

08002420 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a15      	ldr	r2, [pc, #84]	; (8002484 <HAL_TIM_Base_MspInit+0x64>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d10e      	bne.n	8002450 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	4b14      	ldr	r3, [pc, #80]	; (8002488 <HAL_TIM_Base_MspInit+0x68>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	4a13      	ldr	r2, [pc, #76]	; (8002488 <HAL_TIM_Base_MspInit+0x68>)
 800243c:	f043 0302 	orr.w	r3, r3, #2
 8002440:	6413      	str	r3, [r2, #64]	; 0x40
 8002442:	4b11      	ldr	r3, [pc, #68]	; (8002488 <HAL_TIM_Base_MspInit+0x68>)
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800244e:	e012      	b.n	8002476 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a0d      	ldr	r2, [pc, #52]	; (800248c <HAL_TIM_Base_MspInit+0x6c>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d10d      	bne.n	8002476 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	60bb      	str	r3, [r7, #8]
 800245e:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <HAL_TIM_Base_MspInit+0x68>)
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	4a09      	ldr	r2, [pc, #36]	; (8002488 <HAL_TIM_Base_MspInit+0x68>)
 8002464:	f043 0304 	orr.w	r3, r3, #4
 8002468:	6413      	str	r3, [r2, #64]	; 0x40
 800246a:	4b07      	ldr	r3, [pc, #28]	; (8002488 <HAL_TIM_Base_MspInit+0x68>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	f003 0304 	and.w	r3, r3, #4
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	68bb      	ldr	r3, [r7, #8]
}
 8002476:	bf00      	nop
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	40000400 	.word	0x40000400
 8002488:	40023800 	.word	0x40023800
 800248c:	40000800 	.word	0x40000800

08002490 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b08a      	sub	sp, #40	; 0x28
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002498:	f107 0314 	add.w	r3, r7, #20
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	60da      	str	r2, [r3, #12]
 80024a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a33      	ldr	r2, [pc, #204]	; (800257c <HAL_TIM_MspPostInit+0xec>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d13c      	bne.n	800252c <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	613b      	str	r3, [r7, #16]
 80024b6:	4b32      	ldr	r3, [pc, #200]	; (8002580 <HAL_TIM_MspPostInit+0xf0>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	4a31      	ldr	r2, [pc, #196]	; (8002580 <HAL_TIM_MspPostInit+0xf0>)
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	6313      	str	r3, [r2, #48]	; 0x30
 80024c2:	4b2f      	ldr	r3, [pc, #188]	; (8002580 <HAL_TIM_MspPostInit+0xf0>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	613b      	str	r3, [r7, #16]
 80024cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	4b2b      	ldr	r3, [pc, #172]	; (8002580 <HAL_TIM_MspPostInit+0xf0>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	4a2a      	ldr	r2, [pc, #168]	; (8002580 <HAL_TIM_MspPostInit+0xf0>)
 80024d8:	f043 0302 	orr.w	r3, r3, #2
 80024dc:	6313      	str	r3, [r2, #48]	; 0x30
 80024de:	4b28      	ldr	r3, [pc, #160]	; (8002580 <HAL_TIM_MspPostInit+0xf0>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = Thumb_Pin|Index_Pin;
 80024ea:	23c0      	movs	r3, #192	; 0xc0
 80024ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ee:	2302      	movs	r3, #2
 80024f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f6:	2300      	movs	r3, #0
 80024f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80024fa:	2302      	movs	r3, #2
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024fe:	f107 0314 	add.w	r3, r7, #20
 8002502:	4619      	mov	r1, r3
 8002504:	481f      	ldr	r0, [pc, #124]	; (8002584 <HAL_TIM_MspPostInit+0xf4>)
 8002506:	f001 fb23 	bl	8003b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Middle_Pin|Ring_Pin;
 800250a:	2303      	movs	r3, #3
 800250c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250e:	2302      	movs	r3, #2
 8002510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002512:	2300      	movs	r3, #0
 8002514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002516:	2300      	movs	r3, #0
 8002518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800251a:	2302      	movs	r3, #2
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800251e:	f107 0314 	add.w	r3, r7, #20
 8002522:	4619      	mov	r1, r3
 8002524:	4818      	ldr	r0, [pc, #96]	; (8002588 <HAL_TIM_MspPostInit+0xf8>)
 8002526:	f001 fb13 	bl	8003b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800252a:	e023      	b.n	8002574 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM4)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a16      	ldr	r2, [pc, #88]	; (800258c <HAL_TIM_MspPostInit+0xfc>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d11e      	bne.n	8002574 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	4b11      	ldr	r3, [pc, #68]	; (8002580 <HAL_TIM_MspPostInit+0xf0>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	4a10      	ldr	r2, [pc, #64]	; (8002580 <HAL_TIM_MspPostInit+0xf0>)
 8002540:	f043 0308 	orr.w	r3, r3, #8
 8002544:	6313      	str	r3, [r2, #48]	; 0x30
 8002546:	4b0e      	ldr	r3, [pc, #56]	; (8002580 <HAL_TIM_MspPostInit+0xf0>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	f003 0308 	and.w	r3, r3, #8
 800254e:	60bb      	str	r3, [r7, #8]
 8002550:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Pinky_Pin|Wrist_Pin;
 8002552:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002556:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002558:	2302      	movs	r3, #2
 800255a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255c:	2300      	movs	r3, #0
 800255e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002560:	2300      	movs	r3, #0
 8002562:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002564:	2302      	movs	r3, #2
 8002566:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002568:	f107 0314 	add.w	r3, r7, #20
 800256c:	4619      	mov	r1, r3
 800256e:	4808      	ldr	r0, [pc, #32]	; (8002590 <HAL_TIM_MspPostInit+0x100>)
 8002570:	f001 faee 	bl	8003b50 <HAL_GPIO_Init>
}
 8002574:	bf00      	nop
 8002576:	3728      	adds	r7, #40	; 0x28
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40000400 	.word	0x40000400
 8002580:	40023800 	.word	0x40023800
 8002584:	40020000 	.word	0x40020000
 8002588:	40020400 	.word	0x40020400
 800258c:	40000800 	.word	0x40000800
 8002590:	40020c00 	.word	0x40020c00

08002594 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b08a      	sub	sp, #40	; 0x28
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800259c:	f107 0314 	add.w	r3, r7, #20
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	609a      	str	r2, [r3, #8]
 80025a8:	60da      	str	r2, [r3, #12]
 80025aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a34      	ldr	r2, [pc, #208]	; (8002684 <HAL_UART_MspInit+0xf0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d162      	bne.n	800267c <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	4b33      	ldr	r3, [pc, #204]	; (8002688 <HAL_UART_MspInit+0xf4>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	4a32      	ldr	r2, [pc, #200]	; (8002688 <HAL_UART_MspInit+0xf4>)
 80025c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80025c4:	6413      	str	r3, [r2, #64]	; 0x40
 80025c6:	4b30      	ldr	r3, [pc, #192]	; (8002688 <HAL_UART_MspInit+0xf4>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	4b2c      	ldr	r3, [pc, #176]	; (8002688 <HAL_UART_MspInit+0xf4>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	4a2b      	ldr	r2, [pc, #172]	; (8002688 <HAL_UART_MspInit+0xf4>)
 80025dc:	f043 0304 	orr.w	r3, r3, #4
 80025e0:	6313      	str	r3, [r2, #48]	; 0x30
 80025e2:	4b29      	ldr	r3, [pc, #164]	; (8002688 <HAL_UART_MspInit+0xf4>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	f003 0304 	and.w	r3, r3, #4
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80025ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80025f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f4:	2302      	movs	r3, #2
 80025f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025f8:	2301      	movs	r3, #1
 80025fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025fc:	2303      	movs	r3, #3
 80025fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002600:	2308      	movs	r3, #8
 8002602:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002604:	f107 0314 	add.w	r3, r7, #20
 8002608:	4619      	mov	r1, r3
 800260a:	4820      	ldr	r0, [pc, #128]	; (800268c <HAL_UART_MspInit+0xf8>)
 800260c:	f001 faa0 	bl	8003b50 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8002610:	4b1f      	ldr	r3, [pc, #124]	; (8002690 <HAL_UART_MspInit+0xfc>)
 8002612:	4a20      	ldr	r2, [pc, #128]	; (8002694 <HAL_UART_MspInit+0x100>)
 8002614:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8002616:	4b1e      	ldr	r3, [pc, #120]	; (8002690 <HAL_UART_MspInit+0xfc>)
 8002618:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800261c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800261e:	4b1c      	ldr	r3, [pc, #112]	; (8002690 <HAL_UART_MspInit+0xfc>)
 8002620:	2200      	movs	r2, #0
 8002622:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002624:	4b1a      	ldr	r3, [pc, #104]	; (8002690 <HAL_UART_MspInit+0xfc>)
 8002626:	2200      	movs	r2, #0
 8002628:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800262a:	4b19      	ldr	r3, [pc, #100]	; (8002690 <HAL_UART_MspInit+0xfc>)
 800262c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002630:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002632:	4b17      	ldr	r3, [pc, #92]	; (8002690 <HAL_UART_MspInit+0xfc>)
 8002634:	2200      	movs	r2, #0
 8002636:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002638:	4b15      	ldr	r3, [pc, #84]	; (8002690 <HAL_UART_MspInit+0xfc>)
 800263a:	2200      	movs	r2, #0
 800263c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800263e:	4b14      	ldr	r3, [pc, #80]	; (8002690 <HAL_UART_MspInit+0xfc>)
 8002640:	2200      	movs	r2, #0
 8002642:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002644:	4b12      	ldr	r3, [pc, #72]	; (8002690 <HAL_UART_MspInit+0xfc>)
 8002646:	2200      	movs	r2, #0
 8002648:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800264a:	4b11      	ldr	r3, [pc, #68]	; (8002690 <HAL_UART_MspInit+0xfc>)
 800264c:	2200      	movs	r2, #0
 800264e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002650:	480f      	ldr	r0, [pc, #60]	; (8002690 <HAL_UART_MspInit+0xfc>)
 8002652:	f000 feed 	bl	8003430 <HAL_DMA_Init>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800265c:	f7ff fe1c 	bl	8002298 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a0b      	ldr	r2, [pc, #44]	; (8002690 <HAL_UART_MspInit+0xfc>)
 8002664:	635a      	str	r2, [r3, #52]	; 0x34
 8002666:	4a0a      	ldr	r2, [pc, #40]	; (8002690 <HAL_UART_MspInit+0xfc>)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800266c:	2200      	movs	r2, #0
 800266e:	2100      	movs	r1, #0
 8002670:	2034      	movs	r0, #52	; 0x34
 8002672:	f000 fea6 	bl	80033c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002676:	2034      	movs	r0, #52	; 0x34
 8002678:	f000 febf 	bl	80033fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800267c:	bf00      	nop
 800267e:	3728      	adds	r7, #40	; 0x28
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40004c00 	.word	0x40004c00
 8002688:	40023800 	.word	0x40023800
 800268c:	40020800 	.word	0x40020800
 8002690:	20001510 	.word	0x20001510
 8002694:	40026040 	.word	0x40026040

08002698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026a6:	b480      	push	{r7}
 80026a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026aa:	e7fe      	b.n	80026aa <HardFault_Handler+0x4>

080026ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026b0:	e7fe      	b.n	80026b0 <MemManage_Handler+0x4>

080026b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026b2:	b480      	push	{r7}
 80026b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026b6:	e7fe      	b.n	80026b6 <BusFault_Handler+0x4>

080026b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026bc:	e7fe      	b.n	80026bc <UsageFault_Handler+0x4>

080026be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026be:	b480      	push	{r7}
 80026c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026da:	b480      	push	{r7}
 80026dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026de:	bf00      	nop
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026ec:	f000 f958 	bl	80029a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026f0:	bf00      	nop
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80026f8:	4802      	ldr	r0, [pc, #8]	; (8002704 <DMA1_Stream2_IRQHandler+0x10>)
 80026fa:	f000 ffc1 	bl	8003680 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80026fe:	bf00      	nop
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20001510 	.word	0x20001510

08002708 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800270c:	4802      	ldr	r0, [pc, #8]	; (8002718 <UART4_IRQHandler+0x10>)
 800270e:	f002 feff 	bl	8005510 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	20001eb8 	.word	0x20001eb8

0800271c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002720:	4802      	ldr	r0, [pc, #8]	; (800272c <DMA2_Stream0_IRQHandler+0x10>)
 8002722:	f000 ffad 	bl	8003680 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20001e58 	.word	0x20001e58

08002730 <Linear_SVM_Predict>:
 *      Author: Willie
 */

#include "svm_predict.h"

double Linear_SVM_Predict(Linear_SVM_Model* model, double* observation) {
 8002730:	b590      	push	{r4, r7, lr}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
	return (SVM_dot_product(model->weight_vector, observation, model->dimension) + model->offset);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 8002742:	461a      	mov	r2, r3
 8002744:	6839      	ldr	r1, [r7, #0]
 8002746:	f000 f816 	bl	8002776 <SVM_dot_product>
 800274a:	ec51 0b10 	vmov	r0, r1, d0
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002754:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002758:	461a      	mov	r2, r3
 800275a:	4623      	mov	r3, r4
 800275c:	f7fd fd96 	bl	800028c <__adddf3>
 8002760:	4603      	mov	r3, r0
 8002762:	460c      	mov	r4, r1
 8002764:	ec44 3b17 	vmov	d7, r3, r4
}
 8002768:	eeb0 0a47 	vmov.f32	s0, s14
 800276c:	eef0 0a67 	vmov.f32	s1, s15
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	bd90      	pop	{r4, r7, pc}

08002776 <SVM_dot_product>:

double SVM_dot_product(double* Vect_A, double* Vect_B, int dimension) {
 8002776:	b590      	push	{r4, r7, lr}
 8002778:	b089      	sub	sp, #36	; 0x24
 800277a:	af00      	add	r7, sp, #0
 800277c:	60f8      	str	r0, [r7, #12]
 800277e:	60b9      	str	r1, [r7, #8]
 8002780:	607a      	str	r2, [r7, #4]
	double sum = 0.0;
 8002782:	f04f 0300 	mov.w	r3, #0
 8002786:	f04f 0400 	mov.w	r4, #0
 800278a:	e9c7 3406 	strd	r3, r4, [r7, #24]

	for (int i = 0; i < dimension; i++) {
 800278e:	2300      	movs	r3, #0
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	e01e      	b.n	80027d2 <SVM_dot_product+0x5c>
		sum += (Vect_A[i] * Vect_B[i]);
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	4413      	add	r3, r2
 800279c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	4413      	add	r3, r2
 80027a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80027ac:	461a      	mov	r2, r3
 80027ae:	4623      	mov	r3, r4
 80027b0:	f7fd ff22 	bl	80005f8 <__aeabi_dmul>
 80027b4:	4603      	mov	r3, r0
 80027b6:	460c      	mov	r4, r1
 80027b8:	461a      	mov	r2, r3
 80027ba:	4623      	mov	r3, r4
 80027bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80027c0:	f7fd fd64 	bl	800028c <__adddf3>
 80027c4:	4603      	mov	r3, r0
 80027c6:	460c      	mov	r4, r1
 80027c8:	e9c7 3406 	strd	r3, r4, [r7, #24]
	for (int i = 0; i < dimension; i++) {
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	3301      	adds	r3, #1
 80027d0:	617b      	str	r3, [r7, #20]
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	dbdc      	blt.n	8002794 <SVM_dot_product+0x1e>
	}

	return sum;
 80027da:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80027de:	ec44 3b17 	vmov	d7, r3, r4
}
 80027e2:	eeb0 0a47 	vmov.f32	s0, s14
 80027e6:	eef0 0a67 	vmov.f32	s1, s15
 80027ea:	3724      	adds	r7, #36	; 0x24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd90      	pop	{r4, r7, pc}

080027f0 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027fa:	f003 fc89 	bl	8006110 <__errno>
 80027fe:	4602      	mov	r2, r0
 8002800:	2316      	movs	r3, #22
 8002802:	6013      	str	r3, [r2, #0]
	return -1;
 8002804:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002808:	4618      	mov	r0, r3
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <_exit>:

void _exit (int status)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002818:	f04f 31ff 	mov.w	r1, #4294967295
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7ff ffe7 	bl	80027f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002822:	e7fe      	b.n	8002822 <_exit+0x12>

08002824 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800282c:	4b11      	ldr	r3, [pc, #68]	; (8002874 <_sbrk+0x50>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d102      	bne.n	800283a <_sbrk+0x16>
		heap_end = &end;
 8002834:	4b0f      	ldr	r3, [pc, #60]	; (8002874 <_sbrk+0x50>)
 8002836:	4a10      	ldr	r2, [pc, #64]	; (8002878 <_sbrk+0x54>)
 8002838:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800283a:	4b0e      	ldr	r3, [pc, #56]	; (8002874 <_sbrk+0x50>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002840:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <_sbrk+0x50>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4413      	add	r3, r2
 8002848:	466a      	mov	r2, sp
 800284a:	4293      	cmp	r3, r2
 800284c:	d907      	bls.n	800285e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800284e:	f003 fc5f 	bl	8006110 <__errno>
 8002852:	4602      	mov	r2, r0
 8002854:	230c      	movs	r3, #12
 8002856:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002858:	f04f 33ff 	mov.w	r3, #4294967295
 800285c:	e006      	b.n	800286c <_sbrk+0x48>
	}

	heap_end += incr;
 800285e:	4b05      	ldr	r3, [pc, #20]	; (8002874 <_sbrk+0x50>)
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4413      	add	r3, r2
 8002866:	4a03      	ldr	r2, [pc, #12]	; (8002874 <_sbrk+0x50>)
 8002868:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800286a:	68fb      	ldr	r3, [r7, #12]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	20001500 	.word	0x20001500
 8002878:	20001f20 	.word	0x20001f20

0800287c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002880:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <SystemInit+0x28>)
 8002882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002886:	4a07      	ldr	r2, [pc, #28]	; (80028a4 <SystemInit+0x28>)
 8002888:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800288c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002890:	4b04      	ldr	r3, [pc, #16]	; (80028a4 <SystemInit+0x28>)
 8002892:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002896:	609a      	str	r2, [r3, #8]
#endif
}
 8002898:	bf00      	nop
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	e000ed00 	.word	0xe000ed00

080028a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80028a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80028ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80028ae:	e003      	b.n	80028b8 <LoopCopyDataInit>

080028b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80028b0:	4b0c      	ldr	r3, [pc, #48]	; (80028e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80028b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80028b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80028b6:	3104      	adds	r1, #4

080028b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80028b8:	480b      	ldr	r0, [pc, #44]	; (80028e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80028ba:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80028bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80028be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80028c0:	d3f6      	bcc.n	80028b0 <CopyDataInit>
  ldr  r2, =_sbss
 80028c2:	4a0b      	ldr	r2, [pc, #44]	; (80028f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80028c4:	e002      	b.n	80028cc <LoopFillZerobss>

080028c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80028c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80028c8:	f842 3b04 	str.w	r3, [r2], #4

080028cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80028cc:	4b09      	ldr	r3, [pc, #36]	; (80028f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80028ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80028d0:	d3f9      	bcc.n	80028c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80028d2:	f7ff ffd3 	bl	800287c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028d6:	f003 fc35 	bl	8006144 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028da:	f7ff f935 	bl	8001b48 <main>
  bx  lr    
 80028de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80028e0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80028e4:	08009bd0 	.word	0x08009bd0
  ldr  r0, =_sdata
 80028e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80028ec:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 80028f0:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 80028f4:	20001f1c 	.word	0x20001f1c

080028f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028f8:	e7fe      	b.n	80028f8 <ADC_IRQHandler>
	...

080028fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002900:	4b0e      	ldr	r3, [pc, #56]	; (800293c <HAL_Init+0x40>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a0d      	ldr	r2, [pc, #52]	; (800293c <HAL_Init+0x40>)
 8002906:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800290a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800290c:	4b0b      	ldr	r3, [pc, #44]	; (800293c <HAL_Init+0x40>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a0a      	ldr	r2, [pc, #40]	; (800293c <HAL_Init+0x40>)
 8002912:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002916:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002918:	4b08      	ldr	r3, [pc, #32]	; (800293c <HAL_Init+0x40>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a07      	ldr	r2, [pc, #28]	; (800293c <HAL_Init+0x40>)
 800291e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002922:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002924:	2003      	movs	r0, #3
 8002926:	f000 fd41 	bl	80033ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800292a:	2000      	movs	r0, #0
 800292c:	f000 f808 	bl	8002940 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002930:	f7ff fcba 	bl	80022a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40023c00 	.word	0x40023c00

08002940 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002948:	4b12      	ldr	r3, [pc, #72]	; (8002994 <HAL_InitTick+0x54>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	4b12      	ldr	r3, [pc, #72]	; (8002998 <HAL_InitTick+0x58>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	4619      	mov	r1, r3
 8002952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002956:	fbb3 f3f1 	udiv	r3, r3, r1
 800295a:	fbb2 f3f3 	udiv	r3, r2, r3
 800295e:	4618      	mov	r0, r3
 8002960:	f000 fd59 	bl	8003416 <HAL_SYSTICK_Config>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e00e      	b.n	800298c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b0f      	cmp	r3, #15
 8002972:	d80a      	bhi.n	800298a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002974:	2200      	movs	r2, #0
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	f04f 30ff 	mov.w	r0, #4294967295
 800297c:	f000 fd21 	bl	80033c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002980:	4a06      	ldr	r2, [pc, #24]	; (800299c <HAL_InitTick+0x5c>)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002986:	2300      	movs	r3, #0
 8002988:	e000      	b.n	800298c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
}
 800298c:	4618      	mov	r0, r3
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	20000000 	.word	0x20000000
 8002998:	20000008 	.word	0x20000008
 800299c:	20000004 	.word	0x20000004

080029a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029a4:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <HAL_IncTick+0x20>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	461a      	mov	r2, r3
 80029aa:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <HAL_IncTick+0x24>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4413      	add	r3, r2
 80029b0:	4a04      	ldr	r2, [pc, #16]	; (80029c4 <HAL_IncTick+0x24>)
 80029b2:	6013      	str	r3, [r2, #0]
}
 80029b4:	bf00      	nop
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	20000008 	.word	0x20000008
 80029c4:	20001f14 	.word	0x20001f14

080029c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return uwTick;
 80029cc:	4b03      	ldr	r3, [pc, #12]	; (80029dc <HAL_GetTick+0x14>)
 80029ce:	681b      	ldr	r3, [r3, #0]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	20001f14 	.word	0x20001f14

080029e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029e8:	f7ff ffee 	bl	80029c8 <HAL_GetTick>
 80029ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f8:	d005      	beq.n	8002a06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029fa:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <HAL_Delay+0x40>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	461a      	mov	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4413      	add	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a06:	bf00      	nop
 8002a08:	f7ff ffde 	bl	80029c8 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d8f7      	bhi.n	8002a08 <HAL_Delay+0x28>
  {
  }
}
 8002a18:	bf00      	nop
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	20000008 	.word	0x20000008

08002a24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e033      	b.n	8002aa2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d109      	bne.n	8002a56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7ff fc58 	bl	80022f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	f003 0310 	and.w	r3, r3, #16
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d118      	bne.n	8002a94 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a6a:	f023 0302 	bic.w	r3, r3, #2
 8002a6e:	f043 0202 	orr.w	r2, r3, #2
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 fa4a 	bl	8002f10 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	f023 0303 	bic.w	r3, r3, #3
 8002a8a:	f043 0201 	orr.w	r2, r3, #1
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	641a      	str	r2, [r3, #64]	; 0x40
 8002a92:	e001      	b.n	8002a98 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
	...

08002aac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d101      	bne.n	8002aca <HAL_ADC_Start_DMA+0x1e>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e0cc      	b.n	8002c64 <HAL_ADC_Start_DMA+0x1b8>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d018      	beq.n	8002b12 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689a      	ldr	r2, [r3, #8]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0201 	orr.w	r2, r2, #1
 8002aee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002af0:	4b5e      	ldr	r3, [pc, #376]	; (8002c6c <HAL_ADC_Start_DMA+0x1c0>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a5e      	ldr	r2, [pc, #376]	; (8002c70 <HAL_ADC_Start_DMA+0x1c4>)
 8002af6:	fba2 2303 	umull	r2, r3, r2, r3
 8002afa:	0c9a      	lsrs	r2, r3, #18
 8002afc:	4613      	mov	r3, r2
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	4413      	add	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002b04:	e002      	b.n	8002b0c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f9      	bne.n	8002b06 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	f040 80a0 	bne.w	8002c62 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b2a:	f023 0301 	bic.w	r3, r3, #1
 8002b2e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d007      	beq.n	8002b54 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b4c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b60:	d106      	bne.n	8002b70 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b66:	f023 0206 	bic.w	r2, r3, #6
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	645a      	str	r2, [r3, #68]	; 0x44
 8002b6e:	e002      	b.n	8002b76 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b7e:	4b3d      	ldr	r3, [pc, #244]	; (8002c74 <HAL_ADC_Start_DMA+0x1c8>)
 8002b80:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b86:	4a3c      	ldr	r2, [pc, #240]	; (8002c78 <HAL_ADC_Start_DMA+0x1cc>)
 8002b88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8e:	4a3b      	ldr	r2, [pc, #236]	; (8002c7c <HAL_ADC_Start_DMA+0x1d0>)
 8002b90:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b96:	4a3a      	ldr	r2, [pc, #232]	; (8002c80 <HAL_ADC_Start_DMA+0x1d4>)
 8002b98:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002ba2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002bb2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bc2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	334c      	adds	r3, #76	; 0x4c
 8002bce:	4619      	mov	r1, r3
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f000 fcda 	bl	800358c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 031f 	and.w	r3, r3, #31
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d12a      	bne.n	8002c3a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a26      	ldr	r2, [pc, #152]	; (8002c84 <HAL_ADC_Start_DMA+0x1d8>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d015      	beq.n	8002c1a <HAL_ADC_Start_DMA+0x16e>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a25      	ldr	r2, [pc, #148]	; (8002c88 <HAL_ADC_Start_DMA+0x1dc>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d105      	bne.n	8002c04 <HAL_ADC_Start_DMA+0x158>
 8002bf8:	4b1e      	ldr	r3, [pc, #120]	; (8002c74 <HAL_ADC_Start_DMA+0x1c8>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f003 031f 	and.w	r3, r3, #31
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00a      	beq.n	8002c1a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a20      	ldr	r2, [pc, #128]	; (8002c8c <HAL_ADC_Start_DMA+0x1e0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d129      	bne.n	8002c62 <HAL_ADC_Start_DMA+0x1b6>
 8002c0e:	4b19      	ldr	r3, [pc, #100]	; (8002c74 <HAL_ADC_Start_DMA+0x1c8>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f003 031f 	and.w	r3, r3, #31
 8002c16:	2b0f      	cmp	r3, #15
 8002c18:	d823      	bhi.n	8002c62 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d11c      	bne.n	8002c62 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c36:	609a      	str	r2, [r3, #8]
 8002c38:	e013      	b.n	8002c62 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a11      	ldr	r2, [pc, #68]	; (8002c84 <HAL_ADC_Start_DMA+0x1d8>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d10e      	bne.n	8002c62 <HAL_ADC_Start_DMA+0x1b6>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d107      	bne.n	8002c62 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c60:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3718      	adds	r7, #24
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	20000000 	.word	0x20000000
 8002c70:	431bde83 	.word	0x431bde83
 8002c74:	40012300 	.word	0x40012300
 8002c78:	08003109 	.word	0x08003109
 8002c7c:	080031c3 	.word	0x080031c3
 8002c80:	080031df 	.word	0x080031df
 8002c84:	40012000 	.word	0x40012000
 8002c88:	40012100 	.word	0x40012100
 8002c8c:	40012200 	.word	0x40012200

08002c90 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d101      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x1c>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	e105      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x228>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2b09      	cmp	r3, #9
 8002cf6:	d925      	bls.n	8002d44 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68d9      	ldr	r1, [r3, #12]
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	461a      	mov	r2, r3
 8002d06:	4613      	mov	r3, r2
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	4413      	add	r3, r2
 8002d0c:	3b1e      	subs	r3, #30
 8002d0e:	2207      	movs	r2, #7
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43da      	mvns	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	400a      	ands	r2, r1
 8002d1c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68d9      	ldr	r1, [r3, #12]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	4618      	mov	r0, r3
 8002d30:	4603      	mov	r3, r0
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	4403      	add	r3, r0
 8002d36:	3b1e      	subs	r3, #30
 8002d38:	409a      	lsls	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	60da      	str	r2, [r3, #12]
 8002d42:	e022      	b.n	8002d8a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6919      	ldr	r1, [r3, #16]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	461a      	mov	r2, r3
 8002d52:	4613      	mov	r3, r2
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	4413      	add	r3, r2
 8002d58:	2207      	movs	r2, #7
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43da      	mvns	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	400a      	ands	r2, r1
 8002d66:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6919      	ldr	r1, [r3, #16]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	689a      	ldr	r2, [r3, #8]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	4618      	mov	r0, r3
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	4403      	add	r3, r0
 8002d80:	409a      	lsls	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b06      	cmp	r3, #6
 8002d90:	d824      	bhi.n	8002ddc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	3b05      	subs	r3, #5
 8002da4:	221f      	movs	r2, #31
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	43da      	mvns	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	400a      	ands	r2, r1
 8002db2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	3b05      	subs	r3, #5
 8002dce:	fa00 f203 	lsl.w	r2, r0, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	635a      	str	r2, [r3, #52]	; 0x34
 8002dda:	e04c      	b.n	8002e76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b0c      	cmp	r3, #12
 8002de2:	d824      	bhi.n	8002e2e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	4613      	mov	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	3b23      	subs	r3, #35	; 0x23
 8002df6:	221f      	movs	r2, #31
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	43da      	mvns	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	400a      	ands	r2, r1
 8002e04:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	4618      	mov	r0, r3
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	3b23      	subs	r3, #35	; 0x23
 8002e20:	fa00 f203 	lsl.w	r2, r0, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	631a      	str	r2, [r3, #48]	; 0x30
 8002e2c:	e023      	b.n	8002e76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	3b41      	subs	r3, #65	; 0x41
 8002e40:	221f      	movs	r2, #31
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	43da      	mvns	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	400a      	ands	r2, r1
 8002e4e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	4613      	mov	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	3b41      	subs	r3, #65	; 0x41
 8002e6a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e76:	4b22      	ldr	r3, [pc, #136]	; (8002f00 <HAL_ADC_ConfigChannel+0x234>)
 8002e78:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a21      	ldr	r2, [pc, #132]	; (8002f04 <HAL_ADC_ConfigChannel+0x238>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d109      	bne.n	8002e98 <HAL_ADC_ConfigChannel+0x1cc>
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2b12      	cmp	r3, #18
 8002e8a:	d105      	bne.n	8002e98 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a19      	ldr	r2, [pc, #100]	; (8002f04 <HAL_ADC_ConfigChannel+0x238>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d123      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x21e>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2b10      	cmp	r3, #16
 8002ea8:	d003      	beq.n	8002eb2 <HAL_ADC_ConfigChannel+0x1e6>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2b11      	cmp	r3, #17
 8002eb0:	d11b      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2b10      	cmp	r3, #16
 8002ec4:	d111      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ec6:	4b10      	ldr	r3, [pc, #64]	; (8002f08 <HAL_ADC_ConfigChannel+0x23c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a10      	ldr	r2, [pc, #64]	; (8002f0c <HAL_ADC_ConfigChannel+0x240>)
 8002ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed0:	0c9a      	lsrs	r2, r3, #18
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002edc:	e002      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f9      	bne.n	8002ede <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	40012300 	.word	0x40012300
 8002f04:	40012000 	.word	0x40012000
 8002f08:	20000000 	.word	0x20000000
 8002f0c:	431bde83 	.word	0x431bde83

08002f10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f18:	4b79      	ldr	r3, [pc, #484]	; (8003100 <ADC_Init+0x1f0>)
 8002f1a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	431a      	orrs	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6859      	ldr	r1, [r3, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	021a      	lsls	r2, r3, #8
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6859      	ldr	r1, [r3, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6899      	ldr	r1, [r3, #8]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa2:	4a58      	ldr	r2, [pc, #352]	; (8003104 <ADC_Init+0x1f4>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d022      	beq.n	8002fee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689a      	ldr	r2, [r3, #8]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fb6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6899      	ldr	r1, [r3, #8]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6899      	ldr	r1, [r3, #8]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	e00f      	b.n	800300e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ffc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800300c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 0202 	bic.w	r2, r2, #2
 800301c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6899      	ldr	r1, [r3, #8]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	7e1b      	ldrb	r3, [r3, #24]
 8003028:	005a      	lsls	r2, r3, #1
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d01b      	beq.n	8003074 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800304a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800305a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6859      	ldr	r1, [r3, #4]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	3b01      	subs	r3, #1
 8003068:	035a      	lsls	r2, r3, #13
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	605a      	str	r2, [r3, #4]
 8003072:	e007      	b.n	8003084 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003082:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003092:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	3b01      	subs	r3, #1
 80030a0:	051a      	lsls	r2, r3, #20
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6899      	ldr	r1, [r3, #8]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030c6:	025a      	lsls	r2, r3, #9
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6899      	ldr	r1, [r3, #8]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	029a      	lsls	r2, r3, #10
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	609a      	str	r2, [r3, #8]
}
 80030f4:	bf00      	nop
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	40012300 	.word	0x40012300
 8003104:	0f000001 	.word	0x0f000001

08003108 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003114:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800311e:	2b00      	cmp	r3, #0
 8003120:	d13c      	bne.n	800319c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d12b      	bne.n	8003194 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003140:	2b00      	cmp	r3, #0
 8003142:	d127      	bne.n	8003194 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800314e:	2b00      	cmp	r3, #0
 8003150:	d006      	beq.n	8003160 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800315c:	2b00      	cmp	r3, #0
 800315e:	d119      	bne.n	8003194 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 0220 	bic.w	r2, r2, #32
 800316e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003174:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003180:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d105      	bne.n	8003194 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318c:	f043 0201 	orr.w	r2, r3, #1
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f7ff fd7b 	bl	8002c90 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800319a:	e00e      	b.n	80031ba <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	f003 0310 	and.w	r3, r3, #16
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f7ff fd85 	bl	8002cb8 <HAL_ADC_ErrorCallback>
}
 80031ae:	e004      	b.n	80031ba <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	4798      	blx	r3
}
 80031ba:	bf00      	nop
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b084      	sub	sp, #16
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ce:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f7ff fd67 	bl	8002ca4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031d6:	bf00      	nop
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b084      	sub	sp, #16
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ea:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2240      	movs	r2, #64	; 0x40
 80031f0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f6:	f043 0204 	orr.w	r2, r3, #4
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f7ff fd5a 	bl	8002cb8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003204:	bf00      	nop
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800321c:	4b0c      	ldr	r3, [pc, #48]	; (8003250 <__NVIC_SetPriorityGrouping+0x44>)
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003228:	4013      	ands	r3, r2
 800322a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003234:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800323c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800323e:	4a04      	ldr	r2, [pc, #16]	; (8003250 <__NVIC_SetPriorityGrouping+0x44>)
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	60d3      	str	r3, [r2, #12]
}
 8003244:	bf00      	nop
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	e000ed00 	.word	0xe000ed00

08003254 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003258:	4b04      	ldr	r3, [pc, #16]	; (800326c <__NVIC_GetPriorityGrouping+0x18>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	0a1b      	lsrs	r3, r3, #8
 800325e:	f003 0307 	and.w	r3, r3, #7
}
 8003262:	4618      	mov	r0, r3
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	e000ed00 	.word	0xe000ed00

08003270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800327a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327e:	2b00      	cmp	r3, #0
 8003280:	db0b      	blt.n	800329a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003282:	79fb      	ldrb	r3, [r7, #7]
 8003284:	f003 021f 	and.w	r2, r3, #31
 8003288:	4907      	ldr	r1, [pc, #28]	; (80032a8 <__NVIC_EnableIRQ+0x38>)
 800328a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328e:	095b      	lsrs	r3, r3, #5
 8003290:	2001      	movs	r0, #1
 8003292:	fa00 f202 	lsl.w	r2, r0, r2
 8003296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	e000e100 	.word	0xe000e100

080032ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	4603      	mov	r3, r0
 80032b4:	6039      	str	r1, [r7, #0]
 80032b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	db0a      	blt.n	80032d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	b2da      	uxtb	r2, r3
 80032c4:	490c      	ldr	r1, [pc, #48]	; (80032f8 <__NVIC_SetPriority+0x4c>)
 80032c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ca:	0112      	lsls	r2, r2, #4
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	440b      	add	r3, r1
 80032d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032d4:	e00a      	b.n	80032ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	4908      	ldr	r1, [pc, #32]	; (80032fc <__NVIC_SetPriority+0x50>)
 80032dc:	79fb      	ldrb	r3, [r7, #7]
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	3b04      	subs	r3, #4
 80032e4:	0112      	lsls	r2, r2, #4
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	440b      	add	r3, r1
 80032ea:	761a      	strb	r2, [r3, #24]
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	e000e100 	.word	0xe000e100
 80032fc:	e000ed00 	.word	0xe000ed00

08003300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003300:	b480      	push	{r7}
 8003302:	b089      	sub	sp, #36	; 0x24
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	f1c3 0307 	rsb	r3, r3, #7
 800331a:	2b04      	cmp	r3, #4
 800331c:	bf28      	it	cs
 800331e:	2304      	movcs	r3, #4
 8003320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	3304      	adds	r3, #4
 8003326:	2b06      	cmp	r3, #6
 8003328:	d902      	bls.n	8003330 <NVIC_EncodePriority+0x30>
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	3b03      	subs	r3, #3
 800332e:	e000      	b.n	8003332 <NVIC_EncodePriority+0x32>
 8003330:	2300      	movs	r3, #0
 8003332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003334:	f04f 32ff 	mov.w	r2, #4294967295
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	43da      	mvns	r2, r3
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	401a      	ands	r2, r3
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003348:	f04f 31ff 	mov.w	r1, #4294967295
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	fa01 f303 	lsl.w	r3, r1, r3
 8003352:	43d9      	mvns	r1, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003358:	4313      	orrs	r3, r2
         );
}
 800335a:	4618      	mov	r0, r3
 800335c:	3724      	adds	r7, #36	; 0x24
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
	...

08003368 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3b01      	subs	r3, #1
 8003374:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003378:	d301      	bcc.n	800337e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800337a:	2301      	movs	r3, #1
 800337c:	e00f      	b.n	800339e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800337e:	4a0a      	ldr	r2, [pc, #40]	; (80033a8 <SysTick_Config+0x40>)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3b01      	subs	r3, #1
 8003384:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003386:	210f      	movs	r1, #15
 8003388:	f04f 30ff 	mov.w	r0, #4294967295
 800338c:	f7ff ff8e 	bl	80032ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003390:	4b05      	ldr	r3, [pc, #20]	; (80033a8 <SysTick_Config+0x40>)
 8003392:	2200      	movs	r2, #0
 8003394:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003396:	4b04      	ldr	r3, [pc, #16]	; (80033a8 <SysTick_Config+0x40>)
 8003398:	2207      	movs	r2, #7
 800339a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	e000e010 	.word	0xe000e010

080033ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7ff ff29 	bl	800320c <__NVIC_SetPriorityGrouping>
}
 80033ba:	bf00      	nop
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b086      	sub	sp, #24
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	4603      	mov	r3, r0
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	607a      	str	r2, [r7, #4]
 80033ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033d4:	f7ff ff3e 	bl	8003254 <__NVIC_GetPriorityGrouping>
 80033d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	68b9      	ldr	r1, [r7, #8]
 80033de:	6978      	ldr	r0, [r7, #20]
 80033e0:	f7ff ff8e 	bl	8003300 <NVIC_EncodePriority>
 80033e4:	4602      	mov	r2, r0
 80033e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ea:	4611      	mov	r1, r2
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff ff5d 	bl	80032ac <__NVIC_SetPriority>
}
 80033f2:	bf00      	nop
 80033f4:	3718      	adds	r7, #24
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b082      	sub	sp, #8
 80033fe:	af00      	add	r7, sp, #0
 8003400:	4603      	mov	r3, r0
 8003402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff ff31 	bl	8003270 <__NVIC_EnableIRQ>
}
 800340e:	bf00      	nop
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b082      	sub	sp, #8
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7ff ffa2 	bl	8003368 <SysTick_Config>
 8003424:	4603      	mov	r3, r0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
	...

08003430 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003438:	2300      	movs	r3, #0
 800343a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800343c:	f7ff fac4 	bl	80029c8 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e099      	b.n	8003580 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2202      	movs	r2, #2
 8003458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 0201 	bic.w	r2, r2, #1
 800346a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800346c:	e00f      	b.n	800348e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800346e:	f7ff faab 	bl	80029c8 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b05      	cmp	r3, #5
 800347a:	d908      	bls.n	800348e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2220      	movs	r2, #32
 8003480:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2203      	movs	r2, #3
 8003486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e078      	b.n	8003580 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1e8      	bne.n	800346e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	4b38      	ldr	r3, [pc, #224]	; (8003588 <HAL_DMA_Init+0x158>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	4313      	orrs	r3, r2
 80034de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d107      	bne.n	80034f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f0:	4313      	orrs	r3, r2
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f023 0307 	bic.w	r3, r3, #7
 800350e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	4313      	orrs	r3, r2
 8003518:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	2b04      	cmp	r3, #4
 8003520:	d117      	bne.n	8003552 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	4313      	orrs	r3, r2
 800352a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00e      	beq.n	8003552 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 fa91 	bl	8003a5c <DMA_CheckFifoParam>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d008      	beq.n	8003552 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2240      	movs	r2, #64	; 0x40
 8003544:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800354e:	2301      	movs	r3, #1
 8003550:	e016      	b.n	8003580 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 fa48 	bl	80039f0 <DMA_CalcBaseAndBitshift>
 8003560:	4603      	mov	r3, r0
 8003562:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003568:	223f      	movs	r2, #63	; 0x3f
 800356a:	409a      	lsls	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	f010803f 	.word	0xf010803f

0800358c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
 8003598:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800359a:	2300      	movs	r3, #0
 800359c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d101      	bne.n	80035b2 <HAL_DMA_Start_IT+0x26>
 80035ae:	2302      	movs	r3, #2
 80035b0:	e040      	b.n	8003634 <HAL_DMA_Start_IT+0xa8>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d12f      	bne.n	8003626 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2202      	movs	r2, #2
 80035ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	68b9      	ldr	r1, [r7, #8]
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 f9da 	bl	8003994 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e4:	223f      	movs	r2, #63	; 0x3f
 80035e6:	409a      	lsls	r2, r3
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0216 	orr.w	r2, r2, #22
 80035fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003600:	2b00      	cmp	r3, #0
 8003602:	d007      	beq.n	8003614 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f042 0208 	orr.w	r2, r2, #8
 8003612:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0201 	orr.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	e005      	b.n	8003632 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800362e:	2302      	movs	r3, #2
 8003630:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003632:	7dfb      	ldrb	r3, [r7, #23]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d004      	beq.n	800365a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2280      	movs	r2, #128	; 0x80
 8003654:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e00c      	b.n	8003674 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2205      	movs	r2, #5
 800365e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0201 	bic.w	r2, r2, #1
 8003670:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003688:	2300      	movs	r3, #0
 800368a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800368c:	4b92      	ldr	r3, [pc, #584]	; (80038d8 <HAL_DMA_IRQHandler+0x258>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a92      	ldr	r2, [pc, #584]	; (80038dc <HAL_DMA_IRQHandler+0x25c>)
 8003692:	fba2 2303 	umull	r2, r3, r2, r3
 8003696:	0a9b      	lsrs	r3, r3, #10
 8003698:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036aa:	2208      	movs	r2, #8
 80036ac:	409a      	lsls	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	4013      	ands	r3, r2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d01a      	beq.n	80036ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d013      	beq.n	80036ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 0204 	bic.w	r2, r2, #4
 80036d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d8:	2208      	movs	r2, #8
 80036da:	409a      	lsls	r2, r3
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e4:	f043 0201 	orr.w	r2, r3, #1
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f0:	2201      	movs	r2, #1
 80036f2:	409a      	lsls	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4013      	ands	r3, r2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d012      	beq.n	8003722 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00b      	beq.n	8003722 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800370e:	2201      	movs	r2, #1
 8003710:	409a      	lsls	r2, r3
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371a:	f043 0202 	orr.w	r2, r3, #2
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003726:	2204      	movs	r2, #4
 8003728:	409a      	lsls	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	4013      	ands	r3, r2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d012      	beq.n	8003758 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00b      	beq.n	8003758 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003744:	2204      	movs	r2, #4
 8003746:	409a      	lsls	r2, r3
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003750:	f043 0204 	orr.w	r2, r3, #4
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375c:	2210      	movs	r2, #16
 800375e:	409a      	lsls	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	4013      	ands	r3, r2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d043      	beq.n	80037f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b00      	cmp	r3, #0
 8003774:	d03c      	beq.n	80037f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800377a:	2210      	movs	r2, #16
 800377c:	409a      	lsls	r2, r3
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d018      	beq.n	80037c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d108      	bne.n	80037b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d024      	beq.n	80037f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	4798      	blx	r3
 80037ae:	e01f      	b.n	80037f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d01b      	beq.n	80037f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	4798      	blx	r3
 80037c0:	e016      	b.n	80037f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d107      	bne.n	80037e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0208 	bic.w	r2, r2, #8
 80037de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d003      	beq.n	80037f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f4:	2220      	movs	r2, #32
 80037f6:	409a      	lsls	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4013      	ands	r3, r2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 808e 	beq.w	800391e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0310 	and.w	r3, r3, #16
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 8086 	beq.w	800391e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003816:	2220      	movs	r2, #32
 8003818:	409a      	lsls	r2, r3
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b05      	cmp	r3, #5
 8003828:	d136      	bne.n	8003898 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0216 	bic.w	r2, r2, #22
 8003838:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	695a      	ldr	r2, [r3, #20]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003848:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	2b00      	cmp	r3, #0
 8003850:	d103      	bne.n	800385a <HAL_DMA_IRQHandler+0x1da>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003856:	2b00      	cmp	r3, #0
 8003858:	d007      	beq.n	800386a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0208 	bic.w	r2, r2, #8
 8003868:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386e:	223f      	movs	r2, #63	; 0x3f
 8003870:	409a      	lsls	r2, r3
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800388a:	2b00      	cmp	r3, #0
 800388c:	d07d      	beq.n	800398a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	4798      	blx	r3
        }
        return;
 8003896:	e078      	b.n	800398a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d01c      	beq.n	80038e0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d108      	bne.n	80038c6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d030      	beq.n	800391e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	4798      	blx	r3
 80038c4:	e02b      	b.n	800391e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d027      	beq.n	800391e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	4798      	blx	r3
 80038d6:	e022      	b.n	800391e <HAL_DMA_IRQHandler+0x29e>
 80038d8:	20000000 	.word	0x20000000
 80038dc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10f      	bne.n	800390e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 0210 	bic.w	r2, r2, #16
 80038fc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003922:	2b00      	cmp	r3, #0
 8003924:	d032      	beq.n	800398c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d022      	beq.n	8003978 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2205      	movs	r2, #5
 8003936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0201 	bic.w	r2, r2, #1
 8003948:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	3301      	adds	r3, #1
 800394e:	60bb      	str	r3, [r7, #8]
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	429a      	cmp	r2, r3
 8003954:	d307      	bcc.n	8003966 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1f2      	bne.n	800394a <HAL_DMA_IRQHandler+0x2ca>
 8003964:	e000      	b.n	8003968 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003966:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800397c:	2b00      	cmp	r3, #0
 800397e:	d005      	beq.n	800398c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	4798      	blx	r3
 8003988:	e000      	b.n	800398c <HAL_DMA_IRQHandler+0x30c>
        return;
 800398a:	bf00      	nop
    }
  }
}
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop

08003994 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
 80039a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	2b40      	cmp	r3, #64	; 0x40
 80039c0:	d108      	bne.n	80039d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80039d2:	e007      	b.n	80039e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	60da      	str	r2, [r3, #12]
}
 80039e4:	bf00      	nop
 80039e6:	3714      	adds	r7, #20
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	3b10      	subs	r3, #16
 8003a00:	4a14      	ldr	r2, [pc, #80]	; (8003a54 <DMA_CalcBaseAndBitshift+0x64>)
 8003a02:	fba2 2303 	umull	r2, r3, r2, r3
 8003a06:	091b      	lsrs	r3, r3, #4
 8003a08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a0a:	4a13      	ldr	r2, [pc, #76]	; (8003a58 <DMA_CalcBaseAndBitshift+0x68>)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4413      	add	r3, r2
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	461a      	mov	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2b03      	cmp	r3, #3
 8003a1c:	d909      	bls.n	8003a32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a26:	f023 0303 	bic.w	r3, r3, #3
 8003a2a:	1d1a      	adds	r2, r3, #4
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	659a      	str	r2, [r3, #88]	; 0x58
 8003a30:	e007      	b.n	8003a42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a3a:	f023 0303 	bic.w	r3, r3, #3
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	aaaaaaab 	.word	0xaaaaaaab
 8003a58:	08009778 	.word	0x08009778

08003a5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a64:	2300      	movs	r3, #0
 8003a66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d11f      	bne.n	8003ab6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	2b03      	cmp	r3, #3
 8003a7a:	d855      	bhi.n	8003b28 <DMA_CheckFifoParam+0xcc>
 8003a7c:	a201      	add	r2, pc, #4	; (adr r2, 8003a84 <DMA_CheckFifoParam+0x28>)
 8003a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a82:	bf00      	nop
 8003a84:	08003a95 	.word	0x08003a95
 8003a88:	08003aa7 	.word	0x08003aa7
 8003a8c:	08003a95 	.word	0x08003a95
 8003a90:	08003b29 	.word	0x08003b29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d045      	beq.n	8003b2c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aa4:	e042      	b.n	8003b2c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aaa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003aae:	d13f      	bne.n	8003b30 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ab4:	e03c      	b.n	8003b30 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003abe:	d121      	bne.n	8003b04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	2b03      	cmp	r3, #3
 8003ac4:	d836      	bhi.n	8003b34 <DMA_CheckFifoParam+0xd8>
 8003ac6:	a201      	add	r2, pc, #4	; (adr r2, 8003acc <DMA_CheckFifoParam+0x70>)
 8003ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003acc:	08003add 	.word	0x08003add
 8003ad0:	08003ae3 	.word	0x08003ae3
 8003ad4:	08003add 	.word	0x08003add
 8003ad8:	08003af5 	.word	0x08003af5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	73fb      	strb	r3, [r7, #15]
      break;
 8003ae0:	e02f      	b.n	8003b42 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d024      	beq.n	8003b38 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003af2:	e021      	b.n	8003b38 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003afc:	d11e      	bne.n	8003b3c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b02:	e01b      	b.n	8003b3c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d902      	bls.n	8003b10 <DMA_CheckFifoParam+0xb4>
 8003b0a:	2b03      	cmp	r3, #3
 8003b0c:	d003      	beq.n	8003b16 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b0e:	e018      	b.n	8003b42 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	73fb      	strb	r3, [r7, #15]
      break;
 8003b14:	e015      	b.n	8003b42 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00e      	beq.n	8003b40 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	73fb      	strb	r3, [r7, #15]
      break;
 8003b26:	e00b      	b.n	8003b40 <DMA_CheckFifoParam+0xe4>
      break;
 8003b28:	bf00      	nop
 8003b2a:	e00a      	b.n	8003b42 <DMA_CheckFifoParam+0xe6>
      break;
 8003b2c:	bf00      	nop
 8003b2e:	e008      	b.n	8003b42 <DMA_CheckFifoParam+0xe6>
      break;
 8003b30:	bf00      	nop
 8003b32:	e006      	b.n	8003b42 <DMA_CheckFifoParam+0xe6>
      break;
 8003b34:	bf00      	nop
 8003b36:	e004      	b.n	8003b42 <DMA_CheckFifoParam+0xe6>
      break;
 8003b38:	bf00      	nop
 8003b3a:	e002      	b.n	8003b42 <DMA_CheckFifoParam+0xe6>
      break;   
 8003b3c:	bf00      	nop
 8003b3e:	e000      	b.n	8003b42 <DMA_CheckFifoParam+0xe6>
      break;
 8003b40:	bf00      	nop
    }
  } 
  
  return status; 
 8003b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3714      	adds	r7, #20
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b089      	sub	sp, #36	; 0x24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b62:	2300      	movs	r3, #0
 8003b64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b66:	2300      	movs	r3, #0
 8003b68:	61fb      	str	r3, [r7, #28]
 8003b6a:	e16b      	b.n	8003e44 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	f040 815a 	bne.w	8003e3e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d00b      	beq.n	8003baa <HAL_GPIO_Init+0x5a>
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d007      	beq.n	8003baa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b9e:	2b11      	cmp	r3, #17
 8003ba0:	d003      	beq.n	8003baa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b12      	cmp	r3, #18
 8003ba8:	d130      	bne.n	8003c0c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	2203      	movs	r2, #3
 8003bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bba:	43db      	mvns	r3, r3
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	68da      	ldr	r2, [r3, #12]
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	fa02 f303 	lsl.w	r3, r2, r3
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003be0:	2201      	movs	r2, #1
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	43db      	mvns	r3, r3
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	4013      	ands	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	091b      	lsrs	r3, r3, #4
 8003bf6:	f003 0201 	and.w	r2, r3, #1
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	2203      	movs	r2, #3
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	4013      	ands	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d003      	beq.n	8003c4c <HAL_GPIO_Init+0xfc>
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b12      	cmp	r3, #18
 8003c4a:	d123      	bne.n	8003c94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	08da      	lsrs	r2, r3, #3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	3208      	adds	r2, #8
 8003c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	220f      	movs	r2, #15
 8003c64:	fa02 f303 	lsl.w	r3, r2, r3
 8003c68:	43db      	mvns	r3, r3
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	691a      	ldr	r2, [r3, #16]
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	08da      	lsrs	r2, r3, #3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3208      	adds	r2, #8
 8003c8e:	69b9      	ldr	r1, [r7, #24]
 8003c90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	2203      	movs	r2, #3
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	43db      	mvns	r3, r3
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f003 0203 	and.w	r2, r3, #3
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 80b4 	beq.w	8003e3e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60fb      	str	r3, [r7, #12]
 8003cda:	4b5f      	ldr	r3, [pc, #380]	; (8003e58 <HAL_GPIO_Init+0x308>)
 8003cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cde:	4a5e      	ldr	r2, [pc, #376]	; (8003e58 <HAL_GPIO_Init+0x308>)
 8003ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ce6:	4b5c      	ldr	r3, [pc, #368]	; (8003e58 <HAL_GPIO_Init+0x308>)
 8003ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cf2:	4a5a      	ldr	r2, [pc, #360]	; (8003e5c <HAL_GPIO_Init+0x30c>)
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	089b      	lsrs	r3, r3, #2
 8003cf8:	3302      	adds	r3, #2
 8003cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	f003 0303 	and.w	r3, r3, #3
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	220f      	movs	r2, #15
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	4013      	ands	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a51      	ldr	r2, [pc, #324]	; (8003e60 <HAL_GPIO_Init+0x310>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d02b      	beq.n	8003d76 <HAL_GPIO_Init+0x226>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a50      	ldr	r2, [pc, #320]	; (8003e64 <HAL_GPIO_Init+0x314>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d025      	beq.n	8003d72 <HAL_GPIO_Init+0x222>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a4f      	ldr	r2, [pc, #316]	; (8003e68 <HAL_GPIO_Init+0x318>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d01f      	beq.n	8003d6e <HAL_GPIO_Init+0x21e>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a4e      	ldr	r2, [pc, #312]	; (8003e6c <HAL_GPIO_Init+0x31c>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d019      	beq.n	8003d6a <HAL_GPIO_Init+0x21a>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a4d      	ldr	r2, [pc, #308]	; (8003e70 <HAL_GPIO_Init+0x320>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d013      	beq.n	8003d66 <HAL_GPIO_Init+0x216>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a4c      	ldr	r2, [pc, #304]	; (8003e74 <HAL_GPIO_Init+0x324>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d00d      	beq.n	8003d62 <HAL_GPIO_Init+0x212>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a4b      	ldr	r2, [pc, #300]	; (8003e78 <HAL_GPIO_Init+0x328>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d007      	beq.n	8003d5e <HAL_GPIO_Init+0x20e>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a4a      	ldr	r2, [pc, #296]	; (8003e7c <HAL_GPIO_Init+0x32c>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d101      	bne.n	8003d5a <HAL_GPIO_Init+0x20a>
 8003d56:	2307      	movs	r3, #7
 8003d58:	e00e      	b.n	8003d78 <HAL_GPIO_Init+0x228>
 8003d5a:	2308      	movs	r3, #8
 8003d5c:	e00c      	b.n	8003d78 <HAL_GPIO_Init+0x228>
 8003d5e:	2306      	movs	r3, #6
 8003d60:	e00a      	b.n	8003d78 <HAL_GPIO_Init+0x228>
 8003d62:	2305      	movs	r3, #5
 8003d64:	e008      	b.n	8003d78 <HAL_GPIO_Init+0x228>
 8003d66:	2304      	movs	r3, #4
 8003d68:	e006      	b.n	8003d78 <HAL_GPIO_Init+0x228>
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e004      	b.n	8003d78 <HAL_GPIO_Init+0x228>
 8003d6e:	2302      	movs	r3, #2
 8003d70:	e002      	b.n	8003d78 <HAL_GPIO_Init+0x228>
 8003d72:	2301      	movs	r3, #1
 8003d74:	e000      	b.n	8003d78 <HAL_GPIO_Init+0x228>
 8003d76:	2300      	movs	r3, #0
 8003d78:	69fa      	ldr	r2, [r7, #28]
 8003d7a:	f002 0203 	and.w	r2, r2, #3
 8003d7e:	0092      	lsls	r2, r2, #2
 8003d80:	4093      	lsls	r3, r2
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d88:	4934      	ldr	r1, [pc, #208]	; (8003e5c <HAL_GPIO_Init+0x30c>)
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	089b      	lsrs	r3, r3, #2
 8003d8e:	3302      	adds	r3, #2
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d96:	4b3a      	ldr	r3, [pc, #232]	; (8003e80 <HAL_GPIO_Init+0x330>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	43db      	mvns	r3, r3
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	4013      	ands	r3, r2
 8003da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003dba:	4a31      	ldr	r2, [pc, #196]	; (8003e80 <HAL_GPIO_Init+0x330>)
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003dc0:	4b2f      	ldr	r3, [pc, #188]	; (8003e80 <HAL_GPIO_Init+0x330>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d003      	beq.n	8003de4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003de4:	4a26      	ldr	r2, [pc, #152]	; (8003e80 <HAL_GPIO_Init+0x330>)
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dea:	4b25      	ldr	r3, [pc, #148]	; (8003e80 <HAL_GPIO_Init+0x330>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	43db      	mvns	r3, r3
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	4013      	ands	r3, r2
 8003df8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d003      	beq.n	8003e0e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e0e:	4a1c      	ldr	r2, [pc, #112]	; (8003e80 <HAL_GPIO_Init+0x330>)
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e14:	4b1a      	ldr	r3, [pc, #104]	; (8003e80 <HAL_GPIO_Init+0x330>)
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	43db      	mvns	r3, r3
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	4013      	ands	r3, r2
 8003e22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d003      	beq.n	8003e38 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e38:	4a11      	ldr	r2, [pc, #68]	; (8003e80 <HAL_GPIO_Init+0x330>)
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	3301      	adds	r3, #1
 8003e42:	61fb      	str	r3, [r7, #28]
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	2b0f      	cmp	r3, #15
 8003e48:	f67f ae90 	bls.w	8003b6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e4c:	bf00      	nop
 8003e4e:	3724      	adds	r7, #36	; 0x24
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	40013800 	.word	0x40013800
 8003e60:	40020000 	.word	0x40020000
 8003e64:	40020400 	.word	0x40020400
 8003e68:	40020800 	.word	0x40020800
 8003e6c:	40020c00 	.word	0x40020c00
 8003e70:	40021000 	.word	0x40021000
 8003e74:	40021400 	.word	0x40021400
 8003e78:	40021800 	.word	0x40021800
 8003e7c:	40021c00 	.word	0x40021c00
 8003e80:	40013c00 	.word	0x40013c00

08003e84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e25b      	b.n	800434e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d075      	beq.n	8003f8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ea2:	4ba3      	ldr	r3, [pc, #652]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 030c 	and.w	r3, r3, #12
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	d00c      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eae:	4ba0      	ldr	r3, [pc, #640]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003eb6:	2b08      	cmp	r3, #8
 8003eb8:	d112      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eba:	4b9d      	ldr	r3, [pc, #628]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ec2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ec6:	d10b      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec8:	4b99      	ldr	r3, [pc, #612]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d05b      	beq.n	8003f8c <HAL_RCC_OscConfig+0x108>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d157      	bne.n	8003f8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e236      	b.n	800434e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee8:	d106      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x74>
 8003eea:	4b91      	ldr	r3, [pc, #580]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a90      	ldr	r2, [pc, #576]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef4:	6013      	str	r3, [r2, #0]
 8003ef6:	e01d      	b.n	8003f34 <HAL_RCC_OscConfig+0xb0>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f00:	d10c      	bne.n	8003f1c <HAL_RCC_OscConfig+0x98>
 8003f02:	4b8b      	ldr	r3, [pc, #556]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a8a      	ldr	r2, [pc, #552]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003f08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f0c:	6013      	str	r3, [r2, #0]
 8003f0e:	4b88      	ldr	r3, [pc, #544]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a87      	ldr	r2, [pc, #540]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f18:	6013      	str	r3, [r2, #0]
 8003f1a:	e00b      	b.n	8003f34 <HAL_RCC_OscConfig+0xb0>
 8003f1c:	4b84      	ldr	r3, [pc, #528]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a83      	ldr	r2, [pc, #524]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f26:	6013      	str	r3, [r2, #0]
 8003f28:	4b81      	ldr	r3, [pc, #516]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a80      	ldr	r2, [pc, #512]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d013      	beq.n	8003f64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f3c:	f7fe fd44 	bl	80029c8 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f44:	f7fe fd40 	bl	80029c8 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b64      	cmp	r3, #100	; 0x64
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e1fb      	b.n	800434e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f56:	4b76      	ldr	r3, [pc, #472]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0f0      	beq.n	8003f44 <HAL_RCC_OscConfig+0xc0>
 8003f62:	e014      	b.n	8003f8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f64:	f7fe fd30 	bl	80029c8 <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f6c:	f7fe fd2c 	bl	80029c8 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b64      	cmp	r3, #100	; 0x64
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e1e7      	b.n	800434e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f7e:	4b6c      	ldr	r3, [pc, #432]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1f0      	bne.n	8003f6c <HAL_RCC_OscConfig+0xe8>
 8003f8a:	e000      	b.n	8003f8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d063      	beq.n	8004062 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f9a:	4b65      	ldr	r3, [pc, #404]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f003 030c 	and.w	r3, r3, #12
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00b      	beq.n	8003fbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fa6:	4b62      	ldr	r3, [pc, #392]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fae:	2b08      	cmp	r3, #8
 8003fb0:	d11c      	bne.n	8003fec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fb2:	4b5f      	ldr	r3, [pc, #380]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d116      	bne.n	8003fec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fbe:	4b5c      	ldr	r3, [pc, #368]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d005      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x152>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d001      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e1bb      	b.n	800434e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd6:	4b56      	ldr	r3, [pc, #344]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	4952      	ldr	r1, [pc, #328]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fea:	e03a      	b.n	8004062 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d020      	beq.n	8004036 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ff4:	4b4f      	ldr	r3, [pc, #316]	; (8004134 <HAL_RCC_OscConfig+0x2b0>)
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffa:	f7fe fce5 	bl	80029c8 <HAL_GetTick>
 8003ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004000:	e008      	b.n	8004014 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004002:	f7fe fce1 	bl	80029c8 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d901      	bls.n	8004014 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e19c      	b.n	800434e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004014:	4b46      	ldr	r3, [pc, #280]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0f0      	beq.n	8004002 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004020:	4b43      	ldr	r3, [pc, #268]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	4940      	ldr	r1, [pc, #256]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8004030:	4313      	orrs	r3, r2
 8004032:	600b      	str	r3, [r1, #0]
 8004034:	e015      	b.n	8004062 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004036:	4b3f      	ldr	r3, [pc, #252]	; (8004134 <HAL_RCC_OscConfig+0x2b0>)
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403c:	f7fe fcc4 	bl	80029c8 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004044:	f7fe fcc0 	bl	80029c8 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e17b      	b.n	800434e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004056:	4b36      	ldr	r3, [pc, #216]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1f0      	bne.n	8004044 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	2b00      	cmp	r3, #0
 800406c:	d030      	beq.n	80040d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d016      	beq.n	80040a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004076:	4b30      	ldr	r3, [pc, #192]	; (8004138 <HAL_RCC_OscConfig+0x2b4>)
 8004078:	2201      	movs	r2, #1
 800407a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800407c:	f7fe fca4 	bl	80029c8 <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004084:	f7fe fca0 	bl	80029c8 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e15b      	b.n	800434e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004096:	4b26      	ldr	r3, [pc, #152]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8004098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0f0      	beq.n	8004084 <HAL_RCC_OscConfig+0x200>
 80040a2:	e015      	b.n	80040d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040a4:	4b24      	ldr	r3, [pc, #144]	; (8004138 <HAL_RCC_OscConfig+0x2b4>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040aa:	f7fe fc8d 	bl	80029c8 <HAL_GetTick>
 80040ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040b0:	e008      	b.n	80040c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040b2:	f7fe fc89 	bl	80029c8 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e144      	b.n	800434e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040c4:	4b1a      	ldr	r3, [pc, #104]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 80040c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1f0      	bne.n	80040b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 80a0 	beq.w	800421e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040de:	2300      	movs	r3, #0
 80040e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040e2:	4b13      	ldr	r3, [pc, #76]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10f      	bne.n	800410e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ee:	2300      	movs	r3, #0
 80040f0:	60bb      	str	r3, [r7, #8]
 80040f2:	4b0f      	ldr	r3, [pc, #60]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	4a0e      	ldr	r2, [pc, #56]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 80040f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040fc:	6413      	str	r3, [r2, #64]	; 0x40
 80040fe:	4b0c      	ldr	r3, [pc, #48]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004106:	60bb      	str	r3, [r7, #8]
 8004108:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800410a:	2301      	movs	r3, #1
 800410c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800410e:	4b0b      	ldr	r3, [pc, #44]	; (800413c <HAL_RCC_OscConfig+0x2b8>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004116:	2b00      	cmp	r3, #0
 8004118:	d121      	bne.n	800415e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800411a:	4b08      	ldr	r3, [pc, #32]	; (800413c <HAL_RCC_OscConfig+0x2b8>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a07      	ldr	r2, [pc, #28]	; (800413c <HAL_RCC_OscConfig+0x2b8>)
 8004120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004124:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004126:	f7fe fc4f 	bl	80029c8 <HAL_GetTick>
 800412a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800412c:	e011      	b.n	8004152 <HAL_RCC_OscConfig+0x2ce>
 800412e:	bf00      	nop
 8004130:	40023800 	.word	0x40023800
 8004134:	42470000 	.word	0x42470000
 8004138:	42470e80 	.word	0x42470e80
 800413c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004140:	f7fe fc42 	bl	80029c8 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e0fd      	b.n	800434e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004152:	4b81      	ldr	r3, [pc, #516]	; (8004358 <HAL_RCC_OscConfig+0x4d4>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0f0      	beq.n	8004140 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d106      	bne.n	8004174 <HAL_RCC_OscConfig+0x2f0>
 8004166:	4b7d      	ldr	r3, [pc, #500]	; (800435c <HAL_RCC_OscConfig+0x4d8>)
 8004168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416a:	4a7c      	ldr	r2, [pc, #496]	; (800435c <HAL_RCC_OscConfig+0x4d8>)
 800416c:	f043 0301 	orr.w	r3, r3, #1
 8004170:	6713      	str	r3, [r2, #112]	; 0x70
 8004172:	e01c      	b.n	80041ae <HAL_RCC_OscConfig+0x32a>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	2b05      	cmp	r3, #5
 800417a:	d10c      	bne.n	8004196 <HAL_RCC_OscConfig+0x312>
 800417c:	4b77      	ldr	r3, [pc, #476]	; (800435c <HAL_RCC_OscConfig+0x4d8>)
 800417e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004180:	4a76      	ldr	r2, [pc, #472]	; (800435c <HAL_RCC_OscConfig+0x4d8>)
 8004182:	f043 0304 	orr.w	r3, r3, #4
 8004186:	6713      	str	r3, [r2, #112]	; 0x70
 8004188:	4b74      	ldr	r3, [pc, #464]	; (800435c <HAL_RCC_OscConfig+0x4d8>)
 800418a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418c:	4a73      	ldr	r2, [pc, #460]	; (800435c <HAL_RCC_OscConfig+0x4d8>)
 800418e:	f043 0301 	orr.w	r3, r3, #1
 8004192:	6713      	str	r3, [r2, #112]	; 0x70
 8004194:	e00b      	b.n	80041ae <HAL_RCC_OscConfig+0x32a>
 8004196:	4b71      	ldr	r3, [pc, #452]	; (800435c <HAL_RCC_OscConfig+0x4d8>)
 8004198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419a:	4a70      	ldr	r2, [pc, #448]	; (800435c <HAL_RCC_OscConfig+0x4d8>)
 800419c:	f023 0301 	bic.w	r3, r3, #1
 80041a0:	6713      	str	r3, [r2, #112]	; 0x70
 80041a2:	4b6e      	ldr	r3, [pc, #440]	; (800435c <HAL_RCC_OscConfig+0x4d8>)
 80041a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a6:	4a6d      	ldr	r2, [pc, #436]	; (800435c <HAL_RCC_OscConfig+0x4d8>)
 80041a8:	f023 0304 	bic.w	r3, r3, #4
 80041ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d015      	beq.n	80041e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b6:	f7fe fc07 	bl	80029c8 <HAL_GetTick>
 80041ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041bc:	e00a      	b.n	80041d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041be:	f7fe fc03 	bl	80029c8 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d901      	bls.n	80041d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e0bc      	b.n	800434e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d4:	4b61      	ldr	r3, [pc, #388]	; (800435c <HAL_RCC_OscConfig+0x4d8>)
 80041d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d0ee      	beq.n	80041be <HAL_RCC_OscConfig+0x33a>
 80041e0:	e014      	b.n	800420c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041e2:	f7fe fbf1 	bl	80029c8 <HAL_GetTick>
 80041e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041e8:	e00a      	b.n	8004200 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041ea:	f7fe fbed 	bl	80029c8 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e0a6      	b.n	800434e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004200:	4b56      	ldr	r3, [pc, #344]	; (800435c <HAL_RCC_OscConfig+0x4d8>)
 8004202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1ee      	bne.n	80041ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800420c:	7dfb      	ldrb	r3, [r7, #23]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d105      	bne.n	800421e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004212:	4b52      	ldr	r3, [pc, #328]	; (800435c <HAL_RCC_OscConfig+0x4d8>)
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	4a51      	ldr	r2, [pc, #324]	; (800435c <HAL_RCC_OscConfig+0x4d8>)
 8004218:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800421c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 8092 	beq.w	800434c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004228:	4b4c      	ldr	r3, [pc, #304]	; (800435c <HAL_RCC_OscConfig+0x4d8>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f003 030c 	and.w	r3, r3, #12
 8004230:	2b08      	cmp	r3, #8
 8004232:	d05c      	beq.n	80042ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	2b02      	cmp	r3, #2
 800423a:	d141      	bne.n	80042c0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800423c:	4b48      	ldr	r3, [pc, #288]	; (8004360 <HAL_RCC_OscConfig+0x4dc>)
 800423e:	2200      	movs	r2, #0
 8004240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004242:	f7fe fbc1 	bl	80029c8 <HAL_GetTick>
 8004246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004248:	e008      	b.n	800425c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800424a:	f7fe fbbd 	bl	80029c8 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d901      	bls.n	800425c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e078      	b.n	800434e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800425c:	4b3f      	ldr	r3, [pc, #252]	; (800435c <HAL_RCC_OscConfig+0x4d8>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1f0      	bne.n	800424a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	69da      	ldr	r2, [r3, #28]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	431a      	orrs	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	019b      	lsls	r3, r3, #6
 8004278:	431a      	orrs	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427e:	085b      	lsrs	r3, r3, #1
 8004280:	3b01      	subs	r3, #1
 8004282:	041b      	lsls	r3, r3, #16
 8004284:	431a      	orrs	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428a:	061b      	lsls	r3, r3, #24
 800428c:	4933      	ldr	r1, [pc, #204]	; (800435c <HAL_RCC_OscConfig+0x4d8>)
 800428e:	4313      	orrs	r3, r2
 8004290:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004292:	4b33      	ldr	r3, [pc, #204]	; (8004360 <HAL_RCC_OscConfig+0x4dc>)
 8004294:	2201      	movs	r2, #1
 8004296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004298:	f7fe fb96 	bl	80029c8 <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042a0:	f7fe fb92 	bl	80029c8 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e04d      	b.n	800434e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b2:	4b2a      	ldr	r3, [pc, #168]	; (800435c <HAL_RCC_OscConfig+0x4d8>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0f0      	beq.n	80042a0 <HAL_RCC_OscConfig+0x41c>
 80042be:	e045      	b.n	800434c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042c0:	4b27      	ldr	r3, [pc, #156]	; (8004360 <HAL_RCC_OscConfig+0x4dc>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c6:	f7fe fb7f 	bl	80029c8 <HAL_GetTick>
 80042ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042cc:	e008      	b.n	80042e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042ce:	f7fe fb7b 	bl	80029c8 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e036      	b.n	800434e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042e0:	4b1e      	ldr	r3, [pc, #120]	; (800435c <HAL_RCC_OscConfig+0x4d8>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1f0      	bne.n	80042ce <HAL_RCC_OscConfig+0x44a>
 80042ec:	e02e      	b.n	800434c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d101      	bne.n	80042fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e029      	b.n	800434e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80042fa:	4b18      	ldr	r3, [pc, #96]	; (800435c <HAL_RCC_OscConfig+0x4d8>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	429a      	cmp	r2, r3
 800430c:	d11c      	bne.n	8004348 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004318:	429a      	cmp	r2, r3
 800431a:	d115      	bne.n	8004348 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004322:	4013      	ands	r3, r2
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004328:	4293      	cmp	r3, r2
 800432a:	d10d      	bne.n	8004348 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004336:	429a      	cmp	r2, r3
 8004338:	d106      	bne.n	8004348 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004344:	429a      	cmp	r2, r3
 8004346:	d001      	beq.n	800434c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e000      	b.n	800434e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3718      	adds	r7, #24
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	40007000 	.word	0x40007000
 800435c:	40023800 	.word	0x40023800
 8004360:	42470060 	.word	0x42470060

08004364 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e0cc      	b.n	8004512 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004378:	4b68      	ldr	r3, [pc, #416]	; (800451c <HAL_RCC_ClockConfig+0x1b8>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 030f 	and.w	r3, r3, #15
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	429a      	cmp	r2, r3
 8004384:	d90c      	bls.n	80043a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004386:	4b65      	ldr	r3, [pc, #404]	; (800451c <HAL_RCC_ClockConfig+0x1b8>)
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	b2d2      	uxtb	r2, r2
 800438c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800438e:	4b63      	ldr	r3, [pc, #396]	; (800451c <HAL_RCC_ClockConfig+0x1b8>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 030f 	and.w	r3, r3, #15
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	429a      	cmp	r2, r3
 800439a:	d001      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e0b8      	b.n	8004512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d020      	beq.n	80043ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0304 	and.w	r3, r3, #4
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d005      	beq.n	80043c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043b8:	4b59      	ldr	r3, [pc, #356]	; (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	4a58      	ldr	r2, [pc, #352]	; (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 80043be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0308 	and.w	r3, r3, #8
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d005      	beq.n	80043dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043d0:	4b53      	ldr	r3, [pc, #332]	; (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	4a52      	ldr	r2, [pc, #328]	; (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 80043d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043dc:	4b50      	ldr	r3, [pc, #320]	; (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	494d      	ldr	r1, [pc, #308]	; (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d044      	beq.n	8004484 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d107      	bne.n	8004412 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004402:	4b47      	ldr	r3, [pc, #284]	; (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d119      	bne.n	8004442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e07f      	b.n	8004512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2b02      	cmp	r3, #2
 8004418:	d003      	beq.n	8004422 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800441e:	2b03      	cmp	r3, #3
 8004420:	d107      	bne.n	8004432 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004422:	4b3f      	ldr	r3, [pc, #252]	; (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d109      	bne.n	8004442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e06f      	b.n	8004512 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004432:	4b3b      	ldr	r3, [pc, #236]	; (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e067      	b.n	8004512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004442:	4b37      	ldr	r3, [pc, #220]	; (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f023 0203 	bic.w	r2, r3, #3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	4934      	ldr	r1, [pc, #208]	; (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 8004450:	4313      	orrs	r3, r2
 8004452:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004454:	f7fe fab8 	bl	80029c8 <HAL_GetTick>
 8004458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800445a:	e00a      	b.n	8004472 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800445c:	f7fe fab4 	bl	80029c8 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	f241 3288 	movw	r2, #5000	; 0x1388
 800446a:	4293      	cmp	r3, r2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e04f      	b.n	8004512 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004472:	4b2b      	ldr	r3, [pc, #172]	; (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 020c 	and.w	r2, r3, #12
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	429a      	cmp	r2, r3
 8004482:	d1eb      	bne.n	800445c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004484:	4b25      	ldr	r3, [pc, #148]	; (800451c <HAL_RCC_ClockConfig+0x1b8>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 030f 	and.w	r3, r3, #15
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	429a      	cmp	r2, r3
 8004490:	d20c      	bcs.n	80044ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004492:	4b22      	ldr	r3, [pc, #136]	; (800451c <HAL_RCC_ClockConfig+0x1b8>)
 8004494:	683a      	ldr	r2, [r7, #0]
 8004496:	b2d2      	uxtb	r2, r2
 8004498:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800449a:	4b20      	ldr	r3, [pc, #128]	; (800451c <HAL_RCC_ClockConfig+0x1b8>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 030f 	and.w	r3, r3, #15
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d001      	beq.n	80044ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e032      	b.n	8004512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d008      	beq.n	80044ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044b8:	4b19      	ldr	r3, [pc, #100]	; (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	4916      	ldr	r1, [pc, #88]	; (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0308 	and.w	r3, r3, #8
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d009      	beq.n	80044ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044d6:	4b12      	ldr	r3, [pc, #72]	; (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	490e      	ldr	r1, [pc, #56]	; (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044ea:	f000 f821 	bl	8004530 <HAL_RCC_GetSysClockFreq>
 80044ee:	4601      	mov	r1, r0
 80044f0:	4b0b      	ldr	r3, [pc, #44]	; (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	091b      	lsrs	r3, r3, #4
 80044f6:	f003 030f 	and.w	r3, r3, #15
 80044fa:	4a0a      	ldr	r2, [pc, #40]	; (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 80044fc:	5cd3      	ldrb	r3, [r2, r3]
 80044fe:	fa21 f303 	lsr.w	r3, r1, r3
 8004502:	4a09      	ldr	r2, [pc, #36]	; (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 8004504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004506:	4b09      	ldr	r3, [pc, #36]	; (800452c <HAL_RCC_ClockConfig+0x1c8>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4618      	mov	r0, r3
 800450c:	f7fe fa18 	bl	8002940 <HAL_InitTick>

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	40023c00 	.word	0x40023c00
 8004520:	40023800 	.word	0x40023800
 8004524:	08009760 	.word	0x08009760
 8004528:	20000000 	.word	0x20000000
 800452c:	20000004 	.word	0x20000004

08004530 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004536:	2300      	movs	r3, #0
 8004538:	607b      	str	r3, [r7, #4]
 800453a:	2300      	movs	r3, #0
 800453c:	60fb      	str	r3, [r7, #12]
 800453e:	2300      	movs	r3, #0
 8004540:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004542:	2300      	movs	r3, #0
 8004544:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004546:	4b63      	ldr	r3, [pc, #396]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f003 030c 	and.w	r3, r3, #12
 800454e:	2b04      	cmp	r3, #4
 8004550:	d007      	beq.n	8004562 <HAL_RCC_GetSysClockFreq+0x32>
 8004552:	2b08      	cmp	r3, #8
 8004554:	d008      	beq.n	8004568 <HAL_RCC_GetSysClockFreq+0x38>
 8004556:	2b00      	cmp	r3, #0
 8004558:	f040 80b4 	bne.w	80046c4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800455c:	4b5e      	ldr	r3, [pc, #376]	; (80046d8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800455e:	60bb      	str	r3, [r7, #8]
       break;
 8004560:	e0b3      	b.n	80046ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004562:	4b5e      	ldr	r3, [pc, #376]	; (80046dc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004564:	60bb      	str	r3, [r7, #8]
      break;
 8004566:	e0b0      	b.n	80046ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004568:	4b5a      	ldr	r3, [pc, #360]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004570:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004572:	4b58      	ldr	r3, [pc, #352]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d04a      	beq.n	8004614 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800457e:	4b55      	ldr	r3, [pc, #340]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	099b      	lsrs	r3, r3, #6
 8004584:	f04f 0400 	mov.w	r4, #0
 8004588:	f240 11ff 	movw	r1, #511	; 0x1ff
 800458c:	f04f 0200 	mov.w	r2, #0
 8004590:	ea03 0501 	and.w	r5, r3, r1
 8004594:	ea04 0602 	and.w	r6, r4, r2
 8004598:	4629      	mov	r1, r5
 800459a:	4632      	mov	r2, r6
 800459c:	f04f 0300 	mov.w	r3, #0
 80045a0:	f04f 0400 	mov.w	r4, #0
 80045a4:	0154      	lsls	r4, r2, #5
 80045a6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80045aa:	014b      	lsls	r3, r1, #5
 80045ac:	4619      	mov	r1, r3
 80045ae:	4622      	mov	r2, r4
 80045b0:	1b49      	subs	r1, r1, r5
 80045b2:	eb62 0206 	sbc.w	r2, r2, r6
 80045b6:	f04f 0300 	mov.w	r3, #0
 80045ba:	f04f 0400 	mov.w	r4, #0
 80045be:	0194      	lsls	r4, r2, #6
 80045c0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80045c4:	018b      	lsls	r3, r1, #6
 80045c6:	1a5b      	subs	r3, r3, r1
 80045c8:	eb64 0402 	sbc.w	r4, r4, r2
 80045cc:	f04f 0100 	mov.w	r1, #0
 80045d0:	f04f 0200 	mov.w	r2, #0
 80045d4:	00e2      	lsls	r2, r4, #3
 80045d6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80045da:	00d9      	lsls	r1, r3, #3
 80045dc:	460b      	mov	r3, r1
 80045de:	4614      	mov	r4, r2
 80045e0:	195b      	adds	r3, r3, r5
 80045e2:	eb44 0406 	adc.w	r4, r4, r6
 80045e6:	f04f 0100 	mov.w	r1, #0
 80045ea:	f04f 0200 	mov.w	r2, #0
 80045ee:	0262      	lsls	r2, r4, #9
 80045f0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80045f4:	0259      	lsls	r1, r3, #9
 80045f6:	460b      	mov	r3, r1
 80045f8:	4614      	mov	r4, r2
 80045fa:	4618      	mov	r0, r3
 80045fc:	4621      	mov	r1, r4
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f04f 0400 	mov.w	r4, #0
 8004604:	461a      	mov	r2, r3
 8004606:	4623      	mov	r3, r4
 8004608:	f7fc face 	bl	8000ba8 <__aeabi_uldivmod>
 800460c:	4603      	mov	r3, r0
 800460e:	460c      	mov	r4, r1
 8004610:	60fb      	str	r3, [r7, #12]
 8004612:	e049      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004614:	4b2f      	ldr	r3, [pc, #188]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	099b      	lsrs	r3, r3, #6
 800461a:	f04f 0400 	mov.w	r4, #0
 800461e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004622:	f04f 0200 	mov.w	r2, #0
 8004626:	ea03 0501 	and.w	r5, r3, r1
 800462a:	ea04 0602 	and.w	r6, r4, r2
 800462e:	4629      	mov	r1, r5
 8004630:	4632      	mov	r2, r6
 8004632:	f04f 0300 	mov.w	r3, #0
 8004636:	f04f 0400 	mov.w	r4, #0
 800463a:	0154      	lsls	r4, r2, #5
 800463c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004640:	014b      	lsls	r3, r1, #5
 8004642:	4619      	mov	r1, r3
 8004644:	4622      	mov	r2, r4
 8004646:	1b49      	subs	r1, r1, r5
 8004648:	eb62 0206 	sbc.w	r2, r2, r6
 800464c:	f04f 0300 	mov.w	r3, #0
 8004650:	f04f 0400 	mov.w	r4, #0
 8004654:	0194      	lsls	r4, r2, #6
 8004656:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800465a:	018b      	lsls	r3, r1, #6
 800465c:	1a5b      	subs	r3, r3, r1
 800465e:	eb64 0402 	sbc.w	r4, r4, r2
 8004662:	f04f 0100 	mov.w	r1, #0
 8004666:	f04f 0200 	mov.w	r2, #0
 800466a:	00e2      	lsls	r2, r4, #3
 800466c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004670:	00d9      	lsls	r1, r3, #3
 8004672:	460b      	mov	r3, r1
 8004674:	4614      	mov	r4, r2
 8004676:	195b      	adds	r3, r3, r5
 8004678:	eb44 0406 	adc.w	r4, r4, r6
 800467c:	f04f 0100 	mov.w	r1, #0
 8004680:	f04f 0200 	mov.w	r2, #0
 8004684:	02a2      	lsls	r2, r4, #10
 8004686:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800468a:	0299      	lsls	r1, r3, #10
 800468c:	460b      	mov	r3, r1
 800468e:	4614      	mov	r4, r2
 8004690:	4618      	mov	r0, r3
 8004692:	4621      	mov	r1, r4
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f04f 0400 	mov.w	r4, #0
 800469a:	461a      	mov	r2, r3
 800469c:	4623      	mov	r3, r4
 800469e:	f7fc fa83 	bl	8000ba8 <__aeabi_uldivmod>
 80046a2:	4603      	mov	r3, r0
 80046a4:	460c      	mov	r4, r1
 80046a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046a8:	4b0a      	ldr	r3, [pc, #40]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	0c1b      	lsrs	r3, r3, #16
 80046ae:	f003 0303 	and.w	r3, r3, #3
 80046b2:	3301      	adds	r3, #1
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c0:	60bb      	str	r3, [r7, #8]
      break;
 80046c2:	e002      	b.n	80046ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046c4:	4b04      	ldr	r3, [pc, #16]	; (80046d8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80046c6:	60bb      	str	r3, [r7, #8]
      break;
 80046c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046ca:	68bb      	ldr	r3, [r7, #8]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046d4:	40023800 	.word	0x40023800
 80046d8:	00f42400 	.word	0x00f42400
 80046dc:	007a1200 	.word	0x007a1200

080046e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046e4:	4b03      	ldr	r3, [pc, #12]	; (80046f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80046e6:	681b      	ldr	r3, [r3, #0]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	20000000 	.word	0x20000000

080046f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046fc:	f7ff fff0 	bl	80046e0 <HAL_RCC_GetHCLKFreq>
 8004700:	4601      	mov	r1, r0
 8004702:	4b05      	ldr	r3, [pc, #20]	; (8004718 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	0a9b      	lsrs	r3, r3, #10
 8004708:	f003 0307 	and.w	r3, r3, #7
 800470c:	4a03      	ldr	r2, [pc, #12]	; (800471c <HAL_RCC_GetPCLK1Freq+0x24>)
 800470e:	5cd3      	ldrb	r3, [r2, r3]
 8004710:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004714:	4618      	mov	r0, r3
 8004716:	bd80      	pop	{r7, pc}
 8004718:	40023800 	.word	0x40023800
 800471c:	08009770 	.word	0x08009770

08004720 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004724:	f7ff ffdc 	bl	80046e0 <HAL_RCC_GetHCLKFreq>
 8004728:	4601      	mov	r1, r0
 800472a:	4b05      	ldr	r3, [pc, #20]	; (8004740 <HAL_RCC_GetPCLK2Freq+0x20>)
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	0b5b      	lsrs	r3, r3, #13
 8004730:	f003 0307 	and.w	r3, r3, #7
 8004734:	4a03      	ldr	r2, [pc, #12]	; (8004744 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004736:	5cd3      	ldrb	r3, [r2, r3]
 8004738:	fa21 f303 	lsr.w	r3, r1, r3
}
 800473c:	4618      	mov	r0, r3
 800473e:	bd80      	pop	{r7, pc}
 8004740:	40023800 	.word	0x40023800
 8004744:	08009770 	.word	0x08009770

08004748 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e01d      	b.n	8004796 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d106      	bne.n	8004774 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7fd fe56 	bl	8002420 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2202      	movs	r2, #2
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	3304      	adds	r3, #4
 8004784:	4619      	mov	r1, r3
 8004786:	4610      	mov	r0, r2
 8004788:	f000 f9fa 	bl	8004b80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3708      	adds	r7, #8
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b082      	sub	sp, #8
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d101      	bne.n	80047b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e01d      	b.n	80047ec <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d106      	bne.n	80047ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 f815 	bl	80047f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2202      	movs	r2, #2
 80047ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	3304      	adds	r3, #4
 80047da:	4619      	mov	r1, r3
 80047dc:	4610      	mov	r0, r2
 80047de:	f000 f9cf 	bl	8004b80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2201      	movs	r2, #1
 8004818:	6839      	ldr	r1, [r7, #0]
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fc9a 	bl	8005154 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a15      	ldr	r2, [pc, #84]	; (800487c <HAL_TIM_PWM_Start+0x74>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d004      	beq.n	8004834 <HAL_TIM_PWM_Start+0x2c>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a14      	ldr	r2, [pc, #80]	; (8004880 <HAL_TIM_PWM_Start+0x78>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d101      	bne.n	8004838 <HAL_TIM_PWM_Start+0x30>
 8004834:	2301      	movs	r3, #1
 8004836:	e000      	b.n	800483a <HAL_TIM_PWM_Start+0x32>
 8004838:	2300      	movs	r3, #0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d007      	beq.n	800484e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800484c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2b06      	cmp	r3, #6
 800485e:	d007      	beq.n	8004870 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 0201 	orr.w	r2, r2, #1
 800486e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	40010000 	.word	0x40010000
 8004880:	40010400 	.word	0x40010400

08004884 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004896:	2b01      	cmp	r3, #1
 8004898:	d101      	bne.n	800489e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800489a:	2302      	movs	r3, #2
 800489c:	e0b4      	b.n	8004a08 <HAL_TIM_PWM_ConfigChannel+0x184>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2202      	movs	r2, #2
 80048aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b0c      	cmp	r3, #12
 80048b2:	f200 809f 	bhi.w	80049f4 <HAL_TIM_PWM_ConfigChannel+0x170>
 80048b6:	a201      	add	r2, pc, #4	; (adr r2, 80048bc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80048b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048bc:	080048f1 	.word	0x080048f1
 80048c0:	080049f5 	.word	0x080049f5
 80048c4:	080049f5 	.word	0x080049f5
 80048c8:	080049f5 	.word	0x080049f5
 80048cc:	08004931 	.word	0x08004931
 80048d0:	080049f5 	.word	0x080049f5
 80048d4:	080049f5 	.word	0x080049f5
 80048d8:	080049f5 	.word	0x080049f5
 80048dc:	08004973 	.word	0x08004973
 80048e0:	080049f5 	.word	0x080049f5
 80048e4:	080049f5 	.word	0x080049f5
 80048e8:	080049f5 	.word	0x080049f5
 80048ec:	080049b3 	.word	0x080049b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68b9      	ldr	r1, [r7, #8]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 f9e2 	bl	8004cc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	699a      	ldr	r2, [r3, #24]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0208 	orr.w	r2, r2, #8
 800490a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	699a      	ldr	r2, [r3, #24]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 0204 	bic.w	r2, r2, #4
 800491a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6999      	ldr	r1, [r3, #24]
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	691a      	ldr	r2, [r3, #16]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	430a      	orrs	r2, r1
 800492c:	619a      	str	r2, [r3, #24]
      break;
 800492e:	e062      	b.n	80049f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68b9      	ldr	r1, [r7, #8]
 8004936:	4618      	mov	r0, r3
 8004938:	f000 fa32 	bl	8004da0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	699a      	ldr	r2, [r3, #24]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800494a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	699a      	ldr	r2, [r3, #24]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800495a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6999      	ldr	r1, [r3, #24]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	021a      	lsls	r2, r3, #8
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	619a      	str	r2, [r3, #24]
      break;
 8004970:	e041      	b.n	80049f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68b9      	ldr	r1, [r7, #8]
 8004978:	4618      	mov	r0, r3
 800497a:	f000 fa87 	bl	8004e8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	69da      	ldr	r2, [r3, #28]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f042 0208 	orr.w	r2, r2, #8
 800498c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	69da      	ldr	r2, [r3, #28]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 0204 	bic.w	r2, r2, #4
 800499c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	69d9      	ldr	r1, [r3, #28]
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	691a      	ldr	r2, [r3, #16]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	61da      	str	r2, [r3, #28]
      break;
 80049b0:	e021      	b.n	80049f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68b9      	ldr	r1, [r7, #8]
 80049b8:	4618      	mov	r0, r3
 80049ba:	f000 fadb 	bl	8004f74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	69da      	ldr	r2, [r3, #28]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	69da      	ldr	r2, [r3, #28]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	69d9      	ldr	r1, [r3, #28]
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	021a      	lsls	r2, r3, #8
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	61da      	str	r2, [r3, #28]
      break;
 80049f2:	e000      	b.n	80049f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80049f4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d101      	bne.n	8004a28 <HAL_TIM_ConfigClockSource+0x18>
 8004a24:	2302      	movs	r3, #2
 8004a26:	e0a6      	b.n	8004b76 <HAL_TIM_ConfigClockSource+0x166>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2b40      	cmp	r3, #64	; 0x40
 8004a5e:	d067      	beq.n	8004b30 <HAL_TIM_ConfigClockSource+0x120>
 8004a60:	2b40      	cmp	r3, #64	; 0x40
 8004a62:	d80b      	bhi.n	8004a7c <HAL_TIM_ConfigClockSource+0x6c>
 8004a64:	2b10      	cmp	r3, #16
 8004a66:	d073      	beq.n	8004b50 <HAL_TIM_ConfigClockSource+0x140>
 8004a68:	2b10      	cmp	r3, #16
 8004a6a:	d802      	bhi.n	8004a72 <HAL_TIM_ConfigClockSource+0x62>
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d06f      	beq.n	8004b50 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004a70:	e078      	b.n	8004b64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004a72:	2b20      	cmp	r3, #32
 8004a74:	d06c      	beq.n	8004b50 <HAL_TIM_ConfigClockSource+0x140>
 8004a76:	2b30      	cmp	r3, #48	; 0x30
 8004a78:	d06a      	beq.n	8004b50 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004a7a:	e073      	b.n	8004b64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004a7c:	2b70      	cmp	r3, #112	; 0x70
 8004a7e:	d00d      	beq.n	8004a9c <HAL_TIM_ConfigClockSource+0x8c>
 8004a80:	2b70      	cmp	r3, #112	; 0x70
 8004a82:	d804      	bhi.n	8004a8e <HAL_TIM_ConfigClockSource+0x7e>
 8004a84:	2b50      	cmp	r3, #80	; 0x50
 8004a86:	d033      	beq.n	8004af0 <HAL_TIM_ConfigClockSource+0xe0>
 8004a88:	2b60      	cmp	r3, #96	; 0x60
 8004a8a:	d041      	beq.n	8004b10 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004a8c:	e06a      	b.n	8004b64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a92:	d066      	beq.n	8004b62 <HAL_TIM_ConfigClockSource+0x152>
 8004a94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a98:	d017      	beq.n	8004aca <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004a9a:	e063      	b.n	8004b64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6818      	ldr	r0, [r3, #0]
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	6899      	ldr	r1, [r3, #8]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	f000 fb32 	bl	8005114 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004abe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	609a      	str	r2, [r3, #8]
      break;
 8004ac8:	e04c      	b.n	8004b64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6818      	ldr	r0, [r3, #0]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	6899      	ldr	r1, [r3, #8]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	f000 fb1b 	bl	8005114 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004aec:	609a      	str	r2, [r3, #8]
      break;
 8004aee:	e039      	b.n	8004b64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6818      	ldr	r0, [r3, #0]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	6859      	ldr	r1, [r3, #4]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	461a      	mov	r2, r3
 8004afe:	f000 fa8f 	bl	8005020 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2150      	movs	r1, #80	; 0x50
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f000 fae8 	bl	80050de <TIM_ITRx_SetConfig>
      break;
 8004b0e:	e029      	b.n	8004b64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6818      	ldr	r0, [r3, #0]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	6859      	ldr	r1, [r3, #4]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	f000 faae 	bl	800507e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2160      	movs	r1, #96	; 0x60
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f000 fad8 	bl	80050de <TIM_ITRx_SetConfig>
      break;
 8004b2e:	e019      	b.n	8004b64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6818      	ldr	r0, [r3, #0]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	6859      	ldr	r1, [r3, #4]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	f000 fa6f 	bl	8005020 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2140      	movs	r1, #64	; 0x40
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f000 fac8 	bl	80050de <TIM_ITRx_SetConfig>
      break;
 8004b4e:	e009      	b.n	8004b64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4619      	mov	r1, r3
 8004b5a:	4610      	mov	r0, r2
 8004b5c:	f000 fabf 	bl	80050de <TIM_ITRx_SetConfig>
      break;
 8004b60:	e000      	b.n	8004b64 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004b62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
	...

08004b80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a40      	ldr	r2, [pc, #256]	; (8004c94 <TIM_Base_SetConfig+0x114>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d013      	beq.n	8004bc0 <TIM_Base_SetConfig+0x40>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b9e:	d00f      	beq.n	8004bc0 <TIM_Base_SetConfig+0x40>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a3d      	ldr	r2, [pc, #244]	; (8004c98 <TIM_Base_SetConfig+0x118>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d00b      	beq.n	8004bc0 <TIM_Base_SetConfig+0x40>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a3c      	ldr	r2, [pc, #240]	; (8004c9c <TIM_Base_SetConfig+0x11c>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d007      	beq.n	8004bc0 <TIM_Base_SetConfig+0x40>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a3b      	ldr	r2, [pc, #236]	; (8004ca0 <TIM_Base_SetConfig+0x120>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d003      	beq.n	8004bc0 <TIM_Base_SetConfig+0x40>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a3a      	ldr	r2, [pc, #232]	; (8004ca4 <TIM_Base_SetConfig+0x124>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d108      	bne.n	8004bd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a2f      	ldr	r2, [pc, #188]	; (8004c94 <TIM_Base_SetConfig+0x114>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d02b      	beq.n	8004c32 <TIM_Base_SetConfig+0xb2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004be0:	d027      	beq.n	8004c32 <TIM_Base_SetConfig+0xb2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a2c      	ldr	r2, [pc, #176]	; (8004c98 <TIM_Base_SetConfig+0x118>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d023      	beq.n	8004c32 <TIM_Base_SetConfig+0xb2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a2b      	ldr	r2, [pc, #172]	; (8004c9c <TIM_Base_SetConfig+0x11c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d01f      	beq.n	8004c32 <TIM_Base_SetConfig+0xb2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a2a      	ldr	r2, [pc, #168]	; (8004ca0 <TIM_Base_SetConfig+0x120>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d01b      	beq.n	8004c32 <TIM_Base_SetConfig+0xb2>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a29      	ldr	r2, [pc, #164]	; (8004ca4 <TIM_Base_SetConfig+0x124>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d017      	beq.n	8004c32 <TIM_Base_SetConfig+0xb2>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a28      	ldr	r2, [pc, #160]	; (8004ca8 <TIM_Base_SetConfig+0x128>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d013      	beq.n	8004c32 <TIM_Base_SetConfig+0xb2>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a27      	ldr	r2, [pc, #156]	; (8004cac <TIM_Base_SetConfig+0x12c>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d00f      	beq.n	8004c32 <TIM_Base_SetConfig+0xb2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a26      	ldr	r2, [pc, #152]	; (8004cb0 <TIM_Base_SetConfig+0x130>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d00b      	beq.n	8004c32 <TIM_Base_SetConfig+0xb2>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a25      	ldr	r2, [pc, #148]	; (8004cb4 <TIM_Base_SetConfig+0x134>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d007      	beq.n	8004c32 <TIM_Base_SetConfig+0xb2>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a24      	ldr	r2, [pc, #144]	; (8004cb8 <TIM_Base_SetConfig+0x138>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d003      	beq.n	8004c32 <TIM_Base_SetConfig+0xb2>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a23      	ldr	r2, [pc, #140]	; (8004cbc <TIM_Base_SetConfig+0x13c>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d108      	bne.n	8004c44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	689a      	ldr	r2, [r3, #8]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a0a      	ldr	r2, [pc, #40]	; (8004c94 <TIM_Base_SetConfig+0x114>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d003      	beq.n	8004c78 <TIM_Base_SetConfig+0xf8>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a0c      	ldr	r2, [pc, #48]	; (8004ca4 <TIM_Base_SetConfig+0x124>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d103      	bne.n	8004c80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	691a      	ldr	r2, [r3, #16]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	615a      	str	r2, [r3, #20]
}
 8004c86:	bf00      	nop
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	40010000 	.word	0x40010000
 8004c98:	40000400 	.word	0x40000400
 8004c9c:	40000800 	.word	0x40000800
 8004ca0:	40000c00 	.word	0x40000c00
 8004ca4:	40010400 	.word	0x40010400
 8004ca8:	40014000 	.word	0x40014000
 8004cac:	40014400 	.word	0x40014400
 8004cb0:	40014800 	.word	0x40014800
 8004cb4:	40001800 	.word	0x40001800
 8004cb8:	40001c00 	.word	0x40001c00
 8004cbc:	40002000 	.word	0x40002000

08004cc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b087      	sub	sp, #28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	f023 0201 	bic.w	r2, r3, #1
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f023 0303 	bic.w	r3, r3, #3
 8004cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f023 0302 	bic.w	r3, r3, #2
 8004d08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a20      	ldr	r2, [pc, #128]	; (8004d98 <TIM_OC1_SetConfig+0xd8>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d003      	beq.n	8004d24 <TIM_OC1_SetConfig+0x64>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a1f      	ldr	r2, [pc, #124]	; (8004d9c <TIM_OC1_SetConfig+0xdc>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d10c      	bne.n	8004d3e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	f023 0308 	bic.w	r3, r3, #8
 8004d2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f023 0304 	bic.w	r3, r3, #4
 8004d3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a15      	ldr	r2, [pc, #84]	; (8004d98 <TIM_OC1_SetConfig+0xd8>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d003      	beq.n	8004d4e <TIM_OC1_SetConfig+0x8e>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a14      	ldr	r2, [pc, #80]	; (8004d9c <TIM_OC1_SetConfig+0xdc>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d111      	bne.n	8004d72 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	621a      	str	r2, [r3, #32]
}
 8004d8c:	bf00      	nop
 8004d8e:	371c      	adds	r7, #28
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	40010000 	.word	0x40010000
 8004d9c:	40010400 	.word	0x40010400

08004da0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b087      	sub	sp, #28
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	f023 0210 	bic.w	r2, r3, #16
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	021b      	lsls	r3, r3, #8
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f023 0320 	bic.w	r3, r3, #32
 8004dea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	011b      	lsls	r3, r3, #4
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a22      	ldr	r2, [pc, #136]	; (8004e84 <TIM_OC2_SetConfig+0xe4>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d003      	beq.n	8004e08 <TIM_OC2_SetConfig+0x68>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a21      	ldr	r2, [pc, #132]	; (8004e88 <TIM_OC2_SetConfig+0xe8>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d10d      	bne.n	8004e24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	011b      	lsls	r3, r3, #4
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a17      	ldr	r2, [pc, #92]	; (8004e84 <TIM_OC2_SetConfig+0xe4>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d003      	beq.n	8004e34 <TIM_OC2_SetConfig+0x94>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a16      	ldr	r2, [pc, #88]	; (8004e88 <TIM_OC2_SetConfig+0xe8>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d113      	bne.n	8004e5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	621a      	str	r2, [r3, #32]
}
 8004e76:	bf00      	nop
 8004e78:	371c      	adds	r7, #28
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	40010000 	.word	0x40010000
 8004e88:	40010400 	.word	0x40010400

08004e8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b087      	sub	sp, #28
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f023 0303 	bic.w	r3, r3, #3
 8004ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ed4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	021b      	lsls	r3, r3, #8
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a21      	ldr	r2, [pc, #132]	; (8004f6c <TIM_OC3_SetConfig+0xe0>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d003      	beq.n	8004ef2 <TIM_OC3_SetConfig+0x66>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a20      	ldr	r2, [pc, #128]	; (8004f70 <TIM_OC3_SetConfig+0xe4>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d10d      	bne.n	8004f0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ef8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	021b      	lsls	r3, r3, #8
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a16      	ldr	r2, [pc, #88]	; (8004f6c <TIM_OC3_SetConfig+0xe0>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d003      	beq.n	8004f1e <TIM_OC3_SetConfig+0x92>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a15      	ldr	r2, [pc, #84]	; (8004f70 <TIM_OC3_SetConfig+0xe4>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d113      	bne.n	8004f46 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	011b      	lsls	r3, r3, #4
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	011b      	lsls	r3, r3, #4
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	621a      	str	r2, [r3, #32]
}
 8004f60:	bf00      	nop
 8004f62:	371c      	adds	r7, #28
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	40010000 	.word	0x40010000
 8004f70:	40010400 	.word	0x40010400

08004f74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	021b      	lsls	r3, r3, #8
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	031b      	lsls	r3, r3, #12
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a12      	ldr	r2, [pc, #72]	; (8005018 <TIM_OC4_SetConfig+0xa4>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d003      	beq.n	8004fdc <TIM_OC4_SetConfig+0x68>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a11      	ldr	r2, [pc, #68]	; (800501c <TIM_OC4_SetConfig+0xa8>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d109      	bne.n	8004ff0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fe2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	019b      	lsls	r3, r3, #6
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	621a      	str	r2, [r3, #32]
}
 800500a:	bf00      	nop
 800500c:	371c      	adds	r7, #28
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	40010000 	.word	0x40010000
 800501c:	40010400 	.word	0x40010400

08005020 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	f023 0201 	bic.w	r2, r3, #1
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800504a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	011b      	lsls	r3, r3, #4
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	4313      	orrs	r3, r2
 8005054:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f023 030a 	bic.w	r3, r3, #10
 800505c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	4313      	orrs	r3, r2
 8005064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	621a      	str	r2, [r3, #32]
}
 8005072:	bf00      	nop
 8005074:	371c      	adds	r7, #28
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800507e:	b480      	push	{r7}
 8005080:	b087      	sub	sp, #28
 8005082:	af00      	add	r7, sp, #0
 8005084:	60f8      	str	r0, [r7, #12]
 8005086:	60b9      	str	r1, [r7, #8]
 8005088:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	f023 0210 	bic.w	r2, r3, #16
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	031b      	lsls	r3, r3, #12
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	011b      	lsls	r3, r3, #4
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	621a      	str	r2, [r3, #32]
}
 80050d2:	bf00      	nop
 80050d4:	371c      	adds	r7, #28
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050de:	b480      	push	{r7}
 80050e0:	b085      	sub	sp, #20
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	f043 0307 	orr.w	r3, r3, #7
 8005100:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	609a      	str	r2, [r3, #8]
}
 8005108:	bf00      	nop
 800510a:	3714      	adds	r7, #20
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005114:	b480      	push	{r7}
 8005116:	b087      	sub	sp, #28
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
 8005120:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800512e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	021a      	lsls	r2, r3, #8
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	431a      	orrs	r2, r3
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	4313      	orrs	r3, r2
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	4313      	orrs	r3, r2
 8005140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	609a      	str	r2, [r3, #8]
}
 8005148:	bf00      	nop
 800514a:	371c      	adds	r7, #28
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005154:	b480      	push	{r7}
 8005156:	b087      	sub	sp, #28
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	f003 031f 	and.w	r3, r3, #31
 8005166:	2201      	movs	r2, #1
 8005168:	fa02 f303 	lsl.w	r3, r2, r3
 800516c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6a1a      	ldr	r2, [r3, #32]
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	43db      	mvns	r3, r3
 8005176:	401a      	ands	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6a1a      	ldr	r2, [r3, #32]
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f003 031f 	and.w	r3, r3, #31
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	fa01 f303 	lsl.w	r3, r1, r3
 800518c:	431a      	orrs	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	621a      	str	r2, [r3, #32]
}
 8005192:	bf00      	nop
 8005194:	371c      	adds	r7, #28
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
	...

080051a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d101      	bne.n	80051b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051b4:	2302      	movs	r3, #2
 80051b6:	e05a      	b.n	800526e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2202      	movs	r2, #2
 80051c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a21      	ldr	r2, [pc, #132]	; (800527c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d022      	beq.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005204:	d01d      	beq.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a1d      	ldr	r2, [pc, #116]	; (8005280 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d018      	beq.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a1b      	ldr	r2, [pc, #108]	; (8005284 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d013      	beq.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a1a      	ldr	r2, [pc, #104]	; (8005288 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d00e      	beq.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a18      	ldr	r2, [pc, #96]	; (800528c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d009      	beq.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a17      	ldr	r2, [pc, #92]	; (8005290 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d004      	beq.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a15      	ldr	r2, [pc, #84]	; (8005294 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d10c      	bne.n	800525c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005248:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	4313      	orrs	r3, r2
 8005252:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	40010000 	.word	0x40010000
 8005280:	40000400 	.word	0x40000400
 8005284:	40000800 	.word	0x40000800
 8005288:	40000c00 	.word	0x40000c00
 800528c:	40010400 	.word	0x40010400
 8005290:	40014000 	.word	0x40014000
 8005294:	40001800 	.word	0x40001800

08005298 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e03f      	b.n	800532a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d106      	bne.n	80052c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7fd f968 	bl	8002594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2224      	movs	r2, #36	; 0x24
 80052c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68da      	ldr	r2, [r3, #12]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 fb97 	bl	8005a10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	691a      	ldr	r2, [r3, #16]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	695a      	ldr	r2, [r3, #20]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005300:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68da      	ldr	r2, [r3, #12]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005310:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2220      	movs	r2, #32
 800531c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2220      	movs	r2, #32
 8005324:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3708      	adds	r7, #8
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b088      	sub	sp, #32
 8005336:	af02      	add	r7, sp, #8
 8005338:	60f8      	str	r0, [r7, #12]
 800533a:	60b9      	str	r1, [r7, #8]
 800533c:	603b      	str	r3, [r7, #0]
 800533e:	4613      	mov	r3, r2
 8005340:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005342:	2300      	movs	r3, #0
 8005344:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b20      	cmp	r3, #32
 8005350:	f040 8083 	bne.w	800545a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d002      	beq.n	8005360 <HAL_UART_Transmit+0x2e>
 800535a:	88fb      	ldrh	r3, [r7, #6]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d101      	bne.n	8005364 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e07b      	b.n	800545c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800536a:	2b01      	cmp	r3, #1
 800536c:	d101      	bne.n	8005372 <HAL_UART_Transmit+0x40>
 800536e:	2302      	movs	r3, #2
 8005370:	e074      	b.n	800545c <HAL_UART_Transmit+0x12a>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2221      	movs	r2, #33	; 0x21
 8005384:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005388:	f7fd fb1e 	bl	80029c8 <HAL_GetTick>
 800538c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	88fa      	ldrh	r2, [r7, #6]
 8005392:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	88fa      	ldrh	r2, [r7, #6]
 8005398:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80053a2:	e042      	b.n	800542a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	3b01      	subs	r3, #1
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ba:	d122      	bne.n	8005402 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	2200      	movs	r2, #0
 80053c4:	2180      	movs	r1, #128	; 0x80
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f000 f9b6 	bl	8005738 <UART_WaitOnFlagUntilTimeout>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e042      	b.n	800545c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	881b      	ldrh	r3, [r3, #0]
 80053de:	461a      	mov	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053e8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d103      	bne.n	80053fa <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	3302      	adds	r3, #2
 80053f6:	60bb      	str	r3, [r7, #8]
 80053f8:	e017      	b.n	800542a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	3301      	adds	r3, #1
 80053fe:	60bb      	str	r3, [r7, #8]
 8005400:	e013      	b.n	800542a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	2200      	movs	r2, #0
 800540a:	2180      	movs	r1, #128	; 0x80
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f000 f993 	bl	8005738 <UART_WaitOnFlagUntilTimeout>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e01f      	b.n	800545c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	1c5a      	adds	r2, r3, #1
 8005420:	60ba      	str	r2, [r7, #8]
 8005422:	781a      	ldrb	r2, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800542e:	b29b      	uxth	r3, r3
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1b7      	bne.n	80053a4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	9300      	str	r3, [sp, #0]
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	2200      	movs	r2, #0
 800543c:	2140      	movs	r1, #64	; 0x40
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f000 f97a 	bl	8005738 <UART_WaitOnFlagUntilTimeout>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e006      	b.n	800545c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2220      	movs	r2, #32
 8005452:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005456:	2300      	movs	r3, #0
 8005458:	e000      	b.n	800545c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800545a:	2302      	movs	r3, #2
  }
}
 800545c:	4618      	mov	r0, r3
 800545e:	3718      	adds	r7, #24
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	4613      	mov	r3, r2
 8005470:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b20      	cmp	r3, #32
 800547c:	d140      	bne.n	8005500 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d002      	beq.n	800548a <HAL_UART_Receive_IT+0x26>
 8005484:	88fb      	ldrh	r3, [r7, #6]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e039      	b.n	8005502 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005494:	2b01      	cmp	r3, #1
 8005496:	d101      	bne.n	800549c <HAL_UART_Receive_IT+0x38>
 8005498:	2302      	movs	r3, #2
 800549a:	e032      	b.n	8005502 <HAL_UART_Receive_IT+0x9e>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	88fa      	ldrh	r2, [r7, #6]
 80054ae:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	88fa      	ldrh	r2, [r7, #6]
 80054b4:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2200      	movs	r2, #0
 80054ba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2222      	movs	r2, #34	; 0x22
 80054c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68da      	ldr	r2, [r3, #12]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054da:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	695a      	ldr	r2, [r3, #20]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f042 0201 	orr.w	r2, r2, #1
 80054ea:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68da      	ldr	r2, [r3, #12]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f042 0220 	orr.w	r2, r2, #32
 80054fa:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80054fc:	2300      	movs	r3, #0
 80054fe:	e000      	b.n	8005502 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005500:	2302      	movs	r3, #2
  }
}
 8005502:	4618      	mov	r0, r3
 8005504:	3714      	adds	r7, #20
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
	...

08005510 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b088      	sub	sp, #32
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005530:	2300      	movs	r3, #0
 8005532:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005534:	2300      	movs	r3, #0
 8005536:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	f003 030f 	and.w	r3, r3, #15
 800553e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10d      	bne.n	8005562 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	f003 0320 	and.w	r3, r3, #32
 800554c:	2b00      	cmp	r3, #0
 800554e:	d008      	beq.n	8005562 <HAL_UART_IRQHandler+0x52>
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	f003 0320 	and.w	r3, r3, #32
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f9d6 	bl	800590c <UART_Receive_IT>
      return;
 8005560:	e0d1      	b.n	8005706 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	2b00      	cmp	r3, #0
 8005566:	f000 80b0 	beq.w	80056ca <HAL_UART_IRQHandler+0x1ba>
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f003 0301 	and.w	r3, r3, #1
 8005570:	2b00      	cmp	r3, #0
 8005572:	d105      	bne.n	8005580 <HAL_UART_IRQHandler+0x70>
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800557a:	2b00      	cmp	r3, #0
 800557c:	f000 80a5 	beq.w	80056ca <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00a      	beq.n	80055a0 <HAL_UART_IRQHandler+0x90>
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005590:	2b00      	cmp	r3, #0
 8005592:	d005      	beq.n	80055a0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005598:	f043 0201 	orr.w	r2, r3, #1
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	f003 0304 	and.w	r3, r3, #4
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00a      	beq.n	80055c0 <HAL_UART_IRQHandler+0xb0>
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d005      	beq.n	80055c0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b8:	f043 0202 	orr.w	r2, r3, #2
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <HAL_UART_IRQHandler+0xd0>
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f003 0301 	and.w	r3, r3, #1
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d005      	beq.n	80055e0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d8:	f043 0204 	orr.w	r2, r3, #4
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	f003 0308 	and.w	r3, r3, #8
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00f      	beq.n	800560a <HAL_UART_IRQHandler+0xfa>
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	f003 0320 	and.w	r3, r3, #32
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d104      	bne.n	80055fe <HAL_UART_IRQHandler+0xee>
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d005      	beq.n	800560a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005602:	f043 0208 	orr.w	r2, r3, #8
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800560e:	2b00      	cmp	r3, #0
 8005610:	d078      	beq.n	8005704 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	f003 0320 	and.w	r3, r3, #32
 8005618:	2b00      	cmp	r3, #0
 800561a:	d007      	beq.n	800562c <HAL_UART_IRQHandler+0x11c>
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	f003 0320 	and.w	r3, r3, #32
 8005622:	2b00      	cmp	r3, #0
 8005624:	d002      	beq.n	800562c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f970 	bl	800590c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005636:	2b40      	cmp	r3, #64	; 0x40
 8005638:	bf0c      	ite	eq
 800563a:	2301      	moveq	r3, #1
 800563c:	2300      	movne	r3, #0
 800563e:	b2db      	uxtb	r3, r3
 8005640:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005646:	f003 0308 	and.w	r3, r3, #8
 800564a:	2b00      	cmp	r3, #0
 800564c:	d102      	bne.n	8005654 <HAL_UART_IRQHandler+0x144>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d031      	beq.n	80056b8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 f8b9 	bl	80057cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005664:	2b40      	cmp	r3, #64	; 0x40
 8005666:	d123      	bne.n	80056b0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	695a      	ldr	r2, [r3, #20]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005676:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567c:	2b00      	cmp	r3, #0
 800567e:	d013      	beq.n	80056a8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005684:	4a21      	ldr	r2, [pc, #132]	; (800570c <HAL_UART_IRQHandler+0x1fc>)
 8005686:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800568c:	4618      	mov	r0, r3
 800568e:	f7fd ffd5 	bl	800363c <HAL_DMA_Abort_IT>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d016      	beq.n	80056c6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800569c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80056a2:	4610      	mov	r0, r2
 80056a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056a6:	e00e      	b.n	80056c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 f83b 	bl	8005724 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056ae:	e00a      	b.n	80056c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 f837 	bl	8005724 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056b6:	e006      	b.n	80056c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f833 	bl	8005724 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80056c4:	e01e      	b.n	8005704 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056c6:	bf00      	nop
    return;
 80056c8:	e01c      	b.n	8005704 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d008      	beq.n	80056e6 <HAL_UART_IRQHandler+0x1d6>
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d003      	beq.n	80056e6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f8a6 	bl	8005830 <UART_Transmit_IT>
    return;
 80056e4:	e00f      	b.n	8005706 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00a      	beq.n	8005706 <HAL_UART_IRQHandler+0x1f6>
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d005      	beq.n	8005706 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f8ee 	bl	80058dc <UART_EndTransmit_IT>
    return;
 8005700:	bf00      	nop
 8005702:	e000      	b.n	8005706 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005704:	bf00      	nop
  }
}
 8005706:	3720      	adds	r7, #32
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	08005809 	.word	0x08005809

08005710 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	603b      	str	r3, [r7, #0]
 8005744:	4613      	mov	r3, r2
 8005746:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005748:	e02c      	b.n	80057a4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005750:	d028      	beq.n	80057a4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d007      	beq.n	8005768 <UART_WaitOnFlagUntilTimeout+0x30>
 8005758:	f7fd f936 	bl	80029c8 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	69ba      	ldr	r2, [r7, #24]
 8005764:	429a      	cmp	r2, r3
 8005766:	d21d      	bcs.n	80057a4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68da      	ldr	r2, [r3, #12]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005776:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	695a      	ldr	r2, [r3, #20]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 0201 	bic.w	r2, r2, #1
 8005786:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2220      	movs	r2, #32
 800578c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2220      	movs	r2, #32
 8005794:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e00f      	b.n	80057c4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	4013      	ands	r3, r2
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	bf0c      	ite	eq
 80057b4:	2301      	moveq	r3, #1
 80057b6:	2300      	movne	r3, #0
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	461a      	mov	r2, r3
 80057bc:	79fb      	ldrb	r3, [r7, #7]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d0c3      	beq.n	800574a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68da      	ldr	r2, [r3, #12]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80057e2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	695a      	ldr	r2, [r3, #20]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f022 0201 	bic.w	r2, r2, #1
 80057f2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2220      	movs	r2, #32
 80057f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005814:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f7ff ff7e 	bl	8005724 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005828:	bf00      	nop
 800582a:	3710      	adds	r7, #16
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800583e:	b2db      	uxtb	r3, r3
 8005840:	2b21      	cmp	r3, #33	; 0x21
 8005842:	d144      	bne.n	80058ce <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800584c:	d11a      	bne.n	8005884 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	881b      	ldrh	r3, [r3, #0]
 8005858:	461a      	mov	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005862:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d105      	bne.n	8005878 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a1b      	ldr	r3, [r3, #32]
 8005870:	1c9a      	adds	r2, r3, #2
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	621a      	str	r2, [r3, #32]
 8005876:	e00e      	b.n	8005896 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a1b      	ldr	r3, [r3, #32]
 800587c:	1c5a      	adds	r2, r3, #1
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	621a      	str	r2, [r3, #32]
 8005882:	e008      	b.n	8005896 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	1c59      	adds	r1, r3, #1
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	6211      	str	r1, [r2, #32]
 800588e:	781a      	ldrb	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800589a:	b29b      	uxth	r3, r3
 800589c:	3b01      	subs	r3, #1
 800589e:	b29b      	uxth	r3, r3
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	4619      	mov	r1, r3
 80058a4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10f      	bne.n	80058ca <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68da      	ldr	r2, [r3, #12]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058b8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68da      	ldr	r2, [r3, #12]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058c8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80058ca:	2300      	movs	r3, #0
 80058cc:	e000      	b.n	80058d0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80058ce:	2302      	movs	r3, #2
  }
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68da      	ldr	r2, [r3, #12]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058f2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2220      	movs	r2, #32
 80058f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f7ff ff07 	bl	8005710 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3708      	adds	r7, #8
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800591a:	b2db      	uxtb	r3, r3
 800591c:	2b22      	cmp	r3, #34	; 0x22
 800591e:	d171      	bne.n	8005a04 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005928:	d123      	bne.n	8005972 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800592e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10e      	bne.n	8005956 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	b29b      	uxth	r3, r3
 8005940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005944:	b29a      	uxth	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594e:	1c9a      	adds	r2, r3, #2
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	629a      	str	r2, [r3, #40]	; 0x28
 8005954:	e029      	b.n	80059aa <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	b29b      	uxth	r3, r3
 800595e:	b2db      	uxtb	r3, r3
 8005960:	b29a      	uxth	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800596a:	1c5a      	adds	r2, r3, #1
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	629a      	str	r2, [r3, #40]	; 0x28
 8005970:	e01b      	b.n	80059aa <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10a      	bne.n	8005990 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	6858      	ldr	r0, [r3, #4]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005984:	1c59      	adds	r1, r3, #1
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	6291      	str	r1, [r2, #40]	; 0x28
 800598a:	b2c2      	uxtb	r2, r0
 800598c:	701a      	strb	r2, [r3, #0]
 800598e:	e00c      	b.n	80059aa <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	b2da      	uxtb	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599c:	1c58      	adds	r0, r3, #1
 800599e:	6879      	ldr	r1, [r7, #4]
 80059a0:	6288      	str	r0, [r1, #40]	; 0x28
 80059a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80059a6:	b2d2      	uxtb	r2, r2
 80059a8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	3b01      	subs	r3, #1
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	4619      	mov	r1, r3
 80059b8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d120      	bne.n	8005a00 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68da      	ldr	r2, [r3, #12]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 0220 	bic.w	r2, r2, #32
 80059cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68da      	ldr	r2, [r3, #12]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	695a      	ldr	r2, [r3, #20]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f022 0201 	bic.w	r2, r2, #1
 80059ec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2220      	movs	r2, #32
 80059f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7fb ffaa 	bl	8001950 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80059fc:	2300      	movs	r3, #0
 80059fe:	e002      	b.n	8005a06 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005a00:	2300      	movs	r3, #0
 8005a02:	e000      	b.n	8005a06 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005a04:	2302      	movs	r3, #2
  }
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
	...

08005a10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a14:	b085      	sub	sp, #20
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68da      	ldr	r2, [r3, #12]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	689a      	ldr	r2, [r3, #8]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	431a      	orrs	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005a52:	f023 030c 	bic.w	r3, r3, #12
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	6812      	ldr	r2, [r2, #0]
 8005a5a:	68f9      	ldr	r1, [r7, #12]
 8005a5c:	430b      	orrs	r3, r1
 8005a5e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	699a      	ldr	r2, [r3, #24]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a7e:	f040 818b 	bne.w	8005d98 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4ac1      	ldr	r2, [pc, #772]	; (8005d8c <UART_SetConfig+0x37c>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d005      	beq.n	8005a98 <UART_SetConfig+0x88>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4abf      	ldr	r2, [pc, #764]	; (8005d90 <UART_SetConfig+0x380>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	f040 80bd 	bne.w	8005c12 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a98:	f7fe fe42 	bl	8004720 <HAL_RCC_GetPCLK2Freq>
 8005a9c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	461d      	mov	r5, r3
 8005aa2:	f04f 0600 	mov.w	r6, #0
 8005aa6:	46a8      	mov	r8, r5
 8005aa8:	46b1      	mov	r9, r6
 8005aaa:	eb18 0308 	adds.w	r3, r8, r8
 8005aae:	eb49 0409 	adc.w	r4, r9, r9
 8005ab2:	4698      	mov	r8, r3
 8005ab4:	46a1      	mov	r9, r4
 8005ab6:	eb18 0805 	adds.w	r8, r8, r5
 8005aba:	eb49 0906 	adc.w	r9, r9, r6
 8005abe:	f04f 0100 	mov.w	r1, #0
 8005ac2:	f04f 0200 	mov.w	r2, #0
 8005ac6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005aca:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005ace:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005ad2:	4688      	mov	r8, r1
 8005ad4:	4691      	mov	r9, r2
 8005ad6:	eb18 0005 	adds.w	r0, r8, r5
 8005ada:	eb49 0106 	adc.w	r1, r9, r6
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	461d      	mov	r5, r3
 8005ae4:	f04f 0600 	mov.w	r6, #0
 8005ae8:	196b      	adds	r3, r5, r5
 8005aea:	eb46 0406 	adc.w	r4, r6, r6
 8005aee:	461a      	mov	r2, r3
 8005af0:	4623      	mov	r3, r4
 8005af2:	f7fb f859 	bl	8000ba8 <__aeabi_uldivmod>
 8005af6:	4603      	mov	r3, r0
 8005af8:	460c      	mov	r4, r1
 8005afa:	461a      	mov	r2, r3
 8005afc:	4ba5      	ldr	r3, [pc, #660]	; (8005d94 <UART_SetConfig+0x384>)
 8005afe:	fba3 2302 	umull	r2, r3, r3, r2
 8005b02:	095b      	lsrs	r3, r3, #5
 8005b04:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	461d      	mov	r5, r3
 8005b0c:	f04f 0600 	mov.w	r6, #0
 8005b10:	46a9      	mov	r9, r5
 8005b12:	46b2      	mov	sl, r6
 8005b14:	eb19 0309 	adds.w	r3, r9, r9
 8005b18:	eb4a 040a 	adc.w	r4, sl, sl
 8005b1c:	4699      	mov	r9, r3
 8005b1e:	46a2      	mov	sl, r4
 8005b20:	eb19 0905 	adds.w	r9, r9, r5
 8005b24:	eb4a 0a06 	adc.w	sl, sl, r6
 8005b28:	f04f 0100 	mov.w	r1, #0
 8005b2c:	f04f 0200 	mov.w	r2, #0
 8005b30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b34:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b3c:	4689      	mov	r9, r1
 8005b3e:	4692      	mov	sl, r2
 8005b40:	eb19 0005 	adds.w	r0, r9, r5
 8005b44:	eb4a 0106 	adc.w	r1, sl, r6
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	461d      	mov	r5, r3
 8005b4e:	f04f 0600 	mov.w	r6, #0
 8005b52:	196b      	adds	r3, r5, r5
 8005b54:	eb46 0406 	adc.w	r4, r6, r6
 8005b58:	461a      	mov	r2, r3
 8005b5a:	4623      	mov	r3, r4
 8005b5c:	f7fb f824 	bl	8000ba8 <__aeabi_uldivmod>
 8005b60:	4603      	mov	r3, r0
 8005b62:	460c      	mov	r4, r1
 8005b64:	461a      	mov	r2, r3
 8005b66:	4b8b      	ldr	r3, [pc, #556]	; (8005d94 <UART_SetConfig+0x384>)
 8005b68:	fba3 1302 	umull	r1, r3, r3, r2
 8005b6c:	095b      	lsrs	r3, r3, #5
 8005b6e:	2164      	movs	r1, #100	; 0x64
 8005b70:	fb01 f303 	mul.w	r3, r1, r3
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	00db      	lsls	r3, r3, #3
 8005b78:	3332      	adds	r3, #50	; 0x32
 8005b7a:	4a86      	ldr	r2, [pc, #536]	; (8005d94 <UART_SetConfig+0x384>)
 8005b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b80:	095b      	lsrs	r3, r3, #5
 8005b82:	005b      	lsls	r3, r3, #1
 8005b84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b88:	4498      	add	r8, r3
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	461d      	mov	r5, r3
 8005b8e:	f04f 0600 	mov.w	r6, #0
 8005b92:	46a9      	mov	r9, r5
 8005b94:	46b2      	mov	sl, r6
 8005b96:	eb19 0309 	adds.w	r3, r9, r9
 8005b9a:	eb4a 040a 	adc.w	r4, sl, sl
 8005b9e:	4699      	mov	r9, r3
 8005ba0:	46a2      	mov	sl, r4
 8005ba2:	eb19 0905 	adds.w	r9, r9, r5
 8005ba6:	eb4a 0a06 	adc.w	sl, sl, r6
 8005baa:	f04f 0100 	mov.w	r1, #0
 8005bae:	f04f 0200 	mov.w	r2, #0
 8005bb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bb6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005bba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005bbe:	4689      	mov	r9, r1
 8005bc0:	4692      	mov	sl, r2
 8005bc2:	eb19 0005 	adds.w	r0, r9, r5
 8005bc6:	eb4a 0106 	adc.w	r1, sl, r6
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	461d      	mov	r5, r3
 8005bd0:	f04f 0600 	mov.w	r6, #0
 8005bd4:	196b      	adds	r3, r5, r5
 8005bd6:	eb46 0406 	adc.w	r4, r6, r6
 8005bda:	461a      	mov	r2, r3
 8005bdc:	4623      	mov	r3, r4
 8005bde:	f7fa ffe3 	bl	8000ba8 <__aeabi_uldivmod>
 8005be2:	4603      	mov	r3, r0
 8005be4:	460c      	mov	r4, r1
 8005be6:	461a      	mov	r2, r3
 8005be8:	4b6a      	ldr	r3, [pc, #424]	; (8005d94 <UART_SetConfig+0x384>)
 8005bea:	fba3 1302 	umull	r1, r3, r3, r2
 8005bee:	095b      	lsrs	r3, r3, #5
 8005bf0:	2164      	movs	r1, #100	; 0x64
 8005bf2:	fb01 f303 	mul.w	r3, r1, r3
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	00db      	lsls	r3, r3, #3
 8005bfa:	3332      	adds	r3, #50	; 0x32
 8005bfc:	4a65      	ldr	r2, [pc, #404]	; (8005d94 <UART_SetConfig+0x384>)
 8005bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8005c02:	095b      	lsrs	r3, r3, #5
 8005c04:	f003 0207 	and.w	r2, r3, #7
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4442      	add	r2, r8
 8005c0e:	609a      	str	r2, [r3, #8]
 8005c10:	e26f      	b.n	80060f2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c12:	f7fe fd71 	bl	80046f8 <HAL_RCC_GetPCLK1Freq>
 8005c16:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	461d      	mov	r5, r3
 8005c1c:	f04f 0600 	mov.w	r6, #0
 8005c20:	46a8      	mov	r8, r5
 8005c22:	46b1      	mov	r9, r6
 8005c24:	eb18 0308 	adds.w	r3, r8, r8
 8005c28:	eb49 0409 	adc.w	r4, r9, r9
 8005c2c:	4698      	mov	r8, r3
 8005c2e:	46a1      	mov	r9, r4
 8005c30:	eb18 0805 	adds.w	r8, r8, r5
 8005c34:	eb49 0906 	adc.w	r9, r9, r6
 8005c38:	f04f 0100 	mov.w	r1, #0
 8005c3c:	f04f 0200 	mov.w	r2, #0
 8005c40:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005c44:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005c48:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005c4c:	4688      	mov	r8, r1
 8005c4e:	4691      	mov	r9, r2
 8005c50:	eb18 0005 	adds.w	r0, r8, r5
 8005c54:	eb49 0106 	adc.w	r1, r9, r6
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	461d      	mov	r5, r3
 8005c5e:	f04f 0600 	mov.w	r6, #0
 8005c62:	196b      	adds	r3, r5, r5
 8005c64:	eb46 0406 	adc.w	r4, r6, r6
 8005c68:	461a      	mov	r2, r3
 8005c6a:	4623      	mov	r3, r4
 8005c6c:	f7fa ff9c 	bl	8000ba8 <__aeabi_uldivmod>
 8005c70:	4603      	mov	r3, r0
 8005c72:	460c      	mov	r4, r1
 8005c74:	461a      	mov	r2, r3
 8005c76:	4b47      	ldr	r3, [pc, #284]	; (8005d94 <UART_SetConfig+0x384>)
 8005c78:	fba3 2302 	umull	r2, r3, r3, r2
 8005c7c:	095b      	lsrs	r3, r3, #5
 8005c7e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	461d      	mov	r5, r3
 8005c86:	f04f 0600 	mov.w	r6, #0
 8005c8a:	46a9      	mov	r9, r5
 8005c8c:	46b2      	mov	sl, r6
 8005c8e:	eb19 0309 	adds.w	r3, r9, r9
 8005c92:	eb4a 040a 	adc.w	r4, sl, sl
 8005c96:	4699      	mov	r9, r3
 8005c98:	46a2      	mov	sl, r4
 8005c9a:	eb19 0905 	adds.w	r9, r9, r5
 8005c9e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005ca2:	f04f 0100 	mov.w	r1, #0
 8005ca6:	f04f 0200 	mov.w	r2, #0
 8005caa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005cb2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005cb6:	4689      	mov	r9, r1
 8005cb8:	4692      	mov	sl, r2
 8005cba:	eb19 0005 	adds.w	r0, r9, r5
 8005cbe:	eb4a 0106 	adc.w	r1, sl, r6
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	461d      	mov	r5, r3
 8005cc8:	f04f 0600 	mov.w	r6, #0
 8005ccc:	196b      	adds	r3, r5, r5
 8005cce:	eb46 0406 	adc.w	r4, r6, r6
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	4623      	mov	r3, r4
 8005cd6:	f7fa ff67 	bl	8000ba8 <__aeabi_uldivmod>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	460c      	mov	r4, r1
 8005cde:	461a      	mov	r2, r3
 8005ce0:	4b2c      	ldr	r3, [pc, #176]	; (8005d94 <UART_SetConfig+0x384>)
 8005ce2:	fba3 1302 	umull	r1, r3, r3, r2
 8005ce6:	095b      	lsrs	r3, r3, #5
 8005ce8:	2164      	movs	r1, #100	; 0x64
 8005cea:	fb01 f303 	mul.w	r3, r1, r3
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	00db      	lsls	r3, r3, #3
 8005cf2:	3332      	adds	r3, #50	; 0x32
 8005cf4:	4a27      	ldr	r2, [pc, #156]	; (8005d94 <UART_SetConfig+0x384>)
 8005cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cfa:	095b      	lsrs	r3, r3, #5
 8005cfc:	005b      	lsls	r3, r3, #1
 8005cfe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d02:	4498      	add	r8, r3
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	461d      	mov	r5, r3
 8005d08:	f04f 0600 	mov.w	r6, #0
 8005d0c:	46a9      	mov	r9, r5
 8005d0e:	46b2      	mov	sl, r6
 8005d10:	eb19 0309 	adds.w	r3, r9, r9
 8005d14:	eb4a 040a 	adc.w	r4, sl, sl
 8005d18:	4699      	mov	r9, r3
 8005d1a:	46a2      	mov	sl, r4
 8005d1c:	eb19 0905 	adds.w	r9, r9, r5
 8005d20:	eb4a 0a06 	adc.w	sl, sl, r6
 8005d24:	f04f 0100 	mov.w	r1, #0
 8005d28:	f04f 0200 	mov.w	r2, #0
 8005d2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d30:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d34:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d38:	4689      	mov	r9, r1
 8005d3a:	4692      	mov	sl, r2
 8005d3c:	eb19 0005 	adds.w	r0, r9, r5
 8005d40:	eb4a 0106 	adc.w	r1, sl, r6
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	461d      	mov	r5, r3
 8005d4a:	f04f 0600 	mov.w	r6, #0
 8005d4e:	196b      	adds	r3, r5, r5
 8005d50:	eb46 0406 	adc.w	r4, r6, r6
 8005d54:	461a      	mov	r2, r3
 8005d56:	4623      	mov	r3, r4
 8005d58:	f7fa ff26 	bl	8000ba8 <__aeabi_uldivmod>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	460c      	mov	r4, r1
 8005d60:	461a      	mov	r2, r3
 8005d62:	4b0c      	ldr	r3, [pc, #48]	; (8005d94 <UART_SetConfig+0x384>)
 8005d64:	fba3 1302 	umull	r1, r3, r3, r2
 8005d68:	095b      	lsrs	r3, r3, #5
 8005d6a:	2164      	movs	r1, #100	; 0x64
 8005d6c:	fb01 f303 	mul.w	r3, r1, r3
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	00db      	lsls	r3, r3, #3
 8005d74:	3332      	adds	r3, #50	; 0x32
 8005d76:	4a07      	ldr	r2, [pc, #28]	; (8005d94 <UART_SetConfig+0x384>)
 8005d78:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7c:	095b      	lsrs	r3, r3, #5
 8005d7e:	f003 0207 	and.w	r2, r3, #7
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4442      	add	r2, r8
 8005d88:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005d8a:	e1b2      	b.n	80060f2 <UART_SetConfig+0x6e2>
 8005d8c:	40011000 	.word	0x40011000
 8005d90:	40011400 	.word	0x40011400
 8005d94:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4ad7      	ldr	r2, [pc, #860]	; (80060fc <UART_SetConfig+0x6ec>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d005      	beq.n	8005dae <UART_SetConfig+0x39e>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4ad6      	ldr	r2, [pc, #856]	; (8006100 <UART_SetConfig+0x6f0>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	f040 80d1 	bne.w	8005f50 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005dae:	f7fe fcb7 	bl	8004720 <HAL_RCC_GetPCLK2Freq>
 8005db2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	469a      	mov	sl, r3
 8005db8:	f04f 0b00 	mov.w	fp, #0
 8005dbc:	46d0      	mov	r8, sl
 8005dbe:	46d9      	mov	r9, fp
 8005dc0:	eb18 0308 	adds.w	r3, r8, r8
 8005dc4:	eb49 0409 	adc.w	r4, r9, r9
 8005dc8:	4698      	mov	r8, r3
 8005dca:	46a1      	mov	r9, r4
 8005dcc:	eb18 080a 	adds.w	r8, r8, sl
 8005dd0:	eb49 090b 	adc.w	r9, r9, fp
 8005dd4:	f04f 0100 	mov.w	r1, #0
 8005dd8:	f04f 0200 	mov.w	r2, #0
 8005ddc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005de0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005de4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005de8:	4688      	mov	r8, r1
 8005dea:	4691      	mov	r9, r2
 8005dec:	eb1a 0508 	adds.w	r5, sl, r8
 8005df0:	eb4b 0609 	adc.w	r6, fp, r9
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	4619      	mov	r1, r3
 8005dfa:	f04f 0200 	mov.w	r2, #0
 8005dfe:	f04f 0300 	mov.w	r3, #0
 8005e02:	f04f 0400 	mov.w	r4, #0
 8005e06:	0094      	lsls	r4, r2, #2
 8005e08:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e0c:	008b      	lsls	r3, r1, #2
 8005e0e:	461a      	mov	r2, r3
 8005e10:	4623      	mov	r3, r4
 8005e12:	4628      	mov	r0, r5
 8005e14:	4631      	mov	r1, r6
 8005e16:	f7fa fec7 	bl	8000ba8 <__aeabi_uldivmod>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	460c      	mov	r4, r1
 8005e1e:	461a      	mov	r2, r3
 8005e20:	4bb8      	ldr	r3, [pc, #736]	; (8006104 <UART_SetConfig+0x6f4>)
 8005e22:	fba3 2302 	umull	r2, r3, r3, r2
 8005e26:	095b      	lsrs	r3, r3, #5
 8005e28:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	469b      	mov	fp, r3
 8005e30:	f04f 0c00 	mov.w	ip, #0
 8005e34:	46d9      	mov	r9, fp
 8005e36:	46e2      	mov	sl, ip
 8005e38:	eb19 0309 	adds.w	r3, r9, r9
 8005e3c:	eb4a 040a 	adc.w	r4, sl, sl
 8005e40:	4699      	mov	r9, r3
 8005e42:	46a2      	mov	sl, r4
 8005e44:	eb19 090b 	adds.w	r9, r9, fp
 8005e48:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005e4c:	f04f 0100 	mov.w	r1, #0
 8005e50:	f04f 0200 	mov.w	r2, #0
 8005e54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e58:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e5c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e60:	4689      	mov	r9, r1
 8005e62:	4692      	mov	sl, r2
 8005e64:	eb1b 0509 	adds.w	r5, fp, r9
 8005e68:	eb4c 060a 	adc.w	r6, ip, sl
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	4619      	mov	r1, r3
 8005e72:	f04f 0200 	mov.w	r2, #0
 8005e76:	f04f 0300 	mov.w	r3, #0
 8005e7a:	f04f 0400 	mov.w	r4, #0
 8005e7e:	0094      	lsls	r4, r2, #2
 8005e80:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e84:	008b      	lsls	r3, r1, #2
 8005e86:	461a      	mov	r2, r3
 8005e88:	4623      	mov	r3, r4
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	4631      	mov	r1, r6
 8005e8e:	f7fa fe8b 	bl	8000ba8 <__aeabi_uldivmod>
 8005e92:	4603      	mov	r3, r0
 8005e94:	460c      	mov	r4, r1
 8005e96:	461a      	mov	r2, r3
 8005e98:	4b9a      	ldr	r3, [pc, #616]	; (8006104 <UART_SetConfig+0x6f4>)
 8005e9a:	fba3 1302 	umull	r1, r3, r3, r2
 8005e9e:	095b      	lsrs	r3, r3, #5
 8005ea0:	2164      	movs	r1, #100	; 0x64
 8005ea2:	fb01 f303 	mul.w	r3, r1, r3
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	011b      	lsls	r3, r3, #4
 8005eaa:	3332      	adds	r3, #50	; 0x32
 8005eac:	4a95      	ldr	r2, [pc, #596]	; (8006104 <UART_SetConfig+0x6f4>)
 8005eae:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb2:	095b      	lsrs	r3, r3, #5
 8005eb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005eb8:	4498      	add	r8, r3
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	469b      	mov	fp, r3
 8005ebe:	f04f 0c00 	mov.w	ip, #0
 8005ec2:	46d9      	mov	r9, fp
 8005ec4:	46e2      	mov	sl, ip
 8005ec6:	eb19 0309 	adds.w	r3, r9, r9
 8005eca:	eb4a 040a 	adc.w	r4, sl, sl
 8005ece:	4699      	mov	r9, r3
 8005ed0:	46a2      	mov	sl, r4
 8005ed2:	eb19 090b 	adds.w	r9, r9, fp
 8005ed6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005eda:	f04f 0100 	mov.w	r1, #0
 8005ede:	f04f 0200 	mov.w	r2, #0
 8005ee2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ee6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005eea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005eee:	4689      	mov	r9, r1
 8005ef0:	4692      	mov	sl, r2
 8005ef2:	eb1b 0509 	adds.w	r5, fp, r9
 8005ef6:	eb4c 060a 	adc.w	r6, ip, sl
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	4619      	mov	r1, r3
 8005f00:	f04f 0200 	mov.w	r2, #0
 8005f04:	f04f 0300 	mov.w	r3, #0
 8005f08:	f04f 0400 	mov.w	r4, #0
 8005f0c:	0094      	lsls	r4, r2, #2
 8005f0e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f12:	008b      	lsls	r3, r1, #2
 8005f14:	461a      	mov	r2, r3
 8005f16:	4623      	mov	r3, r4
 8005f18:	4628      	mov	r0, r5
 8005f1a:	4631      	mov	r1, r6
 8005f1c:	f7fa fe44 	bl	8000ba8 <__aeabi_uldivmod>
 8005f20:	4603      	mov	r3, r0
 8005f22:	460c      	mov	r4, r1
 8005f24:	461a      	mov	r2, r3
 8005f26:	4b77      	ldr	r3, [pc, #476]	; (8006104 <UART_SetConfig+0x6f4>)
 8005f28:	fba3 1302 	umull	r1, r3, r3, r2
 8005f2c:	095b      	lsrs	r3, r3, #5
 8005f2e:	2164      	movs	r1, #100	; 0x64
 8005f30:	fb01 f303 	mul.w	r3, r1, r3
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	011b      	lsls	r3, r3, #4
 8005f38:	3332      	adds	r3, #50	; 0x32
 8005f3a:	4a72      	ldr	r2, [pc, #456]	; (8006104 <UART_SetConfig+0x6f4>)
 8005f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f40:	095b      	lsrs	r3, r3, #5
 8005f42:	f003 020f 	and.w	r2, r3, #15
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4442      	add	r2, r8
 8005f4c:	609a      	str	r2, [r3, #8]
 8005f4e:	e0d0      	b.n	80060f2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f50:	f7fe fbd2 	bl	80046f8 <HAL_RCC_GetPCLK1Freq>
 8005f54:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	469a      	mov	sl, r3
 8005f5a:	f04f 0b00 	mov.w	fp, #0
 8005f5e:	46d0      	mov	r8, sl
 8005f60:	46d9      	mov	r9, fp
 8005f62:	eb18 0308 	adds.w	r3, r8, r8
 8005f66:	eb49 0409 	adc.w	r4, r9, r9
 8005f6a:	4698      	mov	r8, r3
 8005f6c:	46a1      	mov	r9, r4
 8005f6e:	eb18 080a 	adds.w	r8, r8, sl
 8005f72:	eb49 090b 	adc.w	r9, r9, fp
 8005f76:	f04f 0100 	mov.w	r1, #0
 8005f7a:	f04f 0200 	mov.w	r2, #0
 8005f7e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005f82:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005f86:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005f8a:	4688      	mov	r8, r1
 8005f8c:	4691      	mov	r9, r2
 8005f8e:	eb1a 0508 	adds.w	r5, sl, r8
 8005f92:	eb4b 0609 	adc.w	r6, fp, r9
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	f04f 0200 	mov.w	r2, #0
 8005fa0:	f04f 0300 	mov.w	r3, #0
 8005fa4:	f04f 0400 	mov.w	r4, #0
 8005fa8:	0094      	lsls	r4, r2, #2
 8005faa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005fae:	008b      	lsls	r3, r1, #2
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	4623      	mov	r3, r4
 8005fb4:	4628      	mov	r0, r5
 8005fb6:	4631      	mov	r1, r6
 8005fb8:	f7fa fdf6 	bl	8000ba8 <__aeabi_uldivmod>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	460c      	mov	r4, r1
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	4b50      	ldr	r3, [pc, #320]	; (8006104 <UART_SetConfig+0x6f4>)
 8005fc4:	fba3 2302 	umull	r2, r3, r3, r2
 8005fc8:	095b      	lsrs	r3, r3, #5
 8005fca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	469b      	mov	fp, r3
 8005fd2:	f04f 0c00 	mov.w	ip, #0
 8005fd6:	46d9      	mov	r9, fp
 8005fd8:	46e2      	mov	sl, ip
 8005fda:	eb19 0309 	adds.w	r3, r9, r9
 8005fde:	eb4a 040a 	adc.w	r4, sl, sl
 8005fe2:	4699      	mov	r9, r3
 8005fe4:	46a2      	mov	sl, r4
 8005fe6:	eb19 090b 	adds.w	r9, r9, fp
 8005fea:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005fee:	f04f 0100 	mov.w	r1, #0
 8005ff2:	f04f 0200 	mov.w	r2, #0
 8005ff6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ffa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ffe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006002:	4689      	mov	r9, r1
 8006004:	4692      	mov	sl, r2
 8006006:	eb1b 0509 	adds.w	r5, fp, r9
 800600a:	eb4c 060a 	adc.w	r6, ip, sl
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	4619      	mov	r1, r3
 8006014:	f04f 0200 	mov.w	r2, #0
 8006018:	f04f 0300 	mov.w	r3, #0
 800601c:	f04f 0400 	mov.w	r4, #0
 8006020:	0094      	lsls	r4, r2, #2
 8006022:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006026:	008b      	lsls	r3, r1, #2
 8006028:	461a      	mov	r2, r3
 800602a:	4623      	mov	r3, r4
 800602c:	4628      	mov	r0, r5
 800602e:	4631      	mov	r1, r6
 8006030:	f7fa fdba 	bl	8000ba8 <__aeabi_uldivmod>
 8006034:	4603      	mov	r3, r0
 8006036:	460c      	mov	r4, r1
 8006038:	461a      	mov	r2, r3
 800603a:	4b32      	ldr	r3, [pc, #200]	; (8006104 <UART_SetConfig+0x6f4>)
 800603c:	fba3 1302 	umull	r1, r3, r3, r2
 8006040:	095b      	lsrs	r3, r3, #5
 8006042:	2164      	movs	r1, #100	; 0x64
 8006044:	fb01 f303 	mul.w	r3, r1, r3
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	011b      	lsls	r3, r3, #4
 800604c:	3332      	adds	r3, #50	; 0x32
 800604e:	4a2d      	ldr	r2, [pc, #180]	; (8006104 <UART_SetConfig+0x6f4>)
 8006050:	fba2 2303 	umull	r2, r3, r2, r3
 8006054:	095b      	lsrs	r3, r3, #5
 8006056:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800605a:	4498      	add	r8, r3
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	469b      	mov	fp, r3
 8006060:	f04f 0c00 	mov.w	ip, #0
 8006064:	46d9      	mov	r9, fp
 8006066:	46e2      	mov	sl, ip
 8006068:	eb19 0309 	adds.w	r3, r9, r9
 800606c:	eb4a 040a 	adc.w	r4, sl, sl
 8006070:	4699      	mov	r9, r3
 8006072:	46a2      	mov	sl, r4
 8006074:	eb19 090b 	adds.w	r9, r9, fp
 8006078:	eb4a 0a0c 	adc.w	sl, sl, ip
 800607c:	f04f 0100 	mov.w	r1, #0
 8006080:	f04f 0200 	mov.w	r2, #0
 8006084:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006088:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800608c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006090:	4689      	mov	r9, r1
 8006092:	4692      	mov	sl, r2
 8006094:	eb1b 0509 	adds.w	r5, fp, r9
 8006098:	eb4c 060a 	adc.w	r6, ip, sl
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	4619      	mov	r1, r3
 80060a2:	f04f 0200 	mov.w	r2, #0
 80060a6:	f04f 0300 	mov.w	r3, #0
 80060aa:	f04f 0400 	mov.w	r4, #0
 80060ae:	0094      	lsls	r4, r2, #2
 80060b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060b4:	008b      	lsls	r3, r1, #2
 80060b6:	461a      	mov	r2, r3
 80060b8:	4623      	mov	r3, r4
 80060ba:	4628      	mov	r0, r5
 80060bc:	4631      	mov	r1, r6
 80060be:	f7fa fd73 	bl	8000ba8 <__aeabi_uldivmod>
 80060c2:	4603      	mov	r3, r0
 80060c4:	460c      	mov	r4, r1
 80060c6:	461a      	mov	r2, r3
 80060c8:	4b0e      	ldr	r3, [pc, #56]	; (8006104 <UART_SetConfig+0x6f4>)
 80060ca:	fba3 1302 	umull	r1, r3, r3, r2
 80060ce:	095b      	lsrs	r3, r3, #5
 80060d0:	2164      	movs	r1, #100	; 0x64
 80060d2:	fb01 f303 	mul.w	r3, r1, r3
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	011b      	lsls	r3, r3, #4
 80060da:	3332      	adds	r3, #50	; 0x32
 80060dc:	4a09      	ldr	r2, [pc, #36]	; (8006104 <UART_SetConfig+0x6f4>)
 80060de:	fba2 2303 	umull	r2, r3, r2, r3
 80060e2:	095b      	lsrs	r3, r3, #5
 80060e4:	f003 020f 	and.w	r2, r3, #15
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4442      	add	r2, r8
 80060ee:	609a      	str	r2, [r3, #8]
}
 80060f0:	e7ff      	b.n	80060f2 <UART_SetConfig+0x6e2>
 80060f2:	bf00      	nop
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060fc:	40011000 	.word	0x40011000
 8006100:	40011400 	.word	0x40011400
 8006104:	51eb851f 	.word	0x51eb851f

08006108 <atol>:
 8006108:	220a      	movs	r2, #10
 800610a:	2100      	movs	r1, #0
 800610c:	f000 be7a 	b.w	8006e04 <strtol>

08006110 <__errno>:
 8006110:	4b01      	ldr	r3, [pc, #4]	; (8006118 <__errno+0x8>)
 8006112:	6818      	ldr	r0, [r3, #0]
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	2000000c 	.word	0x2000000c

0800611c <exit>:
 800611c:	b508      	push	{r3, lr}
 800611e:	4b07      	ldr	r3, [pc, #28]	; (800613c <exit+0x20>)
 8006120:	4604      	mov	r4, r0
 8006122:	b113      	cbz	r3, 800612a <exit+0xe>
 8006124:	2100      	movs	r1, #0
 8006126:	f3af 8000 	nop.w
 800612a:	4b05      	ldr	r3, [pc, #20]	; (8006140 <exit+0x24>)
 800612c:	6818      	ldr	r0, [r3, #0]
 800612e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006130:	b103      	cbz	r3, 8006134 <exit+0x18>
 8006132:	4798      	blx	r3
 8006134:	4620      	mov	r0, r4
 8006136:	f7fc fb6b 	bl	8002810 <_exit>
 800613a:	bf00      	nop
 800613c:	00000000 	.word	0x00000000
 8006140:	08009780 	.word	0x08009780

08006144 <__libc_init_array>:
 8006144:	b570      	push	{r4, r5, r6, lr}
 8006146:	4e0d      	ldr	r6, [pc, #52]	; (800617c <__libc_init_array+0x38>)
 8006148:	4c0d      	ldr	r4, [pc, #52]	; (8006180 <__libc_init_array+0x3c>)
 800614a:	1ba4      	subs	r4, r4, r6
 800614c:	10a4      	asrs	r4, r4, #2
 800614e:	2500      	movs	r5, #0
 8006150:	42a5      	cmp	r5, r4
 8006152:	d109      	bne.n	8006168 <__libc_init_array+0x24>
 8006154:	4e0b      	ldr	r6, [pc, #44]	; (8006184 <__libc_init_array+0x40>)
 8006156:	4c0c      	ldr	r4, [pc, #48]	; (8006188 <__libc_init_array+0x44>)
 8006158:	f003 facc 	bl	80096f4 <_init>
 800615c:	1ba4      	subs	r4, r4, r6
 800615e:	10a4      	asrs	r4, r4, #2
 8006160:	2500      	movs	r5, #0
 8006162:	42a5      	cmp	r5, r4
 8006164:	d105      	bne.n	8006172 <__libc_init_array+0x2e>
 8006166:	bd70      	pop	{r4, r5, r6, pc}
 8006168:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800616c:	4798      	blx	r3
 800616e:	3501      	adds	r5, #1
 8006170:	e7ee      	b.n	8006150 <__libc_init_array+0xc>
 8006172:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006176:	4798      	blx	r3
 8006178:	3501      	adds	r5, #1
 800617a:	e7f2      	b.n	8006162 <__libc_init_array+0x1e>
 800617c:	08009bc8 	.word	0x08009bc8
 8006180:	08009bc8 	.word	0x08009bc8
 8006184:	08009bc8 	.word	0x08009bc8
 8006188:	08009bcc 	.word	0x08009bcc

0800618c <malloc>:
 800618c:	4b02      	ldr	r3, [pc, #8]	; (8006198 <malloc+0xc>)
 800618e:	4601      	mov	r1, r0
 8006190:	6818      	ldr	r0, [r3, #0]
 8006192:	f000 b86d 	b.w	8006270 <_malloc_r>
 8006196:	bf00      	nop
 8006198:	2000000c 	.word	0x2000000c

0800619c <free>:
 800619c:	4b02      	ldr	r3, [pc, #8]	; (80061a8 <free+0xc>)
 800619e:	4601      	mov	r1, r0
 80061a0:	6818      	ldr	r0, [r3, #0]
 80061a2:	f000 b817 	b.w	80061d4 <_free_r>
 80061a6:	bf00      	nop
 80061a8:	2000000c 	.word	0x2000000c

080061ac <memcpy>:
 80061ac:	b510      	push	{r4, lr}
 80061ae:	1e43      	subs	r3, r0, #1
 80061b0:	440a      	add	r2, r1
 80061b2:	4291      	cmp	r1, r2
 80061b4:	d100      	bne.n	80061b8 <memcpy+0xc>
 80061b6:	bd10      	pop	{r4, pc}
 80061b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061c0:	e7f7      	b.n	80061b2 <memcpy+0x6>

080061c2 <memset>:
 80061c2:	4402      	add	r2, r0
 80061c4:	4603      	mov	r3, r0
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d100      	bne.n	80061cc <memset+0xa>
 80061ca:	4770      	bx	lr
 80061cc:	f803 1b01 	strb.w	r1, [r3], #1
 80061d0:	e7f9      	b.n	80061c6 <memset+0x4>
	...

080061d4 <_free_r>:
 80061d4:	b538      	push	{r3, r4, r5, lr}
 80061d6:	4605      	mov	r5, r0
 80061d8:	2900      	cmp	r1, #0
 80061da:	d045      	beq.n	8006268 <_free_r+0x94>
 80061dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061e0:	1f0c      	subs	r4, r1, #4
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	bfb8      	it	lt
 80061e6:	18e4      	addlt	r4, r4, r3
 80061e8:	f001 fc8a 	bl	8007b00 <__malloc_lock>
 80061ec:	4a1f      	ldr	r2, [pc, #124]	; (800626c <_free_r+0x98>)
 80061ee:	6813      	ldr	r3, [r2, #0]
 80061f0:	4610      	mov	r0, r2
 80061f2:	b933      	cbnz	r3, 8006202 <_free_r+0x2e>
 80061f4:	6063      	str	r3, [r4, #4]
 80061f6:	6014      	str	r4, [r2, #0]
 80061f8:	4628      	mov	r0, r5
 80061fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061fe:	f001 bc80 	b.w	8007b02 <__malloc_unlock>
 8006202:	42a3      	cmp	r3, r4
 8006204:	d90c      	bls.n	8006220 <_free_r+0x4c>
 8006206:	6821      	ldr	r1, [r4, #0]
 8006208:	1862      	adds	r2, r4, r1
 800620a:	4293      	cmp	r3, r2
 800620c:	bf04      	itt	eq
 800620e:	681a      	ldreq	r2, [r3, #0]
 8006210:	685b      	ldreq	r3, [r3, #4]
 8006212:	6063      	str	r3, [r4, #4]
 8006214:	bf04      	itt	eq
 8006216:	1852      	addeq	r2, r2, r1
 8006218:	6022      	streq	r2, [r4, #0]
 800621a:	6004      	str	r4, [r0, #0]
 800621c:	e7ec      	b.n	80061f8 <_free_r+0x24>
 800621e:	4613      	mov	r3, r2
 8006220:	685a      	ldr	r2, [r3, #4]
 8006222:	b10a      	cbz	r2, 8006228 <_free_r+0x54>
 8006224:	42a2      	cmp	r2, r4
 8006226:	d9fa      	bls.n	800621e <_free_r+0x4a>
 8006228:	6819      	ldr	r1, [r3, #0]
 800622a:	1858      	adds	r0, r3, r1
 800622c:	42a0      	cmp	r0, r4
 800622e:	d10b      	bne.n	8006248 <_free_r+0x74>
 8006230:	6820      	ldr	r0, [r4, #0]
 8006232:	4401      	add	r1, r0
 8006234:	1858      	adds	r0, r3, r1
 8006236:	4282      	cmp	r2, r0
 8006238:	6019      	str	r1, [r3, #0]
 800623a:	d1dd      	bne.n	80061f8 <_free_r+0x24>
 800623c:	6810      	ldr	r0, [r2, #0]
 800623e:	6852      	ldr	r2, [r2, #4]
 8006240:	605a      	str	r2, [r3, #4]
 8006242:	4401      	add	r1, r0
 8006244:	6019      	str	r1, [r3, #0]
 8006246:	e7d7      	b.n	80061f8 <_free_r+0x24>
 8006248:	d902      	bls.n	8006250 <_free_r+0x7c>
 800624a:	230c      	movs	r3, #12
 800624c:	602b      	str	r3, [r5, #0]
 800624e:	e7d3      	b.n	80061f8 <_free_r+0x24>
 8006250:	6820      	ldr	r0, [r4, #0]
 8006252:	1821      	adds	r1, r4, r0
 8006254:	428a      	cmp	r2, r1
 8006256:	bf04      	itt	eq
 8006258:	6811      	ldreq	r1, [r2, #0]
 800625a:	6852      	ldreq	r2, [r2, #4]
 800625c:	6062      	str	r2, [r4, #4]
 800625e:	bf04      	itt	eq
 8006260:	1809      	addeq	r1, r1, r0
 8006262:	6021      	streq	r1, [r4, #0]
 8006264:	605c      	str	r4, [r3, #4]
 8006266:	e7c7      	b.n	80061f8 <_free_r+0x24>
 8006268:	bd38      	pop	{r3, r4, r5, pc}
 800626a:	bf00      	nop
 800626c:	20001504 	.word	0x20001504

08006270 <_malloc_r>:
 8006270:	b570      	push	{r4, r5, r6, lr}
 8006272:	1ccd      	adds	r5, r1, #3
 8006274:	f025 0503 	bic.w	r5, r5, #3
 8006278:	3508      	adds	r5, #8
 800627a:	2d0c      	cmp	r5, #12
 800627c:	bf38      	it	cc
 800627e:	250c      	movcc	r5, #12
 8006280:	2d00      	cmp	r5, #0
 8006282:	4606      	mov	r6, r0
 8006284:	db01      	blt.n	800628a <_malloc_r+0x1a>
 8006286:	42a9      	cmp	r1, r5
 8006288:	d903      	bls.n	8006292 <_malloc_r+0x22>
 800628a:	230c      	movs	r3, #12
 800628c:	6033      	str	r3, [r6, #0]
 800628e:	2000      	movs	r0, #0
 8006290:	bd70      	pop	{r4, r5, r6, pc}
 8006292:	f001 fc35 	bl	8007b00 <__malloc_lock>
 8006296:	4a21      	ldr	r2, [pc, #132]	; (800631c <_malloc_r+0xac>)
 8006298:	6814      	ldr	r4, [r2, #0]
 800629a:	4621      	mov	r1, r4
 800629c:	b991      	cbnz	r1, 80062c4 <_malloc_r+0x54>
 800629e:	4c20      	ldr	r4, [pc, #128]	; (8006320 <_malloc_r+0xb0>)
 80062a0:	6823      	ldr	r3, [r4, #0]
 80062a2:	b91b      	cbnz	r3, 80062ac <_malloc_r+0x3c>
 80062a4:	4630      	mov	r0, r6
 80062a6:	f000 fc99 	bl	8006bdc <_sbrk_r>
 80062aa:	6020      	str	r0, [r4, #0]
 80062ac:	4629      	mov	r1, r5
 80062ae:	4630      	mov	r0, r6
 80062b0:	f000 fc94 	bl	8006bdc <_sbrk_r>
 80062b4:	1c43      	adds	r3, r0, #1
 80062b6:	d124      	bne.n	8006302 <_malloc_r+0x92>
 80062b8:	230c      	movs	r3, #12
 80062ba:	6033      	str	r3, [r6, #0]
 80062bc:	4630      	mov	r0, r6
 80062be:	f001 fc20 	bl	8007b02 <__malloc_unlock>
 80062c2:	e7e4      	b.n	800628e <_malloc_r+0x1e>
 80062c4:	680b      	ldr	r3, [r1, #0]
 80062c6:	1b5b      	subs	r3, r3, r5
 80062c8:	d418      	bmi.n	80062fc <_malloc_r+0x8c>
 80062ca:	2b0b      	cmp	r3, #11
 80062cc:	d90f      	bls.n	80062ee <_malloc_r+0x7e>
 80062ce:	600b      	str	r3, [r1, #0]
 80062d0:	50cd      	str	r5, [r1, r3]
 80062d2:	18cc      	adds	r4, r1, r3
 80062d4:	4630      	mov	r0, r6
 80062d6:	f001 fc14 	bl	8007b02 <__malloc_unlock>
 80062da:	f104 000b 	add.w	r0, r4, #11
 80062de:	1d23      	adds	r3, r4, #4
 80062e0:	f020 0007 	bic.w	r0, r0, #7
 80062e4:	1ac3      	subs	r3, r0, r3
 80062e6:	d0d3      	beq.n	8006290 <_malloc_r+0x20>
 80062e8:	425a      	negs	r2, r3
 80062ea:	50e2      	str	r2, [r4, r3]
 80062ec:	e7d0      	b.n	8006290 <_malloc_r+0x20>
 80062ee:	428c      	cmp	r4, r1
 80062f0:	684b      	ldr	r3, [r1, #4]
 80062f2:	bf16      	itet	ne
 80062f4:	6063      	strne	r3, [r4, #4]
 80062f6:	6013      	streq	r3, [r2, #0]
 80062f8:	460c      	movne	r4, r1
 80062fa:	e7eb      	b.n	80062d4 <_malloc_r+0x64>
 80062fc:	460c      	mov	r4, r1
 80062fe:	6849      	ldr	r1, [r1, #4]
 8006300:	e7cc      	b.n	800629c <_malloc_r+0x2c>
 8006302:	1cc4      	adds	r4, r0, #3
 8006304:	f024 0403 	bic.w	r4, r4, #3
 8006308:	42a0      	cmp	r0, r4
 800630a:	d005      	beq.n	8006318 <_malloc_r+0xa8>
 800630c:	1a21      	subs	r1, r4, r0
 800630e:	4630      	mov	r0, r6
 8006310:	f000 fc64 	bl	8006bdc <_sbrk_r>
 8006314:	3001      	adds	r0, #1
 8006316:	d0cf      	beq.n	80062b8 <_malloc_r+0x48>
 8006318:	6025      	str	r5, [r4, #0]
 800631a:	e7db      	b.n	80062d4 <_malloc_r+0x64>
 800631c:	20001504 	.word	0x20001504
 8006320:	20001508 	.word	0x20001508

08006324 <__cvt>:
 8006324:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006328:	ec55 4b10 	vmov	r4, r5, d0
 800632c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800632e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006332:	2d00      	cmp	r5, #0
 8006334:	460e      	mov	r6, r1
 8006336:	4691      	mov	r9, r2
 8006338:	4619      	mov	r1, r3
 800633a:	bfb8      	it	lt
 800633c:	4622      	movlt	r2, r4
 800633e:	462b      	mov	r3, r5
 8006340:	f027 0720 	bic.w	r7, r7, #32
 8006344:	bfbb      	ittet	lt
 8006346:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800634a:	461d      	movlt	r5, r3
 800634c:	2300      	movge	r3, #0
 800634e:	232d      	movlt	r3, #45	; 0x2d
 8006350:	bfb8      	it	lt
 8006352:	4614      	movlt	r4, r2
 8006354:	2f46      	cmp	r7, #70	; 0x46
 8006356:	700b      	strb	r3, [r1, #0]
 8006358:	d004      	beq.n	8006364 <__cvt+0x40>
 800635a:	2f45      	cmp	r7, #69	; 0x45
 800635c:	d100      	bne.n	8006360 <__cvt+0x3c>
 800635e:	3601      	adds	r6, #1
 8006360:	2102      	movs	r1, #2
 8006362:	e000      	b.n	8006366 <__cvt+0x42>
 8006364:	2103      	movs	r1, #3
 8006366:	ab03      	add	r3, sp, #12
 8006368:	9301      	str	r3, [sp, #4]
 800636a:	ab02      	add	r3, sp, #8
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	4632      	mov	r2, r6
 8006370:	4653      	mov	r3, sl
 8006372:	ec45 4b10 	vmov	d0, r4, r5
 8006376:	f000 fde7 	bl	8006f48 <_dtoa_r>
 800637a:	2f47      	cmp	r7, #71	; 0x47
 800637c:	4680      	mov	r8, r0
 800637e:	d102      	bne.n	8006386 <__cvt+0x62>
 8006380:	f019 0f01 	tst.w	r9, #1
 8006384:	d026      	beq.n	80063d4 <__cvt+0xb0>
 8006386:	2f46      	cmp	r7, #70	; 0x46
 8006388:	eb08 0906 	add.w	r9, r8, r6
 800638c:	d111      	bne.n	80063b2 <__cvt+0x8e>
 800638e:	f898 3000 	ldrb.w	r3, [r8]
 8006392:	2b30      	cmp	r3, #48	; 0x30
 8006394:	d10a      	bne.n	80063ac <__cvt+0x88>
 8006396:	2200      	movs	r2, #0
 8006398:	2300      	movs	r3, #0
 800639a:	4620      	mov	r0, r4
 800639c:	4629      	mov	r1, r5
 800639e:	f7fa fb93 	bl	8000ac8 <__aeabi_dcmpeq>
 80063a2:	b918      	cbnz	r0, 80063ac <__cvt+0x88>
 80063a4:	f1c6 0601 	rsb	r6, r6, #1
 80063a8:	f8ca 6000 	str.w	r6, [sl]
 80063ac:	f8da 3000 	ldr.w	r3, [sl]
 80063b0:	4499      	add	r9, r3
 80063b2:	2200      	movs	r2, #0
 80063b4:	2300      	movs	r3, #0
 80063b6:	4620      	mov	r0, r4
 80063b8:	4629      	mov	r1, r5
 80063ba:	f7fa fb85 	bl	8000ac8 <__aeabi_dcmpeq>
 80063be:	b938      	cbnz	r0, 80063d0 <__cvt+0xac>
 80063c0:	2230      	movs	r2, #48	; 0x30
 80063c2:	9b03      	ldr	r3, [sp, #12]
 80063c4:	454b      	cmp	r3, r9
 80063c6:	d205      	bcs.n	80063d4 <__cvt+0xb0>
 80063c8:	1c59      	adds	r1, r3, #1
 80063ca:	9103      	str	r1, [sp, #12]
 80063cc:	701a      	strb	r2, [r3, #0]
 80063ce:	e7f8      	b.n	80063c2 <__cvt+0x9e>
 80063d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80063d4:	9b03      	ldr	r3, [sp, #12]
 80063d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063d8:	eba3 0308 	sub.w	r3, r3, r8
 80063dc:	4640      	mov	r0, r8
 80063de:	6013      	str	r3, [r2, #0]
 80063e0:	b004      	add	sp, #16
 80063e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080063e6 <__exponent>:
 80063e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063e8:	2900      	cmp	r1, #0
 80063ea:	4604      	mov	r4, r0
 80063ec:	bfba      	itte	lt
 80063ee:	4249      	neglt	r1, r1
 80063f0:	232d      	movlt	r3, #45	; 0x2d
 80063f2:	232b      	movge	r3, #43	; 0x2b
 80063f4:	2909      	cmp	r1, #9
 80063f6:	f804 2b02 	strb.w	r2, [r4], #2
 80063fa:	7043      	strb	r3, [r0, #1]
 80063fc:	dd20      	ble.n	8006440 <__exponent+0x5a>
 80063fe:	f10d 0307 	add.w	r3, sp, #7
 8006402:	461f      	mov	r7, r3
 8006404:	260a      	movs	r6, #10
 8006406:	fb91 f5f6 	sdiv	r5, r1, r6
 800640a:	fb06 1115 	mls	r1, r6, r5, r1
 800640e:	3130      	adds	r1, #48	; 0x30
 8006410:	2d09      	cmp	r5, #9
 8006412:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006416:	f103 32ff 	add.w	r2, r3, #4294967295
 800641a:	4629      	mov	r1, r5
 800641c:	dc09      	bgt.n	8006432 <__exponent+0x4c>
 800641e:	3130      	adds	r1, #48	; 0x30
 8006420:	3b02      	subs	r3, #2
 8006422:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006426:	42bb      	cmp	r3, r7
 8006428:	4622      	mov	r2, r4
 800642a:	d304      	bcc.n	8006436 <__exponent+0x50>
 800642c:	1a10      	subs	r0, r2, r0
 800642e:	b003      	add	sp, #12
 8006430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006432:	4613      	mov	r3, r2
 8006434:	e7e7      	b.n	8006406 <__exponent+0x20>
 8006436:	f813 2b01 	ldrb.w	r2, [r3], #1
 800643a:	f804 2b01 	strb.w	r2, [r4], #1
 800643e:	e7f2      	b.n	8006426 <__exponent+0x40>
 8006440:	2330      	movs	r3, #48	; 0x30
 8006442:	4419      	add	r1, r3
 8006444:	7083      	strb	r3, [r0, #2]
 8006446:	1d02      	adds	r2, r0, #4
 8006448:	70c1      	strb	r1, [r0, #3]
 800644a:	e7ef      	b.n	800642c <__exponent+0x46>

0800644c <_printf_float>:
 800644c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006450:	b08d      	sub	sp, #52	; 0x34
 8006452:	460c      	mov	r4, r1
 8006454:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006458:	4616      	mov	r6, r2
 800645a:	461f      	mov	r7, r3
 800645c:	4605      	mov	r5, r0
 800645e:	f001 fb2f 	bl	8007ac0 <_localeconv_r>
 8006462:	6803      	ldr	r3, [r0, #0]
 8006464:	9304      	str	r3, [sp, #16]
 8006466:	4618      	mov	r0, r3
 8006468:	f7f9 feb2 	bl	80001d0 <strlen>
 800646c:	2300      	movs	r3, #0
 800646e:	930a      	str	r3, [sp, #40]	; 0x28
 8006470:	f8d8 3000 	ldr.w	r3, [r8]
 8006474:	9005      	str	r0, [sp, #20]
 8006476:	3307      	adds	r3, #7
 8006478:	f023 0307 	bic.w	r3, r3, #7
 800647c:	f103 0208 	add.w	r2, r3, #8
 8006480:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006484:	f8d4 b000 	ldr.w	fp, [r4]
 8006488:	f8c8 2000 	str.w	r2, [r8]
 800648c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006490:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006494:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006498:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800649c:	9307      	str	r3, [sp, #28]
 800649e:	f8cd 8018 	str.w	r8, [sp, #24]
 80064a2:	f04f 32ff 	mov.w	r2, #4294967295
 80064a6:	4ba7      	ldr	r3, [pc, #668]	; (8006744 <_printf_float+0x2f8>)
 80064a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064ac:	f7fa fb3e 	bl	8000b2c <__aeabi_dcmpun>
 80064b0:	bb70      	cbnz	r0, 8006510 <_printf_float+0xc4>
 80064b2:	f04f 32ff 	mov.w	r2, #4294967295
 80064b6:	4ba3      	ldr	r3, [pc, #652]	; (8006744 <_printf_float+0x2f8>)
 80064b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064bc:	f7fa fb18 	bl	8000af0 <__aeabi_dcmple>
 80064c0:	bb30      	cbnz	r0, 8006510 <_printf_float+0xc4>
 80064c2:	2200      	movs	r2, #0
 80064c4:	2300      	movs	r3, #0
 80064c6:	4640      	mov	r0, r8
 80064c8:	4649      	mov	r1, r9
 80064ca:	f7fa fb07 	bl	8000adc <__aeabi_dcmplt>
 80064ce:	b110      	cbz	r0, 80064d6 <_printf_float+0x8a>
 80064d0:	232d      	movs	r3, #45	; 0x2d
 80064d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064d6:	4a9c      	ldr	r2, [pc, #624]	; (8006748 <_printf_float+0x2fc>)
 80064d8:	4b9c      	ldr	r3, [pc, #624]	; (800674c <_printf_float+0x300>)
 80064da:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80064de:	bf8c      	ite	hi
 80064e0:	4690      	movhi	r8, r2
 80064e2:	4698      	movls	r8, r3
 80064e4:	2303      	movs	r3, #3
 80064e6:	f02b 0204 	bic.w	r2, fp, #4
 80064ea:	6123      	str	r3, [r4, #16]
 80064ec:	6022      	str	r2, [r4, #0]
 80064ee:	f04f 0900 	mov.w	r9, #0
 80064f2:	9700      	str	r7, [sp, #0]
 80064f4:	4633      	mov	r3, r6
 80064f6:	aa0b      	add	r2, sp, #44	; 0x2c
 80064f8:	4621      	mov	r1, r4
 80064fa:	4628      	mov	r0, r5
 80064fc:	f000 f9e6 	bl	80068cc <_printf_common>
 8006500:	3001      	adds	r0, #1
 8006502:	f040 808d 	bne.w	8006620 <_printf_float+0x1d4>
 8006506:	f04f 30ff 	mov.w	r0, #4294967295
 800650a:	b00d      	add	sp, #52	; 0x34
 800650c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006510:	4642      	mov	r2, r8
 8006512:	464b      	mov	r3, r9
 8006514:	4640      	mov	r0, r8
 8006516:	4649      	mov	r1, r9
 8006518:	f7fa fb08 	bl	8000b2c <__aeabi_dcmpun>
 800651c:	b110      	cbz	r0, 8006524 <_printf_float+0xd8>
 800651e:	4a8c      	ldr	r2, [pc, #560]	; (8006750 <_printf_float+0x304>)
 8006520:	4b8c      	ldr	r3, [pc, #560]	; (8006754 <_printf_float+0x308>)
 8006522:	e7da      	b.n	80064da <_printf_float+0x8e>
 8006524:	6861      	ldr	r1, [r4, #4]
 8006526:	1c4b      	adds	r3, r1, #1
 8006528:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800652c:	a80a      	add	r0, sp, #40	; 0x28
 800652e:	d13e      	bne.n	80065ae <_printf_float+0x162>
 8006530:	2306      	movs	r3, #6
 8006532:	6063      	str	r3, [r4, #4]
 8006534:	2300      	movs	r3, #0
 8006536:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800653a:	ab09      	add	r3, sp, #36	; 0x24
 800653c:	9300      	str	r3, [sp, #0]
 800653e:	ec49 8b10 	vmov	d0, r8, r9
 8006542:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006546:	6022      	str	r2, [r4, #0]
 8006548:	f8cd a004 	str.w	sl, [sp, #4]
 800654c:	6861      	ldr	r1, [r4, #4]
 800654e:	4628      	mov	r0, r5
 8006550:	f7ff fee8 	bl	8006324 <__cvt>
 8006554:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006558:	2b47      	cmp	r3, #71	; 0x47
 800655a:	4680      	mov	r8, r0
 800655c:	d109      	bne.n	8006572 <_printf_float+0x126>
 800655e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006560:	1cd8      	adds	r0, r3, #3
 8006562:	db02      	blt.n	800656a <_printf_float+0x11e>
 8006564:	6862      	ldr	r2, [r4, #4]
 8006566:	4293      	cmp	r3, r2
 8006568:	dd47      	ble.n	80065fa <_printf_float+0x1ae>
 800656a:	f1aa 0a02 	sub.w	sl, sl, #2
 800656e:	fa5f fa8a 	uxtb.w	sl, sl
 8006572:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006576:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006578:	d824      	bhi.n	80065c4 <_printf_float+0x178>
 800657a:	3901      	subs	r1, #1
 800657c:	4652      	mov	r2, sl
 800657e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006582:	9109      	str	r1, [sp, #36]	; 0x24
 8006584:	f7ff ff2f 	bl	80063e6 <__exponent>
 8006588:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800658a:	1813      	adds	r3, r2, r0
 800658c:	2a01      	cmp	r2, #1
 800658e:	4681      	mov	r9, r0
 8006590:	6123      	str	r3, [r4, #16]
 8006592:	dc02      	bgt.n	800659a <_printf_float+0x14e>
 8006594:	6822      	ldr	r2, [r4, #0]
 8006596:	07d1      	lsls	r1, r2, #31
 8006598:	d501      	bpl.n	800659e <_printf_float+0x152>
 800659a:	3301      	adds	r3, #1
 800659c:	6123      	str	r3, [r4, #16]
 800659e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d0a5      	beq.n	80064f2 <_printf_float+0xa6>
 80065a6:	232d      	movs	r3, #45	; 0x2d
 80065a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065ac:	e7a1      	b.n	80064f2 <_printf_float+0xa6>
 80065ae:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80065b2:	f000 8177 	beq.w	80068a4 <_printf_float+0x458>
 80065b6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80065ba:	d1bb      	bne.n	8006534 <_printf_float+0xe8>
 80065bc:	2900      	cmp	r1, #0
 80065be:	d1b9      	bne.n	8006534 <_printf_float+0xe8>
 80065c0:	2301      	movs	r3, #1
 80065c2:	e7b6      	b.n	8006532 <_printf_float+0xe6>
 80065c4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80065c8:	d119      	bne.n	80065fe <_printf_float+0x1b2>
 80065ca:	2900      	cmp	r1, #0
 80065cc:	6863      	ldr	r3, [r4, #4]
 80065ce:	dd0c      	ble.n	80065ea <_printf_float+0x19e>
 80065d0:	6121      	str	r1, [r4, #16]
 80065d2:	b913      	cbnz	r3, 80065da <_printf_float+0x18e>
 80065d4:	6822      	ldr	r2, [r4, #0]
 80065d6:	07d2      	lsls	r2, r2, #31
 80065d8:	d502      	bpl.n	80065e0 <_printf_float+0x194>
 80065da:	3301      	adds	r3, #1
 80065dc:	440b      	add	r3, r1
 80065de:	6123      	str	r3, [r4, #16]
 80065e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065e2:	65a3      	str	r3, [r4, #88]	; 0x58
 80065e4:	f04f 0900 	mov.w	r9, #0
 80065e8:	e7d9      	b.n	800659e <_printf_float+0x152>
 80065ea:	b913      	cbnz	r3, 80065f2 <_printf_float+0x1a6>
 80065ec:	6822      	ldr	r2, [r4, #0]
 80065ee:	07d0      	lsls	r0, r2, #31
 80065f0:	d501      	bpl.n	80065f6 <_printf_float+0x1aa>
 80065f2:	3302      	adds	r3, #2
 80065f4:	e7f3      	b.n	80065de <_printf_float+0x192>
 80065f6:	2301      	movs	r3, #1
 80065f8:	e7f1      	b.n	80065de <_printf_float+0x192>
 80065fa:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80065fe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006602:	4293      	cmp	r3, r2
 8006604:	db05      	blt.n	8006612 <_printf_float+0x1c6>
 8006606:	6822      	ldr	r2, [r4, #0]
 8006608:	6123      	str	r3, [r4, #16]
 800660a:	07d1      	lsls	r1, r2, #31
 800660c:	d5e8      	bpl.n	80065e0 <_printf_float+0x194>
 800660e:	3301      	adds	r3, #1
 8006610:	e7e5      	b.n	80065de <_printf_float+0x192>
 8006612:	2b00      	cmp	r3, #0
 8006614:	bfd4      	ite	le
 8006616:	f1c3 0302 	rsble	r3, r3, #2
 800661a:	2301      	movgt	r3, #1
 800661c:	4413      	add	r3, r2
 800661e:	e7de      	b.n	80065de <_printf_float+0x192>
 8006620:	6823      	ldr	r3, [r4, #0]
 8006622:	055a      	lsls	r2, r3, #21
 8006624:	d407      	bmi.n	8006636 <_printf_float+0x1ea>
 8006626:	6923      	ldr	r3, [r4, #16]
 8006628:	4642      	mov	r2, r8
 800662a:	4631      	mov	r1, r6
 800662c:	4628      	mov	r0, r5
 800662e:	47b8      	blx	r7
 8006630:	3001      	adds	r0, #1
 8006632:	d12b      	bne.n	800668c <_printf_float+0x240>
 8006634:	e767      	b.n	8006506 <_printf_float+0xba>
 8006636:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800663a:	f240 80dc 	bls.w	80067f6 <_printf_float+0x3aa>
 800663e:	2200      	movs	r2, #0
 8006640:	2300      	movs	r3, #0
 8006642:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006646:	f7fa fa3f 	bl	8000ac8 <__aeabi_dcmpeq>
 800664a:	2800      	cmp	r0, #0
 800664c:	d033      	beq.n	80066b6 <_printf_float+0x26a>
 800664e:	2301      	movs	r3, #1
 8006650:	4a41      	ldr	r2, [pc, #260]	; (8006758 <_printf_float+0x30c>)
 8006652:	4631      	mov	r1, r6
 8006654:	4628      	mov	r0, r5
 8006656:	47b8      	blx	r7
 8006658:	3001      	adds	r0, #1
 800665a:	f43f af54 	beq.w	8006506 <_printf_float+0xba>
 800665e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006662:	429a      	cmp	r2, r3
 8006664:	db02      	blt.n	800666c <_printf_float+0x220>
 8006666:	6823      	ldr	r3, [r4, #0]
 8006668:	07d8      	lsls	r0, r3, #31
 800666a:	d50f      	bpl.n	800668c <_printf_float+0x240>
 800666c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006670:	4631      	mov	r1, r6
 8006672:	4628      	mov	r0, r5
 8006674:	47b8      	blx	r7
 8006676:	3001      	adds	r0, #1
 8006678:	f43f af45 	beq.w	8006506 <_printf_float+0xba>
 800667c:	f04f 0800 	mov.w	r8, #0
 8006680:	f104 091a 	add.w	r9, r4, #26
 8006684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006686:	3b01      	subs	r3, #1
 8006688:	4543      	cmp	r3, r8
 800668a:	dc09      	bgt.n	80066a0 <_printf_float+0x254>
 800668c:	6823      	ldr	r3, [r4, #0]
 800668e:	079b      	lsls	r3, r3, #30
 8006690:	f100 8103 	bmi.w	800689a <_printf_float+0x44e>
 8006694:	68e0      	ldr	r0, [r4, #12]
 8006696:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006698:	4298      	cmp	r0, r3
 800669a:	bfb8      	it	lt
 800669c:	4618      	movlt	r0, r3
 800669e:	e734      	b.n	800650a <_printf_float+0xbe>
 80066a0:	2301      	movs	r3, #1
 80066a2:	464a      	mov	r2, r9
 80066a4:	4631      	mov	r1, r6
 80066a6:	4628      	mov	r0, r5
 80066a8:	47b8      	blx	r7
 80066aa:	3001      	adds	r0, #1
 80066ac:	f43f af2b 	beq.w	8006506 <_printf_float+0xba>
 80066b0:	f108 0801 	add.w	r8, r8, #1
 80066b4:	e7e6      	b.n	8006684 <_printf_float+0x238>
 80066b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	dc2b      	bgt.n	8006714 <_printf_float+0x2c8>
 80066bc:	2301      	movs	r3, #1
 80066be:	4a26      	ldr	r2, [pc, #152]	; (8006758 <_printf_float+0x30c>)
 80066c0:	4631      	mov	r1, r6
 80066c2:	4628      	mov	r0, r5
 80066c4:	47b8      	blx	r7
 80066c6:	3001      	adds	r0, #1
 80066c8:	f43f af1d 	beq.w	8006506 <_printf_float+0xba>
 80066cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066ce:	b923      	cbnz	r3, 80066da <_printf_float+0x28e>
 80066d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066d2:	b913      	cbnz	r3, 80066da <_printf_float+0x28e>
 80066d4:	6823      	ldr	r3, [r4, #0]
 80066d6:	07d9      	lsls	r1, r3, #31
 80066d8:	d5d8      	bpl.n	800668c <_printf_float+0x240>
 80066da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066de:	4631      	mov	r1, r6
 80066e0:	4628      	mov	r0, r5
 80066e2:	47b8      	blx	r7
 80066e4:	3001      	adds	r0, #1
 80066e6:	f43f af0e 	beq.w	8006506 <_printf_float+0xba>
 80066ea:	f04f 0900 	mov.w	r9, #0
 80066ee:	f104 0a1a 	add.w	sl, r4, #26
 80066f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066f4:	425b      	negs	r3, r3
 80066f6:	454b      	cmp	r3, r9
 80066f8:	dc01      	bgt.n	80066fe <_printf_float+0x2b2>
 80066fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066fc:	e794      	b.n	8006628 <_printf_float+0x1dc>
 80066fe:	2301      	movs	r3, #1
 8006700:	4652      	mov	r2, sl
 8006702:	4631      	mov	r1, r6
 8006704:	4628      	mov	r0, r5
 8006706:	47b8      	blx	r7
 8006708:	3001      	adds	r0, #1
 800670a:	f43f aefc 	beq.w	8006506 <_printf_float+0xba>
 800670e:	f109 0901 	add.w	r9, r9, #1
 8006712:	e7ee      	b.n	80066f2 <_printf_float+0x2a6>
 8006714:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006716:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006718:	429a      	cmp	r2, r3
 800671a:	bfa8      	it	ge
 800671c:	461a      	movge	r2, r3
 800671e:	2a00      	cmp	r2, #0
 8006720:	4691      	mov	r9, r2
 8006722:	dd07      	ble.n	8006734 <_printf_float+0x2e8>
 8006724:	4613      	mov	r3, r2
 8006726:	4631      	mov	r1, r6
 8006728:	4642      	mov	r2, r8
 800672a:	4628      	mov	r0, r5
 800672c:	47b8      	blx	r7
 800672e:	3001      	adds	r0, #1
 8006730:	f43f aee9 	beq.w	8006506 <_printf_float+0xba>
 8006734:	f104 031a 	add.w	r3, r4, #26
 8006738:	f04f 0b00 	mov.w	fp, #0
 800673c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006740:	9306      	str	r3, [sp, #24]
 8006742:	e015      	b.n	8006770 <_printf_float+0x324>
 8006744:	7fefffff 	.word	0x7fefffff
 8006748:	08009788 	.word	0x08009788
 800674c:	08009784 	.word	0x08009784
 8006750:	08009790 	.word	0x08009790
 8006754:	0800978c 	.word	0x0800978c
 8006758:	08009794 	.word	0x08009794
 800675c:	2301      	movs	r3, #1
 800675e:	9a06      	ldr	r2, [sp, #24]
 8006760:	4631      	mov	r1, r6
 8006762:	4628      	mov	r0, r5
 8006764:	47b8      	blx	r7
 8006766:	3001      	adds	r0, #1
 8006768:	f43f aecd 	beq.w	8006506 <_printf_float+0xba>
 800676c:	f10b 0b01 	add.w	fp, fp, #1
 8006770:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006774:	ebaa 0309 	sub.w	r3, sl, r9
 8006778:	455b      	cmp	r3, fp
 800677a:	dcef      	bgt.n	800675c <_printf_float+0x310>
 800677c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006780:	429a      	cmp	r2, r3
 8006782:	44d0      	add	r8, sl
 8006784:	db15      	blt.n	80067b2 <_printf_float+0x366>
 8006786:	6823      	ldr	r3, [r4, #0]
 8006788:	07da      	lsls	r2, r3, #31
 800678a:	d412      	bmi.n	80067b2 <_printf_float+0x366>
 800678c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800678e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006790:	eba3 020a 	sub.w	r2, r3, sl
 8006794:	eba3 0a01 	sub.w	sl, r3, r1
 8006798:	4592      	cmp	sl, r2
 800679a:	bfa8      	it	ge
 800679c:	4692      	movge	sl, r2
 800679e:	f1ba 0f00 	cmp.w	sl, #0
 80067a2:	dc0e      	bgt.n	80067c2 <_printf_float+0x376>
 80067a4:	f04f 0800 	mov.w	r8, #0
 80067a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80067ac:	f104 091a 	add.w	r9, r4, #26
 80067b0:	e019      	b.n	80067e6 <_printf_float+0x39a>
 80067b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067b6:	4631      	mov	r1, r6
 80067b8:	4628      	mov	r0, r5
 80067ba:	47b8      	blx	r7
 80067bc:	3001      	adds	r0, #1
 80067be:	d1e5      	bne.n	800678c <_printf_float+0x340>
 80067c0:	e6a1      	b.n	8006506 <_printf_float+0xba>
 80067c2:	4653      	mov	r3, sl
 80067c4:	4642      	mov	r2, r8
 80067c6:	4631      	mov	r1, r6
 80067c8:	4628      	mov	r0, r5
 80067ca:	47b8      	blx	r7
 80067cc:	3001      	adds	r0, #1
 80067ce:	d1e9      	bne.n	80067a4 <_printf_float+0x358>
 80067d0:	e699      	b.n	8006506 <_printf_float+0xba>
 80067d2:	2301      	movs	r3, #1
 80067d4:	464a      	mov	r2, r9
 80067d6:	4631      	mov	r1, r6
 80067d8:	4628      	mov	r0, r5
 80067da:	47b8      	blx	r7
 80067dc:	3001      	adds	r0, #1
 80067de:	f43f ae92 	beq.w	8006506 <_printf_float+0xba>
 80067e2:	f108 0801 	add.w	r8, r8, #1
 80067e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067ea:	1a9b      	subs	r3, r3, r2
 80067ec:	eba3 030a 	sub.w	r3, r3, sl
 80067f0:	4543      	cmp	r3, r8
 80067f2:	dcee      	bgt.n	80067d2 <_printf_float+0x386>
 80067f4:	e74a      	b.n	800668c <_printf_float+0x240>
 80067f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067f8:	2a01      	cmp	r2, #1
 80067fa:	dc01      	bgt.n	8006800 <_printf_float+0x3b4>
 80067fc:	07db      	lsls	r3, r3, #31
 80067fe:	d53a      	bpl.n	8006876 <_printf_float+0x42a>
 8006800:	2301      	movs	r3, #1
 8006802:	4642      	mov	r2, r8
 8006804:	4631      	mov	r1, r6
 8006806:	4628      	mov	r0, r5
 8006808:	47b8      	blx	r7
 800680a:	3001      	adds	r0, #1
 800680c:	f43f ae7b 	beq.w	8006506 <_printf_float+0xba>
 8006810:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006814:	4631      	mov	r1, r6
 8006816:	4628      	mov	r0, r5
 8006818:	47b8      	blx	r7
 800681a:	3001      	adds	r0, #1
 800681c:	f108 0801 	add.w	r8, r8, #1
 8006820:	f43f ae71 	beq.w	8006506 <_printf_float+0xba>
 8006824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006826:	2200      	movs	r2, #0
 8006828:	f103 3aff 	add.w	sl, r3, #4294967295
 800682c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006830:	2300      	movs	r3, #0
 8006832:	f7fa f949 	bl	8000ac8 <__aeabi_dcmpeq>
 8006836:	b9c8      	cbnz	r0, 800686c <_printf_float+0x420>
 8006838:	4653      	mov	r3, sl
 800683a:	4642      	mov	r2, r8
 800683c:	4631      	mov	r1, r6
 800683e:	4628      	mov	r0, r5
 8006840:	47b8      	blx	r7
 8006842:	3001      	adds	r0, #1
 8006844:	d10e      	bne.n	8006864 <_printf_float+0x418>
 8006846:	e65e      	b.n	8006506 <_printf_float+0xba>
 8006848:	2301      	movs	r3, #1
 800684a:	4652      	mov	r2, sl
 800684c:	4631      	mov	r1, r6
 800684e:	4628      	mov	r0, r5
 8006850:	47b8      	blx	r7
 8006852:	3001      	adds	r0, #1
 8006854:	f43f ae57 	beq.w	8006506 <_printf_float+0xba>
 8006858:	f108 0801 	add.w	r8, r8, #1
 800685c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800685e:	3b01      	subs	r3, #1
 8006860:	4543      	cmp	r3, r8
 8006862:	dcf1      	bgt.n	8006848 <_printf_float+0x3fc>
 8006864:	464b      	mov	r3, r9
 8006866:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800686a:	e6de      	b.n	800662a <_printf_float+0x1de>
 800686c:	f04f 0800 	mov.w	r8, #0
 8006870:	f104 0a1a 	add.w	sl, r4, #26
 8006874:	e7f2      	b.n	800685c <_printf_float+0x410>
 8006876:	2301      	movs	r3, #1
 8006878:	e7df      	b.n	800683a <_printf_float+0x3ee>
 800687a:	2301      	movs	r3, #1
 800687c:	464a      	mov	r2, r9
 800687e:	4631      	mov	r1, r6
 8006880:	4628      	mov	r0, r5
 8006882:	47b8      	blx	r7
 8006884:	3001      	adds	r0, #1
 8006886:	f43f ae3e 	beq.w	8006506 <_printf_float+0xba>
 800688a:	f108 0801 	add.w	r8, r8, #1
 800688e:	68e3      	ldr	r3, [r4, #12]
 8006890:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006892:	1a9b      	subs	r3, r3, r2
 8006894:	4543      	cmp	r3, r8
 8006896:	dcf0      	bgt.n	800687a <_printf_float+0x42e>
 8006898:	e6fc      	b.n	8006694 <_printf_float+0x248>
 800689a:	f04f 0800 	mov.w	r8, #0
 800689e:	f104 0919 	add.w	r9, r4, #25
 80068a2:	e7f4      	b.n	800688e <_printf_float+0x442>
 80068a4:	2900      	cmp	r1, #0
 80068a6:	f43f ae8b 	beq.w	80065c0 <_printf_float+0x174>
 80068aa:	2300      	movs	r3, #0
 80068ac:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80068b0:	ab09      	add	r3, sp, #36	; 0x24
 80068b2:	9300      	str	r3, [sp, #0]
 80068b4:	ec49 8b10 	vmov	d0, r8, r9
 80068b8:	6022      	str	r2, [r4, #0]
 80068ba:	f8cd a004 	str.w	sl, [sp, #4]
 80068be:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80068c2:	4628      	mov	r0, r5
 80068c4:	f7ff fd2e 	bl	8006324 <__cvt>
 80068c8:	4680      	mov	r8, r0
 80068ca:	e648      	b.n	800655e <_printf_float+0x112>

080068cc <_printf_common>:
 80068cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068d0:	4691      	mov	r9, r2
 80068d2:	461f      	mov	r7, r3
 80068d4:	688a      	ldr	r2, [r1, #8]
 80068d6:	690b      	ldr	r3, [r1, #16]
 80068d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068dc:	4293      	cmp	r3, r2
 80068de:	bfb8      	it	lt
 80068e0:	4613      	movlt	r3, r2
 80068e2:	f8c9 3000 	str.w	r3, [r9]
 80068e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068ea:	4606      	mov	r6, r0
 80068ec:	460c      	mov	r4, r1
 80068ee:	b112      	cbz	r2, 80068f6 <_printf_common+0x2a>
 80068f0:	3301      	adds	r3, #1
 80068f2:	f8c9 3000 	str.w	r3, [r9]
 80068f6:	6823      	ldr	r3, [r4, #0]
 80068f8:	0699      	lsls	r1, r3, #26
 80068fa:	bf42      	ittt	mi
 80068fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006900:	3302      	addmi	r3, #2
 8006902:	f8c9 3000 	strmi.w	r3, [r9]
 8006906:	6825      	ldr	r5, [r4, #0]
 8006908:	f015 0506 	ands.w	r5, r5, #6
 800690c:	d107      	bne.n	800691e <_printf_common+0x52>
 800690e:	f104 0a19 	add.w	sl, r4, #25
 8006912:	68e3      	ldr	r3, [r4, #12]
 8006914:	f8d9 2000 	ldr.w	r2, [r9]
 8006918:	1a9b      	subs	r3, r3, r2
 800691a:	42ab      	cmp	r3, r5
 800691c:	dc28      	bgt.n	8006970 <_printf_common+0xa4>
 800691e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006922:	6822      	ldr	r2, [r4, #0]
 8006924:	3300      	adds	r3, #0
 8006926:	bf18      	it	ne
 8006928:	2301      	movne	r3, #1
 800692a:	0692      	lsls	r2, r2, #26
 800692c:	d42d      	bmi.n	800698a <_printf_common+0xbe>
 800692e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006932:	4639      	mov	r1, r7
 8006934:	4630      	mov	r0, r6
 8006936:	47c0      	blx	r8
 8006938:	3001      	adds	r0, #1
 800693a:	d020      	beq.n	800697e <_printf_common+0xb2>
 800693c:	6823      	ldr	r3, [r4, #0]
 800693e:	68e5      	ldr	r5, [r4, #12]
 8006940:	f8d9 2000 	ldr.w	r2, [r9]
 8006944:	f003 0306 	and.w	r3, r3, #6
 8006948:	2b04      	cmp	r3, #4
 800694a:	bf08      	it	eq
 800694c:	1aad      	subeq	r5, r5, r2
 800694e:	68a3      	ldr	r3, [r4, #8]
 8006950:	6922      	ldr	r2, [r4, #16]
 8006952:	bf0c      	ite	eq
 8006954:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006958:	2500      	movne	r5, #0
 800695a:	4293      	cmp	r3, r2
 800695c:	bfc4      	itt	gt
 800695e:	1a9b      	subgt	r3, r3, r2
 8006960:	18ed      	addgt	r5, r5, r3
 8006962:	f04f 0900 	mov.w	r9, #0
 8006966:	341a      	adds	r4, #26
 8006968:	454d      	cmp	r5, r9
 800696a:	d11a      	bne.n	80069a2 <_printf_common+0xd6>
 800696c:	2000      	movs	r0, #0
 800696e:	e008      	b.n	8006982 <_printf_common+0xb6>
 8006970:	2301      	movs	r3, #1
 8006972:	4652      	mov	r2, sl
 8006974:	4639      	mov	r1, r7
 8006976:	4630      	mov	r0, r6
 8006978:	47c0      	blx	r8
 800697a:	3001      	adds	r0, #1
 800697c:	d103      	bne.n	8006986 <_printf_common+0xba>
 800697e:	f04f 30ff 	mov.w	r0, #4294967295
 8006982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006986:	3501      	adds	r5, #1
 8006988:	e7c3      	b.n	8006912 <_printf_common+0x46>
 800698a:	18e1      	adds	r1, r4, r3
 800698c:	1c5a      	adds	r2, r3, #1
 800698e:	2030      	movs	r0, #48	; 0x30
 8006990:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006994:	4422      	add	r2, r4
 8006996:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800699a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800699e:	3302      	adds	r3, #2
 80069a0:	e7c5      	b.n	800692e <_printf_common+0x62>
 80069a2:	2301      	movs	r3, #1
 80069a4:	4622      	mov	r2, r4
 80069a6:	4639      	mov	r1, r7
 80069a8:	4630      	mov	r0, r6
 80069aa:	47c0      	blx	r8
 80069ac:	3001      	adds	r0, #1
 80069ae:	d0e6      	beq.n	800697e <_printf_common+0xb2>
 80069b0:	f109 0901 	add.w	r9, r9, #1
 80069b4:	e7d8      	b.n	8006968 <_printf_common+0x9c>
	...

080069b8 <_printf_i>:
 80069b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80069bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80069c0:	460c      	mov	r4, r1
 80069c2:	7e09      	ldrb	r1, [r1, #24]
 80069c4:	b085      	sub	sp, #20
 80069c6:	296e      	cmp	r1, #110	; 0x6e
 80069c8:	4617      	mov	r7, r2
 80069ca:	4606      	mov	r6, r0
 80069cc:	4698      	mov	r8, r3
 80069ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069d0:	f000 80b3 	beq.w	8006b3a <_printf_i+0x182>
 80069d4:	d822      	bhi.n	8006a1c <_printf_i+0x64>
 80069d6:	2963      	cmp	r1, #99	; 0x63
 80069d8:	d036      	beq.n	8006a48 <_printf_i+0x90>
 80069da:	d80a      	bhi.n	80069f2 <_printf_i+0x3a>
 80069dc:	2900      	cmp	r1, #0
 80069de:	f000 80b9 	beq.w	8006b54 <_printf_i+0x19c>
 80069e2:	2958      	cmp	r1, #88	; 0x58
 80069e4:	f000 8083 	beq.w	8006aee <_printf_i+0x136>
 80069e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80069f0:	e032      	b.n	8006a58 <_printf_i+0xa0>
 80069f2:	2964      	cmp	r1, #100	; 0x64
 80069f4:	d001      	beq.n	80069fa <_printf_i+0x42>
 80069f6:	2969      	cmp	r1, #105	; 0x69
 80069f8:	d1f6      	bne.n	80069e8 <_printf_i+0x30>
 80069fa:	6820      	ldr	r0, [r4, #0]
 80069fc:	6813      	ldr	r3, [r2, #0]
 80069fe:	0605      	lsls	r5, r0, #24
 8006a00:	f103 0104 	add.w	r1, r3, #4
 8006a04:	d52a      	bpl.n	8006a5c <_printf_i+0xa4>
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6011      	str	r1, [r2, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	da03      	bge.n	8006a16 <_printf_i+0x5e>
 8006a0e:	222d      	movs	r2, #45	; 0x2d
 8006a10:	425b      	negs	r3, r3
 8006a12:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006a16:	486f      	ldr	r0, [pc, #444]	; (8006bd4 <_printf_i+0x21c>)
 8006a18:	220a      	movs	r2, #10
 8006a1a:	e039      	b.n	8006a90 <_printf_i+0xd8>
 8006a1c:	2973      	cmp	r1, #115	; 0x73
 8006a1e:	f000 809d 	beq.w	8006b5c <_printf_i+0x1a4>
 8006a22:	d808      	bhi.n	8006a36 <_printf_i+0x7e>
 8006a24:	296f      	cmp	r1, #111	; 0x6f
 8006a26:	d020      	beq.n	8006a6a <_printf_i+0xb2>
 8006a28:	2970      	cmp	r1, #112	; 0x70
 8006a2a:	d1dd      	bne.n	80069e8 <_printf_i+0x30>
 8006a2c:	6823      	ldr	r3, [r4, #0]
 8006a2e:	f043 0320 	orr.w	r3, r3, #32
 8006a32:	6023      	str	r3, [r4, #0]
 8006a34:	e003      	b.n	8006a3e <_printf_i+0x86>
 8006a36:	2975      	cmp	r1, #117	; 0x75
 8006a38:	d017      	beq.n	8006a6a <_printf_i+0xb2>
 8006a3a:	2978      	cmp	r1, #120	; 0x78
 8006a3c:	d1d4      	bne.n	80069e8 <_printf_i+0x30>
 8006a3e:	2378      	movs	r3, #120	; 0x78
 8006a40:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a44:	4864      	ldr	r0, [pc, #400]	; (8006bd8 <_printf_i+0x220>)
 8006a46:	e055      	b.n	8006af4 <_printf_i+0x13c>
 8006a48:	6813      	ldr	r3, [r2, #0]
 8006a4a:	1d19      	adds	r1, r3, #4
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	6011      	str	r1, [r2, #0]
 8006a50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e08c      	b.n	8006b76 <_printf_i+0x1be>
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	6011      	str	r1, [r2, #0]
 8006a60:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a64:	bf18      	it	ne
 8006a66:	b21b      	sxthne	r3, r3
 8006a68:	e7cf      	b.n	8006a0a <_printf_i+0x52>
 8006a6a:	6813      	ldr	r3, [r2, #0]
 8006a6c:	6825      	ldr	r5, [r4, #0]
 8006a6e:	1d18      	adds	r0, r3, #4
 8006a70:	6010      	str	r0, [r2, #0]
 8006a72:	0628      	lsls	r0, r5, #24
 8006a74:	d501      	bpl.n	8006a7a <_printf_i+0xc2>
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	e002      	b.n	8006a80 <_printf_i+0xc8>
 8006a7a:	0668      	lsls	r0, r5, #25
 8006a7c:	d5fb      	bpl.n	8006a76 <_printf_i+0xbe>
 8006a7e:	881b      	ldrh	r3, [r3, #0]
 8006a80:	4854      	ldr	r0, [pc, #336]	; (8006bd4 <_printf_i+0x21c>)
 8006a82:	296f      	cmp	r1, #111	; 0x6f
 8006a84:	bf14      	ite	ne
 8006a86:	220a      	movne	r2, #10
 8006a88:	2208      	moveq	r2, #8
 8006a8a:	2100      	movs	r1, #0
 8006a8c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a90:	6865      	ldr	r5, [r4, #4]
 8006a92:	60a5      	str	r5, [r4, #8]
 8006a94:	2d00      	cmp	r5, #0
 8006a96:	f2c0 8095 	blt.w	8006bc4 <_printf_i+0x20c>
 8006a9a:	6821      	ldr	r1, [r4, #0]
 8006a9c:	f021 0104 	bic.w	r1, r1, #4
 8006aa0:	6021      	str	r1, [r4, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d13d      	bne.n	8006b22 <_printf_i+0x16a>
 8006aa6:	2d00      	cmp	r5, #0
 8006aa8:	f040 808e 	bne.w	8006bc8 <_printf_i+0x210>
 8006aac:	4665      	mov	r5, ip
 8006aae:	2a08      	cmp	r2, #8
 8006ab0:	d10b      	bne.n	8006aca <_printf_i+0x112>
 8006ab2:	6823      	ldr	r3, [r4, #0]
 8006ab4:	07db      	lsls	r3, r3, #31
 8006ab6:	d508      	bpl.n	8006aca <_printf_i+0x112>
 8006ab8:	6923      	ldr	r3, [r4, #16]
 8006aba:	6862      	ldr	r2, [r4, #4]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	bfde      	ittt	le
 8006ac0:	2330      	movle	r3, #48	; 0x30
 8006ac2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ac6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006aca:	ebac 0305 	sub.w	r3, ip, r5
 8006ace:	6123      	str	r3, [r4, #16]
 8006ad0:	f8cd 8000 	str.w	r8, [sp]
 8006ad4:	463b      	mov	r3, r7
 8006ad6:	aa03      	add	r2, sp, #12
 8006ad8:	4621      	mov	r1, r4
 8006ada:	4630      	mov	r0, r6
 8006adc:	f7ff fef6 	bl	80068cc <_printf_common>
 8006ae0:	3001      	adds	r0, #1
 8006ae2:	d14d      	bne.n	8006b80 <_printf_i+0x1c8>
 8006ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae8:	b005      	add	sp, #20
 8006aea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006aee:	4839      	ldr	r0, [pc, #228]	; (8006bd4 <_printf_i+0x21c>)
 8006af0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006af4:	6813      	ldr	r3, [r2, #0]
 8006af6:	6821      	ldr	r1, [r4, #0]
 8006af8:	1d1d      	adds	r5, r3, #4
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6015      	str	r5, [r2, #0]
 8006afe:	060a      	lsls	r2, r1, #24
 8006b00:	d50b      	bpl.n	8006b1a <_printf_i+0x162>
 8006b02:	07ca      	lsls	r2, r1, #31
 8006b04:	bf44      	itt	mi
 8006b06:	f041 0120 	orrmi.w	r1, r1, #32
 8006b0a:	6021      	strmi	r1, [r4, #0]
 8006b0c:	b91b      	cbnz	r3, 8006b16 <_printf_i+0x15e>
 8006b0e:	6822      	ldr	r2, [r4, #0]
 8006b10:	f022 0220 	bic.w	r2, r2, #32
 8006b14:	6022      	str	r2, [r4, #0]
 8006b16:	2210      	movs	r2, #16
 8006b18:	e7b7      	b.n	8006a8a <_printf_i+0xd2>
 8006b1a:	064d      	lsls	r5, r1, #25
 8006b1c:	bf48      	it	mi
 8006b1e:	b29b      	uxthmi	r3, r3
 8006b20:	e7ef      	b.n	8006b02 <_printf_i+0x14a>
 8006b22:	4665      	mov	r5, ip
 8006b24:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b28:	fb02 3311 	mls	r3, r2, r1, r3
 8006b2c:	5cc3      	ldrb	r3, [r0, r3]
 8006b2e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006b32:	460b      	mov	r3, r1
 8006b34:	2900      	cmp	r1, #0
 8006b36:	d1f5      	bne.n	8006b24 <_printf_i+0x16c>
 8006b38:	e7b9      	b.n	8006aae <_printf_i+0xf6>
 8006b3a:	6813      	ldr	r3, [r2, #0]
 8006b3c:	6825      	ldr	r5, [r4, #0]
 8006b3e:	6961      	ldr	r1, [r4, #20]
 8006b40:	1d18      	adds	r0, r3, #4
 8006b42:	6010      	str	r0, [r2, #0]
 8006b44:	0628      	lsls	r0, r5, #24
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	d501      	bpl.n	8006b4e <_printf_i+0x196>
 8006b4a:	6019      	str	r1, [r3, #0]
 8006b4c:	e002      	b.n	8006b54 <_printf_i+0x19c>
 8006b4e:	066a      	lsls	r2, r5, #25
 8006b50:	d5fb      	bpl.n	8006b4a <_printf_i+0x192>
 8006b52:	8019      	strh	r1, [r3, #0]
 8006b54:	2300      	movs	r3, #0
 8006b56:	6123      	str	r3, [r4, #16]
 8006b58:	4665      	mov	r5, ip
 8006b5a:	e7b9      	b.n	8006ad0 <_printf_i+0x118>
 8006b5c:	6813      	ldr	r3, [r2, #0]
 8006b5e:	1d19      	adds	r1, r3, #4
 8006b60:	6011      	str	r1, [r2, #0]
 8006b62:	681d      	ldr	r5, [r3, #0]
 8006b64:	6862      	ldr	r2, [r4, #4]
 8006b66:	2100      	movs	r1, #0
 8006b68:	4628      	mov	r0, r5
 8006b6a:	f7f9 fb39 	bl	80001e0 <memchr>
 8006b6e:	b108      	cbz	r0, 8006b74 <_printf_i+0x1bc>
 8006b70:	1b40      	subs	r0, r0, r5
 8006b72:	6060      	str	r0, [r4, #4]
 8006b74:	6863      	ldr	r3, [r4, #4]
 8006b76:	6123      	str	r3, [r4, #16]
 8006b78:	2300      	movs	r3, #0
 8006b7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b7e:	e7a7      	b.n	8006ad0 <_printf_i+0x118>
 8006b80:	6923      	ldr	r3, [r4, #16]
 8006b82:	462a      	mov	r2, r5
 8006b84:	4639      	mov	r1, r7
 8006b86:	4630      	mov	r0, r6
 8006b88:	47c0      	blx	r8
 8006b8a:	3001      	adds	r0, #1
 8006b8c:	d0aa      	beq.n	8006ae4 <_printf_i+0x12c>
 8006b8e:	6823      	ldr	r3, [r4, #0]
 8006b90:	079b      	lsls	r3, r3, #30
 8006b92:	d413      	bmi.n	8006bbc <_printf_i+0x204>
 8006b94:	68e0      	ldr	r0, [r4, #12]
 8006b96:	9b03      	ldr	r3, [sp, #12]
 8006b98:	4298      	cmp	r0, r3
 8006b9a:	bfb8      	it	lt
 8006b9c:	4618      	movlt	r0, r3
 8006b9e:	e7a3      	b.n	8006ae8 <_printf_i+0x130>
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	464a      	mov	r2, r9
 8006ba4:	4639      	mov	r1, r7
 8006ba6:	4630      	mov	r0, r6
 8006ba8:	47c0      	blx	r8
 8006baa:	3001      	adds	r0, #1
 8006bac:	d09a      	beq.n	8006ae4 <_printf_i+0x12c>
 8006bae:	3501      	adds	r5, #1
 8006bb0:	68e3      	ldr	r3, [r4, #12]
 8006bb2:	9a03      	ldr	r2, [sp, #12]
 8006bb4:	1a9b      	subs	r3, r3, r2
 8006bb6:	42ab      	cmp	r3, r5
 8006bb8:	dcf2      	bgt.n	8006ba0 <_printf_i+0x1e8>
 8006bba:	e7eb      	b.n	8006b94 <_printf_i+0x1dc>
 8006bbc:	2500      	movs	r5, #0
 8006bbe:	f104 0919 	add.w	r9, r4, #25
 8006bc2:	e7f5      	b.n	8006bb0 <_printf_i+0x1f8>
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d1ac      	bne.n	8006b22 <_printf_i+0x16a>
 8006bc8:	7803      	ldrb	r3, [r0, #0]
 8006bca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bd2:	e76c      	b.n	8006aae <_printf_i+0xf6>
 8006bd4:	08009796 	.word	0x08009796
 8006bd8:	080097a7 	.word	0x080097a7

08006bdc <_sbrk_r>:
 8006bdc:	b538      	push	{r3, r4, r5, lr}
 8006bde:	4c06      	ldr	r4, [pc, #24]	; (8006bf8 <_sbrk_r+0x1c>)
 8006be0:	2300      	movs	r3, #0
 8006be2:	4605      	mov	r5, r0
 8006be4:	4608      	mov	r0, r1
 8006be6:	6023      	str	r3, [r4, #0]
 8006be8:	f7fb fe1c 	bl	8002824 <_sbrk>
 8006bec:	1c43      	adds	r3, r0, #1
 8006bee:	d102      	bne.n	8006bf6 <_sbrk_r+0x1a>
 8006bf0:	6823      	ldr	r3, [r4, #0]
 8006bf2:	b103      	cbz	r3, 8006bf6 <_sbrk_r+0x1a>
 8006bf4:	602b      	str	r3, [r5, #0]
 8006bf6:	bd38      	pop	{r3, r4, r5, pc}
 8006bf8:	20001f18 	.word	0x20001f18

08006bfc <sniprintf>:
 8006bfc:	b40c      	push	{r2, r3}
 8006bfe:	b530      	push	{r4, r5, lr}
 8006c00:	4b17      	ldr	r3, [pc, #92]	; (8006c60 <sniprintf+0x64>)
 8006c02:	1e0c      	subs	r4, r1, #0
 8006c04:	b09d      	sub	sp, #116	; 0x74
 8006c06:	681d      	ldr	r5, [r3, #0]
 8006c08:	da08      	bge.n	8006c1c <sniprintf+0x20>
 8006c0a:	238b      	movs	r3, #139	; 0x8b
 8006c0c:	602b      	str	r3, [r5, #0]
 8006c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c12:	b01d      	add	sp, #116	; 0x74
 8006c14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c18:	b002      	add	sp, #8
 8006c1a:	4770      	bx	lr
 8006c1c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006c20:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006c24:	bf14      	ite	ne
 8006c26:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006c2a:	4623      	moveq	r3, r4
 8006c2c:	9304      	str	r3, [sp, #16]
 8006c2e:	9307      	str	r3, [sp, #28]
 8006c30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006c34:	9002      	str	r0, [sp, #8]
 8006c36:	9006      	str	r0, [sp, #24]
 8006c38:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006c3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006c3e:	ab21      	add	r3, sp, #132	; 0x84
 8006c40:	a902      	add	r1, sp, #8
 8006c42:	4628      	mov	r0, r5
 8006c44:	9301      	str	r3, [sp, #4]
 8006c46:	f001 faa1 	bl	800818c <_svfiprintf_r>
 8006c4a:	1c43      	adds	r3, r0, #1
 8006c4c:	bfbc      	itt	lt
 8006c4e:	238b      	movlt	r3, #139	; 0x8b
 8006c50:	602b      	strlt	r3, [r5, #0]
 8006c52:	2c00      	cmp	r4, #0
 8006c54:	d0dd      	beq.n	8006c12 <sniprintf+0x16>
 8006c56:	9b02      	ldr	r3, [sp, #8]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	701a      	strb	r2, [r3, #0]
 8006c5c:	e7d9      	b.n	8006c12 <sniprintf+0x16>
 8006c5e:	bf00      	nop
 8006c60:	2000000c 	.word	0x2000000c

08006c64 <strtok>:
 8006c64:	4b13      	ldr	r3, [pc, #76]	; (8006cb4 <strtok+0x50>)
 8006c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c6a:	681d      	ldr	r5, [r3, #0]
 8006c6c:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8006c6e:	4606      	mov	r6, r0
 8006c70:	460f      	mov	r7, r1
 8006c72:	b9b4      	cbnz	r4, 8006ca2 <strtok+0x3e>
 8006c74:	2050      	movs	r0, #80	; 0x50
 8006c76:	f7ff fa89 	bl	800618c <malloc>
 8006c7a:	65a8      	str	r0, [r5, #88]	; 0x58
 8006c7c:	e9c0 4400 	strd	r4, r4, [r0]
 8006c80:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006c84:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006c88:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006c8c:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006c90:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006c94:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006c98:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006c9c:	6184      	str	r4, [r0, #24]
 8006c9e:	7704      	strb	r4, [r0, #28]
 8006ca0:	6244      	str	r4, [r0, #36]	; 0x24
 8006ca2:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8006ca4:	4639      	mov	r1, r7
 8006ca6:	4630      	mov	r0, r6
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cae:	f000 b803 	b.w	8006cb8 <__strtok_r>
 8006cb2:	bf00      	nop
 8006cb4:	2000000c 	.word	0x2000000c

08006cb8 <__strtok_r>:
 8006cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cba:	b918      	cbnz	r0, 8006cc4 <__strtok_r+0xc>
 8006cbc:	6810      	ldr	r0, [r2, #0]
 8006cbe:	b908      	cbnz	r0, 8006cc4 <__strtok_r+0xc>
 8006cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	4604      	mov	r4, r0
 8006cc6:	460f      	mov	r7, r1
 8006cc8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006ccc:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006cd0:	b91e      	cbnz	r6, 8006cda <__strtok_r+0x22>
 8006cd2:	b96d      	cbnz	r5, 8006cf0 <__strtok_r+0x38>
 8006cd4:	6015      	str	r5, [r2, #0]
 8006cd6:	4628      	mov	r0, r5
 8006cd8:	e7f2      	b.n	8006cc0 <__strtok_r+0x8>
 8006cda:	42b5      	cmp	r5, r6
 8006cdc:	d1f6      	bne.n	8006ccc <__strtok_r+0x14>
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1ef      	bne.n	8006cc2 <__strtok_r+0xa>
 8006ce2:	6014      	str	r4, [r2, #0]
 8006ce4:	7003      	strb	r3, [r0, #0]
 8006ce6:	e7eb      	b.n	8006cc0 <__strtok_r+0x8>
 8006ce8:	462b      	mov	r3, r5
 8006cea:	e00d      	b.n	8006d08 <__strtok_r+0x50>
 8006cec:	b926      	cbnz	r6, 8006cf8 <__strtok_r+0x40>
 8006cee:	461c      	mov	r4, r3
 8006cf0:	4623      	mov	r3, r4
 8006cf2:	460f      	mov	r7, r1
 8006cf4:	f813 5b01 	ldrb.w	r5, [r3], #1
 8006cf8:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006cfc:	42b5      	cmp	r5, r6
 8006cfe:	d1f5      	bne.n	8006cec <__strtok_r+0x34>
 8006d00:	2d00      	cmp	r5, #0
 8006d02:	d0f1      	beq.n	8006ce8 <__strtok_r+0x30>
 8006d04:	2100      	movs	r1, #0
 8006d06:	7021      	strb	r1, [r4, #0]
 8006d08:	6013      	str	r3, [r2, #0]
 8006d0a:	e7d9      	b.n	8006cc0 <__strtok_r+0x8>

08006d0c <_strtol_l.isra.0>:
 8006d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d10:	4680      	mov	r8, r0
 8006d12:	4689      	mov	r9, r1
 8006d14:	4692      	mov	sl, r2
 8006d16:	461e      	mov	r6, r3
 8006d18:	460f      	mov	r7, r1
 8006d1a:	463d      	mov	r5, r7
 8006d1c:	9808      	ldr	r0, [sp, #32]
 8006d1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d22:	f000 fec9 	bl	8007ab8 <__locale_ctype_ptr_l>
 8006d26:	4420      	add	r0, r4
 8006d28:	7843      	ldrb	r3, [r0, #1]
 8006d2a:	f013 0308 	ands.w	r3, r3, #8
 8006d2e:	d132      	bne.n	8006d96 <_strtol_l.isra.0+0x8a>
 8006d30:	2c2d      	cmp	r4, #45	; 0x2d
 8006d32:	d132      	bne.n	8006d9a <_strtol_l.isra.0+0x8e>
 8006d34:	787c      	ldrb	r4, [r7, #1]
 8006d36:	1cbd      	adds	r5, r7, #2
 8006d38:	2201      	movs	r2, #1
 8006d3a:	2e00      	cmp	r6, #0
 8006d3c:	d05d      	beq.n	8006dfa <_strtol_l.isra.0+0xee>
 8006d3e:	2e10      	cmp	r6, #16
 8006d40:	d109      	bne.n	8006d56 <_strtol_l.isra.0+0x4a>
 8006d42:	2c30      	cmp	r4, #48	; 0x30
 8006d44:	d107      	bne.n	8006d56 <_strtol_l.isra.0+0x4a>
 8006d46:	782b      	ldrb	r3, [r5, #0]
 8006d48:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006d4c:	2b58      	cmp	r3, #88	; 0x58
 8006d4e:	d14f      	bne.n	8006df0 <_strtol_l.isra.0+0xe4>
 8006d50:	786c      	ldrb	r4, [r5, #1]
 8006d52:	2610      	movs	r6, #16
 8006d54:	3502      	adds	r5, #2
 8006d56:	2a00      	cmp	r2, #0
 8006d58:	bf14      	ite	ne
 8006d5a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8006d5e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8006d62:	2700      	movs	r7, #0
 8006d64:	fbb1 fcf6 	udiv	ip, r1, r6
 8006d68:	4638      	mov	r0, r7
 8006d6a:	fb06 1e1c 	mls	lr, r6, ip, r1
 8006d6e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8006d72:	2b09      	cmp	r3, #9
 8006d74:	d817      	bhi.n	8006da6 <_strtol_l.isra.0+0x9a>
 8006d76:	461c      	mov	r4, r3
 8006d78:	42a6      	cmp	r6, r4
 8006d7a:	dd23      	ble.n	8006dc4 <_strtol_l.isra.0+0xb8>
 8006d7c:	1c7b      	adds	r3, r7, #1
 8006d7e:	d007      	beq.n	8006d90 <_strtol_l.isra.0+0x84>
 8006d80:	4584      	cmp	ip, r0
 8006d82:	d31c      	bcc.n	8006dbe <_strtol_l.isra.0+0xb2>
 8006d84:	d101      	bne.n	8006d8a <_strtol_l.isra.0+0x7e>
 8006d86:	45a6      	cmp	lr, r4
 8006d88:	db19      	blt.n	8006dbe <_strtol_l.isra.0+0xb2>
 8006d8a:	fb00 4006 	mla	r0, r0, r6, r4
 8006d8e:	2701      	movs	r7, #1
 8006d90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d94:	e7eb      	b.n	8006d6e <_strtol_l.isra.0+0x62>
 8006d96:	462f      	mov	r7, r5
 8006d98:	e7bf      	b.n	8006d1a <_strtol_l.isra.0+0xe>
 8006d9a:	2c2b      	cmp	r4, #43	; 0x2b
 8006d9c:	bf04      	itt	eq
 8006d9e:	1cbd      	addeq	r5, r7, #2
 8006da0:	787c      	ldrbeq	r4, [r7, #1]
 8006da2:	461a      	mov	r2, r3
 8006da4:	e7c9      	b.n	8006d3a <_strtol_l.isra.0+0x2e>
 8006da6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006daa:	2b19      	cmp	r3, #25
 8006dac:	d801      	bhi.n	8006db2 <_strtol_l.isra.0+0xa6>
 8006dae:	3c37      	subs	r4, #55	; 0x37
 8006db0:	e7e2      	b.n	8006d78 <_strtol_l.isra.0+0x6c>
 8006db2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006db6:	2b19      	cmp	r3, #25
 8006db8:	d804      	bhi.n	8006dc4 <_strtol_l.isra.0+0xb8>
 8006dba:	3c57      	subs	r4, #87	; 0x57
 8006dbc:	e7dc      	b.n	8006d78 <_strtol_l.isra.0+0x6c>
 8006dbe:	f04f 37ff 	mov.w	r7, #4294967295
 8006dc2:	e7e5      	b.n	8006d90 <_strtol_l.isra.0+0x84>
 8006dc4:	1c7b      	adds	r3, r7, #1
 8006dc6:	d108      	bne.n	8006dda <_strtol_l.isra.0+0xce>
 8006dc8:	2322      	movs	r3, #34	; 0x22
 8006dca:	f8c8 3000 	str.w	r3, [r8]
 8006dce:	4608      	mov	r0, r1
 8006dd0:	f1ba 0f00 	cmp.w	sl, #0
 8006dd4:	d107      	bne.n	8006de6 <_strtol_l.isra.0+0xda>
 8006dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dda:	b102      	cbz	r2, 8006dde <_strtol_l.isra.0+0xd2>
 8006ddc:	4240      	negs	r0, r0
 8006dde:	f1ba 0f00 	cmp.w	sl, #0
 8006de2:	d0f8      	beq.n	8006dd6 <_strtol_l.isra.0+0xca>
 8006de4:	b10f      	cbz	r7, 8006dea <_strtol_l.isra.0+0xde>
 8006de6:	f105 39ff 	add.w	r9, r5, #4294967295
 8006dea:	f8ca 9000 	str.w	r9, [sl]
 8006dee:	e7f2      	b.n	8006dd6 <_strtol_l.isra.0+0xca>
 8006df0:	2430      	movs	r4, #48	; 0x30
 8006df2:	2e00      	cmp	r6, #0
 8006df4:	d1af      	bne.n	8006d56 <_strtol_l.isra.0+0x4a>
 8006df6:	2608      	movs	r6, #8
 8006df8:	e7ad      	b.n	8006d56 <_strtol_l.isra.0+0x4a>
 8006dfa:	2c30      	cmp	r4, #48	; 0x30
 8006dfc:	d0a3      	beq.n	8006d46 <_strtol_l.isra.0+0x3a>
 8006dfe:	260a      	movs	r6, #10
 8006e00:	e7a9      	b.n	8006d56 <_strtol_l.isra.0+0x4a>
	...

08006e04 <strtol>:
 8006e04:	4b08      	ldr	r3, [pc, #32]	; (8006e28 <strtol+0x24>)
 8006e06:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e08:	681c      	ldr	r4, [r3, #0]
 8006e0a:	4d08      	ldr	r5, [pc, #32]	; (8006e2c <strtol+0x28>)
 8006e0c:	6a23      	ldr	r3, [r4, #32]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	bf08      	it	eq
 8006e12:	462b      	moveq	r3, r5
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	4613      	mov	r3, r2
 8006e18:	460a      	mov	r2, r1
 8006e1a:	4601      	mov	r1, r0
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	f7ff ff75 	bl	8006d0c <_strtol_l.isra.0>
 8006e22:	b003      	add	sp, #12
 8006e24:	bd30      	pop	{r4, r5, pc}
 8006e26:	bf00      	nop
 8006e28:	2000000c 	.word	0x2000000c
 8006e2c:	20000070 	.word	0x20000070

08006e30 <quorem>:
 8006e30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e34:	6903      	ldr	r3, [r0, #16]
 8006e36:	690c      	ldr	r4, [r1, #16]
 8006e38:	42a3      	cmp	r3, r4
 8006e3a:	4680      	mov	r8, r0
 8006e3c:	f2c0 8082 	blt.w	8006f44 <quorem+0x114>
 8006e40:	3c01      	subs	r4, #1
 8006e42:	f101 0714 	add.w	r7, r1, #20
 8006e46:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006e4a:	f100 0614 	add.w	r6, r0, #20
 8006e4e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006e52:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006e56:	eb06 030c 	add.w	r3, r6, ip
 8006e5a:	3501      	adds	r5, #1
 8006e5c:	eb07 090c 	add.w	r9, r7, ip
 8006e60:	9301      	str	r3, [sp, #4]
 8006e62:	fbb0 f5f5 	udiv	r5, r0, r5
 8006e66:	b395      	cbz	r5, 8006ece <quorem+0x9e>
 8006e68:	f04f 0a00 	mov.w	sl, #0
 8006e6c:	4638      	mov	r0, r7
 8006e6e:	46b6      	mov	lr, r6
 8006e70:	46d3      	mov	fp, sl
 8006e72:	f850 2b04 	ldr.w	r2, [r0], #4
 8006e76:	b293      	uxth	r3, r2
 8006e78:	fb05 a303 	mla	r3, r5, r3, sl
 8006e7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	ebab 0303 	sub.w	r3, fp, r3
 8006e86:	0c12      	lsrs	r2, r2, #16
 8006e88:	f8de b000 	ldr.w	fp, [lr]
 8006e8c:	fb05 a202 	mla	r2, r5, r2, sl
 8006e90:	fa13 f38b 	uxtah	r3, r3, fp
 8006e94:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006e98:	fa1f fb82 	uxth.w	fp, r2
 8006e9c:	f8de 2000 	ldr.w	r2, [lr]
 8006ea0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006ea4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006eae:	4581      	cmp	r9, r0
 8006eb0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006eb4:	f84e 3b04 	str.w	r3, [lr], #4
 8006eb8:	d2db      	bcs.n	8006e72 <quorem+0x42>
 8006eba:	f856 300c 	ldr.w	r3, [r6, ip]
 8006ebe:	b933      	cbnz	r3, 8006ece <quorem+0x9e>
 8006ec0:	9b01      	ldr	r3, [sp, #4]
 8006ec2:	3b04      	subs	r3, #4
 8006ec4:	429e      	cmp	r6, r3
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	d330      	bcc.n	8006f2c <quorem+0xfc>
 8006eca:	f8c8 4010 	str.w	r4, [r8, #16]
 8006ece:	4640      	mov	r0, r8
 8006ed0:	f001 f82e 	bl	8007f30 <__mcmp>
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	db25      	blt.n	8006f24 <quorem+0xf4>
 8006ed8:	3501      	adds	r5, #1
 8006eda:	4630      	mov	r0, r6
 8006edc:	f04f 0c00 	mov.w	ip, #0
 8006ee0:	f857 2b04 	ldr.w	r2, [r7], #4
 8006ee4:	f8d0 e000 	ldr.w	lr, [r0]
 8006ee8:	b293      	uxth	r3, r2
 8006eea:	ebac 0303 	sub.w	r3, ip, r3
 8006eee:	0c12      	lsrs	r2, r2, #16
 8006ef0:	fa13 f38e 	uxtah	r3, r3, lr
 8006ef4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006ef8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f02:	45b9      	cmp	r9, r7
 8006f04:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006f08:	f840 3b04 	str.w	r3, [r0], #4
 8006f0c:	d2e8      	bcs.n	8006ee0 <quorem+0xb0>
 8006f0e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006f12:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006f16:	b92a      	cbnz	r2, 8006f24 <quorem+0xf4>
 8006f18:	3b04      	subs	r3, #4
 8006f1a:	429e      	cmp	r6, r3
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	d30b      	bcc.n	8006f38 <quorem+0x108>
 8006f20:	f8c8 4010 	str.w	r4, [r8, #16]
 8006f24:	4628      	mov	r0, r5
 8006f26:	b003      	add	sp, #12
 8006f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f2c:	6812      	ldr	r2, [r2, #0]
 8006f2e:	3b04      	subs	r3, #4
 8006f30:	2a00      	cmp	r2, #0
 8006f32:	d1ca      	bne.n	8006eca <quorem+0x9a>
 8006f34:	3c01      	subs	r4, #1
 8006f36:	e7c5      	b.n	8006ec4 <quorem+0x94>
 8006f38:	6812      	ldr	r2, [r2, #0]
 8006f3a:	3b04      	subs	r3, #4
 8006f3c:	2a00      	cmp	r2, #0
 8006f3e:	d1ef      	bne.n	8006f20 <quorem+0xf0>
 8006f40:	3c01      	subs	r4, #1
 8006f42:	e7ea      	b.n	8006f1a <quorem+0xea>
 8006f44:	2000      	movs	r0, #0
 8006f46:	e7ee      	b.n	8006f26 <quorem+0xf6>

08006f48 <_dtoa_r>:
 8006f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f4c:	ec57 6b10 	vmov	r6, r7, d0
 8006f50:	b097      	sub	sp, #92	; 0x5c
 8006f52:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006f54:	9106      	str	r1, [sp, #24]
 8006f56:	4604      	mov	r4, r0
 8006f58:	920b      	str	r2, [sp, #44]	; 0x2c
 8006f5a:	9312      	str	r3, [sp, #72]	; 0x48
 8006f5c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006f60:	e9cd 6700 	strd	r6, r7, [sp]
 8006f64:	b93d      	cbnz	r5, 8006f76 <_dtoa_r+0x2e>
 8006f66:	2010      	movs	r0, #16
 8006f68:	f7ff f910 	bl	800618c <malloc>
 8006f6c:	6260      	str	r0, [r4, #36]	; 0x24
 8006f6e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006f72:	6005      	str	r5, [r0, #0]
 8006f74:	60c5      	str	r5, [r0, #12]
 8006f76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f78:	6819      	ldr	r1, [r3, #0]
 8006f7a:	b151      	cbz	r1, 8006f92 <_dtoa_r+0x4a>
 8006f7c:	685a      	ldr	r2, [r3, #4]
 8006f7e:	604a      	str	r2, [r1, #4]
 8006f80:	2301      	movs	r3, #1
 8006f82:	4093      	lsls	r3, r2
 8006f84:	608b      	str	r3, [r1, #8]
 8006f86:	4620      	mov	r0, r4
 8006f88:	f000 fdf0 	bl	8007b6c <_Bfree>
 8006f8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f8e:	2200      	movs	r2, #0
 8006f90:	601a      	str	r2, [r3, #0]
 8006f92:	1e3b      	subs	r3, r7, #0
 8006f94:	bfbb      	ittet	lt
 8006f96:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006f9a:	9301      	strlt	r3, [sp, #4]
 8006f9c:	2300      	movge	r3, #0
 8006f9e:	2201      	movlt	r2, #1
 8006fa0:	bfac      	ite	ge
 8006fa2:	f8c8 3000 	strge.w	r3, [r8]
 8006fa6:	f8c8 2000 	strlt.w	r2, [r8]
 8006faa:	4baf      	ldr	r3, [pc, #700]	; (8007268 <_dtoa_r+0x320>)
 8006fac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006fb0:	ea33 0308 	bics.w	r3, r3, r8
 8006fb4:	d114      	bne.n	8006fe0 <_dtoa_r+0x98>
 8006fb6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006fb8:	f242 730f 	movw	r3, #9999	; 0x270f
 8006fbc:	6013      	str	r3, [r2, #0]
 8006fbe:	9b00      	ldr	r3, [sp, #0]
 8006fc0:	b923      	cbnz	r3, 8006fcc <_dtoa_r+0x84>
 8006fc2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006fc6:	2800      	cmp	r0, #0
 8006fc8:	f000 8542 	beq.w	8007a50 <_dtoa_r+0xb08>
 8006fcc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fce:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800727c <_dtoa_r+0x334>
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	f000 8544 	beq.w	8007a60 <_dtoa_r+0xb18>
 8006fd8:	f10b 0303 	add.w	r3, fp, #3
 8006fdc:	f000 bd3e 	b.w	8007a5c <_dtoa_r+0xb14>
 8006fe0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	4630      	mov	r0, r6
 8006fea:	4639      	mov	r1, r7
 8006fec:	f7f9 fd6c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ff0:	4681      	mov	r9, r0
 8006ff2:	b168      	cbz	r0, 8007010 <_dtoa_r+0xc8>
 8006ff4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	6013      	str	r3, [r2, #0]
 8006ffa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f000 8524 	beq.w	8007a4a <_dtoa_r+0xb02>
 8007002:	4b9a      	ldr	r3, [pc, #616]	; (800726c <_dtoa_r+0x324>)
 8007004:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007006:	f103 3bff 	add.w	fp, r3, #4294967295
 800700a:	6013      	str	r3, [r2, #0]
 800700c:	f000 bd28 	b.w	8007a60 <_dtoa_r+0xb18>
 8007010:	aa14      	add	r2, sp, #80	; 0x50
 8007012:	a915      	add	r1, sp, #84	; 0x54
 8007014:	ec47 6b10 	vmov	d0, r6, r7
 8007018:	4620      	mov	r0, r4
 800701a:	f001 f800 	bl	800801e <__d2b>
 800701e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007022:	9004      	str	r0, [sp, #16]
 8007024:	2d00      	cmp	r5, #0
 8007026:	d07c      	beq.n	8007122 <_dtoa_r+0x1da>
 8007028:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800702c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007030:	46b2      	mov	sl, r6
 8007032:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007036:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800703a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800703e:	2200      	movs	r2, #0
 8007040:	4b8b      	ldr	r3, [pc, #556]	; (8007270 <_dtoa_r+0x328>)
 8007042:	4650      	mov	r0, sl
 8007044:	4659      	mov	r1, fp
 8007046:	f7f9 f91f 	bl	8000288 <__aeabi_dsub>
 800704a:	a381      	add	r3, pc, #516	; (adr r3, 8007250 <_dtoa_r+0x308>)
 800704c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007050:	f7f9 fad2 	bl	80005f8 <__aeabi_dmul>
 8007054:	a380      	add	r3, pc, #512	; (adr r3, 8007258 <_dtoa_r+0x310>)
 8007056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705a:	f7f9 f917 	bl	800028c <__adddf3>
 800705e:	4606      	mov	r6, r0
 8007060:	4628      	mov	r0, r5
 8007062:	460f      	mov	r7, r1
 8007064:	f7f9 fa5e 	bl	8000524 <__aeabi_i2d>
 8007068:	a37d      	add	r3, pc, #500	; (adr r3, 8007260 <_dtoa_r+0x318>)
 800706a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706e:	f7f9 fac3 	bl	80005f8 <__aeabi_dmul>
 8007072:	4602      	mov	r2, r0
 8007074:	460b      	mov	r3, r1
 8007076:	4630      	mov	r0, r6
 8007078:	4639      	mov	r1, r7
 800707a:	f7f9 f907 	bl	800028c <__adddf3>
 800707e:	4606      	mov	r6, r0
 8007080:	460f      	mov	r7, r1
 8007082:	f7f9 fd69 	bl	8000b58 <__aeabi_d2iz>
 8007086:	2200      	movs	r2, #0
 8007088:	4682      	mov	sl, r0
 800708a:	2300      	movs	r3, #0
 800708c:	4630      	mov	r0, r6
 800708e:	4639      	mov	r1, r7
 8007090:	f7f9 fd24 	bl	8000adc <__aeabi_dcmplt>
 8007094:	b148      	cbz	r0, 80070aa <_dtoa_r+0x162>
 8007096:	4650      	mov	r0, sl
 8007098:	f7f9 fa44 	bl	8000524 <__aeabi_i2d>
 800709c:	4632      	mov	r2, r6
 800709e:	463b      	mov	r3, r7
 80070a0:	f7f9 fd12 	bl	8000ac8 <__aeabi_dcmpeq>
 80070a4:	b908      	cbnz	r0, 80070aa <_dtoa_r+0x162>
 80070a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070aa:	f1ba 0f16 	cmp.w	sl, #22
 80070ae:	d859      	bhi.n	8007164 <_dtoa_r+0x21c>
 80070b0:	4970      	ldr	r1, [pc, #448]	; (8007274 <_dtoa_r+0x32c>)
 80070b2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80070b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070be:	f7f9 fd2b 	bl	8000b18 <__aeabi_dcmpgt>
 80070c2:	2800      	cmp	r0, #0
 80070c4:	d050      	beq.n	8007168 <_dtoa_r+0x220>
 80070c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070ca:	2300      	movs	r3, #0
 80070cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80070ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80070d0:	1b5d      	subs	r5, r3, r5
 80070d2:	f1b5 0801 	subs.w	r8, r5, #1
 80070d6:	bf49      	itett	mi
 80070d8:	f1c5 0301 	rsbmi	r3, r5, #1
 80070dc:	2300      	movpl	r3, #0
 80070de:	9305      	strmi	r3, [sp, #20]
 80070e0:	f04f 0800 	movmi.w	r8, #0
 80070e4:	bf58      	it	pl
 80070e6:	9305      	strpl	r3, [sp, #20]
 80070e8:	f1ba 0f00 	cmp.w	sl, #0
 80070ec:	db3e      	blt.n	800716c <_dtoa_r+0x224>
 80070ee:	2300      	movs	r3, #0
 80070f0:	44d0      	add	r8, sl
 80070f2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80070f6:	9307      	str	r3, [sp, #28]
 80070f8:	9b06      	ldr	r3, [sp, #24]
 80070fa:	2b09      	cmp	r3, #9
 80070fc:	f200 8090 	bhi.w	8007220 <_dtoa_r+0x2d8>
 8007100:	2b05      	cmp	r3, #5
 8007102:	bfc4      	itt	gt
 8007104:	3b04      	subgt	r3, #4
 8007106:	9306      	strgt	r3, [sp, #24]
 8007108:	9b06      	ldr	r3, [sp, #24]
 800710a:	f1a3 0302 	sub.w	r3, r3, #2
 800710e:	bfcc      	ite	gt
 8007110:	2500      	movgt	r5, #0
 8007112:	2501      	movle	r5, #1
 8007114:	2b03      	cmp	r3, #3
 8007116:	f200 808f 	bhi.w	8007238 <_dtoa_r+0x2f0>
 800711a:	e8df f003 	tbb	[pc, r3]
 800711e:	7f7d      	.short	0x7f7d
 8007120:	7131      	.short	0x7131
 8007122:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007126:	441d      	add	r5, r3
 8007128:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800712c:	2820      	cmp	r0, #32
 800712e:	dd13      	ble.n	8007158 <_dtoa_r+0x210>
 8007130:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007134:	9b00      	ldr	r3, [sp, #0]
 8007136:	fa08 f800 	lsl.w	r8, r8, r0
 800713a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800713e:	fa23 f000 	lsr.w	r0, r3, r0
 8007142:	ea48 0000 	orr.w	r0, r8, r0
 8007146:	f7f9 f9dd 	bl	8000504 <__aeabi_ui2d>
 800714a:	2301      	movs	r3, #1
 800714c:	4682      	mov	sl, r0
 800714e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007152:	3d01      	subs	r5, #1
 8007154:	9313      	str	r3, [sp, #76]	; 0x4c
 8007156:	e772      	b.n	800703e <_dtoa_r+0xf6>
 8007158:	9b00      	ldr	r3, [sp, #0]
 800715a:	f1c0 0020 	rsb	r0, r0, #32
 800715e:	fa03 f000 	lsl.w	r0, r3, r0
 8007162:	e7f0      	b.n	8007146 <_dtoa_r+0x1fe>
 8007164:	2301      	movs	r3, #1
 8007166:	e7b1      	b.n	80070cc <_dtoa_r+0x184>
 8007168:	900f      	str	r0, [sp, #60]	; 0x3c
 800716a:	e7b0      	b.n	80070ce <_dtoa_r+0x186>
 800716c:	9b05      	ldr	r3, [sp, #20]
 800716e:	eba3 030a 	sub.w	r3, r3, sl
 8007172:	9305      	str	r3, [sp, #20]
 8007174:	f1ca 0300 	rsb	r3, sl, #0
 8007178:	9307      	str	r3, [sp, #28]
 800717a:	2300      	movs	r3, #0
 800717c:	930e      	str	r3, [sp, #56]	; 0x38
 800717e:	e7bb      	b.n	80070f8 <_dtoa_r+0x1b0>
 8007180:	2301      	movs	r3, #1
 8007182:	930a      	str	r3, [sp, #40]	; 0x28
 8007184:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007186:	2b00      	cmp	r3, #0
 8007188:	dd59      	ble.n	800723e <_dtoa_r+0x2f6>
 800718a:	9302      	str	r3, [sp, #8]
 800718c:	4699      	mov	r9, r3
 800718e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007190:	2200      	movs	r2, #0
 8007192:	6072      	str	r2, [r6, #4]
 8007194:	2204      	movs	r2, #4
 8007196:	f102 0014 	add.w	r0, r2, #20
 800719a:	4298      	cmp	r0, r3
 800719c:	6871      	ldr	r1, [r6, #4]
 800719e:	d953      	bls.n	8007248 <_dtoa_r+0x300>
 80071a0:	4620      	mov	r0, r4
 80071a2:	f000 fcaf 	bl	8007b04 <_Balloc>
 80071a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071a8:	6030      	str	r0, [r6, #0]
 80071aa:	f1b9 0f0e 	cmp.w	r9, #14
 80071ae:	f8d3 b000 	ldr.w	fp, [r3]
 80071b2:	f200 80e6 	bhi.w	8007382 <_dtoa_r+0x43a>
 80071b6:	2d00      	cmp	r5, #0
 80071b8:	f000 80e3 	beq.w	8007382 <_dtoa_r+0x43a>
 80071bc:	ed9d 7b00 	vldr	d7, [sp]
 80071c0:	f1ba 0f00 	cmp.w	sl, #0
 80071c4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80071c8:	dd74      	ble.n	80072b4 <_dtoa_r+0x36c>
 80071ca:	4a2a      	ldr	r2, [pc, #168]	; (8007274 <_dtoa_r+0x32c>)
 80071cc:	f00a 030f 	and.w	r3, sl, #15
 80071d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80071d4:	ed93 7b00 	vldr	d7, [r3]
 80071d8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80071dc:	06f0      	lsls	r0, r6, #27
 80071de:	ed8d 7b08 	vstr	d7, [sp, #32]
 80071e2:	d565      	bpl.n	80072b0 <_dtoa_r+0x368>
 80071e4:	4b24      	ldr	r3, [pc, #144]	; (8007278 <_dtoa_r+0x330>)
 80071e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80071ea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80071ee:	f7f9 fb2d 	bl	800084c <__aeabi_ddiv>
 80071f2:	e9cd 0100 	strd	r0, r1, [sp]
 80071f6:	f006 060f 	and.w	r6, r6, #15
 80071fa:	2503      	movs	r5, #3
 80071fc:	4f1e      	ldr	r7, [pc, #120]	; (8007278 <_dtoa_r+0x330>)
 80071fe:	e04c      	b.n	800729a <_dtoa_r+0x352>
 8007200:	2301      	movs	r3, #1
 8007202:	930a      	str	r3, [sp, #40]	; 0x28
 8007204:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007206:	4453      	add	r3, sl
 8007208:	f103 0901 	add.w	r9, r3, #1
 800720c:	9302      	str	r3, [sp, #8]
 800720e:	464b      	mov	r3, r9
 8007210:	2b01      	cmp	r3, #1
 8007212:	bfb8      	it	lt
 8007214:	2301      	movlt	r3, #1
 8007216:	e7ba      	b.n	800718e <_dtoa_r+0x246>
 8007218:	2300      	movs	r3, #0
 800721a:	e7b2      	b.n	8007182 <_dtoa_r+0x23a>
 800721c:	2300      	movs	r3, #0
 800721e:	e7f0      	b.n	8007202 <_dtoa_r+0x2ba>
 8007220:	2501      	movs	r5, #1
 8007222:	2300      	movs	r3, #0
 8007224:	9306      	str	r3, [sp, #24]
 8007226:	950a      	str	r5, [sp, #40]	; 0x28
 8007228:	f04f 33ff 	mov.w	r3, #4294967295
 800722c:	9302      	str	r3, [sp, #8]
 800722e:	4699      	mov	r9, r3
 8007230:	2200      	movs	r2, #0
 8007232:	2312      	movs	r3, #18
 8007234:	920b      	str	r2, [sp, #44]	; 0x2c
 8007236:	e7aa      	b.n	800718e <_dtoa_r+0x246>
 8007238:	2301      	movs	r3, #1
 800723a:	930a      	str	r3, [sp, #40]	; 0x28
 800723c:	e7f4      	b.n	8007228 <_dtoa_r+0x2e0>
 800723e:	2301      	movs	r3, #1
 8007240:	9302      	str	r3, [sp, #8]
 8007242:	4699      	mov	r9, r3
 8007244:	461a      	mov	r2, r3
 8007246:	e7f5      	b.n	8007234 <_dtoa_r+0x2ec>
 8007248:	3101      	adds	r1, #1
 800724a:	6071      	str	r1, [r6, #4]
 800724c:	0052      	lsls	r2, r2, #1
 800724e:	e7a2      	b.n	8007196 <_dtoa_r+0x24e>
 8007250:	636f4361 	.word	0x636f4361
 8007254:	3fd287a7 	.word	0x3fd287a7
 8007258:	8b60c8b3 	.word	0x8b60c8b3
 800725c:	3fc68a28 	.word	0x3fc68a28
 8007260:	509f79fb 	.word	0x509f79fb
 8007264:	3fd34413 	.word	0x3fd34413
 8007268:	7ff00000 	.word	0x7ff00000
 800726c:	08009795 	.word	0x08009795
 8007270:	3ff80000 	.word	0x3ff80000
 8007274:	080097f8 	.word	0x080097f8
 8007278:	080097d0 	.word	0x080097d0
 800727c:	080097c1 	.word	0x080097c1
 8007280:	07f1      	lsls	r1, r6, #31
 8007282:	d508      	bpl.n	8007296 <_dtoa_r+0x34e>
 8007284:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007288:	e9d7 2300 	ldrd	r2, r3, [r7]
 800728c:	f7f9 f9b4 	bl	80005f8 <__aeabi_dmul>
 8007290:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007294:	3501      	adds	r5, #1
 8007296:	1076      	asrs	r6, r6, #1
 8007298:	3708      	adds	r7, #8
 800729a:	2e00      	cmp	r6, #0
 800729c:	d1f0      	bne.n	8007280 <_dtoa_r+0x338>
 800729e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80072a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072a6:	f7f9 fad1 	bl	800084c <__aeabi_ddiv>
 80072aa:	e9cd 0100 	strd	r0, r1, [sp]
 80072ae:	e01a      	b.n	80072e6 <_dtoa_r+0x39e>
 80072b0:	2502      	movs	r5, #2
 80072b2:	e7a3      	b.n	80071fc <_dtoa_r+0x2b4>
 80072b4:	f000 80a0 	beq.w	80073f8 <_dtoa_r+0x4b0>
 80072b8:	f1ca 0600 	rsb	r6, sl, #0
 80072bc:	4b9f      	ldr	r3, [pc, #636]	; (800753c <_dtoa_r+0x5f4>)
 80072be:	4fa0      	ldr	r7, [pc, #640]	; (8007540 <_dtoa_r+0x5f8>)
 80072c0:	f006 020f 	and.w	r2, r6, #15
 80072c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80072d0:	f7f9 f992 	bl	80005f8 <__aeabi_dmul>
 80072d4:	e9cd 0100 	strd	r0, r1, [sp]
 80072d8:	1136      	asrs	r6, r6, #4
 80072da:	2300      	movs	r3, #0
 80072dc:	2502      	movs	r5, #2
 80072de:	2e00      	cmp	r6, #0
 80072e0:	d17f      	bne.n	80073e2 <_dtoa_r+0x49a>
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1e1      	bne.n	80072aa <_dtoa_r+0x362>
 80072e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f000 8087 	beq.w	80073fc <_dtoa_r+0x4b4>
 80072ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 80072f2:	2200      	movs	r2, #0
 80072f4:	4b93      	ldr	r3, [pc, #588]	; (8007544 <_dtoa_r+0x5fc>)
 80072f6:	4630      	mov	r0, r6
 80072f8:	4639      	mov	r1, r7
 80072fa:	f7f9 fbef 	bl	8000adc <__aeabi_dcmplt>
 80072fe:	2800      	cmp	r0, #0
 8007300:	d07c      	beq.n	80073fc <_dtoa_r+0x4b4>
 8007302:	f1b9 0f00 	cmp.w	r9, #0
 8007306:	d079      	beq.n	80073fc <_dtoa_r+0x4b4>
 8007308:	9b02      	ldr	r3, [sp, #8]
 800730a:	2b00      	cmp	r3, #0
 800730c:	dd35      	ble.n	800737a <_dtoa_r+0x432>
 800730e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007312:	9308      	str	r3, [sp, #32]
 8007314:	4639      	mov	r1, r7
 8007316:	2200      	movs	r2, #0
 8007318:	4b8b      	ldr	r3, [pc, #556]	; (8007548 <_dtoa_r+0x600>)
 800731a:	4630      	mov	r0, r6
 800731c:	f7f9 f96c 	bl	80005f8 <__aeabi_dmul>
 8007320:	e9cd 0100 	strd	r0, r1, [sp]
 8007324:	9f02      	ldr	r7, [sp, #8]
 8007326:	3501      	adds	r5, #1
 8007328:	4628      	mov	r0, r5
 800732a:	f7f9 f8fb 	bl	8000524 <__aeabi_i2d>
 800732e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007332:	f7f9 f961 	bl	80005f8 <__aeabi_dmul>
 8007336:	2200      	movs	r2, #0
 8007338:	4b84      	ldr	r3, [pc, #528]	; (800754c <_dtoa_r+0x604>)
 800733a:	f7f8 ffa7 	bl	800028c <__adddf3>
 800733e:	4605      	mov	r5, r0
 8007340:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007344:	2f00      	cmp	r7, #0
 8007346:	d15d      	bne.n	8007404 <_dtoa_r+0x4bc>
 8007348:	2200      	movs	r2, #0
 800734a:	4b81      	ldr	r3, [pc, #516]	; (8007550 <_dtoa_r+0x608>)
 800734c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007350:	f7f8 ff9a 	bl	8000288 <__aeabi_dsub>
 8007354:	462a      	mov	r2, r5
 8007356:	4633      	mov	r3, r6
 8007358:	e9cd 0100 	strd	r0, r1, [sp]
 800735c:	f7f9 fbdc 	bl	8000b18 <__aeabi_dcmpgt>
 8007360:	2800      	cmp	r0, #0
 8007362:	f040 8288 	bne.w	8007876 <_dtoa_r+0x92e>
 8007366:	462a      	mov	r2, r5
 8007368:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800736c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007370:	f7f9 fbb4 	bl	8000adc <__aeabi_dcmplt>
 8007374:	2800      	cmp	r0, #0
 8007376:	f040 827c 	bne.w	8007872 <_dtoa_r+0x92a>
 800737a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800737e:	e9cd 2300 	strd	r2, r3, [sp]
 8007382:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007384:	2b00      	cmp	r3, #0
 8007386:	f2c0 8150 	blt.w	800762a <_dtoa_r+0x6e2>
 800738a:	f1ba 0f0e 	cmp.w	sl, #14
 800738e:	f300 814c 	bgt.w	800762a <_dtoa_r+0x6e2>
 8007392:	4b6a      	ldr	r3, [pc, #424]	; (800753c <_dtoa_r+0x5f4>)
 8007394:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007398:	ed93 7b00 	vldr	d7, [r3]
 800739c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800739e:	2b00      	cmp	r3, #0
 80073a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80073a4:	f280 80d8 	bge.w	8007558 <_dtoa_r+0x610>
 80073a8:	f1b9 0f00 	cmp.w	r9, #0
 80073ac:	f300 80d4 	bgt.w	8007558 <_dtoa_r+0x610>
 80073b0:	f040 825e 	bne.w	8007870 <_dtoa_r+0x928>
 80073b4:	2200      	movs	r2, #0
 80073b6:	4b66      	ldr	r3, [pc, #408]	; (8007550 <_dtoa_r+0x608>)
 80073b8:	ec51 0b17 	vmov	r0, r1, d7
 80073bc:	f7f9 f91c 	bl	80005f8 <__aeabi_dmul>
 80073c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073c4:	f7f9 fb9e 	bl	8000b04 <__aeabi_dcmpge>
 80073c8:	464f      	mov	r7, r9
 80073ca:	464e      	mov	r6, r9
 80073cc:	2800      	cmp	r0, #0
 80073ce:	f040 8234 	bne.w	800783a <_dtoa_r+0x8f2>
 80073d2:	2331      	movs	r3, #49	; 0x31
 80073d4:	f10b 0501 	add.w	r5, fp, #1
 80073d8:	f88b 3000 	strb.w	r3, [fp]
 80073dc:	f10a 0a01 	add.w	sl, sl, #1
 80073e0:	e22f      	b.n	8007842 <_dtoa_r+0x8fa>
 80073e2:	07f2      	lsls	r2, r6, #31
 80073e4:	d505      	bpl.n	80073f2 <_dtoa_r+0x4aa>
 80073e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073ea:	f7f9 f905 	bl	80005f8 <__aeabi_dmul>
 80073ee:	3501      	adds	r5, #1
 80073f0:	2301      	movs	r3, #1
 80073f2:	1076      	asrs	r6, r6, #1
 80073f4:	3708      	adds	r7, #8
 80073f6:	e772      	b.n	80072de <_dtoa_r+0x396>
 80073f8:	2502      	movs	r5, #2
 80073fa:	e774      	b.n	80072e6 <_dtoa_r+0x39e>
 80073fc:	f8cd a020 	str.w	sl, [sp, #32]
 8007400:	464f      	mov	r7, r9
 8007402:	e791      	b.n	8007328 <_dtoa_r+0x3e0>
 8007404:	4b4d      	ldr	r3, [pc, #308]	; (800753c <_dtoa_r+0x5f4>)
 8007406:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800740a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800740e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007410:	2b00      	cmp	r3, #0
 8007412:	d047      	beq.n	80074a4 <_dtoa_r+0x55c>
 8007414:	4602      	mov	r2, r0
 8007416:	460b      	mov	r3, r1
 8007418:	2000      	movs	r0, #0
 800741a:	494e      	ldr	r1, [pc, #312]	; (8007554 <_dtoa_r+0x60c>)
 800741c:	f7f9 fa16 	bl	800084c <__aeabi_ddiv>
 8007420:	462a      	mov	r2, r5
 8007422:	4633      	mov	r3, r6
 8007424:	f7f8 ff30 	bl	8000288 <__aeabi_dsub>
 8007428:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800742c:	465d      	mov	r5, fp
 800742e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007432:	f7f9 fb91 	bl	8000b58 <__aeabi_d2iz>
 8007436:	4606      	mov	r6, r0
 8007438:	f7f9 f874 	bl	8000524 <__aeabi_i2d>
 800743c:	4602      	mov	r2, r0
 800743e:	460b      	mov	r3, r1
 8007440:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007444:	f7f8 ff20 	bl	8000288 <__aeabi_dsub>
 8007448:	3630      	adds	r6, #48	; 0x30
 800744a:	f805 6b01 	strb.w	r6, [r5], #1
 800744e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007452:	e9cd 0100 	strd	r0, r1, [sp]
 8007456:	f7f9 fb41 	bl	8000adc <__aeabi_dcmplt>
 800745a:	2800      	cmp	r0, #0
 800745c:	d163      	bne.n	8007526 <_dtoa_r+0x5de>
 800745e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007462:	2000      	movs	r0, #0
 8007464:	4937      	ldr	r1, [pc, #220]	; (8007544 <_dtoa_r+0x5fc>)
 8007466:	f7f8 ff0f 	bl	8000288 <__aeabi_dsub>
 800746a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800746e:	f7f9 fb35 	bl	8000adc <__aeabi_dcmplt>
 8007472:	2800      	cmp	r0, #0
 8007474:	f040 80b7 	bne.w	80075e6 <_dtoa_r+0x69e>
 8007478:	eba5 030b 	sub.w	r3, r5, fp
 800747c:	429f      	cmp	r7, r3
 800747e:	f77f af7c 	ble.w	800737a <_dtoa_r+0x432>
 8007482:	2200      	movs	r2, #0
 8007484:	4b30      	ldr	r3, [pc, #192]	; (8007548 <_dtoa_r+0x600>)
 8007486:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800748a:	f7f9 f8b5 	bl	80005f8 <__aeabi_dmul>
 800748e:	2200      	movs	r2, #0
 8007490:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007494:	4b2c      	ldr	r3, [pc, #176]	; (8007548 <_dtoa_r+0x600>)
 8007496:	e9dd 0100 	ldrd	r0, r1, [sp]
 800749a:	f7f9 f8ad 	bl	80005f8 <__aeabi_dmul>
 800749e:	e9cd 0100 	strd	r0, r1, [sp]
 80074a2:	e7c4      	b.n	800742e <_dtoa_r+0x4e6>
 80074a4:	462a      	mov	r2, r5
 80074a6:	4633      	mov	r3, r6
 80074a8:	f7f9 f8a6 	bl	80005f8 <__aeabi_dmul>
 80074ac:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80074b0:	eb0b 0507 	add.w	r5, fp, r7
 80074b4:	465e      	mov	r6, fp
 80074b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074ba:	f7f9 fb4d 	bl	8000b58 <__aeabi_d2iz>
 80074be:	4607      	mov	r7, r0
 80074c0:	f7f9 f830 	bl	8000524 <__aeabi_i2d>
 80074c4:	3730      	adds	r7, #48	; 0x30
 80074c6:	4602      	mov	r2, r0
 80074c8:	460b      	mov	r3, r1
 80074ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074ce:	f7f8 fedb 	bl	8000288 <__aeabi_dsub>
 80074d2:	f806 7b01 	strb.w	r7, [r6], #1
 80074d6:	42ae      	cmp	r6, r5
 80074d8:	e9cd 0100 	strd	r0, r1, [sp]
 80074dc:	f04f 0200 	mov.w	r2, #0
 80074e0:	d126      	bne.n	8007530 <_dtoa_r+0x5e8>
 80074e2:	4b1c      	ldr	r3, [pc, #112]	; (8007554 <_dtoa_r+0x60c>)
 80074e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80074e8:	f7f8 fed0 	bl	800028c <__adddf3>
 80074ec:	4602      	mov	r2, r0
 80074ee:	460b      	mov	r3, r1
 80074f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074f4:	f7f9 fb10 	bl	8000b18 <__aeabi_dcmpgt>
 80074f8:	2800      	cmp	r0, #0
 80074fa:	d174      	bne.n	80075e6 <_dtoa_r+0x69e>
 80074fc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007500:	2000      	movs	r0, #0
 8007502:	4914      	ldr	r1, [pc, #80]	; (8007554 <_dtoa_r+0x60c>)
 8007504:	f7f8 fec0 	bl	8000288 <__aeabi_dsub>
 8007508:	4602      	mov	r2, r0
 800750a:	460b      	mov	r3, r1
 800750c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007510:	f7f9 fae4 	bl	8000adc <__aeabi_dcmplt>
 8007514:	2800      	cmp	r0, #0
 8007516:	f43f af30 	beq.w	800737a <_dtoa_r+0x432>
 800751a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800751e:	2b30      	cmp	r3, #48	; 0x30
 8007520:	f105 32ff 	add.w	r2, r5, #4294967295
 8007524:	d002      	beq.n	800752c <_dtoa_r+0x5e4>
 8007526:	f8dd a020 	ldr.w	sl, [sp, #32]
 800752a:	e04a      	b.n	80075c2 <_dtoa_r+0x67a>
 800752c:	4615      	mov	r5, r2
 800752e:	e7f4      	b.n	800751a <_dtoa_r+0x5d2>
 8007530:	4b05      	ldr	r3, [pc, #20]	; (8007548 <_dtoa_r+0x600>)
 8007532:	f7f9 f861 	bl	80005f8 <__aeabi_dmul>
 8007536:	e9cd 0100 	strd	r0, r1, [sp]
 800753a:	e7bc      	b.n	80074b6 <_dtoa_r+0x56e>
 800753c:	080097f8 	.word	0x080097f8
 8007540:	080097d0 	.word	0x080097d0
 8007544:	3ff00000 	.word	0x3ff00000
 8007548:	40240000 	.word	0x40240000
 800754c:	401c0000 	.word	0x401c0000
 8007550:	40140000 	.word	0x40140000
 8007554:	3fe00000 	.word	0x3fe00000
 8007558:	e9dd 6700 	ldrd	r6, r7, [sp]
 800755c:	465d      	mov	r5, fp
 800755e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007562:	4630      	mov	r0, r6
 8007564:	4639      	mov	r1, r7
 8007566:	f7f9 f971 	bl	800084c <__aeabi_ddiv>
 800756a:	f7f9 faf5 	bl	8000b58 <__aeabi_d2iz>
 800756e:	4680      	mov	r8, r0
 8007570:	f7f8 ffd8 	bl	8000524 <__aeabi_i2d>
 8007574:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007578:	f7f9 f83e 	bl	80005f8 <__aeabi_dmul>
 800757c:	4602      	mov	r2, r0
 800757e:	460b      	mov	r3, r1
 8007580:	4630      	mov	r0, r6
 8007582:	4639      	mov	r1, r7
 8007584:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007588:	f7f8 fe7e 	bl	8000288 <__aeabi_dsub>
 800758c:	f805 6b01 	strb.w	r6, [r5], #1
 8007590:	eba5 060b 	sub.w	r6, r5, fp
 8007594:	45b1      	cmp	r9, r6
 8007596:	4602      	mov	r2, r0
 8007598:	460b      	mov	r3, r1
 800759a:	d139      	bne.n	8007610 <_dtoa_r+0x6c8>
 800759c:	f7f8 fe76 	bl	800028c <__adddf3>
 80075a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075a4:	4606      	mov	r6, r0
 80075a6:	460f      	mov	r7, r1
 80075a8:	f7f9 fab6 	bl	8000b18 <__aeabi_dcmpgt>
 80075ac:	b9c8      	cbnz	r0, 80075e2 <_dtoa_r+0x69a>
 80075ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075b2:	4630      	mov	r0, r6
 80075b4:	4639      	mov	r1, r7
 80075b6:	f7f9 fa87 	bl	8000ac8 <__aeabi_dcmpeq>
 80075ba:	b110      	cbz	r0, 80075c2 <_dtoa_r+0x67a>
 80075bc:	f018 0f01 	tst.w	r8, #1
 80075c0:	d10f      	bne.n	80075e2 <_dtoa_r+0x69a>
 80075c2:	9904      	ldr	r1, [sp, #16]
 80075c4:	4620      	mov	r0, r4
 80075c6:	f000 fad1 	bl	8007b6c <_Bfree>
 80075ca:	2300      	movs	r3, #0
 80075cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80075ce:	702b      	strb	r3, [r5, #0]
 80075d0:	f10a 0301 	add.w	r3, sl, #1
 80075d4:	6013      	str	r3, [r2, #0]
 80075d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f000 8241 	beq.w	8007a60 <_dtoa_r+0xb18>
 80075de:	601d      	str	r5, [r3, #0]
 80075e0:	e23e      	b.n	8007a60 <_dtoa_r+0xb18>
 80075e2:	f8cd a020 	str.w	sl, [sp, #32]
 80075e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80075ea:	2a39      	cmp	r2, #57	; 0x39
 80075ec:	f105 33ff 	add.w	r3, r5, #4294967295
 80075f0:	d108      	bne.n	8007604 <_dtoa_r+0x6bc>
 80075f2:	459b      	cmp	fp, r3
 80075f4:	d10a      	bne.n	800760c <_dtoa_r+0x6c4>
 80075f6:	9b08      	ldr	r3, [sp, #32]
 80075f8:	3301      	adds	r3, #1
 80075fa:	9308      	str	r3, [sp, #32]
 80075fc:	2330      	movs	r3, #48	; 0x30
 80075fe:	f88b 3000 	strb.w	r3, [fp]
 8007602:	465b      	mov	r3, fp
 8007604:	781a      	ldrb	r2, [r3, #0]
 8007606:	3201      	adds	r2, #1
 8007608:	701a      	strb	r2, [r3, #0]
 800760a:	e78c      	b.n	8007526 <_dtoa_r+0x5de>
 800760c:	461d      	mov	r5, r3
 800760e:	e7ea      	b.n	80075e6 <_dtoa_r+0x69e>
 8007610:	2200      	movs	r2, #0
 8007612:	4b9b      	ldr	r3, [pc, #620]	; (8007880 <_dtoa_r+0x938>)
 8007614:	f7f8 fff0 	bl	80005f8 <__aeabi_dmul>
 8007618:	2200      	movs	r2, #0
 800761a:	2300      	movs	r3, #0
 800761c:	4606      	mov	r6, r0
 800761e:	460f      	mov	r7, r1
 8007620:	f7f9 fa52 	bl	8000ac8 <__aeabi_dcmpeq>
 8007624:	2800      	cmp	r0, #0
 8007626:	d09a      	beq.n	800755e <_dtoa_r+0x616>
 8007628:	e7cb      	b.n	80075c2 <_dtoa_r+0x67a>
 800762a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800762c:	2a00      	cmp	r2, #0
 800762e:	f000 808b 	beq.w	8007748 <_dtoa_r+0x800>
 8007632:	9a06      	ldr	r2, [sp, #24]
 8007634:	2a01      	cmp	r2, #1
 8007636:	dc6e      	bgt.n	8007716 <_dtoa_r+0x7ce>
 8007638:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800763a:	2a00      	cmp	r2, #0
 800763c:	d067      	beq.n	800770e <_dtoa_r+0x7c6>
 800763e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007642:	9f07      	ldr	r7, [sp, #28]
 8007644:	9d05      	ldr	r5, [sp, #20]
 8007646:	9a05      	ldr	r2, [sp, #20]
 8007648:	2101      	movs	r1, #1
 800764a:	441a      	add	r2, r3
 800764c:	4620      	mov	r0, r4
 800764e:	9205      	str	r2, [sp, #20]
 8007650:	4498      	add	r8, r3
 8007652:	f000 fb2b 	bl	8007cac <__i2b>
 8007656:	4606      	mov	r6, r0
 8007658:	2d00      	cmp	r5, #0
 800765a:	dd0c      	ble.n	8007676 <_dtoa_r+0x72e>
 800765c:	f1b8 0f00 	cmp.w	r8, #0
 8007660:	dd09      	ble.n	8007676 <_dtoa_r+0x72e>
 8007662:	4545      	cmp	r5, r8
 8007664:	9a05      	ldr	r2, [sp, #20]
 8007666:	462b      	mov	r3, r5
 8007668:	bfa8      	it	ge
 800766a:	4643      	movge	r3, r8
 800766c:	1ad2      	subs	r2, r2, r3
 800766e:	9205      	str	r2, [sp, #20]
 8007670:	1aed      	subs	r5, r5, r3
 8007672:	eba8 0803 	sub.w	r8, r8, r3
 8007676:	9b07      	ldr	r3, [sp, #28]
 8007678:	b1eb      	cbz	r3, 80076b6 <_dtoa_r+0x76e>
 800767a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800767c:	2b00      	cmp	r3, #0
 800767e:	d067      	beq.n	8007750 <_dtoa_r+0x808>
 8007680:	b18f      	cbz	r7, 80076a6 <_dtoa_r+0x75e>
 8007682:	4631      	mov	r1, r6
 8007684:	463a      	mov	r2, r7
 8007686:	4620      	mov	r0, r4
 8007688:	f000 fbb0 	bl	8007dec <__pow5mult>
 800768c:	9a04      	ldr	r2, [sp, #16]
 800768e:	4601      	mov	r1, r0
 8007690:	4606      	mov	r6, r0
 8007692:	4620      	mov	r0, r4
 8007694:	f000 fb13 	bl	8007cbe <__multiply>
 8007698:	9904      	ldr	r1, [sp, #16]
 800769a:	9008      	str	r0, [sp, #32]
 800769c:	4620      	mov	r0, r4
 800769e:	f000 fa65 	bl	8007b6c <_Bfree>
 80076a2:	9b08      	ldr	r3, [sp, #32]
 80076a4:	9304      	str	r3, [sp, #16]
 80076a6:	9b07      	ldr	r3, [sp, #28]
 80076a8:	1bda      	subs	r2, r3, r7
 80076aa:	d004      	beq.n	80076b6 <_dtoa_r+0x76e>
 80076ac:	9904      	ldr	r1, [sp, #16]
 80076ae:	4620      	mov	r0, r4
 80076b0:	f000 fb9c 	bl	8007dec <__pow5mult>
 80076b4:	9004      	str	r0, [sp, #16]
 80076b6:	2101      	movs	r1, #1
 80076b8:	4620      	mov	r0, r4
 80076ba:	f000 faf7 	bl	8007cac <__i2b>
 80076be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076c0:	4607      	mov	r7, r0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	f000 81d0 	beq.w	8007a68 <_dtoa_r+0xb20>
 80076c8:	461a      	mov	r2, r3
 80076ca:	4601      	mov	r1, r0
 80076cc:	4620      	mov	r0, r4
 80076ce:	f000 fb8d 	bl	8007dec <__pow5mult>
 80076d2:	9b06      	ldr	r3, [sp, #24]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	4607      	mov	r7, r0
 80076d8:	dc40      	bgt.n	800775c <_dtoa_r+0x814>
 80076da:	9b00      	ldr	r3, [sp, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d139      	bne.n	8007754 <_dtoa_r+0x80c>
 80076e0:	9b01      	ldr	r3, [sp, #4]
 80076e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d136      	bne.n	8007758 <_dtoa_r+0x810>
 80076ea:	9b01      	ldr	r3, [sp, #4]
 80076ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80076f0:	0d1b      	lsrs	r3, r3, #20
 80076f2:	051b      	lsls	r3, r3, #20
 80076f4:	b12b      	cbz	r3, 8007702 <_dtoa_r+0x7ba>
 80076f6:	9b05      	ldr	r3, [sp, #20]
 80076f8:	3301      	adds	r3, #1
 80076fa:	9305      	str	r3, [sp, #20]
 80076fc:	f108 0801 	add.w	r8, r8, #1
 8007700:	2301      	movs	r3, #1
 8007702:	9307      	str	r3, [sp, #28]
 8007704:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007706:	2b00      	cmp	r3, #0
 8007708:	d12a      	bne.n	8007760 <_dtoa_r+0x818>
 800770a:	2001      	movs	r0, #1
 800770c:	e030      	b.n	8007770 <_dtoa_r+0x828>
 800770e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007710:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007714:	e795      	b.n	8007642 <_dtoa_r+0x6fa>
 8007716:	9b07      	ldr	r3, [sp, #28]
 8007718:	f109 37ff 	add.w	r7, r9, #4294967295
 800771c:	42bb      	cmp	r3, r7
 800771e:	bfbf      	itttt	lt
 8007720:	9b07      	ldrlt	r3, [sp, #28]
 8007722:	9707      	strlt	r7, [sp, #28]
 8007724:	1afa      	sublt	r2, r7, r3
 8007726:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007728:	bfbb      	ittet	lt
 800772a:	189b      	addlt	r3, r3, r2
 800772c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800772e:	1bdf      	subge	r7, r3, r7
 8007730:	2700      	movlt	r7, #0
 8007732:	f1b9 0f00 	cmp.w	r9, #0
 8007736:	bfb5      	itete	lt
 8007738:	9b05      	ldrlt	r3, [sp, #20]
 800773a:	9d05      	ldrge	r5, [sp, #20]
 800773c:	eba3 0509 	sublt.w	r5, r3, r9
 8007740:	464b      	movge	r3, r9
 8007742:	bfb8      	it	lt
 8007744:	2300      	movlt	r3, #0
 8007746:	e77e      	b.n	8007646 <_dtoa_r+0x6fe>
 8007748:	9f07      	ldr	r7, [sp, #28]
 800774a:	9d05      	ldr	r5, [sp, #20]
 800774c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800774e:	e783      	b.n	8007658 <_dtoa_r+0x710>
 8007750:	9a07      	ldr	r2, [sp, #28]
 8007752:	e7ab      	b.n	80076ac <_dtoa_r+0x764>
 8007754:	2300      	movs	r3, #0
 8007756:	e7d4      	b.n	8007702 <_dtoa_r+0x7ba>
 8007758:	9b00      	ldr	r3, [sp, #0]
 800775a:	e7d2      	b.n	8007702 <_dtoa_r+0x7ba>
 800775c:	2300      	movs	r3, #0
 800775e:	9307      	str	r3, [sp, #28]
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007766:	6918      	ldr	r0, [r3, #16]
 8007768:	f000 fa52 	bl	8007c10 <__hi0bits>
 800776c:	f1c0 0020 	rsb	r0, r0, #32
 8007770:	4440      	add	r0, r8
 8007772:	f010 001f 	ands.w	r0, r0, #31
 8007776:	d047      	beq.n	8007808 <_dtoa_r+0x8c0>
 8007778:	f1c0 0320 	rsb	r3, r0, #32
 800777c:	2b04      	cmp	r3, #4
 800777e:	dd3b      	ble.n	80077f8 <_dtoa_r+0x8b0>
 8007780:	9b05      	ldr	r3, [sp, #20]
 8007782:	f1c0 001c 	rsb	r0, r0, #28
 8007786:	4403      	add	r3, r0
 8007788:	9305      	str	r3, [sp, #20]
 800778a:	4405      	add	r5, r0
 800778c:	4480      	add	r8, r0
 800778e:	9b05      	ldr	r3, [sp, #20]
 8007790:	2b00      	cmp	r3, #0
 8007792:	dd05      	ble.n	80077a0 <_dtoa_r+0x858>
 8007794:	461a      	mov	r2, r3
 8007796:	9904      	ldr	r1, [sp, #16]
 8007798:	4620      	mov	r0, r4
 800779a:	f000 fb75 	bl	8007e88 <__lshift>
 800779e:	9004      	str	r0, [sp, #16]
 80077a0:	f1b8 0f00 	cmp.w	r8, #0
 80077a4:	dd05      	ble.n	80077b2 <_dtoa_r+0x86a>
 80077a6:	4639      	mov	r1, r7
 80077a8:	4642      	mov	r2, r8
 80077aa:	4620      	mov	r0, r4
 80077ac:	f000 fb6c 	bl	8007e88 <__lshift>
 80077b0:	4607      	mov	r7, r0
 80077b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077b4:	b353      	cbz	r3, 800780c <_dtoa_r+0x8c4>
 80077b6:	4639      	mov	r1, r7
 80077b8:	9804      	ldr	r0, [sp, #16]
 80077ba:	f000 fbb9 	bl	8007f30 <__mcmp>
 80077be:	2800      	cmp	r0, #0
 80077c0:	da24      	bge.n	800780c <_dtoa_r+0x8c4>
 80077c2:	2300      	movs	r3, #0
 80077c4:	220a      	movs	r2, #10
 80077c6:	9904      	ldr	r1, [sp, #16]
 80077c8:	4620      	mov	r0, r4
 80077ca:	f000 f9e6 	bl	8007b9a <__multadd>
 80077ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077d0:	9004      	str	r0, [sp, #16]
 80077d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	f000 814d 	beq.w	8007a76 <_dtoa_r+0xb2e>
 80077dc:	2300      	movs	r3, #0
 80077de:	4631      	mov	r1, r6
 80077e0:	220a      	movs	r2, #10
 80077e2:	4620      	mov	r0, r4
 80077e4:	f000 f9d9 	bl	8007b9a <__multadd>
 80077e8:	9b02      	ldr	r3, [sp, #8]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	4606      	mov	r6, r0
 80077ee:	dc4f      	bgt.n	8007890 <_dtoa_r+0x948>
 80077f0:	9b06      	ldr	r3, [sp, #24]
 80077f2:	2b02      	cmp	r3, #2
 80077f4:	dd4c      	ble.n	8007890 <_dtoa_r+0x948>
 80077f6:	e011      	b.n	800781c <_dtoa_r+0x8d4>
 80077f8:	d0c9      	beq.n	800778e <_dtoa_r+0x846>
 80077fa:	9a05      	ldr	r2, [sp, #20]
 80077fc:	331c      	adds	r3, #28
 80077fe:	441a      	add	r2, r3
 8007800:	9205      	str	r2, [sp, #20]
 8007802:	441d      	add	r5, r3
 8007804:	4498      	add	r8, r3
 8007806:	e7c2      	b.n	800778e <_dtoa_r+0x846>
 8007808:	4603      	mov	r3, r0
 800780a:	e7f6      	b.n	80077fa <_dtoa_r+0x8b2>
 800780c:	f1b9 0f00 	cmp.w	r9, #0
 8007810:	dc38      	bgt.n	8007884 <_dtoa_r+0x93c>
 8007812:	9b06      	ldr	r3, [sp, #24]
 8007814:	2b02      	cmp	r3, #2
 8007816:	dd35      	ble.n	8007884 <_dtoa_r+0x93c>
 8007818:	f8cd 9008 	str.w	r9, [sp, #8]
 800781c:	9b02      	ldr	r3, [sp, #8]
 800781e:	b963      	cbnz	r3, 800783a <_dtoa_r+0x8f2>
 8007820:	4639      	mov	r1, r7
 8007822:	2205      	movs	r2, #5
 8007824:	4620      	mov	r0, r4
 8007826:	f000 f9b8 	bl	8007b9a <__multadd>
 800782a:	4601      	mov	r1, r0
 800782c:	4607      	mov	r7, r0
 800782e:	9804      	ldr	r0, [sp, #16]
 8007830:	f000 fb7e 	bl	8007f30 <__mcmp>
 8007834:	2800      	cmp	r0, #0
 8007836:	f73f adcc 	bgt.w	80073d2 <_dtoa_r+0x48a>
 800783a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800783c:	465d      	mov	r5, fp
 800783e:	ea6f 0a03 	mvn.w	sl, r3
 8007842:	f04f 0900 	mov.w	r9, #0
 8007846:	4639      	mov	r1, r7
 8007848:	4620      	mov	r0, r4
 800784a:	f000 f98f 	bl	8007b6c <_Bfree>
 800784e:	2e00      	cmp	r6, #0
 8007850:	f43f aeb7 	beq.w	80075c2 <_dtoa_r+0x67a>
 8007854:	f1b9 0f00 	cmp.w	r9, #0
 8007858:	d005      	beq.n	8007866 <_dtoa_r+0x91e>
 800785a:	45b1      	cmp	r9, r6
 800785c:	d003      	beq.n	8007866 <_dtoa_r+0x91e>
 800785e:	4649      	mov	r1, r9
 8007860:	4620      	mov	r0, r4
 8007862:	f000 f983 	bl	8007b6c <_Bfree>
 8007866:	4631      	mov	r1, r6
 8007868:	4620      	mov	r0, r4
 800786a:	f000 f97f 	bl	8007b6c <_Bfree>
 800786e:	e6a8      	b.n	80075c2 <_dtoa_r+0x67a>
 8007870:	2700      	movs	r7, #0
 8007872:	463e      	mov	r6, r7
 8007874:	e7e1      	b.n	800783a <_dtoa_r+0x8f2>
 8007876:	f8dd a020 	ldr.w	sl, [sp, #32]
 800787a:	463e      	mov	r6, r7
 800787c:	e5a9      	b.n	80073d2 <_dtoa_r+0x48a>
 800787e:	bf00      	nop
 8007880:	40240000 	.word	0x40240000
 8007884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007886:	f8cd 9008 	str.w	r9, [sp, #8]
 800788a:	2b00      	cmp	r3, #0
 800788c:	f000 80fa 	beq.w	8007a84 <_dtoa_r+0xb3c>
 8007890:	2d00      	cmp	r5, #0
 8007892:	dd05      	ble.n	80078a0 <_dtoa_r+0x958>
 8007894:	4631      	mov	r1, r6
 8007896:	462a      	mov	r2, r5
 8007898:	4620      	mov	r0, r4
 800789a:	f000 faf5 	bl	8007e88 <__lshift>
 800789e:	4606      	mov	r6, r0
 80078a0:	9b07      	ldr	r3, [sp, #28]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d04c      	beq.n	8007940 <_dtoa_r+0x9f8>
 80078a6:	6871      	ldr	r1, [r6, #4]
 80078a8:	4620      	mov	r0, r4
 80078aa:	f000 f92b 	bl	8007b04 <_Balloc>
 80078ae:	6932      	ldr	r2, [r6, #16]
 80078b0:	3202      	adds	r2, #2
 80078b2:	4605      	mov	r5, r0
 80078b4:	0092      	lsls	r2, r2, #2
 80078b6:	f106 010c 	add.w	r1, r6, #12
 80078ba:	300c      	adds	r0, #12
 80078bc:	f7fe fc76 	bl	80061ac <memcpy>
 80078c0:	2201      	movs	r2, #1
 80078c2:	4629      	mov	r1, r5
 80078c4:	4620      	mov	r0, r4
 80078c6:	f000 fadf 	bl	8007e88 <__lshift>
 80078ca:	9b00      	ldr	r3, [sp, #0]
 80078cc:	f8cd b014 	str.w	fp, [sp, #20]
 80078d0:	f003 0301 	and.w	r3, r3, #1
 80078d4:	46b1      	mov	r9, r6
 80078d6:	9307      	str	r3, [sp, #28]
 80078d8:	4606      	mov	r6, r0
 80078da:	4639      	mov	r1, r7
 80078dc:	9804      	ldr	r0, [sp, #16]
 80078de:	f7ff faa7 	bl	8006e30 <quorem>
 80078e2:	4649      	mov	r1, r9
 80078e4:	4605      	mov	r5, r0
 80078e6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80078ea:	9804      	ldr	r0, [sp, #16]
 80078ec:	f000 fb20 	bl	8007f30 <__mcmp>
 80078f0:	4632      	mov	r2, r6
 80078f2:	9000      	str	r0, [sp, #0]
 80078f4:	4639      	mov	r1, r7
 80078f6:	4620      	mov	r0, r4
 80078f8:	f000 fb34 	bl	8007f64 <__mdiff>
 80078fc:	68c3      	ldr	r3, [r0, #12]
 80078fe:	4602      	mov	r2, r0
 8007900:	bb03      	cbnz	r3, 8007944 <_dtoa_r+0x9fc>
 8007902:	4601      	mov	r1, r0
 8007904:	9008      	str	r0, [sp, #32]
 8007906:	9804      	ldr	r0, [sp, #16]
 8007908:	f000 fb12 	bl	8007f30 <__mcmp>
 800790c:	9a08      	ldr	r2, [sp, #32]
 800790e:	4603      	mov	r3, r0
 8007910:	4611      	mov	r1, r2
 8007912:	4620      	mov	r0, r4
 8007914:	9308      	str	r3, [sp, #32]
 8007916:	f000 f929 	bl	8007b6c <_Bfree>
 800791a:	9b08      	ldr	r3, [sp, #32]
 800791c:	b9a3      	cbnz	r3, 8007948 <_dtoa_r+0xa00>
 800791e:	9a06      	ldr	r2, [sp, #24]
 8007920:	b992      	cbnz	r2, 8007948 <_dtoa_r+0xa00>
 8007922:	9a07      	ldr	r2, [sp, #28]
 8007924:	b982      	cbnz	r2, 8007948 <_dtoa_r+0xa00>
 8007926:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800792a:	d029      	beq.n	8007980 <_dtoa_r+0xa38>
 800792c:	9b00      	ldr	r3, [sp, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	dd01      	ble.n	8007936 <_dtoa_r+0x9ee>
 8007932:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007936:	9b05      	ldr	r3, [sp, #20]
 8007938:	1c5d      	adds	r5, r3, #1
 800793a:	f883 8000 	strb.w	r8, [r3]
 800793e:	e782      	b.n	8007846 <_dtoa_r+0x8fe>
 8007940:	4630      	mov	r0, r6
 8007942:	e7c2      	b.n	80078ca <_dtoa_r+0x982>
 8007944:	2301      	movs	r3, #1
 8007946:	e7e3      	b.n	8007910 <_dtoa_r+0x9c8>
 8007948:	9a00      	ldr	r2, [sp, #0]
 800794a:	2a00      	cmp	r2, #0
 800794c:	db04      	blt.n	8007958 <_dtoa_r+0xa10>
 800794e:	d125      	bne.n	800799c <_dtoa_r+0xa54>
 8007950:	9a06      	ldr	r2, [sp, #24]
 8007952:	bb1a      	cbnz	r2, 800799c <_dtoa_r+0xa54>
 8007954:	9a07      	ldr	r2, [sp, #28]
 8007956:	bb0a      	cbnz	r2, 800799c <_dtoa_r+0xa54>
 8007958:	2b00      	cmp	r3, #0
 800795a:	ddec      	ble.n	8007936 <_dtoa_r+0x9ee>
 800795c:	2201      	movs	r2, #1
 800795e:	9904      	ldr	r1, [sp, #16]
 8007960:	4620      	mov	r0, r4
 8007962:	f000 fa91 	bl	8007e88 <__lshift>
 8007966:	4639      	mov	r1, r7
 8007968:	9004      	str	r0, [sp, #16]
 800796a:	f000 fae1 	bl	8007f30 <__mcmp>
 800796e:	2800      	cmp	r0, #0
 8007970:	dc03      	bgt.n	800797a <_dtoa_r+0xa32>
 8007972:	d1e0      	bne.n	8007936 <_dtoa_r+0x9ee>
 8007974:	f018 0f01 	tst.w	r8, #1
 8007978:	d0dd      	beq.n	8007936 <_dtoa_r+0x9ee>
 800797a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800797e:	d1d8      	bne.n	8007932 <_dtoa_r+0x9ea>
 8007980:	9b05      	ldr	r3, [sp, #20]
 8007982:	9a05      	ldr	r2, [sp, #20]
 8007984:	1c5d      	adds	r5, r3, #1
 8007986:	2339      	movs	r3, #57	; 0x39
 8007988:	7013      	strb	r3, [r2, #0]
 800798a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800798e:	2b39      	cmp	r3, #57	; 0x39
 8007990:	f105 32ff 	add.w	r2, r5, #4294967295
 8007994:	d04f      	beq.n	8007a36 <_dtoa_r+0xaee>
 8007996:	3301      	adds	r3, #1
 8007998:	7013      	strb	r3, [r2, #0]
 800799a:	e754      	b.n	8007846 <_dtoa_r+0x8fe>
 800799c:	9a05      	ldr	r2, [sp, #20]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f102 0501 	add.w	r5, r2, #1
 80079a4:	dd06      	ble.n	80079b4 <_dtoa_r+0xa6c>
 80079a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80079aa:	d0e9      	beq.n	8007980 <_dtoa_r+0xa38>
 80079ac:	f108 0801 	add.w	r8, r8, #1
 80079b0:	9b05      	ldr	r3, [sp, #20]
 80079b2:	e7c2      	b.n	800793a <_dtoa_r+0x9f2>
 80079b4:	9a02      	ldr	r2, [sp, #8]
 80079b6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80079ba:	eba5 030b 	sub.w	r3, r5, fp
 80079be:	4293      	cmp	r3, r2
 80079c0:	d021      	beq.n	8007a06 <_dtoa_r+0xabe>
 80079c2:	2300      	movs	r3, #0
 80079c4:	220a      	movs	r2, #10
 80079c6:	9904      	ldr	r1, [sp, #16]
 80079c8:	4620      	mov	r0, r4
 80079ca:	f000 f8e6 	bl	8007b9a <__multadd>
 80079ce:	45b1      	cmp	r9, r6
 80079d0:	9004      	str	r0, [sp, #16]
 80079d2:	f04f 0300 	mov.w	r3, #0
 80079d6:	f04f 020a 	mov.w	r2, #10
 80079da:	4649      	mov	r1, r9
 80079dc:	4620      	mov	r0, r4
 80079de:	d105      	bne.n	80079ec <_dtoa_r+0xaa4>
 80079e0:	f000 f8db 	bl	8007b9a <__multadd>
 80079e4:	4681      	mov	r9, r0
 80079e6:	4606      	mov	r6, r0
 80079e8:	9505      	str	r5, [sp, #20]
 80079ea:	e776      	b.n	80078da <_dtoa_r+0x992>
 80079ec:	f000 f8d5 	bl	8007b9a <__multadd>
 80079f0:	4631      	mov	r1, r6
 80079f2:	4681      	mov	r9, r0
 80079f4:	2300      	movs	r3, #0
 80079f6:	220a      	movs	r2, #10
 80079f8:	4620      	mov	r0, r4
 80079fa:	f000 f8ce 	bl	8007b9a <__multadd>
 80079fe:	4606      	mov	r6, r0
 8007a00:	e7f2      	b.n	80079e8 <_dtoa_r+0xaa0>
 8007a02:	f04f 0900 	mov.w	r9, #0
 8007a06:	2201      	movs	r2, #1
 8007a08:	9904      	ldr	r1, [sp, #16]
 8007a0a:	4620      	mov	r0, r4
 8007a0c:	f000 fa3c 	bl	8007e88 <__lshift>
 8007a10:	4639      	mov	r1, r7
 8007a12:	9004      	str	r0, [sp, #16]
 8007a14:	f000 fa8c 	bl	8007f30 <__mcmp>
 8007a18:	2800      	cmp	r0, #0
 8007a1a:	dcb6      	bgt.n	800798a <_dtoa_r+0xa42>
 8007a1c:	d102      	bne.n	8007a24 <_dtoa_r+0xadc>
 8007a1e:	f018 0f01 	tst.w	r8, #1
 8007a22:	d1b2      	bne.n	800798a <_dtoa_r+0xa42>
 8007a24:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007a28:	2b30      	cmp	r3, #48	; 0x30
 8007a2a:	f105 32ff 	add.w	r2, r5, #4294967295
 8007a2e:	f47f af0a 	bne.w	8007846 <_dtoa_r+0x8fe>
 8007a32:	4615      	mov	r5, r2
 8007a34:	e7f6      	b.n	8007a24 <_dtoa_r+0xadc>
 8007a36:	4593      	cmp	fp, r2
 8007a38:	d105      	bne.n	8007a46 <_dtoa_r+0xafe>
 8007a3a:	2331      	movs	r3, #49	; 0x31
 8007a3c:	f10a 0a01 	add.w	sl, sl, #1
 8007a40:	f88b 3000 	strb.w	r3, [fp]
 8007a44:	e6ff      	b.n	8007846 <_dtoa_r+0x8fe>
 8007a46:	4615      	mov	r5, r2
 8007a48:	e79f      	b.n	800798a <_dtoa_r+0xa42>
 8007a4a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007ab0 <_dtoa_r+0xb68>
 8007a4e:	e007      	b.n	8007a60 <_dtoa_r+0xb18>
 8007a50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a52:	f8df b060 	ldr.w	fp, [pc, #96]	; 8007ab4 <_dtoa_r+0xb6c>
 8007a56:	b11b      	cbz	r3, 8007a60 <_dtoa_r+0xb18>
 8007a58:	f10b 0308 	add.w	r3, fp, #8
 8007a5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007a5e:	6013      	str	r3, [r2, #0]
 8007a60:	4658      	mov	r0, fp
 8007a62:	b017      	add	sp, #92	; 0x5c
 8007a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a68:	9b06      	ldr	r3, [sp, #24]
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	f77f ae35 	ble.w	80076da <_dtoa_r+0x792>
 8007a70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a72:	9307      	str	r3, [sp, #28]
 8007a74:	e649      	b.n	800770a <_dtoa_r+0x7c2>
 8007a76:	9b02      	ldr	r3, [sp, #8]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	dc03      	bgt.n	8007a84 <_dtoa_r+0xb3c>
 8007a7c:	9b06      	ldr	r3, [sp, #24]
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	f73f aecc 	bgt.w	800781c <_dtoa_r+0x8d4>
 8007a84:	465d      	mov	r5, fp
 8007a86:	4639      	mov	r1, r7
 8007a88:	9804      	ldr	r0, [sp, #16]
 8007a8a:	f7ff f9d1 	bl	8006e30 <quorem>
 8007a8e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007a92:	f805 8b01 	strb.w	r8, [r5], #1
 8007a96:	9a02      	ldr	r2, [sp, #8]
 8007a98:	eba5 030b 	sub.w	r3, r5, fp
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	ddb0      	ble.n	8007a02 <_dtoa_r+0xaba>
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	220a      	movs	r2, #10
 8007aa4:	9904      	ldr	r1, [sp, #16]
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	f000 f877 	bl	8007b9a <__multadd>
 8007aac:	9004      	str	r0, [sp, #16]
 8007aae:	e7ea      	b.n	8007a86 <_dtoa_r+0xb3e>
 8007ab0:	08009794 	.word	0x08009794
 8007ab4:	080097b8 	.word	0x080097b8

08007ab8 <__locale_ctype_ptr_l>:
 8007ab8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007abc:	4770      	bx	lr
	...

08007ac0 <_localeconv_r>:
 8007ac0:	4b04      	ldr	r3, [pc, #16]	; (8007ad4 <_localeconv_r+0x14>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	6a18      	ldr	r0, [r3, #32]
 8007ac6:	4b04      	ldr	r3, [pc, #16]	; (8007ad8 <_localeconv_r+0x18>)
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	bf08      	it	eq
 8007acc:	4618      	moveq	r0, r3
 8007ace:	30f0      	adds	r0, #240	; 0xf0
 8007ad0:	4770      	bx	lr
 8007ad2:	bf00      	nop
 8007ad4:	2000000c 	.word	0x2000000c
 8007ad8:	20000070 	.word	0x20000070

08007adc <__ascii_mbtowc>:
 8007adc:	b082      	sub	sp, #8
 8007ade:	b901      	cbnz	r1, 8007ae2 <__ascii_mbtowc+0x6>
 8007ae0:	a901      	add	r1, sp, #4
 8007ae2:	b142      	cbz	r2, 8007af6 <__ascii_mbtowc+0x1a>
 8007ae4:	b14b      	cbz	r3, 8007afa <__ascii_mbtowc+0x1e>
 8007ae6:	7813      	ldrb	r3, [r2, #0]
 8007ae8:	600b      	str	r3, [r1, #0]
 8007aea:	7812      	ldrb	r2, [r2, #0]
 8007aec:	1c10      	adds	r0, r2, #0
 8007aee:	bf18      	it	ne
 8007af0:	2001      	movne	r0, #1
 8007af2:	b002      	add	sp, #8
 8007af4:	4770      	bx	lr
 8007af6:	4610      	mov	r0, r2
 8007af8:	e7fb      	b.n	8007af2 <__ascii_mbtowc+0x16>
 8007afa:	f06f 0001 	mvn.w	r0, #1
 8007afe:	e7f8      	b.n	8007af2 <__ascii_mbtowc+0x16>

08007b00 <__malloc_lock>:
 8007b00:	4770      	bx	lr

08007b02 <__malloc_unlock>:
 8007b02:	4770      	bx	lr

08007b04 <_Balloc>:
 8007b04:	b570      	push	{r4, r5, r6, lr}
 8007b06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007b08:	4604      	mov	r4, r0
 8007b0a:	460e      	mov	r6, r1
 8007b0c:	b93d      	cbnz	r5, 8007b1e <_Balloc+0x1a>
 8007b0e:	2010      	movs	r0, #16
 8007b10:	f7fe fb3c 	bl	800618c <malloc>
 8007b14:	6260      	str	r0, [r4, #36]	; 0x24
 8007b16:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b1a:	6005      	str	r5, [r0, #0]
 8007b1c:	60c5      	str	r5, [r0, #12]
 8007b1e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007b20:	68eb      	ldr	r3, [r5, #12]
 8007b22:	b183      	cbz	r3, 8007b46 <_Balloc+0x42>
 8007b24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007b2c:	b9b8      	cbnz	r0, 8007b5e <_Balloc+0x5a>
 8007b2e:	2101      	movs	r1, #1
 8007b30:	fa01 f506 	lsl.w	r5, r1, r6
 8007b34:	1d6a      	adds	r2, r5, #5
 8007b36:	0092      	lsls	r2, r2, #2
 8007b38:	4620      	mov	r0, r4
 8007b3a:	f000 fabf 	bl	80080bc <_calloc_r>
 8007b3e:	b160      	cbz	r0, 8007b5a <_Balloc+0x56>
 8007b40:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007b44:	e00e      	b.n	8007b64 <_Balloc+0x60>
 8007b46:	2221      	movs	r2, #33	; 0x21
 8007b48:	2104      	movs	r1, #4
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	f000 fab6 	bl	80080bc <_calloc_r>
 8007b50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b52:	60e8      	str	r0, [r5, #12]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d1e4      	bne.n	8007b24 <_Balloc+0x20>
 8007b5a:	2000      	movs	r0, #0
 8007b5c:	bd70      	pop	{r4, r5, r6, pc}
 8007b5e:	6802      	ldr	r2, [r0, #0]
 8007b60:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007b64:	2300      	movs	r3, #0
 8007b66:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b6a:	e7f7      	b.n	8007b5c <_Balloc+0x58>

08007b6c <_Bfree>:
 8007b6c:	b570      	push	{r4, r5, r6, lr}
 8007b6e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007b70:	4606      	mov	r6, r0
 8007b72:	460d      	mov	r5, r1
 8007b74:	b93c      	cbnz	r4, 8007b86 <_Bfree+0x1a>
 8007b76:	2010      	movs	r0, #16
 8007b78:	f7fe fb08 	bl	800618c <malloc>
 8007b7c:	6270      	str	r0, [r6, #36]	; 0x24
 8007b7e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b82:	6004      	str	r4, [r0, #0]
 8007b84:	60c4      	str	r4, [r0, #12]
 8007b86:	b13d      	cbz	r5, 8007b98 <_Bfree+0x2c>
 8007b88:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007b8a:	686a      	ldr	r2, [r5, #4]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b92:	6029      	str	r1, [r5, #0]
 8007b94:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007b98:	bd70      	pop	{r4, r5, r6, pc}

08007b9a <__multadd>:
 8007b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b9e:	690d      	ldr	r5, [r1, #16]
 8007ba0:	461f      	mov	r7, r3
 8007ba2:	4606      	mov	r6, r0
 8007ba4:	460c      	mov	r4, r1
 8007ba6:	f101 0c14 	add.w	ip, r1, #20
 8007baa:	2300      	movs	r3, #0
 8007bac:	f8dc 0000 	ldr.w	r0, [ip]
 8007bb0:	b281      	uxth	r1, r0
 8007bb2:	fb02 7101 	mla	r1, r2, r1, r7
 8007bb6:	0c0f      	lsrs	r7, r1, #16
 8007bb8:	0c00      	lsrs	r0, r0, #16
 8007bba:	fb02 7000 	mla	r0, r2, r0, r7
 8007bbe:	b289      	uxth	r1, r1
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007bc6:	429d      	cmp	r5, r3
 8007bc8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007bcc:	f84c 1b04 	str.w	r1, [ip], #4
 8007bd0:	dcec      	bgt.n	8007bac <__multadd+0x12>
 8007bd2:	b1d7      	cbz	r7, 8007c0a <__multadd+0x70>
 8007bd4:	68a3      	ldr	r3, [r4, #8]
 8007bd6:	42ab      	cmp	r3, r5
 8007bd8:	dc12      	bgt.n	8007c00 <__multadd+0x66>
 8007bda:	6861      	ldr	r1, [r4, #4]
 8007bdc:	4630      	mov	r0, r6
 8007bde:	3101      	adds	r1, #1
 8007be0:	f7ff ff90 	bl	8007b04 <_Balloc>
 8007be4:	6922      	ldr	r2, [r4, #16]
 8007be6:	3202      	adds	r2, #2
 8007be8:	f104 010c 	add.w	r1, r4, #12
 8007bec:	4680      	mov	r8, r0
 8007bee:	0092      	lsls	r2, r2, #2
 8007bf0:	300c      	adds	r0, #12
 8007bf2:	f7fe fadb 	bl	80061ac <memcpy>
 8007bf6:	4621      	mov	r1, r4
 8007bf8:	4630      	mov	r0, r6
 8007bfa:	f7ff ffb7 	bl	8007b6c <_Bfree>
 8007bfe:	4644      	mov	r4, r8
 8007c00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007c04:	3501      	adds	r5, #1
 8007c06:	615f      	str	r7, [r3, #20]
 8007c08:	6125      	str	r5, [r4, #16]
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007c10 <__hi0bits>:
 8007c10:	0c02      	lsrs	r2, r0, #16
 8007c12:	0412      	lsls	r2, r2, #16
 8007c14:	4603      	mov	r3, r0
 8007c16:	b9b2      	cbnz	r2, 8007c46 <__hi0bits+0x36>
 8007c18:	0403      	lsls	r3, r0, #16
 8007c1a:	2010      	movs	r0, #16
 8007c1c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007c20:	bf04      	itt	eq
 8007c22:	021b      	lsleq	r3, r3, #8
 8007c24:	3008      	addeq	r0, #8
 8007c26:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007c2a:	bf04      	itt	eq
 8007c2c:	011b      	lsleq	r3, r3, #4
 8007c2e:	3004      	addeq	r0, #4
 8007c30:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007c34:	bf04      	itt	eq
 8007c36:	009b      	lsleq	r3, r3, #2
 8007c38:	3002      	addeq	r0, #2
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	db06      	blt.n	8007c4c <__hi0bits+0x3c>
 8007c3e:	005b      	lsls	r3, r3, #1
 8007c40:	d503      	bpl.n	8007c4a <__hi0bits+0x3a>
 8007c42:	3001      	adds	r0, #1
 8007c44:	4770      	bx	lr
 8007c46:	2000      	movs	r0, #0
 8007c48:	e7e8      	b.n	8007c1c <__hi0bits+0xc>
 8007c4a:	2020      	movs	r0, #32
 8007c4c:	4770      	bx	lr

08007c4e <__lo0bits>:
 8007c4e:	6803      	ldr	r3, [r0, #0]
 8007c50:	f013 0207 	ands.w	r2, r3, #7
 8007c54:	4601      	mov	r1, r0
 8007c56:	d00b      	beq.n	8007c70 <__lo0bits+0x22>
 8007c58:	07da      	lsls	r2, r3, #31
 8007c5a:	d423      	bmi.n	8007ca4 <__lo0bits+0x56>
 8007c5c:	0798      	lsls	r0, r3, #30
 8007c5e:	bf49      	itett	mi
 8007c60:	085b      	lsrmi	r3, r3, #1
 8007c62:	089b      	lsrpl	r3, r3, #2
 8007c64:	2001      	movmi	r0, #1
 8007c66:	600b      	strmi	r3, [r1, #0]
 8007c68:	bf5c      	itt	pl
 8007c6a:	600b      	strpl	r3, [r1, #0]
 8007c6c:	2002      	movpl	r0, #2
 8007c6e:	4770      	bx	lr
 8007c70:	b298      	uxth	r0, r3
 8007c72:	b9a8      	cbnz	r0, 8007ca0 <__lo0bits+0x52>
 8007c74:	0c1b      	lsrs	r3, r3, #16
 8007c76:	2010      	movs	r0, #16
 8007c78:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007c7c:	bf04      	itt	eq
 8007c7e:	0a1b      	lsreq	r3, r3, #8
 8007c80:	3008      	addeq	r0, #8
 8007c82:	071a      	lsls	r2, r3, #28
 8007c84:	bf04      	itt	eq
 8007c86:	091b      	lsreq	r3, r3, #4
 8007c88:	3004      	addeq	r0, #4
 8007c8a:	079a      	lsls	r2, r3, #30
 8007c8c:	bf04      	itt	eq
 8007c8e:	089b      	lsreq	r3, r3, #2
 8007c90:	3002      	addeq	r0, #2
 8007c92:	07da      	lsls	r2, r3, #31
 8007c94:	d402      	bmi.n	8007c9c <__lo0bits+0x4e>
 8007c96:	085b      	lsrs	r3, r3, #1
 8007c98:	d006      	beq.n	8007ca8 <__lo0bits+0x5a>
 8007c9a:	3001      	adds	r0, #1
 8007c9c:	600b      	str	r3, [r1, #0]
 8007c9e:	4770      	bx	lr
 8007ca0:	4610      	mov	r0, r2
 8007ca2:	e7e9      	b.n	8007c78 <__lo0bits+0x2a>
 8007ca4:	2000      	movs	r0, #0
 8007ca6:	4770      	bx	lr
 8007ca8:	2020      	movs	r0, #32
 8007caa:	4770      	bx	lr

08007cac <__i2b>:
 8007cac:	b510      	push	{r4, lr}
 8007cae:	460c      	mov	r4, r1
 8007cb0:	2101      	movs	r1, #1
 8007cb2:	f7ff ff27 	bl	8007b04 <_Balloc>
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	6144      	str	r4, [r0, #20]
 8007cba:	6102      	str	r2, [r0, #16]
 8007cbc:	bd10      	pop	{r4, pc}

08007cbe <__multiply>:
 8007cbe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc2:	4614      	mov	r4, r2
 8007cc4:	690a      	ldr	r2, [r1, #16]
 8007cc6:	6923      	ldr	r3, [r4, #16]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	bfb8      	it	lt
 8007ccc:	460b      	movlt	r3, r1
 8007cce:	4688      	mov	r8, r1
 8007cd0:	bfbc      	itt	lt
 8007cd2:	46a0      	movlt	r8, r4
 8007cd4:	461c      	movlt	r4, r3
 8007cd6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007cda:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007cde:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007ce2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007ce6:	eb07 0609 	add.w	r6, r7, r9
 8007cea:	42b3      	cmp	r3, r6
 8007cec:	bfb8      	it	lt
 8007cee:	3101      	addlt	r1, #1
 8007cf0:	f7ff ff08 	bl	8007b04 <_Balloc>
 8007cf4:	f100 0514 	add.w	r5, r0, #20
 8007cf8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007cfc:	462b      	mov	r3, r5
 8007cfe:	2200      	movs	r2, #0
 8007d00:	4573      	cmp	r3, lr
 8007d02:	d316      	bcc.n	8007d32 <__multiply+0x74>
 8007d04:	f104 0214 	add.w	r2, r4, #20
 8007d08:	f108 0114 	add.w	r1, r8, #20
 8007d0c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007d10:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007d14:	9300      	str	r3, [sp, #0]
 8007d16:	9b00      	ldr	r3, [sp, #0]
 8007d18:	9201      	str	r2, [sp, #4]
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d80c      	bhi.n	8007d38 <__multiply+0x7a>
 8007d1e:	2e00      	cmp	r6, #0
 8007d20:	dd03      	ble.n	8007d2a <__multiply+0x6c>
 8007d22:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d05d      	beq.n	8007de6 <__multiply+0x128>
 8007d2a:	6106      	str	r6, [r0, #16]
 8007d2c:	b003      	add	sp, #12
 8007d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d32:	f843 2b04 	str.w	r2, [r3], #4
 8007d36:	e7e3      	b.n	8007d00 <__multiply+0x42>
 8007d38:	f8b2 b000 	ldrh.w	fp, [r2]
 8007d3c:	f1bb 0f00 	cmp.w	fp, #0
 8007d40:	d023      	beq.n	8007d8a <__multiply+0xcc>
 8007d42:	4689      	mov	r9, r1
 8007d44:	46ac      	mov	ip, r5
 8007d46:	f04f 0800 	mov.w	r8, #0
 8007d4a:	f859 4b04 	ldr.w	r4, [r9], #4
 8007d4e:	f8dc a000 	ldr.w	sl, [ip]
 8007d52:	b2a3      	uxth	r3, r4
 8007d54:	fa1f fa8a 	uxth.w	sl, sl
 8007d58:	fb0b a303 	mla	r3, fp, r3, sl
 8007d5c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007d60:	f8dc 4000 	ldr.w	r4, [ip]
 8007d64:	4443      	add	r3, r8
 8007d66:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007d6a:	fb0b 840a 	mla	r4, fp, sl, r8
 8007d6e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007d72:	46e2      	mov	sl, ip
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007d7a:	454f      	cmp	r7, r9
 8007d7c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007d80:	f84a 3b04 	str.w	r3, [sl], #4
 8007d84:	d82b      	bhi.n	8007dde <__multiply+0x120>
 8007d86:	f8cc 8004 	str.w	r8, [ip, #4]
 8007d8a:	9b01      	ldr	r3, [sp, #4]
 8007d8c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007d90:	3204      	adds	r2, #4
 8007d92:	f1ba 0f00 	cmp.w	sl, #0
 8007d96:	d020      	beq.n	8007dda <__multiply+0x11c>
 8007d98:	682b      	ldr	r3, [r5, #0]
 8007d9a:	4689      	mov	r9, r1
 8007d9c:	46a8      	mov	r8, r5
 8007d9e:	f04f 0b00 	mov.w	fp, #0
 8007da2:	f8b9 c000 	ldrh.w	ip, [r9]
 8007da6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007daa:	fb0a 440c 	mla	r4, sl, ip, r4
 8007dae:	445c      	add	r4, fp
 8007db0:	46c4      	mov	ip, r8
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007db8:	f84c 3b04 	str.w	r3, [ip], #4
 8007dbc:	f859 3b04 	ldr.w	r3, [r9], #4
 8007dc0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007dc4:	0c1b      	lsrs	r3, r3, #16
 8007dc6:	fb0a b303 	mla	r3, sl, r3, fp
 8007dca:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007dce:	454f      	cmp	r7, r9
 8007dd0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007dd4:	d805      	bhi.n	8007de2 <__multiply+0x124>
 8007dd6:	f8c8 3004 	str.w	r3, [r8, #4]
 8007dda:	3504      	adds	r5, #4
 8007ddc:	e79b      	b.n	8007d16 <__multiply+0x58>
 8007dde:	46d4      	mov	ip, sl
 8007de0:	e7b3      	b.n	8007d4a <__multiply+0x8c>
 8007de2:	46e0      	mov	r8, ip
 8007de4:	e7dd      	b.n	8007da2 <__multiply+0xe4>
 8007de6:	3e01      	subs	r6, #1
 8007de8:	e799      	b.n	8007d1e <__multiply+0x60>
	...

08007dec <__pow5mult>:
 8007dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007df0:	4615      	mov	r5, r2
 8007df2:	f012 0203 	ands.w	r2, r2, #3
 8007df6:	4606      	mov	r6, r0
 8007df8:	460f      	mov	r7, r1
 8007dfa:	d007      	beq.n	8007e0c <__pow5mult+0x20>
 8007dfc:	3a01      	subs	r2, #1
 8007dfe:	4c21      	ldr	r4, [pc, #132]	; (8007e84 <__pow5mult+0x98>)
 8007e00:	2300      	movs	r3, #0
 8007e02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e06:	f7ff fec8 	bl	8007b9a <__multadd>
 8007e0a:	4607      	mov	r7, r0
 8007e0c:	10ad      	asrs	r5, r5, #2
 8007e0e:	d035      	beq.n	8007e7c <__pow5mult+0x90>
 8007e10:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007e12:	b93c      	cbnz	r4, 8007e24 <__pow5mult+0x38>
 8007e14:	2010      	movs	r0, #16
 8007e16:	f7fe f9b9 	bl	800618c <malloc>
 8007e1a:	6270      	str	r0, [r6, #36]	; 0x24
 8007e1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e20:	6004      	str	r4, [r0, #0]
 8007e22:	60c4      	str	r4, [r0, #12]
 8007e24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007e28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e2c:	b94c      	cbnz	r4, 8007e42 <__pow5mult+0x56>
 8007e2e:	f240 2171 	movw	r1, #625	; 0x271
 8007e32:	4630      	mov	r0, r6
 8007e34:	f7ff ff3a 	bl	8007cac <__i2b>
 8007e38:	2300      	movs	r3, #0
 8007e3a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e3e:	4604      	mov	r4, r0
 8007e40:	6003      	str	r3, [r0, #0]
 8007e42:	f04f 0800 	mov.w	r8, #0
 8007e46:	07eb      	lsls	r3, r5, #31
 8007e48:	d50a      	bpl.n	8007e60 <__pow5mult+0x74>
 8007e4a:	4639      	mov	r1, r7
 8007e4c:	4622      	mov	r2, r4
 8007e4e:	4630      	mov	r0, r6
 8007e50:	f7ff ff35 	bl	8007cbe <__multiply>
 8007e54:	4639      	mov	r1, r7
 8007e56:	4681      	mov	r9, r0
 8007e58:	4630      	mov	r0, r6
 8007e5a:	f7ff fe87 	bl	8007b6c <_Bfree>
 8007e5e:	464f      	mov	r7, r9
 8007e60:	106d      	asrs	r5, r5, #1
 8007e62:	d00b      	beq.n	8007e7c <__pow5mult+0x90>
 8007e64:	6820      	ldr	r0, [r4, #0]
 8007e66:	b938      	cbnz	r0, 8007e78 <__pow5mult+0x8c>
 8007e68:	4622      	mov	r2, r4
 8007e6a:	4621      	mov	r1, r4
 8007e6c:	4630      	mov	r0, r6
 8007e6e:	f7ff ff26 	bl	8007cbe <__multiply>
 8007e72:	6020      	str	r0, [r4, #0]
 8007e74:	f8c0 8000 	str.w	r8, [r0]
 8007e78:	4604      	mov	r4, r0
 8007e7a:	e7e4      	b.n	8007e46 <__pow5mult+0x5a>
 8007e7c:	4638      	mov	r0, r7
 8007e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e82:	bf00      	nop
 8007e84:	080098c0 	.word	0x080098c0

08007e88 <__lshift>:
 8007e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e8c:	460c      	mov	r4, r1
 8007e8e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e92:	6923      	ldr	r3, [r4, #16]
 8007e94:	6849      	ldr	r1, [r1, #4]
 8007e96:	eb0a 0903 	add.w	r9, sl, r3
 8007e9a:	68a3      	ldr	r3, [r4, #8]
 8007e9c:	4607      	mov	r7, r0
 8007e9e:	4616      	mov	r6, r2
 8007ea0:	f109 0501 	add.w	r5, r9, #1
 8007ea4:	42ab      	cmp	r3, r5
 8007ea6:	db32      	blt.n	8007f0e <__lshift+0x86>
 8007ea8:	4638      	mov	r0, r7
 8007eaa:	f7ff fe2b 	bl	8007b04 <_Balloc>
 8007eae:	2300      	movs	r3, #0
 8007eb0:	4680      	mov	r8, r0
 8007eb2:	f100 0114 	add.w	r1, r0, #20
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	4553      	cmp	r3, sl
 8007eba:	db2b      	blt.n	8007f14 <__lshift+0x8c>
 8007ebc:	6920      	ldr	r0, [r4, #16]
 8007ebe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ec2:	f104 0314 	add.w	r3, r4, #20
 8007ec6:	f016 021f 	ands.w	r2, r6, #31
 8007eca:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ece:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007ed2:	d025      	beq.n	8007f20 <__lshift+0x98>
 8007ed4:	f1c2 0e20 	rsb	lr, r2, #32
 8007ed8:	2000      	movs	r0, #0
 8007eda:	681e      	ldr	r6, [r3, #0]
 8007edc:	468a      	mov	sl, r1
 8007ede:	4096      	lsls	r6, r2
 8007ee0:	4330      	orrs	r0, r6
 8007ee2:	f84a 0b04 	str.w	r0, [sl], #4
 8007ee6:	f853 0b04 	ldr.w	r0, [r3], #4
 8007eea:	459c      	cmp	ip, r3
 8007eec:	fa20 f00e 	lsr.w	r0, r0, lr
 8007ef0:	d814      	bhi.n	8007f1c <__lshift+0x94>
 8007ef2:	6048      	str	r0, [r1, #4]
 8007ef4:	b108      	cbz	r0, 8007efa <__lshift+0x72>
 8007ef6:	f109 0502 	add.w	r5, r9, #2
 8007efa:	3d01      	subs	r5, #1
 8007efc:	4638      	mov	r0, r7
 8007efe:	f8c8 5010 	str.w	r5, [r8, #16]
 8007f02:	4621      	mov	r1, r4
 8007f04:	f7ff fe32 	bl	8007b6c <_Bfree>
 8007f08:	4640      	mov	r0, r8
 8007f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f0e:	3101      	adds	r1, #1
 8007f10:	005b      	lsls	r3, r3, #1
 8007f12:	e7c7      	b.n	8007ea4 <__lshift+0x1c>
 8007f14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007f18:	3301      	adds	r3, #1
 8007f1a:	e7cd      	b.n	8007eb8 <__lshift+0x30>
 8007f1c:	4651      	mov	r1, sl
 8007f1e:	e7dc      	b.n	8007eda <__lshift+0x52>
 8007f20:	3904      	subs	r1, #4
 8007f22:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f26:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f2a:	459c      	cmp	ip, r3
 8007f2c:	d8f9      	bhi.n	8007f22 <__lshift+0x9a>
 8007f2e:	e7e4      	b.n	8007efa <__lshift+0x72>

08007f30 <__mcmp>:
 8007f30:	6903      	ldr	r3, [r0, #16]
 8007f32:	690a      	ldr	r2, [r1, #16]
 8007f34:	1a9b      	subs	r3, r3, r2
 8007f36:	b530      	push	{r4, r5, lr}
 8007f38:	d10c      	bne.n	8007f54 <__mcmp+0x24>
 8007f3a:	0092      	lsls	r2, r2, #2
 8007f3c:	3014      	adds	r0, #20
 8007f3e:	3114      	adds	r1, #20
 8007f40:	1884      	adds	r4, r0, r2
 8007f42:	4411      	add	r1, r2
 8007f44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007f48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007f4c:	4295      	cmp	r5, r2
 8007f4e:	d003      	beq.n	8007f58 <__mcmp+0x28>
 8007f50:	d305      	bcc.n	8007f5e <__mcmp+0x2e>
 8007f52:	2301      	movs	r3, #1
 8007f54:	4618      	mov	r0, r3
 8007f56:	bd30      	pop	{r4, r5, pc}
 8007f58:	42a0      	cmp	r0, r4
 8007f5a:	d3f3      	bcc.n	8007f44 <__mcmp+0x14>
 8007f5c:	e7fa      	b.n	8007f54 <__mcmp+0x24>
 8007f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f62:	e7f7      	b.n	8007f54 <__mcmp+0x24>

08007f64 <__mdiff>:
 8007f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f68:	460d      	mov	r5, r1
 8007f6a:	4607      	mov	r7, r0
 8007f6c:	4611      	mov	r1, r2
 8007f6e:	4628      	mov	r0, r5
 8007f70:	4614      	mov	r4, r2
 8007f72:	f7ff ffdd 	bl	8007f30 <__mcmp>
 8007f76:	1e06      	subs	r6, r0, #0
 8007f78:	d108      	bne.n	8007f8c <__mdiff+0x28>
 8007f7a:	4631      	mov	r1, r6
 8007f7c:	4638      	mov	r0, r7
 8007f7e:	f7ff fdc1 	bl	8007b04 <_Balloc>
 8007f82:	2301      	movs	r3, #1
 8007f84:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f8c:	bfa4      	itt	ge
 8007f8e:	4623      	movge	r3, r4
 8007f90:	462c      	movge	r4, r5
 8007f92:	4638      	mov	r0, r7
 8007f94:	6861      	ldr	r1, [r4, #4]
 8007f96:	bfa6      	itte	ge
 8007f98:	461d      	movge	r5, r3
 8007f9a:	2600      	movge	r6, #0
 8007f9c:	2601      	movlt	r6, #1
 8007f9e:	f7ff fdb1 	bl	8007b04 <_Balloc>
 8007fa2:	692b      	ldr	r3, [r5, #16]
 8007fa4:	60c6      	str	r6, [r0, #12]
 8007fa6:	6926      	ldr	r6, [r4, #16]
 8007fa8:	f105 0914 	add.w	r9, r5, #20
 8007fac:	f104 0214 	add.w	r2, r4, #20
 8007fb0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007fb4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007fb8:	f100 0514 	add.w	r5, r0, #20
 8007fbc:	f04f 0e00 	mov.w	lr, #0
 8007fc0:	f852 ab04 	ldr.w	sl, [r2], #4
 8007fc4:	f859 4b04 	ldr.w	r4, [r9], #4
 8007fc8:	fa1e f18a 	uxtah	r1, lr, sl
 8007fcc:	b2a3      	uxth	r3, r4
 8007fce:	1ac9      	subs	r1, r1, r3
 8007fd0:	0c23      	lsrs	r3, r4, #16
 8007fd2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007fd6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007fda:	b289      	uxth	r1, r1
 8007fdc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007fe0:	45c8      	cmp	r8, r9
 8007fe2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007fe6:	4694      	mov	ip, r2
 8007fe8:	f845 3b04 	str.w	r3, [r5], #4
 8007fec:	d8e8      	bhi.n	8007fc0 <__mdiff+0x5c>
 8007fee:	45bc      	cmp	ip, r7
 8007ff0:	d304      	bcc.n	8007ffc <__mdiff+0x98>
 8007ff2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007ff6:	b183      	cbz	r3, 800801a <__mdiff+0xb6>
 8007ff8:	6106      	str	r6, [r0, #16]
 8007ffa:	e7c5      	b.n	8007f88 <__mdiff+0x24>
 8007ffc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008000:	fa1e f381 	uxtah	r3, lr, r1
 8008004:	141a      	asrs	r2, r3, #16
 8008006:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800800a:	b29b      	uxth	r3, r3
 800800c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008010:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008014:	f845 3b04 	str.w	r3, [r5], #4
 8008018:	e7e9      	b.n	8007fee <__mdiff+0x8a>
 800801a:	3e01      	subs	r6, #1
 800801c:	e7e9      	b.n	8007ff2 <__mdiff+0x8e>

0800801e <__d2b>:
 800801e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008022:	460e      	mov	r6, r1
 8008024:	2101      	movs	r1, #1
 8008026:	ec59 8b10 	vmov	r8, r9, d0
 800802a:	4615      	mov	r5, r2
 800802c:	f7ff fd6a 	bl	8007b04 <_Balloc>
 8008030:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008034:	4607      	mov	r7, r0
 8008036:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800803a:	bb34      	cbnz	r4, 800808a <__d2b+0x6c>
 800803c:	9301      	str	r3, [sp, #4]
 800803e:	f1b8 0300 	subs.w	r3, r8, #0
 8008042:	d027      	beq.n	8008094 <__d2b+0x76>
 8008044:	a802      	add	r0, sp, #8
 8008046:	f840 3d08 	str.w	r3, [r0, #-8]!
 800804a:	f7ff fe00 	bl	8007c4e <__lo0bits>
 800804e:	9900      	ldr	r1, [sp, #0]
 8008050:	b1f0      	cbz	r0, 8008090 <__d2b+0x72>
 8008052:	9a01      	ldr	r2, [sp, #4]
 8008054:	f1c0 0320 	rsb	r3, r0, #32
 8008058:	fa02 f303 	lsl.w	r3, r2, r3
 800805c:	430b      	orrs	r3, r1
 800805e:	40c2      	lsrs	r2, r0
 8008060:	617b      	str	r3, [r7, #20]
 8008062:	9201      	str	r2, [sp, #4]
 8008064:	9b01      	ldr	r3, [sp, #4]
 8008066:	61bb      	str	r3, [r7, #24]
 8008068:	2b00      	cmp	r3, #0
 800806a:	bf14      	ite	ne
 800806c:	2102      	movne	r1, #2
 800806e:	2101      	moveq	r1, #1
 8008070:	6139      	str	r1, [r7, #16]
 8008072:	b1c4      	cbz	r4, 80080a6 <__d2b+0x88>
 8008074:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008078:	4404      	add	r4, r0
 800807a:	6034      	str	r4, [r6, #0]
 800807c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008080:	6028      	str	r0, [r5, #0]
 8008082:	4638      	mov	r0, r7
 8008084:	b003      	add	sp, #12
 8008086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800808a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800808e:	e7d5      	b.n	800803c <__d2b+0x1e>
 8008090:	6179      	str	r1, [r7, #20]
 8008092:	e7e7      	b.n	8008064 <__d2b+0x46>
 8008094:	a801      	add	r0, sp, #4
 8008096:	f7ff fdda 	bl	8007c4e <__lo0bits>
 800809a:	9b01      	ldr	r3, [sp, #4]
 800809c:	617b      	str	r3, [r7, #20]
 800809e:	2101      	movs	r1, #1
 80080a0:	6139      	str	r1, [r7, #16]
 80080a2:	3020      	adds	r0, #32
 80080a4:	e7e5      	b.n	8008072 <__d2b+0x54>
 80080a6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80080aa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80080ae:	6030      	str	r0, [r6, #0]
 80080b0:	6918      	ldr	r0, [r3, #16]
 80080b2:	f7ff fdad 	bl	8007c10 <__hi0bits>
 80080b6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80080ba:	e7e1      	b.n	8008080 <__d2b+0x62>

080080bc <_calloc_r>:
 80080bc:	b538      	push	{r3, r4, r5, lr}
 80080be:	fb02 f401 	mul.w	r4, r2, r1
 80080c2:	4621      	mov	r1, r4
 80080c4:	f7fe f8d4 	bl	8006270 <_malloc_r>
 80080c8:	4605      	mov	r5, r0
 80080ca:	b118      	cbz	r0, 80080d4 <_calloc_r+0x18>
 80080cc:	4622      	mov	r2, r4
 80080ce:	2100      	movs	r1, #0
 80080d0:	f7fe f877 	bl	80061c2 <memset>
 80080d4:	4628      	mov	r0, r5
 80080d6:	bd38      	pop	{r3, r4, r5, pc}

080080d8 <__ssputs_r>:
 80080d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080dc:	688e      	ldr	r6, [r1, #8]
 80080de:	429e      	cmp	r6, r3
 80080e0:	4682      	mov	sl, r0
 80080e2:	460c      	mov	r4, r1
 80080e4:	4690      	mov	r8, r2
 80080e6:	4699      	mov	r9, r3
 80080e8:	d837      	bhi.n	800815a <__ssputs_r+0x82>
 80080ea:	898a      	ldrh	r2, [r1, #12]
 80080ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80080f0:	d031      	beq.n	8008156 <__ssputs_r+0x7e>
 80080f2:	6825      	ldr	r5, [r4, #0]
 80080f4:	6909      	ldr	r1, [r1, #16]
 80080f6:	1a6f      	subs	r7, r5, r1
 80080f8:	6965      	ldr	r5, [r4, #20]
 80080fa:	2302      	movs	r3, #2
 80080fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008100:	fb95 f5f3 	sdiv	r5, r5, r3
 8008104:	f109 0301 	add.w	r3, r9, #1
 8008108:	443b      	add	r3, r7
 800810a:	429d      	cmp	r5, r3
 800810c:	bf38      	it	cc
 800810e:	461d      	movcc	r5, r3
 8008110:	0553      	lsls	r3, r2, #21
 8008112:	d530      	bpl.n	8008176 <__ssputs_r+0x9e>
 8008114:	4629      	mov	r1, r5
 8008116:	f7fe f8ab 	bl	8006270 <_malloc_r>
 800811a:	4606      	mov	r6, r0
 800811c:	b950      	cbnz	r0, 8008134 <__ssputs_r+0x5c>
 800811e:	230c      	movs	r3, #12
 8008120:	f8ca 3000 	str.w	r3, [sl]
 8008124:	89a3      	ldrh	r3, [r4, #12]
 8008126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800812a:	81a3      	strh	r3, [r4, #12]
 800812c:	f04f 30ff 	mov.w	r0, #4294967295
 8008130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008134:	463a      	mov	r2, r7
 8008136:	6921      	ldr	r1, [r4, #16]
 8008138:	f7fe f838 	bl	80061ac <memcpy>
 800813c:	89a3      	ldrh	r3, [r4, #12]
 800813e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008146:	81a3      	strh	r3, [r4, #12]
 8008148:	6126      	str	r6, [r4, #16]
 800814a:	6165      	str	r5, [r4, #20]
 800814c:	443e      	add	r6, r7
 800814e:	1bed      	subs	r5, r5, r7
 8008150:	6026      	str	r6, [r4, #0]
 8008152:	60a5      	str	r5, [r4, #8]
 8008154:	464e      	mov	r6, r9
 8008156:	454e      	cmp	r6, r9
 8008158:	d900      	bls.n	800815c <__ssputs_r+0x84>
 800815a:	464e      	mov	r6, r9
 800815c:	4632      	mov	r2, r6
 800815e:	4641      	mov	r1, r8
 8008160:	6820      	ldr	r0, [r4, #0]
 8008162:	f000 f918 	bl	8008396 <memmove>
 8008166:	68a3      	ldr	r3, [r4, #8]
 8008168:	1b9b      	subs	r3, r3, r6
 800816a:	60a3      	str	r3, [r4, #8]
 800816c:	6823      	ldr	r3, [r4, #0]
 800816e:	441e      	add	r6, r3
 8008170:	6026      	str	r6, [r4, #0]
 8008172:	2000      	movs	r0, #0
 8008174:	e7dc      	b.n	8008130 <__ssputs_r+0x58>
 8008176:	462a      	mov	r2, r5
 8008178:	f000 f926 	bl	80083c8 <_realloc_r>
 800817c:	4606      	mov	r6, r0
 800817e:	2800      	cmp	r0, #0
 8008180:	d1e2      	bne.n	8008148 <__ssputs_r+0x70>
 8008182:	6921      	ldr	r1, [r4, #16]
 8008184:	4650      	mov	r0, sl
 8008186:	f7fe f825 	bl	80061d4 <_free_r>
 800818a:	e7c8      	b.n	800811e <__ssputs_r+0x46>

0800818c <_svfiprintf_r>:
 800818c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008190:	461d      	mov	r5, r3
 8008192:	898b      	ldrh	r3, [r1, #12]
 8008194:	061f      	lsls	r7, r3, #24
 8008196:	b09d      	sub	sp, #116	; 0x74
 8008198:	4680      	mov	r8, r0
 800819a:	460c      	mov	r4, r1
 800819c:	4616      	mov	r6, r2
 800819e:	d50f      	bpl.n	80081c0 <_svfiprintf_r+0x34>
 80081a0:	690b      	ldr	r3, [r1, #16]
 80081a2:	b96b      	cbnz	r3, 80081c0 <_svfiprintf_r+0x34>
 80081a4:	2140      	movs	r1, #64	; 0x40
 80081a6:	f7fe f863 	bl	8006270 <_malloc_r>
 80081aa:	6020      	str	r0, [r4, #0]
 80081ac:	6120      	str	r0, [r4, #16]
 80081ae:	b928      	cbnz	r0, 80081bc <_svfiprintf_r+0x30>
 80081b0:	230c      	movs	r3, #12
 80081b2:	f8c8 3000 	str.w	r3, [r8]
 80081b6:	f04f 30ff 	mov.w	r0, #4294967295
 80081ba:	e0c8      	b.n	800834e <_svfiprintf_r+0x1c2>
 80081bc:	2340      	movs	r3, #64	; 0x40
 80081be:	6163      	str	r3, [r4, #20]
 80081c0:	2300      	movs	r3, #0
 80081c2:	9309      	str	r3, [sp, #36]	; 0x24
 80081c4:	2320      	movs	r3, #32
 80081c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081ca:	2330      	movs	r3, #48	; 0x30
 80081cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081d0:	9503      	str	r5, [sp, #12]
 80081d2:	f04f 0b01 	mov.w	fp, #1
 80081d6:	4637      	mov	r7, r6
 80081d8:	463d      	mov	r5, r7
 80081da:	f815 3b01 	ldrb.w	r3, [r5], #1
 80081de:	b10b      	cbz	r3, 80081e4 <_svfiprintf_r+0x58>
 80081e0:	2b25      	cmp	r3, #37	; 0x25
 80081e2:	d13e      	bne.n	8008262 <_svfiprintf_r+0xd6>
 80081e4:	ebb7 0a06 	subs.w	sl, r7, r6
 80081e8:	d00b      	beq.n	8008202 <_svfiprintf_r+0x76>
 80081ea:	4653      	mov	r3, sl
 80081ec:	4632      	mov	r2, r6
 80081ee:	4621      	mov	r1, r4
 80081f0:	4640      	mov	r0, r8
 80081f2:	f7ff ff71 	bl	80080d8 <__ssputs_r>
 80081f6:	3001      	adds	r0, #1
 80081f8:	f000 80a4 	beq.w	8008344 <_svfiprintf_r+0x1b8>
 80081fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081fe:	4453      	add	r3, sl
 8008200:	9309      	str	r3, [sp, #36]	; 0x24
 8008202:	783b      	ldrb	r3, [r7, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	f000 809d 	beq.w	8008344 <_svfiprintf_r+0x1b8>
 800820a:	2300      	movs	r3, #0
 800820c:	f04f 32ff 	mov.w	r2, #4294967295
 8008210:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008214:	9304      	str	r3, [sp, #16]
 8008216:	9307      	str	r3, [sp, #28]
 8008218:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800821c:	931a      	str	r3, [sp, #104]	; 0x68
 800821e:	462f      	mov	r7, r5
 8008220:	2205      	movs	r2, #5
 8008222:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008226:	4850      	ldr	r0, [pc, #320]	; (8008368 <_svfiprintf_r+0x1dc>)
 8008228:	f7f7 ffda 	bl	80001e0 <memchr>
 800822c:	9b04      	ldr	r3, [sp, #16]
 800822e:	b9d0      	cbnz	r0, 8008266 <_svfiprintf_r+0xda>
 8008230:	06d9      	lsls	r1, r3, #27
 8008232:	bf44      	itt	mi
 8008234:	2220      	movmi	r2, #32
 8008236:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800823a:	071a      	lsls	r2, r3, #28
 800823c:	bf44      	itt	mi
 800823e:	222b      	movmi	r2, #43	; 0x2b
 8008240:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008244:	782a      	ldrb	r2, [r5, #0]
 8008246:	2a2a      	cmp	r2, #42	; 0x2a
 8008248:	d015      	beq.n	8008276 <_svfiprintf_r+0xea>
 800824a:	9a07      	ldr	r2, [sp, #28]
 800824c:	462f      	mov	r7, r5
 800824e:	2000      	movs	r0, #0
 8008250:	250a      	movs	r5, #10
 8008252:	4639      	mov	r1, r7
 8008254:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008258:	3b30      	subs	r3, #48	; 0x30
 800825a:	2b09      	cmp	r3, #9
 800825c:	d94d      	bls.n	80082fa <_svfiprintf_r+0x16e>
 800825e:	b1b8      	cbz	r0, 8008290 <_svfiprintf_r+0x104>
 8008260:	e00f      	b.n	8008282 <_svfiprintf_r+0xf6>
 8008262:	462f      	mov	r7, r5
 8008264:	e7b8      	b.n	80081d8 <_svfiprintf_r+0x4c>
 8008266:	4a40      	ldr	r2, [pc, #256]	; (8008368 <_svfiprintf_r+0x1dc>)
 8008268:	1a80      	subs	r0, r0, r2
 800826a:	fa0b f000 	lsl.w	r0, fp, r0
 800826e:	4318      	orrs	r0, r3
 8008270:	9004      	str	r0, [sp, #16]
 8008272:	463d      	mov	r5, r7
 8008274:	e7d3      	b.n	800821e <_svfiprintf_r+0x92>
 8008276:	9a03      	ldr	r2, [sp, #12]
 8008278:	1d11      	adds	r1, r2, #4
 800827a:	6812      	ldr	r2, [r2, #0]
 800827c:	9103      	str	r1, [sp, #12]
 800827e:	2a00      	cmp	r2, #0
 8008280:	db01      	blt.n	8008286 <_svfiprintf_r+0xfa>
 8008282:	9207      	str	r2, [sp, #28]
 8008284:	e004      	b.n	8008290 <_svfiprintf_r+0x104>
 8008286:	4252      	negs	r2, r2
 8008288:	f043 0302 	orr.w	r3, r3, #2
 800828c:	9207      	str	r2, [sp, #28]
 800828e:	9304      	str	r3, [sp, #16]
 8008290:	783b      	ldrb	r3, [r7, #0]
 8008292:	2b2e      	cmp	r3, #46	; 0x2e
 8008294:	d10c      	bne.n	80082b0 <_svfiprintf_r+0x124>
 8008296:	787b      	ldrb	r3, [r7, #1]
 8008298:	2b2a      	cmp	r3, #42	; 0x2a
 800829a:	d133      	bne.n	8008304 <_svfiprintf_r+0x178>
 800829c:	9b03      	ldr	r3, [sp, #12]
 800829e:	1d1a      	adds	r2, r3, #4
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	9203      	str	r2, [sp, #12]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	bfb8      	it	lt
 80082a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80082ac:	3702      	adds	r7, #2
 80082ae:	9305      	str	r3, [sp, #20]
 80082b0:	4d2e      	ldr	r5, [pc, #184]	; (800836c <_svfiprintf_r+0x1e0>)
 80082b2:	7839      	ldrb	r1, [r7, #0]
 80082b4:	2203      	movs	r2, #3
 80082b6:	4628      	mov	r0, r5
 80082b8:	f7f7 ff92 	bl	80001e0 <memchr>
 80082bc:	b138      	cbz	r0, 80082ce <_svfiprintf_r+0x142>
 80082be:	2340      	movs	r3, #64	; 0x40
 80082c0:	1b40      	subs	r0, r0, r5
 80082c2:	fa03 f000 	lsl.w	r0, r3, r0
 80082c6:	9b04      	ldr	r3, [sp, #16]
 80082c8:	4303      	orrs	r3, r0
 80082ca:	3701      	adds	r7, #1
 80082cc:	9304      	str	r3, [sp, #16]
 80082ce:	7839      	ldrb	r1, [r7, #0]
 80082d0:	4827      	ldr	r0, [pc, #156]	; (8008370 <_svfiprintf_r+0x1e4>)
 80082d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082d6:	2206      	movs	r2, #6
 80082d8:	1c7e      	adds	r6, r7, #1
 80082da:	f7f7 ff81 	bl	80001e0 <memchr>
 80082de:	2800      	cmp	r0, #0
 80082e0:	d038      	beq.n	8008354 <_svfiprintf_r+0x1c8>
 80082e2:	4b24      	ldr	r3, [pc, #144]	; (8008374 <_svfiprintf_r+0x1e8>)
 80082e4:	bb13      	cbnz	r3, 800832c <_svfiprintf_r+0x1a0>
 80082e6:	9b03      	ldr	r3, [sp, #12]
 80082e8:	3307      	adds	r3, #7
 80082ea:	f023 0307 	bic.w	r3, r3, #7
 80082ee:	3308      	adds	r3, #8
 80082f0:	9303      	str	r3, [sp, #12]
 80082f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082f4:	444b      	add	r3, r9
 80082f6:	9309      	str	r3, [sp, #36]	; 0x24
 80082f8:	e76d      	b.n	80081d6 <_svfiprintf_r+0x4a>
 80082fa:	fb05 3202 	mla	r2, r5, r2, r3
 80082fe:	2001      	movs	r0, #1
 8008300:	460f      	mov	r7, r1
 8008302:	e7a6      	b.n	8008252 <_svfiprintf_r+0xc6>
 8008304:	2300      	movs	r3, #0
 8008306:	3701      	adds	r7, #1
 8008308:	9305      	str	r3, [sp, #20]
 800830a:	4619      	mov	r1, r3
 800830c:	250a      	movs	r5, #10
 800830e:	4638      	mov	r0, r7
 8008310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008314:	3a30      	subs	r2, #48	; 0x30
 8008316:	2a09      	cmp	r2, #9
 8008318:	d903      	bls.n	8008322 <_svfiprintf_r+0x196>
 800831a:	2b00      	cmp	r3, #0
 800831c:	d0c8      	beq.n	80082b0 <_svfiprintf_r+0x124>
 800831e:	9105      	str	r1, [sp, #20]
 8008320:	e7c6      	b.n	80082b0 <_svfiprintf_r+0x124>
 8008322:	fb05 2101 	mla	r1, r5, r1, r2
 8008326:	2301      	movs	r3, #1
 8008328:	4607      	mov	r7, r0
 800832a:	e7f0      	b.n	800830e <_svfiprintf_r+0x182>
 800832c:	ab03      	add	r3, sp, #12
 800832e:	9300      	str	r3, [sp, #0]
 8008330:	4622      	mov	r2, r4
 8008332:	4b11      	ldr	r3, [pc, #68]	; (8008378 <_svfiprintf_r+0x1ec>)
 8008334:	a904      	add	r1, sp, #16
 8008336:	4640      	mov	r0, r8
 8008338:	f7fe f888 	bl	800644c <_printf_float>
 800833c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008340:	4681      	mov	r9, r0
 8008342:	d1d6      	bne.n	80082f2 <_svfiprintf_r+0x166>
 8008344:	89a3      	ldrh	r3, [r4, #12]
 8008346:	065b      	lsls	r3, r3, #25
 8008348:	f53f af35 	bmi.w	80081b6 <_svfiprintf_r+0x2a>
 800834c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800834e:	b01d      	add	sp, #116	; 0x74
 8008350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008354:	ab03      	add	r3, sp, #12
 8008356:	9300      	str	r3, [sp, #0]
 8008358:	4622      	mov	r2, r4
 800835a:	4b07      	ldr	r3, [pc, #28]	; (8008378 <_svfiprintf_r+0x1ec>)
 800835c:	a904      	add	r1, sp, #16
 800835e:	4640      	mov	r0, r8
 8008360:	f7fe fb2a 	bl	80069b8 <_printf_i>
 8008364:	e7ea      	b.n	800833c <_svfiprintf_r+0x1b0>
 8008366:	bf00      	nop
 8008368:	080098cc 	.word	0x080098cc
 800836c:	080098d2 	.word	0x080098d2
 8008370:	080098d6 	.word	0x080098d6
 8008374:	0800644d 	.word	0x0800644d
 8008378:	080080d9 	.word	0x080080d9

0800837c <__ascii_wctomb>:
 800837c:	b149      	cbz	r1, 8008392 <__ascii_wctomb+0x16>
 800837e:	2aff      	cmp	r2, #255	; 0xff
 8008380:	bf85      	ittet	hi
 8008382:	238a      	movhi	r3, #138	; 0x8a
 8008384:	6003      	strhi	r3, [r0, #0]
 8008386:	700a      	strbls	r2, [r1, #0]
 8008388:	f04f 30ff 	movhi.w	r0, #4294967295
 800838c:	bf98      	it	ls
 800838e:	2001      	movls	r0, #1
 8008390:	4770      	bx	lr
 8008392:	4608      	mov	r0, r1
 8008394:	4770      	bx	lr

08008396 <memmove>:
 8008396:	4288      	cmp	r0, r1
 8008398:	b510      	push	{r4, lr}
 800839a:	eb01 0302 	add.w	r3, r1, r2
 800839e:	d807      	bhi.n	80083b0 <memmove+0x1a>
 80083a0:	1e42      	subs	r2, r0, #1
 80083a2:	4299      	cmp	r1, r3
 80083a4:	d00a      	beq.n	80083bc <memmove+0x26>
 80083a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083aa:	f802 4f01 	strb.w	r4, [r2, #1]!
 80083ae:	e7f8      	b.n	80083a2 <memmove+0xc>
 80083b0:	4283      	cmp	r3, r0
 80083b2:	d9f5      	bls.n	80083a0 <memmove+0xa>
 80083b4:	1881      	adds	r1, r0, r2
 80083b6:	1ad2      	subs	r2, r2, r3
 80083b8:	42d3      	cmn	r3, r2
 80083ba:	d100      	bne.n	80083be <memmove+0x28>
 80083bc:	bd10      	pop	{r4, pc}
 80083be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083c2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80083c6:	e7f7      	b.n	80083b8 <memmove+0x22>

080083c8 <_realloc_r>:
 80083c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ca:	4607      	mov	r7, r0
 80083cc:	4614      	mov	r4, r2
 80083ce:	460e      	mov	r6, r1
 80083d0:	b921      	cbnz	r1, 80083dc <_realloc_r+0x14>
 80083d2:	4611      	mov	r1, r2
 80083d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80083d8:	f7fd bf4a 	b.w	8006270 <_malloc_r>
 80083dc:	b922      	cbnz	r2, 80083e8 <_realloc_r+0x20>
 80083de:	f7fd fef9 	bl	80061d4 <_free_r>
 80083e2:	4625      	mov	r5, r4
 80083e4:	4628      	mov	r0, r5
 80083e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083e8:	f000 f814 	bl	8008414 <_malloc_usable_size_r>
 80083ec:	42a0      	cmp	r0, r4
 80083ee:	d20f      	bcs.n	8008410 <_realloc_r+0x48>
 80083f0:	4621      	mov	r1, r4
 80083f2:	4638      	mov	r0, r7
 80083f4:	f7fd ff3c 	bl	8006270 <_malloc_r>
 80083f8:	4605      	mov	r5, r0
 80083fa:	2800      	cmp	r0, #0
 80083fc:	d0f2      	beq.n	80083e4 <_realloc_r+0x1c>
 80083fe:	4631      	mov	r1, r6
 8008400:	4622      	mov	r2, r4
 8008402:	f7fd fed3 	bl	80061ac <memcpy>
 8008406:	4631      	mov	r1, r6
 8008408:	4638      	mov	r0, r7
 800840a:	f7fd fee3 	bl	80061d4 <_free_r>
 800840e:	e7e9      	b.n	80083e4 <_realloc_r+0x1c>
 8008410:	4635      	mov	r5, r6
 8008412:	e7e7      	b.n	80083e4 <_realloc_r+0x1c>

08008414 <_malloc_usable_size_r>:
 8008414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008418:	1f18      	subs	r0, r3, #4
 800841a:	2b00      	cmp	r3, #0
 800841c:	bfbc      	itt	lt
 800841e:	580b      	ldrlt	r3, [r1, r0]
 8008420:	18c0      	addlt	r0, r0, r3
 8008422:	4770      	bx	lr
 8008424:	0000      	movs	r0, r0
	...

08008428 <cos>:
 8008428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800842a:	ec51 0b10 	vmov	r0, r1, d0
 800842e:	4a1e      	ldr	r2, [pc, #120]	; (80084a8 <cos+0x80>)
 8008430:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008434:	4293      	cmp	r3, r2
 8008436:	dc06      	bgt.n	8008446 <cos+0x1e>
 8008438:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80084a0 <cos+0x78>
 800843c:	f000 fb80 	bl	8008b40 <__kernel_cos>
 8008440:	ec51 0b10 	vmov	r0, r1, d0
 8008444:	e007      	b.n	8008456 <cos+0x2e>
 8008446:	4a19      	ldr	r2, [pc, #100]	; (80084ac <cos+0x84>)
 8008448:	4293      	cmp	r3, r2
 800844a:	dd09      	ble.n	8008460 <cos+0x38>
 800844c:	ee10 2a10 	vmov	r2, s0
 8008450:	460b      	mov	r3, r1
 8008452:	f7f7 ff19 	bl	8000288 <__aeabi_dsub>
 8008456:	ec41 0b10 	vmov	d0, r0, r1
 800845a:	b005      	add	sp, #20
 800845c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008460:	4668      	mov	r0, sp
 8008462:	f000 f8c9 	bl	80085f8 <__ieee754_rem_pio2>
 8008466:	f000 0003 	and.w	r0, r0, #3
 800846a:	2801      	cmp	r0, #1
 800846c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008470:	ed9d 0b00 	vldr	d0, [sp]
 8008474:	d007      	beq.n	8008486 <cos+0x5e>
 8008476:	2802      	cmp	r0, #2
 8008478:	d00e      	beq.n	8008498 <cos+0x70>
 800847a:	2800      	cmp	r0, #0
 800847c:	d0de      	beq.n	800843c <cos+0x14>
 800847e:	2001      	movs	r0, #1
 8008480:	f000 ff66 	bl	8009350 <__kernel_sin>
 8008484:	e7dc      	b.n	8008440 <cos+0x18>
 8008486:	f000 ff63 	bl	8009350 <__kernel_sin>
 800848a:	ec53 2b10 	vmov	r2, r3, d0
 800848e:	ee10 0a10 	vmov	r0, s0
 8008492:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008496:	e7de      	b.n	8008456 <cos+0x2e>
 8008498:	f000 fb52 	bl	8008b40 <__kernel_cos>
 800849c:	e7f5      	b.n	800848a <cos+0x62>
 800849e:	bf00      	nop
	...
 80084a8:	3fe921fb 	.word	0x3fe921fb
 80084ac:	7fefffff 	.word	0x7fefffff

080084b0 <sin>:
 80084b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80084b2:	ec51 0b10 	vmov	r0, r1, d0
 80084b6:	4a20      	ldr	r2, [pc, #128]	; (8008538 <sin+0x88>)
 80084b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80084bc:	4293      	cmp	r3, r2
 80084be:	dc07      	bgt.n	80084d0 <sin+0x20>
 80084c0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8008530 <sin+0x80>
 80084c4:	2000      	movs	r0, #0
 80084c6:	f000 ff43 	bl	8009350 <__kernel_sin>
 80084ca:	ec51 0b10 	vmov	r0, r1, d0
 80084ce:	e007      	b.n	80084e0 <sin+0x30>
 80084d0:	4a1a      	ldr	r2, [pc, #104]	; (800853c <sin+0x8c>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	dd09      	ble.n	80084ea <sin+0x3a>
 80084d6:	ee10 2a10 	vmov	r2, s0
 80084da:	460b      	mov	r3, r1
 80084dc:	f7f7 fed4 	bl	8000288 <__aeabi_dsub>
 80084e0:	ec41 0b10 	vmov	d0, r0, r1
 80084e4:	b005      	add	sp, #20
 80084e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80084ea:	4668      	mov	r0, sp
 80084ec:	f000 f884 	bl	80085f8 <__ieee754_rem_pio2>
 80084f0:	f000 0003 	and.w	r0, r0, #3
 80084f4:	2801      	cmp	r0, #1
 80084f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80084fa:	ed9d 0b00 	vldr	d0, [sp]
 80084fe:	d004      	beq.n	800850a <sin+0x5a>
 8008500:	2802      	cmp	r0, #2
 8008502:	d005      	beq.n	8008510 <sin+0x60>
 8008504:	b970      	cbnz	r0, 8008524 <sin+0x74>
 8008506:	2001      	movs	r0, #1
 8008508:	e7dd      	b.n	80084c6 <sin+0x16>
 800850a:	f000 fb19 	bl	8008b40 <__kernel_cos>
 800850e:	e7dc      	b.n	80084ca <sin+0x1a>
 8008510:	2001      	movs	r0, #1
 8008512:	f000 ff1d 	bl	8009350 <__kernel_sin>
 8008516:	ec53 2b10 	vmov	r2, r3, d0
 800851a:	ee10 0a10 	vmov	r0, s0
 800851e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008522:	e7dd      	b.n	80084e0 <sin+0x30>
 8008524:	f000 fb0c 	bl	8008b40 <__kernel_cos>
 8008528:	e7f5      	b.n	8008516 <sin+0x66>
 800852a:	bf00      	nop
 800852c:	f3af 8000 	nop.w
	...
 8008538:	3fe921fb 	.word	0x3fe921fb
 800853c:	7fefffff 	.word	0x7fefffff

08008540 <sqrt>:
 8008540:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008544:	ed2d 8b02 	vpush	{d8}
 8008548:	b08b      	sub	sp, #44	; 0x2c
 800854a:	ec55 4b10 	vmov	r4, r5, d0
 800854e:	f000 fa45 	bl	80089dc <__ieee754_sqrt>
 8008552:	4b26      	ldr	r3, [pc, #152]	; (80085ec <sqrt+0xac>)
 8008554:	eeb0 8a40 	vmov.f32	s16, s0
 8008558:	eef0 8a60 	vmov.f32	s17, s1
 800855c:	f993 6000 	ldrsb.w	r6, [r3]
 8008560:	1c73      	adds	r3, r6, #1
 8008562:	d02a      	beq.n	80085ba <sqrt+0x7a>
 8008564:	4622      	mov	r2, r4
 8008566:	462b      	mov	r3, r5
 8008568:	4620      	mov	r0, r4
 800856a:	4629      	mov	r1, r5
 800856c:	f7f8 fade 	bl	8000b2c <__aeabi_dcmpun>
 8008570:	4607      	mov	r7, r0
 8008572:	bb10      	cbnz	r0, 80085ba <sqrt+0x7a>
 8008574:	f04f 0800 	mov.w	r8, #0
 8008578:	f04f 0900 	mov.w	r9, #0
 800857c:	4642      	mov	r2, r8
 800857e:	464b      	mov	r3, r9
 8008580:	4620      	mov	r0, r4
 8008582:	4629      	mov	r1, r5
 8008584:	f7f8 faaa 	bl	8000adc <__aeabi_dcmplt>
 8008588:	b1b8      	cbz	r0, 80085ba <sqrt+0x7a>
 800858a:	2301      	movs	r3, #1
 800858c:	9300      	str	r3, [sp, #0]
 800858e:	4b18      	ldr	r3, [pc, #96]	; (80085f0 <sqrt+0xb0>)
 8008590:	9301      	str	r3, [sp, #4]
 8008592:	9708      	str	r7, [sp, #32]
 8008594:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008598:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800859c:	b9b6      	cbnz	r6, 80085cc <sqrt+0x8c>
 800859e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80085a2:	4668      	mov	r0, sp
 80085a4:	f001 f81c 	bl	80095e0 <matherr>
 80085a8:	b1d0      	cbz	r0, 80085e0 <sqrt+0xa0>
 80085aa:	9b08      	ldr	r3, [sp, #32]
 80085ac:	b11b      	cbz	r3, 80085b6 <sqrt+0x76>
 80085ae:	f7fd fdaf 	bl	8006110 <__errno>
 80085b2:	9b08      	ldr	r3, [sp, #32]
 80085b4:	6003      	str	r3, [r0, #0]
 80085b6:	ed9d 8b06 	vldr	d8, [sp, #24]
 80085ba:	eeb0 0a48 	vmov.f32	s0, s16
 80085be:	eef0 0a68 	vmov.f32	s1, s17
 80085c2:	b00b      	add	sp, #44	; 0x2c
 80085c4:	ecbd 8b02 	vpop	{d8}
 80085c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085cc:	4642      	mov	r2, r8
 80085ce:	464b      	mov	r3, r9
 80085d0:	4640      	mov	r0, r8
 80085d2:	4649      	mov	r1, r9
 80085d4:	f7f8 f93a 	bl	800084c <__aeabi_ddiv>
 80085d8:	2e02      	cmp	r6, #2
 80085da:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80085de:	d1e0      	bne.n	80085a2 <sqrt+0x62>
 80085e0:	f7fd fd96 	bl	8006110 <__errno>
 80085e4:	2321      	movs	r3, #33	; 0x21
 80085e6:	6003      	str	r3, [r0, #0]
 80085e8:	e7df      	b.n	80085aa <sqrt+0x6a>
 80085ea:	bf00      	nop
 80085ec:	200001dc 	.word	0x200001dc
 80085f0:	080099de 	.word	0x080099de
 80085f4:	00000000 	.word	0x00000000

080085f8 <__ieee754_rem_pio2>:
 80085f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085fc:	ec57 6b10 	vmov	r6, r7, d0
 8008600:	4bc3      	ldr	r3, [pc, #780]	; (8008910 <__ieee754_rem_pio2+0x318>)
 8008602:	b08d      	sub	sp, #52	; 0x34
 8008604:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008608:	4598      	cmp	r8, r3
 800860a:	4604      	mov	r4, r0
 800860c:	9704      	str	r7, [sp, #16]
 800860e:	dc07      	bgt.n	8008620 <__ieee754_rem_pio2+0x28>
 8008610:	2200      	movs	r2, #0
 8008612:	2300      	movs	r3, #0
 8008614:	ed84 0b00 	vstr	d0, [r4]
 8008618:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800861c:	2500      	movs	r5, #0
 800861e:	e027      	b.n	8008670 <__ieee754_rem_pio2+0x78>
 8008620:	4bbc      	ldr	r3, [pc, #752]	; (8008914 <__ieee754_rem_pio2+0x31c>)
 8008622:	4598      	cmp	r8, r3
 8008624:	dc75      	bgt.n	8008712 <__ieee754_rem_pio2+0x11a>
 8008626:	9b04      	ldr	r3, [sp, #16]
 8008628:	4dbb      	ldr	r5, [pc, #748]	; (8008918 <__ieee754_rem_pio2+0x320>)
 800862a:	2b00      	cmp	r3, #0
 800862c:	ee10 0a10 	vmov	r0, s0
 8008630:	a3a9      	add	r3, pc, #676	; (adr r3, 80088d8 <__ieee754_rem_pio2+0x2e0>)
 8008632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008636:	4639      	mov	r1, r7
 8008638:	dd36      	ble.n	80086a8 <__ieee754_rem_pio2+0xb0>
 800863a:	f7f7 fe25 	bl	8000288 <__aeabi_dsub>
 800863e:	45a8      	cmp	r8, r5
 8008640:	4606      	mov	r6, r0
 8008642:	460f      	mov	r7, r1
 8008644:	d018      	beq.n	8008678 <__ieee754_rem_pio2+0x80>
 8008646:	a3a6      	add	r3, pc, #664	; (adr r3, 80088e0 <__ieee754_rem_pio2+0x2e8>)
 8008648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864c:	f7f7 fe1c 	bl	8000288 <__aeabi_dsub>
 8008650:	4602      	mov	r2, r0
 8008652:	460b      	mov	r3, r1
 8008654:	e9c4 2300 	strd	r2, r3, [r4]
 8008658:	4630      	mov	r0, r6
 800865a:	4639      	mov	r1, r7
 800865c:	f7f7 fe14 	bl	8000288 <__aeabi_dsub>
 8008660:	a39f      	add	r3, pc, #636	; (adr r3, 80088e0 <__ieee754_rem_pio2+0x2e8>)
 8008662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008666:	f7f7 fe0f 	bl	8000288 <__aeabi_dsub>
 800866a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800866e:	2501      	movs	r5, #1
 8008670:	4628      	mov	r0, r5
 8008672:	b00d      	add	sp, #52	; 0x34
 8008674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008678:	a39b      	add	r3, pc, #620	; (adr r3, 80088e8 <__ieee754_rem_pio2+0x2f0>)
 800867a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867e:	f7f7 fe03 	bl	8000288 <__aeabi_dsub>
 8008682:	a39b      	add	r3, pc, #620	; (adr r3, 80088f0 <__ieee754_rem_pio2+0x2f8>)
 8008684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008688:	4606      	mov	r6, r0
 800868a:	460f      	mov	r7, r1
 800868c:	f7f7 fdfc 	bl	8000288 <__aeabi_dsub>
 8008690:	4602      	mov	r2, r0
 8008692:	460b      	mov	r3, r1
 8008694:	e9c4 2300 	strd	r2, r3, [r4]
 8008698:	4630      	mov	r0, r6
 800869a:	4639      	mov	r1, r7
 800869c:	f7f7 fdf4 	bl	8000288 <__aeabi_dsub>
 80086a0:	a393      	add	r3, pc, #588	; (adr r3, 80088f0 <__ieee754_rem_pio2+0x2f8>)
 80086a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a6:	e7de      	b.n	8008666 <__ieee754_rem_pio2+0x6e>
 80086a8:	f7f7 fdf0 	bl	800028c <__adddf3>
 80086ac:	45a8      	cmp	r8, r5
 80086ae:	4606      	mov	r6, r0
 80086b0:	460f      	mov	r7, r1
 80086b2:	d016      	beq.n	80086e2 <__ieee754_rem_pio2+0xea>
 80086b4:	a38a      	add	r3, pc, #552	; (adr r3, 80088e0 <__ieee754_rem_pio2+0x2e8>)
 80086b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ba:	f7f7 fde7 	bl	800028c <__adddf3>
 80086be:	4602      	mov	r2, r0
 80086c0:	460b      	mov	r3, r1
 80086c2:	e9c4 2300 	strd	r2, r3, [r4]
 80086c6:	4630      	mov	r0, r6
 80086c8:	4639      	mov	r1, r7
 80086ca:	f7f7 fddd 	bl	8000288 <__aeabi_dsub>
 80086ce:	a384      	add	r3, pc, #528	; (adr r3, 80088e0 <__ieee754_rem_pio2+0x2e8>)
 80086d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d4:	f7f7 fdda 	bl	800028c <__adddf3>
 80086d8:	f04f 35ff 	mov.w	r5, #4294967295
 80086dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80086e0:	e7c6      	b.n	8008670 <__ieee754_rem_pio2+0x78>
 80086e2:	a381      	add	r3, pc, #516	; (adr r3, 80088e8 <__ieee754_rem_pio2+0x2f0>)
 80086e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e8:	f7f7 fdd0 	bl	800028c <__adddf3>
 80086ec:	a380      	add	r3, pc, #512	; (adr r3, 80088f0 <__ieee754_rem_pio2+0x2f8>)
 80086ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f2:	4606      	mov	r6, r0
 80086f4:	460f      	mov	r7, r1
 80086f6:	f7f7 fdc9 	bl	800028c <__adddf3>
 80086fa:	4602      	mov	r2, r0
 80086fc:	460b      	mov	r3, r1
 80086fe:	e9c4 2300 	strd	r2, r3, [r4]
 8008702:	4630      	mov	r0, r6
 8008704:	4639      	mov	r1, r7
 8008706:	f7f7 fdbf 	bl	8000288 <__aeabi_dsub>
 800870a:	a379      	add	r3, pc, #484	; (adr r3, 80088f0 <__ieee754_rem_pio2+0x2f8>)
 800870c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008710:	e7e0      	b.n	80086d4 <__ieee754_rem_pio2+0xdc>
 8008712:	4b82      	ldr	r3, [pc, #520]	; (800891c <__ieee754_rem_pio2+0x324>)
 8008714:	4598      	cmp	r8, r3
 8008716:	f300 80d0 	bgt.w	80088ba <__ieee754_rem_pio2+0x2c2>
 800871a:	f000 fed3 	bl	80094c4 <fabs>
 800871e:	ec57 6b10 	vmov	r6, r7, d0
 8008722:	ee10 0a10 	vmov	r0, s0
 8008726:	a374      	add	r3, pc, #464	; (adr r3, 80088f8 <__ieee754_rem_pio2+0x300>)
 8008728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872c:	4639      	mov	r1, r7
 800872e:	f7f7 ff63 	bl	80005f8 <__aeabi_dmul>
 8008732:	2200      	movs	r2, #0
 8008734:	4b7a      	ldr	r3, [pc, #488]	; (8008920 <__ieee754_rem_pio2+0x328>)
 8008736:	f7f7 fda9 	bl	800028c <__adddf3>
 800873a:	f7f8 fa0d 	bl	8000b58 <__aeabi_d2iz>
 800873e:	4605      	mov	r5, r0
 8008740:	f7f7 fef0 	bl	8000524 <__aeabi_i2d>
 8008744:	a364      	add	r3, pc, #400	; (adr r3, 80088d8 <__ieee754_rem_pio2+0x2e0>)
 8008746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800874e:	f7f7 ff53 	bl	80005f8 <__aeabi_dmul>
 8008752:	4602      	mov	r2, r0
 8008754:	460b      	mov	r3, r1
 8008756:	4630      	mov	r0, r6
 8008758:	4639      	mov	r1, r7
 800875a:	f7f7 fd95 	bl	8000288 <__aeabi_dsub>
 800875e:	a360      	add	r3, pc, #384	; (adr r3, 80088e0 <__ieee754_rem_pio2+0x2e8>)
 8008760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008764:	4682      	mov	sl, r0
 8008766:	468b      	mov	fp, r1
 8008768:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800876c:	f7f7 ff44 	bl	80005f8 <__aeabi_dmul>
 8008770:	2d1f      	cmp	r5, #31
 8008772:	4606      	mov	r6, r0
 8008774:	460f      	mov	r7, r1
 8008776:	dc0c      	bgt.n	8008792 <__ieee754_rem_pio2+0x19a>
 8008778:	1e6a      	subs	r2, r5, #1
 800877a:	4b6a      	ldr	r3, [pc, #424]	; (8008924 <__ieee754_rem_pio2+0x32c>)
 800877c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008780:	4543      	cmp	r3, r8
 8008782:	d006      	beq.n	8008792 <__ieee754_rem_pio2+0x19a>
 8008784:	4632      	mov	r2, r6
 8008786:	463b      	mov	r3, r7
 8008788:	4650      	mov	r0, sl
 800878a:	4659      	mov	r1, fp
 800878c:	f7f7 fd7c 	bl	8000288 <__aeabi_dsub>
 8008790:	e00e      	b.n	80087b0 <__ieee754_rem_pio2+0x1b8>
 8008792:	4632      	mov	r2, r6
 8008794:	463b      	mov	r3, r7
 8008796:	4650      	mov	r0, sl
 8008798:	4659      	mov	r1, fp
 800879a:	f7f7 fd75 	bl	8000288 <__aeabi_dsub>
 800879e:	ea4f 5328 	mov.w	r3, r8, asr #20
 80087a2:	9305      	str	r3, [sp, #20]
 80087a4:	9a05      	ldr	r2, [sp, #20]
 80087a6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80087aa:	1ad3      	subs	r3, r2, r3
 80087ac:	2b10      	cmp	r3, #16
 80087ae:	dc02      	bgt.n	80087b6 <__ieee754_rem_pio2+0x1be>
 80087b0:	e9c4 0100 	strd	r0, r1, [r4]
 80087b4:	e039      	b.n	800882a <__ieee754_rem_pio2+0x232>
 80087b6:	a34c      	add	r3, pc, #304	; (adr r3, 80088e8 <__ieee754_rem_pio2+0x2f0>)
 80087b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087c0:	f7f7 ff1a 	bl	80005f8 <__aeabi_dmul>
 80087c4:	4606      	mov	r6, r0
 80087c6:	460f      	mov	r7, r1
 80087c8:	4602      	mov	r2, r0
 80087ca:	460b      	mov	r3, r1
 80087cc:	4650      	mov	r0, sl
 80087ce:	4659      	mov	r1, fp
 80087d0:	f7f7 fd5a 	bl	8000288 <__aeabi_dsub>
 80087d4:	4602      	mov	r2, r0
 80087d6:	460b      	mov	r3, r1
 80087d8:	4680      	mov	r8, r0
 80087da:	4689      	mov	r9, r1
 80087dc:	4650      	mov	r0, sl
 80087de:	4659      	mov	r1, fp
 80087e0:	f7f7 fd52 	bl	8000288 <__aeabi_dsub>
 80087e4:	4632      	mov	r2, r6
 80087e6:	463b      	mov	r3, r7
 80087e8:	f7f7 fd4e 	bl	8000288 <__aeabi_dsub>
 80087ec:	a340      	add	r3, pc, #256	; (adr r3, 80088f0 <__ieee754_rem_pio2+0x2f8>)
 80087ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f2:	4606      	mov	r6, r0
 80087f4:	460f      	mov	r7, r1
 80087f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087fa:	f7f7 fefd 	bl	80005f8 <__aeabi_dmul>
 80087fe:	4632      	mov	r2, r6
 8008800:	463b      	mov	r3, r7
 8008802:	f7f7 fd41 	bl	8000288 <__aeabi_dsub>
 8008806:	4602      	mov	r2, r0
 8008808:	460b      	mov	r3, r1
 800880a:	4606      	mov	r6, r0
 800880c:	460f      	mov	r7, r1
 800880e:	4640      	mov	r0, r8
 8008810:	4649      	mov	r1, r9
 8008812:	f7f7 fd39 	bl	8000288 <__aeabi_dsub>
 8008816:	9a05      	ldr	r2, [sp, #20]
 8008818:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800881c:	1ad3      	subs	r3, r2, r3
 800881e:	2b31      	cmp	r3, #49	; 0x31
 8008820:	dc20      	bgt.n	8008864 <__ieee754_rem_pio2+0x26c>
 8008822:	e9c4 0100 	strd	r0, r1, [r4]
 8008826:	46c2      	mov	sl, r8
 8008828:	46cb      	mov	fp, r9
 800882a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800882e:	4650      	mov	r0, sl
 8008830:	4642      	mov	r2, r8
 8008832:	464b      	mov	r3, r9
 8008834:	4659      	mov	r1, fp
 8008836:	f7f7 fd27 	bl	8000288 <__aeabi_dsub>
 800883a:	463b      	mov	r3, r7
 800883c:	4632      	mov	r2, r6
 800883e:	f7f7 fd23 	bl	8000288 <__aeabi_dsub>
 8008842:	9b04      	ldr	r3, [sp, #16]
 8008844:	2b00      	cmp	r3, #0
 8008846:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800884a:	f6bf af11 	bge.w	8008670 <__ieee754_rem_pio2+0x78>
 800884e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008852:	6063      	str	r3, [r4, #4]
 8008854:	f8c4 8000 	str.w	r8, [r4]
 8008858:	60a0      	str	r0, [r4, #8]
 800885a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800885e:	60e3      	str	r3, [r4, #12]
 8008860:	426d      	negs	r5, r5
 8008862:	e705      	b.n	8008670 <__ieee754_rem_pio2+0x78>
 8008864:	a326      	add	r3, pc, #152	; (adr r3, 8008900 <__ieee754_rem_pio2+0x308>)
 8008866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800886e:	f7f7 fec3 	bl	80005f8 <__aeabi_dmul>
 8008872:	4606      	mov	r6, r0
 8008874:	460f      	mov	r7, r1
 8008876:	4602      	mov	r2, r0
 8008878:	460b      	mov	r3, r1
 800887a:	4640      	mov	r0, r8
 800887c:	4649      	mov	r1, r9
 800887e:	f7f7 fd03 	bl	8000288 <__aeabi_dsub>
 8008882:	4602      	mov	r2, r0
 8008884:	460b      	mov	r3, r1
 8008886:	4682      	mov	sl, r0
 8008888:	468b      	mov	fp, r1
 800888a:	4640      	mov	r0, r8
 800888c:	4649      	mov	r1, r9
 800888e:	f7f7 fcfb 	bl	8000288 <__aeabi_dsub>
 8008892:	4632      	mov	r2, r6
 8008894:	463b      	mov	r3, r7
 8008896:	f7f7 fcf7 	bl	8000288 <__aeabi_dsub>
 800889a:	a31b      	add	r3, pc, #108	; (adr r3, 8008908 <__ieee754_rem_pio2+0x310>)
 800889c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a0:	4606      	mov	r6, r0
 80088a2:	460f      	mov	r7, r1
 80088a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088a8:	f7f7 fea6 	bl	80005f8 <__aeabi_dmul>
 80088ac:	4632      	mov	r2, r6
 80088ae:	463b      	mov	r3, r7
 80088b0:	f7f7 fcea 	bl	8000288 <__aeabi_dsub>
 80088b4:	4606      	mov	r6, r0
 80088b6:	460f      	mov	r7, r1
 80088b8:	e764      	b.n	8008784 <__ieee754_rem_pio2+0x18c>
 80088ba:	4b1b      	ldr	r3, [pc, #108]	; (8008928 <__ieee754_rem_pio2+0x330>)
 80088bc:	4598      	cmp	r8, r3
 80088be:	dd35      	ble.n	800892c <__ieee754_rem_pio2+0x334>
 80088c0:	ee10 2a10 	vmov	r2, s0
 80088c4:	463b      	mov	r3, r7
 80088c6:	4630      	mov	r0, r6
 80088c8:	4639      	mov	r1, r7
 80088ca:	f7f7 fcdd 	bl	8000288 <__aeabi_dsub>
 80088ce:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80088d2:	e9c4 0100 	strd	r0, r1, [r4]
 80088d6:	e6a1      	b.n	800861c <__ieee754_rem_pio2+0x24>
 80088d8:	54400000 	.word	0x54400000
 80088dc:	3ff921fb 	.word	0x3ff921fb
 80088e0:	1a626331 	.word	0x1a626331
 80088e4:	3dd0b461 	.word	0x3dd0b461
 80088e8:	1a600000 	.word	0x1a600000
 80088ec:	3dd0b461 	.word	0x3dd0b461
 80088f0:	2e037073 	.word	0x2e037073
 80088f4:	3ba3198a 	.word	0x3ba3198a
 80088f8:	6dc9c883 	.word	0x6dc9c883
 80088fc:	3fe45f30 	.word	0x3fe45f30
 8008900:	2e000000 	.word	0x2e000000
 8008904:	3ba3198a 	.word	0x3ba3198a
 8008908:	252049c1 	.word	0x252049c1
 800890c:	397b839a 	.word	0x397b839a
 8008910:	3fe921fb 	.word	0x3fe921fb
 8008914:	4002d97b 	.word	0x4002d97b
 8008918:	3ff921fb 	.word	0x3ff921fb
 800891c:	413921fb 	.word	0x413921fb
 8008920:	3fe00000 	.word	0x3fe00000
 8008924:	080099e4 	.word	0x080099e4
 8008928:	7fefffff 	.word	0x7fefffff
 800892c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8008930:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8008934:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8008938:	4630      	mov	r0, r6
 800893a:	460f      	mov	r7, r1
 800893c:	f7f8 f90c 	bl	8000b58 <__aeabi_d2iz>
 8008940:	f7f7 fdf0 	bl	8000524 <__aeabi_i2d>
 8008944:	4602      	mov	r2, r0
 8008946:	460b      	mov	r3, r1
 8008948:	4630      	mov	r0, r6
 800894a:	4639      	mov	r1, r7
 800894c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008950:	f7f7 fc9a 	bl	8000288 <__aeabi_dsub>
 8008954:	2200      	movs	r2, #0
 8008956:	4b1f      	ldr	r3, [pc, #124]	; (80089d4 <__ieee754_rem_pio2+0x3dc>)
 8008958:	f7f7 fe4e 	bl	80005f8 <__aeabi_dmul>
 800895c:	460f      	mov	r7, r1
 800895e:	4606      	mov	r6, r0
 8008960:	f7f8 f8fa 	bl	8000b58 <__aeabi_d2iz>
 8008964:	f7f7 fdde 	bl	8000524 <__aeabi_i2d>
 8008968:	4602      	mov	r2, r0
 800896a:	460b      	mov	r3, r1
 800896c:	4630      	mov	r0, r6
 800896e:	4639      	mov	r1, r7
 8008970:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008974:	f7f7 fc88 	bl	8000288 <__aeabi_dsub>
 8008978:	2200      	movs	r2, #0
 800897a:	4b16      	ldr	r3, [pc, #88]	; (80089d4 <__ieee754_rem_pio2+0x3dc>)
 800897c:	f7f7 fe3c 	bl	80005f8 <__aeabi_dmul>
 8008980:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008984:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8008988:	f04f 0803 	mov.w	r8, #3
 800898c:	2600      	movs	r6, #0
 800898e:	2700      	movs	r7, #0
 8008990:	4632      	mov	r2, r6
 8008992:	463b      	mov	r3, r7
 8008994:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8008998:	f108 3aff 	add.w	sl, r8, #4294967295
 800899c:	f7f8 f894 	bl	8000ac8 <__aeabi_dcmpeq>
 80089a0:	b9b0      	cbnz	r0, 80089d0 <__ieee754_rem_pio2+0x3d8>
 80089a2:	4b0d      	ldr	r3, [pc, #52]	; (80089d8 <__ieee754_rem_pio2+0x3e0>)
 80089a4:	9301      	str	r3, [sp, #4]
 80089a6:	2302      	movs	r3, #2
 80089a8:	9300      	str	r3, [sp, #0]
 80089aa:	462a      	mov	r2, r5
 80089ac:	4643      	mov	r3, r8
 80089ae:	4621      	mov	r1, r4
 80089b0:	a806      	add	r0, sp, #24
 80089b2:	f000 f98d 	bl	8008cd0 <__kernel_rem_pio2>
 80089b6:	9b04      	ldr	r3, [sp, #16]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	4605      	mov	r5, r0
 80089bc:	f6bf ae58 	bge.w	8008670 <__ieee754_rem_pio2+0x78>
 80089c0:	6863      	ldr	r3, [r4, #4]
 80089c2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80089c6:	6063      	str	r3, [r4, #4]
 80089c8:	68e3      	ldr	r3, [r4, #12]
 80089ca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80089ce:	e746      	b.n	800885e <__ieee754_rem_pio2+0x266>
 80089d0:	46d0      	mov	r8, sl
 80089d2:	e7dd      	b.n	8008990 <__ieee754_rem_pio2+0x398>
 80089d4:	41700000 	.word	0x41700000
 80089d8:	08009a64 	.word	0x08009a64

080089dc <__ieee754_sqrt>:
 80089dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089e0:	4955      	ldr	r1, [pc, #340]	; (8008b38 <__ieee754_sqrt+0x15c>)
 80089e2:	ec55 4b10 	vmov	r4, r5, d0
 80089e6:	43a9      	bics	r1, r5
 80089e8:	462b      	mov	r3, r5
 80089ea:	462a      	mov	r2, r5
 80089ec:	d112      	bne.n	8008a14 <__ieee754_sqrt+0x38>
 80089ee:	ee10 2a10 	vmov	r2, s0
 80089f2:	ee10 0a10 	vmov	r0, s0
 80089f6:	4629      	mov	r1, r5
 80089f8:	f7f7 fdfe 	bl	80005f8 <__aeabi_dmul>
 80089fc:	4602      	mov	r2, r0
 80089fe:	460b      	mov	r3, r1
 8008a00:	4620      	mov	r0, r4
 8008a02:	4629      	mov	r1, r5
 8008a04:	f7f7 fc42 	bl	800028c <__adddf3>
 8008a08:	4604      	mov	r4, r0
 8008a0a:	460d      	mov	r5, r1
 8008a0c:	ec45 4b10 	vmov	d0, r4, r5
 8008a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a14:	2d00      	cmp	r5, #0
 8008a16:	ee10 0a10 	vmov	r0, s0
 8008a1a:	4621      	mov	r1, r4
 8008a1c:	dc0f      	bgt.n	8008a3e <__ieee754_sqrt+0x62>
 8008a1e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008a22:	4330      	orrs	r0, r6
 8008a24:	d0f2      	beq.n	8008a0c <__ieee754_sqrt+0x30>
 8008a26:	b155      	cbz	r5, 8008a3e <__ieee754_sqrt+0x62>
 8008a28:	ee10 2a10 	vmov	r2, s0
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	4629      	mov	r1, r5
 8008a30:	f7f7 fc2a 	bl	8000288 <__aeabi_dsub>
 8008a34:	4602      	mov	r2, r0
 8008a36:	460b      	mov	r3, r1
 8008a38:	f7f7 ff08 	bl	800084c <__aeabi_ddiv>
 8008a3c:	e7e4      	b.n	8008a08 <__ieee754_sqrt+0x2c>
 8008a3e:	151b      	asrs	r3, r3, #20
 8008a40:	d073      	beq.n	8008b2a <__ieee754_sqrt+0x14e>
 8008a42:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008a46:	07dd      	lsls	r5, r3, #31
 8008a48:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008a4c:	bf48      	it	mi
 8008a4e:	0fc8      	lsrmi	r0, r1, #31
 8008a50:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008a54:	bf44      	itt	mi
 8008a56:	0049      	lslmi	r1, r1, #1
 8008a58:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8008a5c:	2500      	movs	r5, #0
 8008a5e:	1058      	asrs	r0, r3, #1
 8008a60:	0fcb      	lsrs	r3, r1, #31
 8008a62:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8008a66:	0049      	lsls	r1, r1, #1
 8008a68:	2316      	movs	r3, #22
 8008a6a:	462c      	mov	r4, r5
 8008a6c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008a70:	19a7      	adds	r7, r4, r6
 8008a72:	4297      	cmp	r7, r2
 8008a74:	bfde      	ittt	le
 8008a76:	19bc      	addle	r4, r7, r6
 8008a78:	1bd2      	suble	r2, r2, r7
 8008a7a:	19ad      	addle	r5, r5, r6
 8008a7c:	0fcf      	lsrs	r7, r1, #31
 8008a7e:	3b01      	subs	r3, #1
 8008a80:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8008a84:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008a88:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008a8c:	d1f0      	bne.n	8008a70 <__ieee754_sqrt+0x94>
 8008a8e:	f04f 0c20 	mov.w	ip, #32
 8008a92:	469e      	mov	lr, r3
 8008a94:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008a98:	42a2      	cmp	r2, r4
 8008a9a:	eb06 070e 	add.w	r7, r6, lr
 8008a9e:	dc02      	bgt.n	8008aa6 <__ieee754_sqrt+0xca>
 8008aa0:	d112      	bne.n	8008ac8 <__ieee754_sqrt+0xec>
 8008aa2:	428f      	cmp	r7, r1
 8008aa4:	d810      	bhi.n	8008ac8 <__ieee754_sqrt+0xec>
 8008aa6:	2f00      	cmp	r7, #0
 8008aa8:	eb07 0e06 	add.w	lr, r7, r6
 8008aac:	da42      	bge.n	8008b34 <__ieee754_sqrt+0x158>
 8008aae:	f1be 0f00 	cmp.w	lr, #0
 8008ab2:	db3f      	blt.n	8008b34 <__ieee754_sqrt+0x158>
 8008ab4:	f104 0801 	add.w	r8, r4, #1
 8008ab8:	1b12      	subs	r2, r2, r4
 8008aba:	428f      	cmp	r7, r1
 8008abc:	bf88      	it	hi
 8008abe:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008ac2:	1bc9      	subs	r1, r1, r7
 8008ac4:	4433      	add	r3, r6
 8008ac6:	4644      	mov	r4, r8
 8008ac8:	0052      	lsls	r2, r2, #1
 8008aca:	f1bc 0c01 	subs.w	ip, ip, #1
 8008ace:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8008ad2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008ad6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008ada:	d1dd      	bne.n	8008a98 <__ieee754_sqrt+0xbc>
 8008adc:	430a      	orrs	r2, r1
 8008ade:	d006      	beq.n	8008aee <__ieee754_sqrt+0x112>
 8008ae0:	1c5c      	adds	r4, r3, #1
 8008ae2:	bf13      	iteet	ne
 8008ae4:	3301      	addne	r3, #1
 8008ae6:	3501      	addeq	r5, #1
 8008ae8:	4663      	moveq	r3, ip
 8008aea:	f023 0301 	bicne.w	r3, r3, #1
 8008aee:	106a      	asrs	r2, r5, #1
 8008af0:	085b      	lsrs	r3, r3, #1
 8008af2:	07e9      	lsls	r1, r5, #31
 8008af4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008af8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008afc:	bf48      	it	mi
 8008afe:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008b02:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8008b06:	461c      	mov	r4, r3
 8008b08:	e780      	b.n	8008a0c <__ieee754_sqrt+0x30>
 8008b0a:	0aca      	lsrs	r2, r1, #11
 8008b0c:	3815      	subs	r0, #21
 8008b0e:	0549      	lsls	r1, r1, #21
 8008b10:	2a00      	cmp	r2, #0
 8008b12:	d0fa      	beq.n	8008b0a <__ieee754_sqrt+0x12e>
 8008b14:	02d6      	lsls	r6, r2, #11
 8008b16:	d50a      	bpl.n	8008b2e <__ieee754_sqrt+0x152>
 8008b18:	f1c3 0420 	rsb	r4, r3, #32
 8008b1c:	fa21 f404 	lsr.w	r4, r1, r4
 8008b20:	1e5d      	subs	r5, r3, #1
 8008b22:	4099      	lsls	r1, r3
 8008b24:	4322      	orrs	r2, r4
 8008b26:	1b43      	subs	r3, r0, r5
 8008b28:	e78b      	b.n	8008a42 <__ieee754_sqrt+0x66>
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	e7f0      	b.n	8008b10 <__ieee754_sqrt+0x134>
 8008b2e:	0052      	lsls	r2, r2, #1
 8008b30:	3301      	adds	r3, #1
 8008b32:	e7ef      	b.n	8008b14 <__ieee754_sqrt+0x138>
 8008b34:	46a0      	mov	r8, r4
 8008b36:	e7bf      	b.n	8008ab8 <__ieee754_sqrt+0xdc>
 8008b38:	7ff00000 	.word	0x7ff00000
 8008b3c:	00000000 	.word	0x00000000

08008b40 <__kernel_cos>:
 8008b40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b44:	ec59 8b10 	vmov	r8, r9, d0
 8008b48:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8008b4c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8008b50:	ed2d 8b02 	vpush	{d8}
 8008b54:	eeb0 8a41 	vmov.f32	s16, s2
 8008b58:	eef0 8a61 	vmov.f32	s17, s3
 8008b5c:	da07      	bge.n	8008b6e <__kernel_cos+0x2e>
 8008b5e:	ee10 0a10 	vmov	r0, s0
 8008b62:	4649      	mov	r1, r9
 8008b64:	f7f7 fff8 	bl	8000b58 <__aeabi_d2iz>
 8008b68:	2800      	cmp	r0, #0
 8008b6a:	f000 8089 	beq.w	8008c80 <__kernel_cos+0x140>
 8008b6e:	4642      	mov	r2, r8
 8008b70:	464b      	mov	r3, r9
 8008b72:	4640      	mov	r0, r8
 8008b74:	4649      	mov	r1, r9
 8008b76:	f7f7 fd3f 	bl	80005f8 <__aeabi_dmul>
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	4b4e      	ldr	r3, [pc, #312]	; (8008cb8 <__kernel_cos+0x178>)
 8008b7e:	4604      	mov	r4, r0
 8008b80:	460d      	mov	r5, r1
 8008b82:	f7f7 fd39 	bl	80005f8 <__aeabi_dmul>
 8008b86:	a340      	add	r3, pc, #256	; (adr r3, 8008c88 <__kernel_cos+0x148>)
 8008b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8c:	4682      	mov	sl, r0
 8008b8e:	468b      	mov	fp, r1
 8008b90:	4620      	mov	r0, r4
 8008b92:	4629      	mov	r1, r5
 8008b94:	f7f7 fd30 	bl	80005f8 <__aeabi_dmul>
 8008b98:	a33d      	add	r3, pc, #244	; (adr r3, 8008c90 <__kernel_cos+0x150>)
 8008b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9e:	f7f7 fb75 	bl	800028c <__adddf3>
 8008ba2:	4622      	mov	r2, r4
 8008ba4:	462b      	mov	r3, r5
 8008ba6:	f7f7 fd27 	bl	80005f8 <__aeabi_dmul>
 8008baa:	a33b      	add	r3, pc, #236	; (adr r3, 8008c98 <__kernel_cos+0x158>)
 8008bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb0:	f7f7 fb6a 	bl	8000288 <__aeabi_dsub>
 8008bb4:	4622      	mov	r2, r4
 8008bb6:	462b      	mov	r3, r5
 8008bb8:	f7f7 fd1e 	bl	80005f8 <__aeabi_dmul>
 8008bbc:	a338      	add	r3, pc, #224	; (adr r3, 8008ca0 <__kernel_cos+0x160>)
 8008bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc2:	f7f7 fb63 	bl	800028c <__adddf3>
 8008bc6:	4622      	mov	r2, r4
 8008bc8:	462b      	mov	r3, r5
 8008bca:	f7f7 fd15 	bl	80005f8 <__aeabi_dmul>
 8008bce:	a336      	add	r3, pc, #216	; (adr r3, 8008ca8 <__kernel_cos+0x168>)
 8008bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd4:	f7f7 fb58 	bl	8000288 <__aeabi_dsub>
 8008bd8:	4622      	mov	r2, r4
 8008bda:	462b      	mov	r3, r5
 8008bdc:	f7f7 fd0c 	bl	80005f8 <__aeabi_dmul>
 8008be0:	a333      	add	r3, pc, #204	; (adr r3, 8008cb0 <__kernel_cos+0x170>)
 8008be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be6:	f7f7 fb51 	bl	800028c <__adddf3>
 8008bea:	4622      	mov	r2, r4
 8008bec:	462b      	mov	r3, r5
 8008bee:	f7f7 fd03 	bl	80005f8 <__aeabi_dmul>
 8008bf2:	4622      	mov	r2, r4
 8008bf4:	462b      	mov	r3, r5
 8008bf6:	f7f7 fcff 	bl	80005f8 <__aeabi_dmul>
 8008bfa:	ec53 2b18 	vmov	r2, r3, d8
 8008bfe:	4604      	mov	r4, r0
 8008c00:	460d      	mov	r5, r1
 8008c02:	4640      	mov	r0, r8
 8008c04:	4649      	mov	r1, r9
 8008c06:	f7f7 fcf7 	bl	80005f8 <__aeabi_dmul>
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	4629      	mov	r1, r5
 8008c10:	4620      	mov	r0, r4
 8008c12:	f7f7 fb39 	bl	8000288 <__aeabi_dsub>
 8008c16:	4b29      	ldr	r3, [pc, #164]	; (8008cbc <__kernel_cos+0x17c>)
 8008c18:	429e      	cmp	r6, r3
 8008c1a:	4680      	mov	r8, r0
 8008c1c:	4689      	mov	r9, r1
 8008c1e:	dc11      	bgt.n	8008c44 <__kernel_cos+0x104>
 8008c20:	4602      	mov	r2, r0
 8008c22:	460b      	mov	r3, r1
 8008c24:	4650      	mov	r0, sl
 8008c26:	4659      	mov	r1, fp
 8008c28:	f7f7 fb2e 	bl	8000288 <__aeabi_dsub>
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	4924      	ldr	r1, [pc, #144]	; (8008cc0 <__kernel_cos+0x180>)
 8008c30:	4602      	mov	r2, r0
 8008c32:	2000      	movs	r0, #0
 8008c34:	f7f7 fb28 	bl	8000288 <__aeabi_dsub>
 8008c38:	ecbd 8b02 	vpop	{d8}
 8008c3c:	ec41 0b10 	vmov	d0, r0, r1
 8008c40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c44:	4b1f      	ldr	r3, [pc, #124]	; (8008cc4 <__kernel_cos+0x184>)
 8008c46:	491e      	ldr	r1, [pc, #120]	; (8008cc0 <__kernel_cos+0x180>)
 8008c48:	429e      	cmp	r6, r3
 8008c4a:	bfcc      	ite	gt
 8008c4c:	4d1e      	ldrgt	r5, [pc, #120]	; (8008cc8 <__kernel_cos+0x188>)
 8008c4e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8008c52:	2400      	movs	r4, #0
 8008c54:	4622      	mov	r2, r4
 8008c56:	462b      	mov	r3, r5
 8008c58:	2000      	movs	r0, #0
 8008c5a:	f7f7 fb15 	bl	8000288 <__aeabi_dsub>
 8008c5e:	4622      	mov	r2, r4
 8008c60:	4606      	mov	r6, r0
 8008c62:	460f      	mov	r7, r1
 8008c64:	462b      	mov	r3, r5
 8008c66:	4650      	mov	r0, sl
 8008c68:	4659      	mov	r1, fp
 8008c6a:	f7f7 fb0d 	bl	8000288 <__aeabi_dsub>
 8008c6e:	4642      	mov	r2, r8
 8008c70:	464b      	mov	r3, r9
 8008c72:	f7f7 fb09 	bl	8000288 <__aeabi_dsub>
 8008c76:	4602      	mov	r2, r0
 8008c78:	460b      	mov	r3, r1
 8008c7a:	4630      	mov	r0, r6
 8008c7c:	4639      	mov	r1, r7
 8008c7e:	e7d9      	b.n	8008c34 <__kernel_cos+0xf4>
 8008c80:	2000      	movs	r0, #0
 8008c82:	490f      	ldr	r1, [pc, #60]	; (8008cc0 <__kernel_cos+0x180>)
 8008c84:	e7d8      	b.n	8008c38 <__kernel_cos+0xf8>
 8008c86:	bf00      	nop
 8008c88:	be8838d4 	.word	0xbe8838d4
 8008c8c:	bda8fae9 	.word	0xbda8fae9
 8008c90:	bdb4b1c4 	.word	0xbdb4b1c4
 8008c94:	3e21ee9e 	.word	0x3e21ee9e
 8008c98:	809c52ad 	.word	0x809c52ad
 8008c9c:	3e927e4f 	.word	0x3e927e4f
 8008ca0:	19cb1590 	.word	0x19cb1590
 8008ca4:	3efa01a0 	.word	0x3efa01a0
 8008ca8:	16c15177 	.word	0x16c15177
 8008cac:	3f56c16c 	.word	0x3f56c16c
 8008cb0:	5555554c 	.word	0x5555554c
 8008cb4:	3fa55555 	.word	0x3fa55555
 8008cb8:	3fe00000 	.word	0x3fe00000
 8008cbc:	3fd33332 	.word	0x3fd33332
 8008cc0:	3ff00000 	.word	0x3ff00000
 8008cc4:	3fe90000 	.word	0x3fe90000
 8008cc8:	3fd20000 	.word	0x3fd20000
 8008ccc:	00000000 	.word	0x00000000

08008cd0 <__kernel_rem_pio2>:
 8008cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd4:	ed2d 8b02 	vpush	{d8}
 8008cd8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8008cdc:	1ed4      	subs	r4, r2, #3
 8008cde:	9308      	str	r3, [sp, #32]
 8008ce0:	9101      	str	r1, [sp, #4]
 8008ce2:	4bc5      	ldr	r3, [pc, #788]	; (8008ff8 <__kernel_rem_pio2+0x328>)
 8008ce4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8008ce6:	9009      	str	r0, [sp, #36]	; 0x24
 8008ce8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008cec:	9304      	str	r3, [sp, #16]
 8008cee:	9b08      	ldr	r3, [sp, #32]
 8008cf0:	3b01      	subs	r3, #1
 8008cf2:	9307      	str	r3, [sp, #28]
 8008cf4:	2318      	movs	r3, #24
 8008cf6:	fb94 f4f3 	sdiv	r4, r4, r3
 8008cfa:	f06f 0317 	mvn.w	r3, #23
 8008cfe:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8008d02:	fb04 3303 	mla	r3, r4, r3, r3
 8008d06:	eb03 0a02 	add.w	sl, r3, r2
 8008d0a:	9b04      	ldr	r3, [sp, #16]
 8008d0c:	9a07      	ldr	r2, [sp, #28]
 8008d0e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8008fe8 <__kernel_rem_pio2+0x318>
 8008d12:	eb03 0802 	add.w	r8, r3, r2
 8008d16:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008d18:	1aa7      	subs	r7, r4, r2
 8008d1a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008d1e:	ae22      	add	r6, sp, #136	; 0x88
 8008d20:	2500      	movs	r5, #0
 8008d22:	4545      	cmp	r5, r8
 8008d24:	dd13      	ble.n	8008d4e <__kernel_rem_pio2+0x7e>
 8008d26:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8008fe8 <__kernel_rem_pio2+0x318>
 8008d2a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8008d2e:	2600      	movs	r6, #0
 8008d30:	9b04      	ldr	r3, [sp, #16]
 8008d32:	429e      	cmp	r6, r3
 8008d34:	dc32      	bgt.n	8008d9c <__kernel_rem_pio2+0xcc>
 8008d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d38:	9302      	str	r3, [sp, #8]
 8008d3a:	9b08      	ldr	r3, [sp, #32]
 8008d3c:	199d      	adds	r5, r3, r6
 8008d3e:	ab22      	add	r3, sp, #136	; 0x88
 8008d40:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008d44:	9306      	str	r3, [sp, #24]
 8008d46:	ec59 8b18 	vmov	r8, r9, d8
 8008d4a:	2700      	movs	r7, #0
 8008d4c:	e01f      	b.n	8008d8e <__kernel_rem_pio2+0xbe>
 8008d4e:	42ef      	cmn	r7, r5
 8008d50:	d407      	bmi.n	8008d62 <__kernel_rem_pio2+0x92>
 8008d52:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008d56:	f7f7 fbe5 	bl	8000524 <__aeabi_i2d>
 8008d5a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008d5e:	3501      	adds	r5, #1
 8008d60:	e7df      	b.n	8008d22 <__kernel_rem_pio2+0x52>
 8008d62:	ec51 0b18 	vmov	r0, r1, d8
 8008d66:	e7f8      	b.n	8008d5a <__kernel_rem_pio2+0x8a>
 8008d68:	9906      	ldr	r1, [sp, #24]
 8008d6a:	9d02      	ldr	r5, [sp, #8]
 8008d6c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8008d70:	9106      	str	r1, [sp, #24]
 8008d72:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8008d76:	9502      	str	r5, [sp, #8]
 8008d78:	f7f7 fc3e 	bl	80005f8 <__aeabi_dmul>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	460b      	mov	r3, r1
 8008d80:	4640      	mov	r0, r8
 8008d82:	4649      	mov	r1, r9
 8008d84:	f7f7 fa82 	bl	800028c <__adddf3>
 8008d88:	3701      	adds	r7, #1
 8008d8a:	4680      	mov	r8, r0
 8008d8c:	4689      	mov	r9, r1
 8008d8e:	9b07      	ldr	r3, [sp, #28]
 8008d90:	429f      	cmp	r7, r3
 8008d92:	dde9      	ble.n	8008d68 <__kernel_rem_pio2+0x98>
 8008d94:	e8eb 8902 	strd	r8, r9, [fp], #8
 8008d98:	3601      	adds	r6, #1
 8008d9a:	e7c9      	b.n	8008d30 <__kernel_rem_pio2+0x60>
 8008d9c:	9b04      	ldr	r3, [sp, #16]
 8008d9e:	aa0e      	add	r2, sp, #56	; 0x38
 8008da0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008da4:	930c      	str	r3, [sp, #48]	; 0x30
 8008da6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008da8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008dac:	9c04      	ldr	r4, [sp, #16]
 8008dae:	930b      	str	r3, [sp, #44]	; 0x2c
 8008db0:	ab9a      	add	r3, sp, #616	; 0x268
 8008db2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8008db6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008dba:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008dbe:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8008dc2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8008dc6:	ab9a      	add	r3, sp, #616	; 0x268
 8008dc8:	445b      	add	r3, fp
 8008dca:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8008dce:	2500      	movs	r5, #0
 8008dd0:	1b63      	subs	r3, r4, r5
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	dc78      	bgt.n	8008ec8 <__kernel_rem_pio2+0x1f8>
 8008dd6:	4650      	mov	r0, sl
 8008dd8:	ec49 8b10 	vmov	d0, r8, r9
 8008ddc:	f000 fc04 	bl	80095e8 <scalbn>
 8008de0:	ec57 6b10 	vmov	r6, r7, d0
 8008de4:	2200      	movs	r2, #0
 8008de6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008dea:	ee10 0a10 	vmov	r0, s0
 8008dee:	4639      	mov	r1, r7
 8008df0:	f7f7 fc02 	bl	80005f8 <__aeabi_dmul>
 8008df4:	ec41 0b10 	vmov	d0, r0, r1
 8008df8:	f000 fb6e 	bl	80094d8 <floor>
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	ec51 0b10 	vmov	r0, r1, d0
 8008e02:	4b7e      	ldr	r3, [pc, #504]	; (8008ffc <__kernel_rem_pio2+0x32c>)
 8008e04:	f7f7 fbf8 	bl	80005f8 <__aeabi_dmul>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	4630      	mov	r0, r6
 8008e0e:	4639      	mov	r1, r7
 8008e10:	f7f7 fa3a 	bl	8000288 <__aeabi_dsub>
 8008e14:	460f      	mov	r7, r1
 8008e16:	4606      	mov	r6, r0
 8008e18:	f7f7 fe9e 	bl	8000b58 <__aeabi_d2iz>
 8008e1c:	9006      	str	r0, [sp, #24]
 8008e1e:	f7f7 fb81 	bl	8000524 <__aeabi_i2d>
 8008e22:	4602      	mov	r2, r0
 8008e24:	460b      	mov	r3, r1
 8008e26:	4630      	mov	r0, r6
 8008e28:	4639      	mov	r1, r7
 8008e2a:	f7f7 fa2d 	bl	8000288 <__aeabi_dsub>
 8008e2e:	f1ba 0f00 	cmp.w	sl, #0
 8008e32:	4606      	mov	r6, r0
 8008e34:	460f      	mov	r7, r1
 8008e36:	dd6c      	ble.n	8008f12 <__kernel_rem_pio2+0x242>
 8008e38:	1e62      	subs	r2, r4, #1
 8008e3a:	ab0e      	add	r3, sp, #56	; 0x38
 8008e3c:	f1ca 0118 	rsb	r1, sl, #24
 8008e40:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008e44:	9d06      	ldr	r5, [sp, #24]
 8008e46:	fa40 f301 	asr.w	r3, r0, r1
 8008e4a:	441d      	add	r5, r3
 8008e4c:	408b      	lsls	r3, r1
 8008e4e:	1ac0      	subs	r0, r0, r3
 8008e50:	ab0e      	add	r3, sp, #56	; 0x38
 8008e52:	9506      	str	r5, [sp, #24]
 8008e54:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008e58:	f1ca 0317 	rsb	r3, sl, #23
 8008e5c:	fa40 f303 	asr.w	r3, r0, r3
 8008e60:	9302      	str	r3, [sp, #8]
 8008e62:	9b02      	ldr	r3, [sp, #8]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	dd62      	ble.n	8008f2e <__kernel_rem_pio2+0x25e>
 8008e68:	9b06      	ldr	r3, [sp, #24]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	9306      	str	r3, [sp, #24]
 8008e70:	4615      	mov	r5, r2
 8008e72:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008e76:	4294      	cmp	r4, r2
 8008e78:	f300 8095 	bgt.w	8008fa6 <__kernel_rem_pio2+0x2d6>
 8008e7c:	f1ba 0f00 	cmp.w	sl, #0
 8008e80:	dd07      	ble.n	8008e92 <__kernel_rem_pio2+0x1c2>
 8008e82:	f1ba 0f01 	cmp.w	sl, #1
 8008e86:	f000 80a2 	beq.w	8008fce <__kernel_rem_pio2+0x2fe>
 8008e8a:	f1ba 0f02 	cmp.w	sl, #2
 8008e8e:	f000 80c1 	beq.w	8009014 <__kernel_rem_pio2+0x344>
 8008e92:	9b02      	ldr	r3, [sp, #8]
 8008e94:	2b02      	cmp	r3, #2
 8008e96:	d14a      	bne.n	8008f2e <__kernel_rem_pio2+0x25e>
 8008e98:	4632      	mov	r2, r6
 8008e9a:	463b      	mov	r3, r7
 8008e9c:	2000      	movs	r0, #0
 8008e9e:	4958      	ldr	r1, [pc, #352]	; (8009000 <__kernel_rem_pio2+0x330>)
 8008ea0:	f7f7 f9f2 	bl	8000288 <__aeabi_dsub>
 8008ea4:	4606      	mov	r6, r0
 8008ea6:	460f      	mov	r7, r1
 8008ea8:	2d00      	cmp	r5, #0
 8008eaa:	d040      	beq.n	8008f2e <__kernel_rem_pio2+0x25e>
 8008eac:	4650      	mov	r0, sl
 8008eae:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8008ff0 <__kernel_rem_pio2+0x320>
 8008eb2:	f000 fb99 	bl	80095e8 <scalbn>
 8008eb6:	4630      	mov	r0, r6
 8008eb8:	4639      	mov	r1, r7
 8008eba:	ec53 2b10 	vmov	r2, r3, d0
 8008ebe:	f7f7 f9e3 	bl	8000288 <__aeabi_dsub>
 8008ec2:	4606      	mov	r6, r0
 8008ec4:	460f      	mov	r7, r1
 8008ec6:	e032      	b.n	8008f2e <__kernel_rem_pio2+0x25e>
 8008ec8:	2200      	movs	r2, #0
 8008eca:	4b4e      	ldr	r3, [pc, #312]	; (8009004 <__kernel_rem_pio2+0x334>)
 8008ecc:	4640      	mov	r0, r8
 8008ece:	4649      	mov	r1, r9
 8008ed0:	f7f7 fb92 	bl	80005f8 <__aeabi_dmul>
 8008ed4:	f7f7 fe40 	bl	8000b58 <__aeabi_d2iz>
 8008ed8:	f7f7 fb24 	bl	8000524 <__aeabi_i2d>
 8008edc:	2200      	movs	r2, #0
 8008ede:	4b4a      	ldr	r3, [pc, #296]	; (8009008 <__kernel_rem_pio2+0x338>)
 8008ee0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ee4:	f7f7 fb88 	bl	80005f8 <__aeabi_dmul>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	460b      	mov	r3, r1
 8008eec:	4640      	mov	r0, r8
 8008eee:	4649      	mov	r1, r9
 8008ef0:	f7f7 f9ca 	bl	8000288 <__aeabi_dsub>
 8008ef4:	f7f7 fe30 	bl	8000b58 <__aeabi_d2iz>
 8008ef8:	ab0e      	add	r3, sp, #56	; 0x38
 8008efa:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8008efe:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8008f02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f06:	f7f7 f9c1 	bl	800028c <__adddf3>
 8008f0a:	3501      	adds	r5, #1
 8008f0c:	4680      	mov	r8, r0
 8008f0e:	4689      	mov	r9, r1
 8008f10:	e75e      	b.n	8008dd0 <__kernel_rem_pio2+0x100>
 8008f12:	d105      	bne.n	8008f20 <__kernel_rem_pio2+0x250>
 8008f14:	1e63      	subs	r3, r4, #1
 8008f16:	aa0e      	add	r2, sp, #56	; 0x38
 8008f18:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008f1c:	15c3      	asrs	r3, r0, #23
 8008f1e:	e79f      	b.n	8008e60 <__kernel_rem_pio2+0x190>
 8008f20:	2200      	movs	r2, #0
 8008f22:	4b3a      	ldr	r3, [pc, #232]	; (800900c <__kernel_rem_pio2+0x33c>)
 8008f24:	f7f7 fdee 	bl	8000b04 <__aeabi_dcmpge>
 8008f28:	2800      	cmp	r0, #0
 8008f2a:	d139      	bne.n	8008fa0 <__kernel_rem_pio2+0x2d0>
 8008f2c:	9002      	str	r0, [sp, #8]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	2300      	movs	r3, #0
 8008f32:	4630      	mov	r0, r6
 8008f34:	4639      	mov	r1, r7
 8008f36:	f7f7 fdc7 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f3a:	2800      	cmp	r0, #0
 8008f3c:	f000 80c7 	beq.w	80090ce <__kernel_rem_pio2+0x3fe>
 8008f40:	1e65      	subs	r5, r4, #1
 8008f42:	462b      	mov	r3, r5
 8008f44:	2200      	movs	r2, #0
 8008f46:	9904      	ldr	r1, [sp, #16]
 8008f48:	428b      	cmp	r3, r1
 8008f4a:	da6a      	bge.n	8009022 <__kernel_rem_pio2+0x352>
 8008f4c:	2a00      	cmp	r2, #0
 8008f4e:	f000 8088 	beq.w	8009062 <__kernel_rem_pio2+0x392>
 8008f52:	ab0e      	add	r3, sp, #56	; 0x38
 8008f54:	f1aa 0a18 	sub.w	sl, sl, #24
 8008f58:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	f000 80b4 	beq.w	80090ca <__kernel_rem_pio2+0x3fa>
 8008f62:	4650      	mov	r0, sl
 8008f64:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8008ff0 <__kernel_rem_pio2+0x320>
 8008f68:	f000 fb3e 	bl	80095e8 <scalbn>
 8008f6c:	00ec      	lsls	r4, r5, #3
 8008f6e:	ab72      	add	r3, sp, #456	; 0x1c8
 8008f70:	191e      	adds	r6, r3, r4
 8008f72:	ec59 8b10 	vmov	r8, r9, d0
 8008f76:	f106 0a08 	add.w	sl, r6, #8
 8008f7a:	462f      	mov	r7, r5
 8008f7c:	2f00      	cmp	r7, #0
 8008f7e:	f280 80df 	bge.w	8009140 <__kernel_rem_pio2+0x470>
 8008f82:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8008fe8 <__kernel_rem_pio2+0x318>
 8008f86:	f04f 0a00 	mov.w	sl, #0
 8008f8a:	eba5 030a 	sub.w	r3, r5, sl
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	f2c0 810a 	blt.w	80091a8 <__kernel_rem_pio2+0x4d8>
 8008f94:	f8df b078 	ldr.w	fp, [pc, #120]	; 8009010 <__kernel_rem_pio2+0x340>
 8008f98:	ec59 8b18 	vmov	r8, r9, d8
 8008f9c:	2700      	movs	r7, #0
 8008f9e:	e0f5      	b.n	800918c <__kernel_rem_pio2+0x4bc>
 8008fa0:	2302      	movs	r3, #2
 8008fa2:	9302      	str	r3, [sp, #8]
 8008fa4:	e760      	b.n	8008e68 <__kernel_rem_pio2+0x198>
 8008fa6:	ab0e      	add	r3, sp, #56	; 0x38
 8008fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fac:	b94d      	cbnz	r5, 8008fc2 <__kernel_rem_pio2+0x2f2>
 8008fae:	b12b      	cbz	r3, 8008fbc <__kernel_rem_pio2+0x2ec>
 8008fb0:	a80e      	add	r0, sp, #56	; 0x38
 8008fb2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008fb6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8008fba:	2301      	movs	r3, #1
 8008fbc:	3201      	adds	r2, #1
 8008fbe:	461d      	mov	r5, r3
 8008fc0:	e759      	b.n	8008e76 <__kernel_rem_pio2+0x1a6>
 8008fc2:	a80e      	add	r0, sp, #56	; 0x38
 8008fc4:	1acb      	subs	r3, r1, r3
 8008fc6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8008fca:	462b      	mov	r3, r5
 8008fcc:	e7f6      	b.n	8008fbc <__kernel_rem_pio2+0x2ec>
 8008fce:	1e62      	subs	r2, r4, #1
 8008fd0:	ab0e      	add	r3, sp, #56	; 0x38
 8008fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fd6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008fda:	a90e      	add	r1, sp, #56	; 0x38
 8008fdc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008fe0:	e757      	b.n	8008e92 <__kernel_rem_pio2+0x1c2>
 8008fe2:	bf00      	nop
 8008fe4:	f3af 8000 	nop.w
	...
 8008ff4:	3ff00000 	.word	0x3ff00000
 8008ff8:	08009bb0 	.word	0x08009bb0
 8008ffc:	40200000 	.word	0x40200000
 8009000:	3ff00000 	.word	0x3ff00000
 8009004:	3e700000 	.word	0x3e700000
 8009008:	41700000 	.word	0x41700000
 800900c:	3fe00000 	.word	0x3fe00000
 8009010:	08009b70 	.word	0x08009b70
 8009014:	1e62      	subs	r2, r4, #1
 8009016:	ab0e      	add	r3, sp, #56	; 0x38
 8009018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800901c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009020:	e7db      	b.n	8008fda <__kernel_rem_pio2+0x30a>
 8009022:	a90e      	add	r1, sp, #56	; 0x38
 8009024:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009028:	3b01      	subs	r3, #1
 800902a:	430a      	orrs	r2, r1
 800902c:	e78b      	b.n	8008f46 <__kernel_rem_pio2+0x276>
 800902e:	3301      	adds	r3, #1
 8009030:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009034:	2900      	cmp	r1, #0
 8009036:	d0fa      	beq.n	800902e <__kernel_rem_pio2+0x35e>
 8009038:	9a08      	ldr	r2, [sp, #32]
 800903a:	4422      	add	r2, r4
 800903c:	00d2      	lsls	r2, r2, #3
 800903e:	a922      	add	r1, sp, #136	; 0x88
 8009040:	18e3      	adds	r3, r4, r3
 8009042:	9206      	str	r2, [sp, #24]
 8009044:	440a      	add	r2, r1
 8009046:	9302      	str	r3, [sp, #8]
 8009048:	f10b 0108 	add.w	r1, fp, #8
 800904c:	f102 0308 	add.w	r3, r2, #8
 8009050:	1c66      	adds	r6, r4, #1
 8009052:	910a      	str	r1, [sp, #40]	; 0x28
 8009054:	2500      	movs	r5, #0
 8009056:	930d      	str	r3, [sp, #52]	; 0x34
 8009058:	9b02      	ldr	r3, [sp, #8]
 800905a:	42b3      	cmp	r3, r6
 800905c:	da04      	bge.n	8009068 <__kernel_rem_pio2+0x398>
 800905e:	461c      	mov	r4, r3
 8009060:	e6a6      	b.n	8008db0 <__kernel_rem_pio2+0xe0>
 8009062:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009064:	2301      	movs	r3, #1
 8009066:	e7e3      	b.n	8009030 <__kernel_rem_pio2+0x360>
 8009068:	9b06      	ldr	r3, [sp, #24]
 800906a:	18ef      	adds	r7, r5, r3
 800906c:	ab22      	add	r3, sp, #136	; 0x88
 800906e:	441f      	add	r7, r3
 8009070:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009072:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009076:	f7f7 fa55 	bl	8000524 <__aeabi_i2d>
 800907a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800907c:	461c      	mov	r4, r3
 800907e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009080:	e9c7 0100 	strd	r0, r1, [r7]
 8009084:	eb03 0b05 	add.w	fp, r3, r5
 8009088:	2700      	movs	r7, #0
 800908a:	f04f 0800 	mov.w	r8, #0
 800908e:	f04f 0900 	mov.w	r9, #0
 8009092:	9b07      	ldr	r3, [sp, #28]
 8009094:	429f      	cmp	r7, r3
 8009096:	dd08      	ble.n	80090aa <__kernel_rem_pio2+0x3da>
 8009098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800909a:	aa72      	add	r2, sp, #456	; 0x1c8
 800909c:	18eb      	adds	r3, r5, r3
 800909e:	4413      	add	r3, r2
 80090a0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80090a4:	3601      	adds	r6, #1
 80090a6:	3508      	adds	r5, #8
 80090a8:	e7d6      	b.n	8009058 <__kernel_rem_pio2+0x388>
 80090aa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80090ae:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80090b2:	f7f7 faa1 	bl	80005f8 <__aeabi_dmul>
 80090b6:	4602      	mov	r2, r0
 80090b8:	460b      	mov	r3, r1
 80090ba:	4640      	mov	r0, r8
 80090bc:	4649      	mov	r1, r9
 80090be:	f7f7 f8e5 	bl	800028c <__adddf3>
 80090c2:	3701      	adds	r7, #1
 80090c4:	4680      	mov	r8, r0
 80090c6:	4689      	mov	r9, r1
 80090c8:	e7e3      	b.n	8009092 <__kernel_rem_pio2+0x3c2>
 80090ca:	3d01      	subs	r5, #1
 80090cc:	e741      	b.n	8008f52 <__kernel_rem_pio2+0x282>
 80090ce:	f1ca 0000 	rsb	r0, sl, #0
 80090d2:	ec47 6b10 	vmov	d0, r6, r7
 80090d6:	f000 fa87 	bl	80095e8 <scalbn>
 80090da:	ec57 6b10 	vmov	r6, r7, d0
 80090de:	2200      	movs	r2, #0
 80090e0:	4b99      	ldr	r3, [pc, #612]	; (8009348 <__kernel_rem_pio2+0x678>)
 80090e2:	ee10 0a10 	vmov	r0, s0
 80090e6:	4639      	mov	r1, r7
 80090e8:	f7f7 fd0c 	bl	8000b04 <__aeabi_dcmpge>
 80090ec:	b1f8      	cbz	r0, 800912e <__kernel_rem_pio2+0x45e>
 80090ee:	2200      	movs	r2, #0
 80090f0:	4b96      	ldr	r3, [pc, #600]	; (800934c <__kernel_rem_pio2+0x67c>)
 80090f2:	4630      	mov	r0, r6
 80090f4:	4639      	mov	r1, r7
 80090f6:	f7f7 fa7f 	bl	80005f8 <__aeabi_dmul>
 80090fa:	f7f7 fd2d 	bl	8000b58 <__aeabi_d2iz>
 80090fe:	4680      	mov	r8, r0
 8009100:	f7f7 fa10 	bl	8000524 <__aeabi_i2d>
 8009104:	2200      	movs	r2, #0
 8009106:	4b90      	ldr	r3, [pc, #576]	; (8009348 <__kernel_rem_pio2+0x678>)
 8009108:	f7f7 fa76 	bl	80005f8 <__aeabi_dmul>
 800910c:	460b      	mov	r3, r1
 800910e:	4602      	mov	r2, r0
 8009110:	4639      	mov	r1, r7
 8009112:	4630      	mov	r0, r6
 8009114:	f7f7 f8b8 	bl	8000288 <__aeabi_dsub>
 8009118:	f7f7 fd1e 	bl	8000b58 <__aeabi_d2iz>
 800911c:	1c65      	adds	r5, r4, #1
 800911e:	ab0e      	add	r3, sp, #56	; 0x38
 8009120:	f10a 0a18 	add.w	sl, sl, #24
 8009124:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009128:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800912c:	e719      	b.n	8008f62 <__kernel_rem_pio2+0x292>
 800912e:	4630      	mov	r0, r6
 8009130:	4639      	mov	r1, r7
 8009132:	f7f7 fd11 	bl	8000b58 <__aeabi_d2iz>
 8009136:	ab0e      	add	r3, sp, #56	; 0x38
 8009138:	4625      	mov	r5, r4
 800913a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800913e:	e710      	b.n	8008f62 <__kernel_rem_pio2+0x292>
 8009140:	ab0e      	add	r3, sp, #56	; 0x38
 8009142:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8009146:	f7f7 f9ed 	bl	8000524 <__aeabi_i2d>
 800914a:	4642      	mov	r2, r8
 800914c:	464b      	mov	r3, r9
 800914e:	f7f7 fa53 	bl	80005f8 <__aeabi_dmul>
 8009152:	2200      	movs	r2, #0
 8009154:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8009158:	4b7c      	ldr	r3, [pc, #496]	; (800934c <__kernel_rem_pio2+0x67c>)
 800915a:	4640      	mov	r0, r8
 800915c:	4649      	mov	r1, r9
 800915e:	f7f7 fa4b 	bl	80005f8 <__aeabi_dmul>
 8009162:	3f01      	subs	r7, #1
 8009164:	4680      	mov	r8, r0
 8009166:	4689      	mov	r9, r1
 8009168:	e708      	b.n	8008f7c <__kernel_rem_pio2+0x2ac>
 800916a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800916e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009172:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8009176:	f7f7 fa3f 	bl	80005f8 <__aeabi_dmul>
 800917a:	4602      	mov	r2, r0
 800917c:	460b      	mov	r3, r1
 800917e:	4640      	mov	r0, r8
 8009180:	4649      	mov	r1, r9
 8009182:	f7f7 f883 	bl	800028c <__adddf3>
 8009186:	3701      	adds	r7, #1
 8009188:	4680      	mov	r8, r0
 800918a:	4689      	mov	r9, r1
 800918c:	9b04      	ldr	r3, [sp, #16]
 800918e:	429f      	cmp	r7, r3
 8009190:	dc01      	bgt.n	8009196 <__kernel_rem_pio2+0x4c6>
 8009192:	45ba      	cmp	sl, r7
 8009194:	dae9      	bge.n	800916a <__kernel_rem_pio2+0x49a>
 8009196:	ab4a      	add	r3, sp, #296	; 0x128
 8009198:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800919c:	e9c3 8900 	strd	r8, r9, [r3]
 80091a0:	f10a 0a01 	add.w	sl, sl, #1
 80091a4:	3e08      	subs	r6, #8
 80091a6:	e6f0      	b.n	8008f8a <__kernel_rem_pio2+0x2ba>
 80091a8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80091aa:	2b03      	cmp	r3, #3
 80091ac:	d85b      	bhi.n	8009266 <__kernel_rem_pio2+0x596>
 80091ae:	e8df f003 	tbb	[pc, r3]
 80091b2:	264a      	.short	0x264a
 80091b4:	0226      	.short	0x0226
 80091b6:	ab9a      	add	r3, sp, #616	; 0x268
 80091b8:	441c      	add	r4, r3
 80091ba:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80091be:	46a2      	mov	sl, r4
 80091c0:	46ab      	mov	fp, r5
 80091c2:	f1bb 0f00 	cmp.w	fp, #0
 80091c6:	dc6c      	bgt.n	80092a2 <__kernel_rem_pio2+0x5d2>
 80091c8:	46a2      	mov	sl, r4
 80091ca:	46ab      	mov	fp, r5
 80091cc:	f1bb 0f01 	cmp.w	fp, #1
 80091d0:	f300 8086 	bgt.w	80092e0 <__kernel_rem_pio2+0x610>
 80091d4:	2000      	movs	r0, #0
 80091d6:	2100      	movs	r1, #0
 80091d8:	2d01      	cmp	r5, #1
 80091da:	f300 80a0 	bgt.w	800931e <__kernel_rem_pio2+0x64e>
 80091de:	9b02      	ldr	r3, [sp, #8]
 80091e0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80091e4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f040 809e 	bne.w	800932a <__kernel_rem_pio2+0x65a>
 80091ee:	9b01      	ldr	r3, [sp, #4]
 80091f0:	e9c3 7800 	strd	r7, r8, [r3]
 80091f4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80091f8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80091fc:	e033      	b.n	8009266 <__kernel_rem_pio2+0x596>
 80091fe:	3408      	adds	r4, #8
 8009200:	ab4a      	add	r3, sp, #296	; 0x128
 8009202:	441c      	add	r4, r3
 8009204:	462e      	mov	r6, r5
 8009206:	2000      	movs	r0, #0
 8009208:	2100      	movs	r1, #0
 800920a:	2e00      	cmp	r6, #0
 800920c:	da3a      	bge.n	8009284 <__kernel_rem_pio2+0x5b4>
 800920e:	9b02      	ldr	r3, [sp, #8]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d03d      	beq.n	8009290 <__kernel_rem_pio2+0x5c0>
 8009214:	4602      	mov	r2, r0
 8009216:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800921a:	9c01      	ldr	r4, [sp, #4]
 800921c:	e9c4 2300 	strd	r2, r3, [r4]
 8009220:	4602      	mov	r2, r0
 8009222:	460b      	mov	r3, r1
 8009224:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8009228:	f7f7 f82e 	bl	8000288 <__aeabi_dsub>
 800922c:	ae4c      	add	r6, sp, #304	; 0x130
 800922e:	2401      	movs	r4, #1
 8009230:	42a5      	cmp	r5, r4
 8009232:	da30      	bge.n	8009296 <__kernel_rem_pio2+0x5c6>
 8009234:	9b02      	ldr	r3, [sp, #8]
 8009236:	b113      	cbz	r3, 800923e <__kernel_rem_pio2+0x56e>
 8009238:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800923c:	4619      	mov	r1, r3
 800923e:	9b01      	ldr	r3, [sp, #4]
 8009240:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009244:	e00f      	b.n	8009266 <__kernel_rem_pio2+0x596>
 8009246:	ab9a      	add	r3, sp, #616	; 0x268
 8009248:	441c      	add	r4, r3
 800924a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800924e:	2000      	movs	r0, #0
 8009250:	2100      	movs	r1, #0
 8009252:	2d00      	cmp	r5, #0
 8009254:	da10      	bge.n	8009278 <__kernel_rem_pio2+0x5a8>
 8009256:	9b02      	ldr	r3, [sp, #8]
 8009258:	b113      	cbz	r3, 8009260 <__kernel_rem_pio2+0x590>
 800925a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800925e:	4619      	mov	r1, r3
 8009260:	9b01      	ldr	r3, [sp, #4]
 8009262:	e9c3 0100 	strd	r0, r1, [r3]
 8009266:	9b06      	ldr	r3, [sp, #24]
 8009268:	f003 0007 	and.w	r0, r3, #7
 800926c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8009270:	ecbd 8b02 	vpop	{d8}
 8009274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009278:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800927c:	f7f7 f806 	bl	800028c <__adddf3>
 8009280:	3d01      	subs	r5, #1
 8009282:	e7e6      	b.n	8009252 <__kernel_rem_pio2+0x582>
 8009284:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009288:	f7f7 f800 	bl	800028c <__adddf3>
 800928c:	3e01      	subs	r6, #1
 800928e:	e7bc      	b.n	800920a <__kernel_rem_pio2+0x53a>
 8009290:	4602      	mov	r2, r0
 8009292:	460b      	mov	r3, r1
 8009294:	e7c1      	b.n	800921a <__kernel_rem_pio2+0x54a>
 8009296:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800929a:	f7f6 fff7 	bl	800028c <__adddf3>
 800929e:	3401      	adds	r4, #1
 80092a0:	e7c6      	b.n	8009230 <__kernel_rem_pio2+0x560>
 80092a2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80092a6:	ed3a 7b02 	vldmdb	sl!, {d7}
 80092aa:	4640      	mov	r0, r8
 80092ac:	ec53 2b17 	vmov	r2, r3, d7
 80092b0:	4649      	mov	r1, r9
 80092b2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80092b6:	f7f6 ffe9 	bl	800028c <__adddf3>
 80092ba:	4602      	mov	r2, r0
 80092bc:	460b      	mov	r3, r1
 80092be:	4606      	mov	r6, r0
 80092c0:	460f      	mov	r7, r1
 80092c2:	4640      	mov	r0, r8
 80092c4:	4649      	mov	r1, r9
 80092c6:	f7f6 ffdf 	bl	8000288 <__aeabi_dsub>
 80092ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092ce:	f7f6 ffdd 	bl	800028c <__adddf3>
 80092d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80092d6:	e9ca 0100 	strd	r0, r1, [sl]
 80092da:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80092de:	e770      	b.n	80091c2 <__kernel_rem_pio2+0x4f2>
 80092e0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80092e4:	ed3a 7b02 	vldmdb	sl!, {d7}
 80092e8:	4630      	mov	r0, r6
 80092ea:	ec53 2b17 	vmov	r2, r3, d7
 80092ee:	4639      	mov	r1, r7
 80092f0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80092f4:	f7f6 ffca 	bl	800028c <__adddf3>
 80092f8:	4602      	mov	r2, r0
 80092fa:	460b      	mov	r3, r1
 80092fc:	4680      	mov	r8, r0
 80092fe:	4689      	mov	r9, r1
 8009300:	4630      	mov	r0, r6
 8009302:	4639      	mov	r1, r7
 8009304:	f7f6 ffc0 	bl	8000288 <__aeabi_dsub>
 8009308:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800930c:	f7f6 ffbe 	bl	800028c <__adddf3>
 8009310:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009314:	e9ca 0100 	strd	r0, r1, [sl]
 8009318:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800931c:	e756      	b.n	80091cc <__kernel_rem_pio2+0x4fc>
 800931e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009322:	f7f6 ffb3 	bl	800028c <__adddf3>
 8009326:	3d01      	subs	r5, #1
 8009328:	e756      	b.n	80091d8 <__kernel_rem_pio2+0x508>
 800932a:	9b01      	ldr	r3, [sp, #4]
 800932c:	9a01      	ldr	r2, [sp, #4]
 800932e:	601f      	str	r7, [r3, #0]
 8009330:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8009334:	605c      	str	r4, [r3, #4]
 8009336:	609d      	str	r5, [r3, #8]
 8009338:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800933c:	60d3      	str	r3, [r2, #12]
 800933e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009342:	6110      	str	r0, [r2, #16]
 8009344:	6153      	str	r3, [r2, #20]
 8009346:	e78e      	b.n	8009266 <__kernel_rem_pio2+0x596>
 8009348:	41700000 	.word	0x41700000
 800934c:	3e700000 	.word	0x3e700000

08009350 <__kernel_sin>:
 8009350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009354:	ec55 4b10 	vmov	r4, r5, d0
 8009358:	b085      	sub	sp, #20
 800935a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800935e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009362:	ed8d 1b00 	vstr	d1, [sp]
 8009366:	9002      	str	r0, [sp, #8]
 8009368:	da06      	bge.n	8009378 <__kernel_sin+0x28>
 800936a:	ee10 0a10 	vmov	r0, s0
 800936e:	4629      	mov	r1, r5
 8009370:	f7f7 fbf2 	bl	8000b58 <__aeabi_d2iz>
 8009374:	2800      	cmp	r0, #0
 8009376:	d051      	beq.n	800941c <__kernel_sin+0xcc>
 8009378:	4622      	mov	r2, r4
 800937a:	462b      	mov	r3, r5
 800937c:	4620      	mov	r0, r4
 800937e:	4629      	mov	r1, r5
 8009380:	f7f7 f93a 	bl	80005f8 <__aeabi_dmul>
 8009384:	4682      	mov	sl, r0
 8009386:	468b      	mov	fp, r1
 8009388:	4602      	mov	r2, r0
 800938a:	460b      	mov	r3, r1
 800938c:	4620      	mov	r0, r4
 800938e:	4629      	mov	r1, r5
 8009390:	f7f7 f932 	bl	80005f8 <__aeabi_dmul>
 8009394:	a341      	add	r3, pc, #260	; (adr r3, 800949c <__kernel_sin+0x14c>)
 8009396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939a:	4680      	mov	r8, r0
 800939c:	4689      	mov	r9, r1
 800939e:	4650      	mov	r0, sl
 80093a0:	4659      	mov	r1, fp
 80093a2:	f7f7 f929 	bl	80005f8 <__aeabi_dmul>
 80093a6:	a33f      	add	r3, pc, #252	; (adr r3, 80094a4 <__kernel_sin+0x154>)
 80093a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ac:	f7f6 ff6c 	bl	8000288 <__aeabi_dsub>
 80093b0:	4652      	mov	r2, sl
 80093b2:	465b      	mov	r3, fp
 80093b4:	f7f7 f920 	bl	80005f8 <__aeabi_dmul>
 80093b8:	a33c      	add	r3, pc, #240	; (adr r3, 80094ac <__kernel_sin+0x15c>)
 80093ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093be:	f7f6 ff65 	bl	800028c <__adddf3>
 80093c2:	4652      	mov	r2, sl
 80093c4:	465b      	mov	r3, fp
 80093c6:	f7f7 f917 	bl	80005f8 <__aeabi_dmul>
 80093ca:	a33a      	add	r3, pc, #232	; (adr r3, 80094b4 <__kernel_sin+0x164>)
 80093cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d0:	f7f6 ff5a 	bl	8000288 <__aeabi_dsub>
 80093d4:	4652      	mov	r2, sl
 80093d6:	465b      	mov	r3, fp
 80093d8:	f7f7 f90e 	bl	80005f8 <__aeabi_dmul>
 80093dc:	a337      	add	r3, pc, #220	; (adr r3, 80094bc <__kernel_sin+0x16c>)
 80093de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e2:	f7f6 ff53 	bl	800028c <__adddf3>
 80093e6:	9b02      	ldr	r3, [sp, #8]
 80093e8:	4606      	mov	r6, r0
 80093ea:	460f      	mov	r7, r1
 80093ec:	b9db      	cbnz	r3, 8009426 <__kernel_sin+0xd6>
 80093ee:	4602      	mov	r2, r0
 80093f0:	460b      	mov	r3, r1
 80093f2:	4650      	mov	r0, sl
 80093f4:	4659      	mov	r1, fp
 80093f6:	f7f7 f8ff 	bl	80005f8 <__aeabi_dmul>
 80093fa:	a325      	add	r3, pc, #148	; (adr r3, 8009490 <__kernel_sin+0x140>)
 80093fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009400:	f7f6 ff42 	bl	8000288 <__aeabi_dsub>
 8009404:	4642      	mov	r2, r8
 8009406:	464b      	mov	r3, r9
 8009408:	f7f7 f8f6 	bl	80005f8 <__aeabi_dmul>
 800940c:	4602      	mov	r2, r0
 800940e:	460b      	mov	r3, r1
 8009410:	4620      	mov	r0, r4
 8009412:	4629      	mov	r1, r5
 8009414:	f7f6 ff3a 	bl	800028c <__adddf3>
 8009418:	4604      	mov	r4, r0
 800941a:	460d      	mov	r5, r1
 800941c:	ec45 4b10 	vmov	d0, r4, r5
 8009420:	b005      	add	sp, #20
 8009422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009426:	2200      	movs	r2, #0
 8009428:	4b1b      	ldr	r3, [pc, #108]	; (8009498 <__kernel_sin+0x148>)
 800942a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800942e:	f7f7 f8e3 	bl	80005f8 <__aeabi_dmul>
 8009432:	4632      	mov	r2, r6
 8009434:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009438:	463b      	mov	r3, r7
 800943a:	4640      	mov	r0, r8
 800943c:	4649      	mov	r1, r9
 800943e:	f7f7 f8db 	bl	80005f8 <__aeabi_dmul>
 8009442:	4602      	mov	r2, r0
 8009444:	460b      	mov	r3, r1
 8009446:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800944a:	f7f6 ff1d 	bl	8000288 <__aeabi_dsub>
 800944e:	4652      	mov	r2, sl
 8009450:	465b      	mov	r3, fp
 8009452:	f7f7 f8d1 	bl	80005f8 <__aeabi_dmul>
 8009456:	e9dd 2300 	ldrd	r2, r3, [sp]
 800945a:	f7f6 ff15 	bl	8000288 <__aeabi_dsub>
 800945e:	a30c      	add	r3, pc, #48	; (adr r3, 8009490 <__kernel_sin+0x140>)
 8009460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009464:	4606      	mov	r6, r0
 8009466:	460f      	mov	r7, r1
 8009468:	4640      	mov	r0, r8
 800946a:	4649      	mov	r1, r9
 800946c:	f7f7 f8c4 	bl	80005f8 <__aeabi_dmul>
 8009470:	4602      	mov	r2, r0
 8009472:	460b      	mov	r3, r1
 8009474:	4630      	mov	r0, r6
 8009476:	4639      	mov	r1, r7
 8009478:	f7f6 ff08 	bl	800028c <__adddf3>
 800947c:	4602      	mov	r2, r0
 800947e:	460b      	mov	r3, r1
 8009480:	4620      	mov	r0, r4
 8009482:	4629      	mov	r1, r5
 8009484:	f7f6 ff00 	bl	8000288 <__aeabi_dsub>
 8009488:	e7c6      	b.n	8009418 <__kernel_sin+0xc8>
 800948a:	bf00      	nop
 800948c:	f3af 8000 	nop.w
 8009490:	55555549 	.word	0x55555549
 8009494:	3fc55555 	.word	0x3fc55555
 8009498:	3fe00000 	.word	0x3fe00000
 800949c:	5acfd57c 	.word	0x5acfd57c
 80094a0:	3de5d93a 	.word	0x3de5d93a
 80094a4:	8a2b9ceb 	.word	0x8a2b9ceb
 80094a8:	3e5ae5e6 	.word	0x3e5ae5e6
 80094ac:	57b1fe7d 	.word	0x57b1fe7d
 80094b0:	3ec71de3 	.word	0x3ec71de3
 80094b4:	19c161d5 	.word	0x19c161d5
 80094b8:	3f2a01a0 	.word	0x3f2a01a0
 80094bc:	1110f8a6 	.word	0x1110f8a6
 80094c0:	3f811111 	.word	0x3f811111

080094c4 <fabs>:
 80094c4:	ec51 0b10 	vmov	r0, r1, d0
 80094c8:	ee10 2a10 	vmov	r2, s0
 80094cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80094d0:	ec43 2b10 	vmov	d0, r2, r3
 80094d4:	4770      	bx	lr
	...

080094d8 <floor>:
 80094d8:	ec51 0b10 	vmov	r0, r1, d0
 80094dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094e0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80094e4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80094e8:	2e13      	cmp	r6, #19
 80094ea:	460c      	mov	r4, r1
 80094ec:	ee10 5a10 	vmov	r5, s0
 80094f0:	4680      	mov	r8, r0
 80094f2:	dc34      	bgt.n	800955e <floor+0x86>
 80094f4:	2e00      	cmp	r6, #0
 80094f6:	da16      	bge.n	8009526 <floor+0x4e>
 80094f8:	a335      	add	r3, pc, #212	; (adr r3, 80095d0 <floor+0xf8>)
 80094fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fe:	f7f6 fec5 	bl	800028c <__adddf3>
 8009502:	2200      	movs	r2, #0
 8009504:	2300      	movs	r3, #0
 8009506:	f7f7 fb07 	bl	8000b18 <__aeabi_dcmpgt>
 800950a:	b148      	cbz	r0, 8009520 <floor+0x48>
 800950c:	2c00      	cmp	r4, #0
 800950e:	da59      	bge.n	80095c4 <floor+0xec>
 8009510:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009514:	4a30      	ldr	r2, [pc, #192]	; (80095d8 <floor+0x100>)
 8009516:	432b      	orrs	r3, r5
 8009518:	2500      	movs	r5, #0
 800951a:	42ab      	cmp	r3, r5
 800951c:	bf18      	it	ne
 800951e:	4614      	movne	r4, r2
 8009520:	4621      	mov	r1, r4
 8009522:	4628      	mov	r0, r5
 8009524:	e025      	b.n	8009572 <floor+0x9a>
 8009526:	4f2d      	ldr	r7, [pc, #180]	; (80095dc <floor+0x104>)
 8009528:	4137      	asrs	r7, r6
 800952a:	ea01 0307 	and.w	r3, r1, r7
 800952e:	4303      	orrs	r3, r0
 8009530:	d01f      	beq.n	8009572 <floor+0x9a>
 8009532:	a327      	add	r3, pc, #156	; (adr r3, 80095d0 <floor+0xf8>)
 8009534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009538:	f7f6 fea8 	bl	800028c <__adddf3>
 800953c:	2200      	movs	r2, #0
 800953e:	2300      	movs	r3, #0
 8009540:	f7f7 faea 	bl	8000b18 <__aeabi_dcmpgt>
 8009544:	2800      	cmp	r0, #0
 8009546:	d0eb      	beq.n	8009520 <floor+0x48>
 8009548:	2c00      	cmp	r4, #0
 800954a:	bfbe      	ittt	lt
 800954c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009550:	fa43 f606 	asrlt.w	r6, r3, r6
 8009554:	19a4      	addlt	r4, r4, r6
 8009556:	ea24 0407 	bic.w	r4, r4, r7
 800955a:	2500      	movs	r5, #0
 800955c:	e7e0      	b.n	8009520 <floor+0x48>
 800955e:	2e33      	cmp	r6, #51	; 0x33
 8009560:	dd0b      	ble.n	800957a <floor+0xa2>
 8009562:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009566:	d104      	bne.n	8009572 <floor+0x9a>
 8009568:	ee10 2a10 	vmov	r2, s0
 800956c:	460b      	mov	r3, r1
 800956e:	f7f6 fe8d 	bl	800028c <__adddf3>
 8009572:	ec41 0b10 	vmov	d0, r0, r1
 8009576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800957a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800957e:	f04f 33ff 	mov.w	r3, #4294967295
 8009582:	fa23 f707 	lsr.w	r7, r3, r7
 8009586:	4207      	tst	r7, r0
 8009588:	d0f3      	beq.n	8009572 <floor+0x9a>
 800958a:	a311      	add	r3, pc, #68	; (adr r3, 80095d0 <floor+0xf8>)
 800958c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009590:	f7f6 fe7c 	bl	800028c <__adddf3>
 8009594:	2200      	movs	r2, #0
 8009596:	2300      	movs	r3, #0
 8009598:	f7f7 fabe 	bl	8000b18 <__aeabi_dcmpgt>
 800959c:	2800      	cmp	r0, #0
 800959e:	d0bf      	beq.n	8009520 <floor+0x48>
 80095a0:	2c00      	cmp	r4, #0
 80095a2:	da02      	bge.n	80095aa <floor+0xd2>
 80095a4:	2e14      	cmp	r6, #20
 80095a6:	d103      	bne.n	80095b0 <floor+0xd8>
 80095a8:	3401      	adds	r4, #1
 80095aa:	ea25 0507 	bic.w	r5, r5, r7
 80095ae:	e7b7      	b.n	8009520 <floor+0x48>
 80095b0:	2301      	movs	r3, #1
 80095b2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80095b6:	fa03 f606 	lsl.w	r6, r3, r6
 80095ba:	4435      	add	r5, r6
 80095bc:	4545      	cmp	r5, r8
 80095be:	bf38      	it	cc
 80095c0:	18e4      	addcc	r4, r4, r3
 80095c2:	e7f2      	b.n	80095aa <floor+0xd2>
 80095c4:	2500      	movs	r5, #0
 80095c6:	462c      	mov	r4, r5
 80095c8:	e7aa      	b.n	8009520 <floor+0x48>
 80095ca:	bf00      	nop
 80095cc:	f3af 8000 	nop.w
 80095d0:	8800759c 	.word	0x8800759c
 80095d4:	7e37e43c 	.word	0x7e37e43c
 80095d8:	bff00000 	.word	0xbff00000
 80095dc:	000fffff 	.word	0x000fffff

080095e0 <matherr>:
 80095e0:	2000      	movs	r0, #0
 80095e2:	4770      	bx	lr
 80095e4:	0000      	movs	r0, r0
	...

080095e8 <scalbn>:
 80095e8:	b570      	push	{r4, r5, r6, lr}
 80095ea:	ec55 4b10 	vmov	r4, r5, d0
 80095ee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80095f2:	4606      	mov	r6, r0
 80095f4:	462b      	mov	r3, r5
 80095f6:	b9aa      	cbnz	r2, 8009624 <scalbn+0x3c>
 80095f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80095fc:	4323      	orrs	r3, r4
 80095fe:	d03b      	beq.n	8009678 <scalbn+0x90>
 8009600:	4b31      	ldr	r3, [pc, #196]	; (80096c8 <scalbn+0xe0>)
 8009602:	4629      	mov	r1, r5
 8009604:	2200      	movs	r2, #0
 8009606:	ee10 0a10 	vmov	r0, s0
 800960a:	f7f6 fff5 	bl	80005f8 <__aeabi_dmul>
 800960e:	4b2f      	ldr	r3, [pc, #188]	; (80096cc <scalbn+0xe4>)
 8009610:	429e      	cmp	r6, r3
 8009612:	4604      	mov	r4, r0
 8009614:	460d      	mov	r5, r1
 8009616:	da12      	bge.n	800963e <scalbn+0x56>
 8009618:	a327      	add	r3, pc, #156	; (adr r3, 80096b8 <scalbn+0xd0>)
 800961a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961e:	f7f6 ffeb 	bl	80005f8 <__aeabi_dmul>
 8009622:	e009      	b.n	8009638 <scalbn+0x50>
 8009624:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009628:	428a      	cmp	r2, r1
 800962a:	d10c      	bne.n	8009646 <scalbn+0x5e>
 800962c:	ee10 2a10 	vmov	r2, s0
 8009630:	4620      	mov	r0, r4
 8009632:	4629      	mov	r1, r5
 8009634:	f7f6 fe2a 	bl	800028c <__adddf3>
 8009638:	4604      	mov	r4, r0
 800963a:	460d      	mov	r5, r1
 800963c:	e01c      	b.n	8009678 <scalbn+0x90>
 800963e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009642:	460b      	mov	r3, r1
 8009644:	3a36      	subs	r2, #54	; 0x36
 8009646:	4432      	add	r2, r6
 8009648:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800964c:	428a      	cmp	r2, r1
 800964e:	dd0b      	ble.n	8009668 <scalbn+0x80>
 8009650:	ec45 4b11 	vmov	d1, r4, r5
 8009654:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80096c0 <scalbn+0xd8>
 8009658:	f000 f83c 	bl	80096d4 <copysign>
 800965c:	a318      	add	r3, pc, #96	; (adr r3, 80096c0 <scalbn+0xd8>)
 800965e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009662:	ec51 0b10 	vmov	r0, r1, d0
 8009666:	e7da      	b.n	800961e <scalbn+0x36>
 8009668:	2a00      	cmp	r2, #0
 800966a:	dd08      	ble.n	800967e <scalbn+0x96>
 800966c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009670:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009674:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009678:	ec45 4b10 	vmov	d0, r4, r5
 800967c:	bd70      	pop	{r4, r5, r6, pc}
 800967e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009682:	da0d      	bge.n	80096a0 <scalbn+0xb8>
 8009684:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009688:	429e      	cmp	r6, r3
 800968a:	ec45 4b11 	vmov	d1, r4, r5
 800968e:	dce1      	bgt.n	8009654 <scalbn+0x6c>
 8009690:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80096b8 <scalbn+0xd0>
 8009694:	f000 f81e 	bl	80096d4 <copysign>
 8009698:	a307      	add	r3, pc, #28	; (adr r3, 80096b8 <scalbn+0xd0>)
 800969a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969e:	e7e0      	b.n	8009662 <scalbn+0x7a>
 80096a0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80096a4:	3236      	adds	r2, #54	; 0x36
 80096a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80096aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80096ae:	4620      	mov	r0, r4
 80096b0:	4629      	mov	r1, r5
 80096b2:	2200      	movs	r2, #0
 80096b4:	4b06      	ldr	r3, [pc, #24]	; (80096d0 <scalbn+0xe8>)
 80096b6:	e7b2      	b.n	800961e <scalbn+0x36>
 80096b8:	c2f8f359 	.word	0xc2f8f359
 80096bc:	01a56e1f 	.word	0x01a56e1f
 80096c0:	8800759c 	.word	0x8800759c
 80096c4:	7e37e43c 	.word	0x7e37e43c
 80096c8:	43500000 	.word	0x43500000
 80096cc:	ffff3cb0 	.word	0xffff3cb0
 80096d0:	3c900000 	.word	0x3c900000

080096d4 <copysign>:
 80096d4:	ec51 0b10 	vmov	r0, r1, d0
 80096d8:	ee11 0a90 	vmov	r0, s3
 80096dc:	ee10 2a10 	vmov	r2, s0
 80096e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80096e4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80096e8:	ea41 0300 	orr.w	r3, r1, r0
 80096ec:	ec43 2b10 	vmov	d0, r2, r3
 80096f0:	4770      	bx	lr
	...

080096f4 <_init>:
 80096f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096f6:	bf00      	nop
 80096f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096fa:	bc08      	pop	{r3}
 80096fc:	469e      	mov	lr, r3
 80096fe:	4770      	bx	lr

08009700 <_fini>:
 8009700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009702:	bf00      	nop
 8009704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009706:	bc08      	pop	{r3}
 8009708:	469e      	mov	lr, r3
 800970a:	4770      	bx	lr
