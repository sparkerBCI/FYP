
CandC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  08006130  08006130  00016130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064a0  080064a0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080064a0  080064a0  000164a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064a8  080064a8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064a8  080064a8  000164a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064ac  080064ac  000164ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080064b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  200001e0  08006690  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  08006690  000203a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000096e5  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a55  00000000  00000000  000298f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007b0  00000000  00000000  0002b350  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006d8  00000000  00000000  0002bb00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002121c  00000000  00000000  0002c1d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006fe9  00000000  00000000  0004d3f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c3688  00000000  00000000  000543dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00117a65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002880  00000000  00000000  00117ae0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006114 	.word	0x08006114

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08006114 	.word	0x08006114

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b972 	b.w	8000e94 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9e08      	ldr	r6, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	4688      	mov	r8, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d14b      	bne.n	8000c6e <__udivmoddi4+0xa6>
 8000bd6:	428a      	cmp	r2, r1
 8000bd8:	4615      	mov	r5, r2
 8000bda:	d967      	bls.n	8000cac <__udivmoddi4+0xe4>
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	b14a      	cbz	r2, 8000bf6 <__udivmoddi4+0x2e>
 8000be2:	f1c2 0720 	rsb	r7, r2, #32
 8000be6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bea:	fa20 f707 	lsr.w	r7, r0, r7
 8000bee:	4095      	lsls	r5, r2
 8000bf0:	ea47 0803 	orr.w	r8, r7, r3
 8000bf4:	4094      	lsls	r4, r2
 8000bf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bfa:	0c23      	lsrs	r3, r4, #16
 8000bfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c00:	fa1f fc85 	uxth.w	ip, r5
 8000c04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c10:	4299      	cmp	r1, r3
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x60>
 8000c14:	18eb      	adds	r3, r5, r3
 8000c16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c1a:	f080 811b 	bcs.w	8000e54 <__udivmoddi4+0x28c>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 8118 	bls.w	8000e54 <__udivmoddi4+0x28c>
 8000c24:	3f02      	subs	r7, #2
 8000c26:	442b      	add	r3, r5
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c3c:	45a4      	cmp	ip, r4
 8000c3e:	d909      	bls.n	8000c54 <__udivmoddi4+0x8c>
 8000c40:	192c      	adds	r4, r5, r4
 8000c42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c46:	f080 8107 	bcs.w	8000e58 <__udivmoddi4+0x290>
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	f240 8104 	bls.w	8000e58 <__udivmoddi4+0x290>
 8000c50:	3802      	subs	r0, #2
 8000c52:	442c      	add	r4, r5
 8000c54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c58:	eba4 040c 	sub.w	r4, r4, ip
 8000c5c:	2700      	movs	r7, #0
 8000c5e:	b11e      	cbz	r6, 8000c68 <__udivmoddi4+0xa0>
 8000c60:	40d4      	lsrs	r4, r2
 8000c62:	2300      	movs	r3, #0
 8000c64:	e9c6 4300 	strd	r4, r3, [r6]
 8000c68:	4639      	mov	r1, r7
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0xbe>
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	f000 80eb 	beq.w	8000e4e <__udivmoddi4+0x286>
 8000c78:	2700      	movs	r7, #0
 8000c7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c7e:	4638      	mov	r0, r7
 8000c80:	4639      	mov	r1, r7
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	fab3 f783 	clz	r7, r3
 8000c8a:	2f00      	cmp	r7, #0
 8000c8c:	d147      	bne.n	8000d1e <__udivmoddi4+0x156>
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d302      	bcc.n	8000c98 <__udivmoddi4+0xd0>
 8000c92:	4282      	cmp	r2, r0
 8000c94:	f200 80fa 	bhi.w	8000e8c <__udivmoddi4+0x2c4>
 8000c98:	1a84      	subs	r4, r0, r2
 8000c9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	4698      	mov	r8, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d0e0      	beq.n	8000c68 <__udivmoddi4+0xa0>
 8000ca6:	e9c6 4800 	strd	r4, r8, [r6]
 8000caa:	e7dd      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000cac:	b902      	cbnz	r2, 8000cb0 <__udivmoddi4+0xe8>
 8000cae:	deff      	udf	#255	; 0xff
 8000cb0:	fab2 f282 	clz	r2, r2
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f040 808f 	bne.w	8000dd8 <__udivmoddi4+0x210>
 8000cba:	1b49      	subs	r1, r1, r5
 8000cbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc0:	fa1f f885 	uxth.w	r8, r5
 8000cc4:	2701      	movs	r7, #1
 8000cc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cd8:	4299      	cmp	r1, r3
 8000cda:	d907      	bls.n	8000cec <__udivmoddi4+0x124>
 8000cdc:	18eb      	adds	r3, r5, r3
 8000cde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x122>
 8000ce4:	4299      	cmp	r1, r3
 8000ce6:	f200 80cd 	bhi.w	8000e84 <__udivmoddi4+0x2bc>
 8000cea:	4684      	mov	ip, r0
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	b2a3      	uxth	r3, r4
 8000cf0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cf8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cfc:	fb08 f800 	mul.w	r8, r8, r0
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x14c>
 8000d04:	192c      	adds	r4, r5, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x14a>
 8000d0c:	45a0      	cmp	r8, r4
 8000d0e:	f200 80b6 	bhi.w	8000e7e <__udivmoddi4+0x2b6>
 8000d12:	4618      	mov	r0, r3
 8000d14:	eba4 0408 	sub.w	r4, r4, r8
 8000d18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d1c:	e79f      	b.n	8000c5e <__udivmoddi4+0x96>
 8000d1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d22:	40bb      	lsls	r3, r7
 8000d24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d3c:	4325      	orrs	r5, r4
 8000d3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d42:	0c2c      	lsrs	r4, r5, #16
 8000d44:	fb08 3319 	mls	r3, r8, r9, r3
 8000d48:	fa1f fa8e 	uxth.w	sl, lr
 8000d4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d50:	fb09 f40a 	mul.w	r4, r9, sl
 8000d54:	429c      	cmp	r4, r3
 8000d56:	fa02 f207 	lsl.w	r2, r2, r7
 8000d5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b0>
 8000d60:	eb1e 0303 	adds.w	r3, lr, r3
 8000d64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d68:	f080 8087 	bcs.w	8000e7a <__udivmoddi4+0x2b2>
 8000d6c:	429c      	cmp	r4, r3
 8000d6e:	f240 8084 	bls.w	8000e7a <__udivmoddi4+0x2b2>
 8000d72:	f1a9 0902 	sub.w	r9, r9, #2
 8000d76:	4473      	add	r3, lr
 8000d78:	1b1b      	subs	r3, r3, r4
 8000d7a:	b2ad      	uxth	r5, r5
 8000d7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d80:	fb08 3310 	mls	r3, r8, r0, r3
 8000d84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d8c:	45a2      	cmp	sl, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1da>
 8000d90:	eb1e 0404 	adds.w	r4, lr, r4
 8000d94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d98:	d26b      	bcs.n	8000e72 <__udivmoddi4+0x2aa>
 8000d9a:	45a2      	cmp	sl, r4
 8000d9c:	d969      	bls.n	8000e72 <__udivmoddi4+0x2aa>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4474      	add	r4, lr
 8000da2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000da6:	fba0 8902 	umull	r8, r9, r0, r2
 8000daa:	eba4 040a 	sub.w	r4, r4, sl
 8000dae:	454c      	cmp	r4, r9
 8000db0:	46c2      	mov	sl, r8
 8000db2:	464b      	mov	r3, r9
 8000db4:	d354      	bcc.n	8000e60 <__udivmoddi4+0x298>
 8000db6:	d051      	beq.n	8000e5c <__udivmoddi4+0x294>
 8000db8:	2e00      	cmp	r6, #0
 8000dba:	d069      	beq.n	8000e90 <__udivmoddi4+0x2c8>
 8000dbc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dc0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dc4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dc8:	40fd      	lsrs	r5, r7
 8000dca:	40fc      	lsrs	r4, r7
 8000dcc:	ea4c 0505 	orr.w	r5, ip, r5
 8000dd0:	e9c6 5400 	strd	r5, r4, [r6]
 8000dd4:	2700      	movs	r7, #0
 8000dd6:	e747      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000dd8:	f1c2 0320 	rsb	r3, r2, #32
 8000ddc:	fa20 f703 	lsr.w	r7, r0, r3
 8000de0:	4095      	lsls	r5, r2
 8000de2:	fa01 f002 	lsl.w	r0, r1, r2
 8000de6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dee:	4338      	orrs	r0, r7
 8000df0:	0c01      	lsrs	r1, r0, #16
 8000df2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000df6:	fa1f f885 	uxth.w	r8, r5
 8000dfa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e02:	fb07 f308 	mul.w	r3, r7, r8
 8000e06:	428b      	cmp	r3, r1
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d907      	bls.n	8000e1e <__udivmoddi4+0x256>
 8000e0e:	1869      	adds	r1, r5, r1
 8000e10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e14:	d22f      	bcs.n	8000e76 <__udivmoddi4+0x2ae>
 8000e16:	428b      	cmp	r3, r1
 8000e18:	d92d      	bls.n	8000e76 <__udivmoddi4+0x2ae>
 8000e1a:	3f02      	subs	r7, #2
 8000e1c:	4429      	add	r1, r5
 8000e1e:	1acb      	subs	r3, r1, r3
 8000e20:	b281      	uxth	r1, r0
 8000e22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e2e:	fb00 f308 	mul.w	r3, r0, r8
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d907      	bls.n	8000e46 <__udivmoddi4+0x27e>
 8000e36:	1869      	adds	r1, r5, r1
 8000e38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e3c:	d217      	bcs.n	8000e6e <__udivmoddi4+0x2a6>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d915      	bls.n	8000e6e <__udivmoddi4+0x2a6>
 8000e42:	3802      	subs	r0, #2
 8000e44:	4429      	add	r1, r5
 8000e46:	1ac9      	subs	r1, r1, r3
 8000e48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e4c:	e73b      	b.n	8000cc6 <__udivmoddi4+0xfe>
 8000e4e:	4637      	mov	r7, r6
 8000e50:	4630      	mov	r0, r6
 8000e52:	e709      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000e54:	4607      	mov	r7, r0
 8000e56:	e6e7      	b.n	8000c28 <__udivmoddi4+0x60>
 8000e58:	4618      	mov	r0, r3
 8000e5a:	e6fb      	b.n	8000c54 <__udivmoddi4+0x8c>
 8000e5c:	4541      	cmp	r1, r8
 8000e5e:	d2ab      	bcs.n	8000db8 <__udivmoddi4+0x1f0>
 8000e60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e64:	eb69 020e 	sbc.w	r2, r9, lr
 8000e68:	3801      	subs	r0, #1
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	e7a4      	b.n	8000db8 <__udivmoddi4+0x1f0>
 8000e6e:	4660      	mov	r0, ip
 8000e70:	e7e9      	b.n	8000e46 <__udivmoddi4+0x27e>
 8000e72:	4618      	mov	r0, r3
 8000e74:	e795      	b.n	8000da2 <__udivmoddi4+0x1da>
 8000e76:	4667      	mov	r7, ip
 8000e78:	e7d1      	b.n	8000e1e <__udivmoddi4+0x256>
 8000e7a:	4681      	mov	r9, r0
 8000e7c:	e77c      	b.n	8000d78 <__udivmoddi4+0x1b0>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	442c      	add	r4, r5
 8000e82:	e747      	b.n	8000d14 <__udivmoddi4+0x14c>
 8000e84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e88:	442b      	add	r3, r5
 8000e8a:	e72f      	b.n	8000cec <__udivmoddi4+0x124>
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	e708      	b.n	8000ca2 <__udivmoddi4+0xda>
 8000e90:	4637      	mov	r7, r6
 8000e92:	e6e9      	b.n	8000c68 <__udivmoddi4+0xa0>

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <bit_reverse>:
	return j;
}



int bit_reverse(int N, int l) {
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
	int ans = 0, i;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
	for (i = 0; i<l; ++i)
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	e014      	b.n	8000ed6 <bit_reverse+0x3e>
		if (N & (1 << i))    ans |= (1 << l - 1 - i);
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	fa42 f303 	asr.w	r3, r2, r3
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d009      	beq.n	8000ed0 <bit_reverse+0x38>
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	1e5a      	subs	r2, r3, #1
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	60fb      	str	r3, [r7, #12]
	for (i = 0; i<l; ++i)
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	dbe6      	blt.n	8000eac <bit_reverse+0x14>
	return(ans);
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	0000      	movs	r0, r0
	...

08000ef0 <FFTcore>:


void FFTcore(int Nr, int Nc, double* Ar, int Ldr, double* Ai, int Ldi, char tran, char flag) {
 8000ef0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ef4:	b0a8      	sub	sp, #160	; 0xa0
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	60f8      	str	r0, [r7, #12]
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
 8000efe:	603b      	str	r3, [r7, #0]

	int N, M, d, K = 0, k = 0, l = 1, L = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000f06:	2300      	movs	r3, #0
 8000f08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000f12:	2300      	movs	r3, #0
 8000f14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	double Wr, Wi, C1r, C1i, C2r, C2i, Dr, Di;

	if (tran == 't') {
 8000f18:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 8000f1c:	2b74      	cmp	r3, #116	; 0x74
 8000f1e:	d10a      	bne.n	8000f36 <FFTcore+0x46>
		d = N = Nc;
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000f26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000f2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		M = Nr;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000f34:	e011      	b.n	8000f5a <FFTcore+0x6a>
	}
	else if (tran == 'n') {
 8000f36:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 8000f3a:	2b6e      	cmp	r3, #110	; 0x6e
 8000f3c:	d10a      	bne.n	8000f54 <FFTcore+0x64>
		d = N = Nr;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000f44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000f48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		M = Nc;
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000f52:	e002      	b.n	8000f5a <FFTcore+0x6a>
	}
	else {
		//("tran can be either 'n' or 't'\n");
		exit(1);
 8000f54:	2001      	movs	r0, #1
 8000f56:	f003 fa03 	bl	8004360 <exit>
	}

	do
	{
		d /= 2;
 8000f5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000f5e:	0fda      	lsrs	r2, r3, #31
 8000f60:	4413      	add	r3, r2
 8000f62:	105b      	asrs	r3, r3, #1
 8000f64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		K = 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		while (K<N) {
 8000f6e:	e1cc      	b.n	800130a <FFTcore+0x41a>
			k = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			while (k<d) {
 8000f76:	e1b9      	b.n	80012ec <FFTcore+0x3fc>
				int it, Ind1 = K + k, Ind2 = K + k + d;
 8000f78:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000f7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000f80:	4413      	add	r3, r2
 8000f82:	667b      	str	r3, [r7, #100]	; 0x64
 8000f84:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000f88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000f8c:	4413      	add	r3, r2
 8000f8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000f92:	4413      	add	r3, r2
 8000f94:	663b      	str	r3, [r7, #96]	; 0x60
				Wr = cos(2 * M_PI*k*l / N);
 8000f96:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000f9a:	f7ff fabb 	bl	8000514 <__aeabi_i2d>
 8000f9e:	f20f 5318 	addw	r3, pc, #1304	; 0x518
 8000fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa6:	f7ff fb1f 	bl	80005e8 <__aeabi_dmul>
 8000faa:	4602      	mov	r2, r0
 8000fac:	460b      	mov	r3, r1
 8000fae:	4690      	mov	r8, r2
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8000fb6:	f7ff faad 	bl	8000514 <__aeabi_i2d>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	4640      	mov	r0, r8
 8000fc0:	4649      	mov	r1, r9
 8000fc2:	f7ff fb11 	bl	80005e8 <__aeabi_dmul>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	4690      	mov	r8, r2
 8000fcc:	4699      	mov	r9, r3
 8000fce:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8000fd2:	f7ff fa9f 	bl	8000514 <__aeabi_i2d>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4640      	mov	r0, r8
 8000fdc:	4649      	mov	r1, r9
 8000fde:	f7ff fc2d 	bl	800083c <__aeabi_ddiv>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	ec43 2b17 	vmov	d7, r2, r3
 8000fea:	eeb0 0a47 	vmov.f32	s0, s14
 8000fee:	eef0 0a67 	vmov.f32	s1, s15
 8000ff2:	f003 ff29 	bl	8004e48 <cos>
 8000ff6:	ed87 0b16 	vstr	d0, [r7, #88]	; 0x58
				Wi = (flag == 'f') ? -sin(2 * M_PI*k*l / N) : sin(2 * M_PI*k*l / N);
 8000ffa:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 8000ffe:	2b66      	cmp	r3, #102	; 0x66
 8001000:	d135      	bne.n	800106e <FFTcore+0x17e>
 8001002:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001006:	f7ff fa85 	bl	8000514 <__aeabi_i2d>
 800100a:	f20f 43ac 	addw	r3, pc, #1196	; 0x4ac
 800100e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001012:	f7ff fae9 	bl	80005e8 <__aeabi_dmul>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	4690      	mov	r8, r2
 800101c:	4699      	mov	r9, r3
 800101e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001022:	f7ff fa77 	bl	8000514 <__aeabi_i2d>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	4640      	mov	r0, r8
 800102c:	4649      	mov	r1, r9
 800102e:	f7ff fadb 	bl	80005e8 <__aeabi_dmul>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	4690      	mov	r8, r2
 8001038:	4699      	mov	r9, r3
 800103a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800103e:	f7ff fa69 	bl	8000514 <__aeabi_i2d>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	4640      	mov	r0, r8
 8001048:	4649      	mov	r1, r9
 800104a:	f7ff fbf7 	bl	800083c <__aeabi_ddiv>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	ec43 2b17 	vmov	d7, r2, r3
 8001056:	eeb0 0a47 	vmov.f32	s0, s14
 800105a:	eef0 0a67 	vmov.f32	s1, s15
 800105e:	f003 ff37 	bl	8004ed0 <sin>
 8001062:	ec53 2b10 	vmov	r2, r3, d0
 8001066:	4614      	mov	r4, r2
 8001068:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800106c:	e031      	b.n	80010d2 <FFTcore+0x1e2>
 800106e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001072:	f7ff fa4f 	bl	8000514 <__aeabi_i2d>
 8001076:	f20f 4340 	addw	r3, pc, #1088	; 0x440
 800107a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107e:	f7ff fab3 	bl	80005e8 <__aeabi_dmul>
 8001082:	4603      	mov	r3, r0
 8001084:	460c      	mov	r4, r1
 8001086:	4625      	mov	r5, r4
 8001088:	461c      	mov	r4, r3
 800108a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800108e:	f7ff fa41 	bl	8000514 <__aeabi_i2d>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4620      	mov	r0, r4
 8001098:	4629      	mov	r1, r5
 800109a:	f7ff faa5 	bl	80005e8 <__aeabi_dmul>
 800109e:	4603      	mov	r3, r0
 80010a0:	460c      	mov	r4, r1
 80010a2:	4625      	mov	r5, r4
 80010a4:	461c      	mov	r4, r3
 80010a6:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80010aa:	f7ff fa33 	bl	8000514 <__aeabi_i2d>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	4620      	mov	r0, r4
 80010b4:	4629      	mov	r1, r5
 80010b6:	f7ff fbc1 	bl	800083c <__aeabi_ddiv>
 80010ba:	4603      	mov	r3, r0
 80010bc:	460c      	mov	r4, r1
 80010be:	ec44 3b17 	vmov	d7, r3, r4
 80010c2:	eeb0 0a47 	vmov.f32	s0, s14
 80010c6:	eef0 0a67 	vmov.f32	s1, s15
 80010ca:	f003 ff01 	bl	8004ed0 <sin>
 80010ce:	ec55 4b10 	vmov	r4, r5, d0
 80010d2:	e9c7 4514 	strd	r4, r5, [r7, #80]	; 0x50

				for (it = 0; it<M; ++it) {
 80010d6:	2300      	movs	r3, #0
 80010d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80010dc:	e0fa      	b.n	80012d4 <FFTcore+0x3e4>
					int rind1 = (tran == 't') ? Ind1 * Ldr + it : Ind1 + Ldr * it;
 80010de:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 80010e2:	2b74      	cmp	r3, #116	; 0x74
 80010e4:	d107      	bne.n	80010f6 <FFTcore+0x206>
 80010e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010e8:	683a      	ldr	r2, [r7, #0]
 80010ea:	fb02 f203 	mul.w	r2, r2, r3
 80010ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80010f2:	4413      	add	r3, r2
 80010f4:	e006      	b.n	8001104 <FFTcore+0x214>
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80010fc:	fb02 f203 	mul.w	r2, r2, r3
 8001100:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001102:	4413      	add	r3, r2
 8001104:	64fb      	str	r3, [r7, #76]	; 0x4c
					int iind1 = (tran == 't') ? Ind1 * Ldi + it : Ind1 + Ldi * it;
 8001106:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 800110a:	2b74      	cmp	r3, #116	; 0x74
 800110c:	d108      	bne.n	8001120 <FFTcore+0x230>
 800110e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001110:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001114:	fb02 f203 	mul.w	r2, r2, r3
 8001118:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800111c:	4413      	add	r3, r2
 800111e:	e007      	b.n	8001130 <FFTcore+0x240>
 8001120:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001124:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001128:	fb02 f203 	mul.w	r2, r2, r3
 800112c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800112e:	4413      	add	r3, r2
 8001130:	64bb      	str	r3, [r7, #72]	; 0x48
					int rind2 = (tran == 't') ? Ind2 * Ldr + it : Ind2 + Ldr * it;
 8001132:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 8001136:	2b74      	cmp	r3, #116	; 0x74
 8001138:	d107      	bne.n	800114a <FFTcore+0x25a>
 800113a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800113c:	683a      	ldr	r2, [r7, #0]
 800113e:	fb02 f203 	mul.w	r2, r2, r3
 8001142:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001146:	4413      	add	r3, r2
 8001148:	e006      	b.n	8001158 <FFTcore+0x268>
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001150:	fb02 f203 	mul.w	r2, r2, r3
 8001154:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001156:	4413      	add	r3, r2
 8001158:	647b      	str	r3, [r7, #68]	; 0x44
					int iind2 = (tran == 't') ? Ind2 * Ldi + it : Ind2 + Ldi * it;
 800115a:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 800115e:	2b74      	cmp	r3, #116	; 0x74
 8001160:	d108      	bne.n	8001174 <FFTcore+0x284>
 8001162:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001164:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001168:	fb02 f203 	mul.w	r2, r2, r3
 800116c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001170:	4413      	add	r3, r2
 8001172:	e007      	b.n	8001184 <FFTcore+0x294>
 8001174:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001178:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800117c:	fb02 f203 	mul.w	r2, r2, r3
 8001180:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001182:	4413      	add	r3, r2
 8001184:	643b      	str	r3, [r7, #64]	; 0x40

					C1r = Ar[rind1] + Ar[rind2];
 8001186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119e:	f7ff f86d 	bl	800027c <__adddf3>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
					C1i = Ai[iind1] + Ai[iind2];
 80011aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80011b2:	4413      	add	r3, r2
 80011b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80011c0:	4413      	add	r3, r2
 80011c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c6:	f7ff f859 	bl	800027c <__adddf3>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
					Dr = Ar[rind1] - Ar[rind2];
 80011d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	4413      	add	r3, r2
 80011da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ea:	f7ff f845 	bl	8000278 <__aeabi_dsub>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
					Di = Ai[iind1] - Ai[iind2];
 80011f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80011fe:	4413      	add	r3, r2
 8001200:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800120c:	4413      	add	r3, r2
 800120e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001212:	f7ff f831 	bl	8000278 <__aeabi_dsub>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	e9c7 2308 	strd	r2, r3, [r7, #32]
					C2r = Dr * Wr - Di * Wi;
 800121e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001222:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001226:	f7ff f9df 	bl	80005e8 <__aeabi_dmul>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	4690      	mov	r8, r2
 8001230:	4699      	mov	r9, r3
 8001232:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001236:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800123a:	f7ff f9d5 	bl	80005e8 <__aeabi_dmul>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	4640      	mov	r0, r8
 8001244:	4649      	mov	r1, r9
 8001246:	f7ff f817 	bl	8000278 <__aeabi_dsub>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	e9c7 2306 	strd	r2, r3, [r7, #24]
					C2i = Dr * Wi + Di * Wr;
 8001252:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001256:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800125a:	f7ff f9c5 	bl	80005e8 <__aeabi_dmul>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	4690      	mov	r8, r2
 8001264:	4699      	mov	r9, r3
 8001266:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800126a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800126e:	f7ff f9bb 	bl	80005e8 <__aeabi_dmul>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4640      	mov	r0, r8
 8001278:	4649      	mov	r1, r9
 800127a:	f7fe ffff 	bl	800027c <__adddf3>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	e9c7 2304 	strd	r2, r3, [r7, #16]
					Ar[rind1] = C1r;
 8001286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	18d1      	adds	r1, r2, r3
 800128e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001292:	e9c1 2300 	strd	r2, r3, [r1]
					Ai[iind1] = C1i;
 8001296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800129e:	18d1      	adds	r1, r2, r3
 80012a0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80012a4:	e9c1 2300 	strd	r2, r3, [r1]
					Ar[rind2] = C2r;
 80012a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	18d1      	adds	r1, r2, r3
 80012b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012b4:	e9c1 2300 	strd	r2, r3, [r1]
					Ai[iind2] = C2i;
 80012b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80012c0:	18d1      	adds	r1, r2, r3
 80012c2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012c6:	e9c1 2300 	strd	r2, r3, [r1]
				for (it = 0; it<M; ++it) {
 80012ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80012ce:	3301      	adds	r3, #1
 80012d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80012d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80012d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80012dc:	429a      	cmp	r2, r3
 80012de:	f6ff aefe 	blt.w	80010de <FFTcore+0x1ee>
				}
				++k;
 80012e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012e6:	3301      	adds	r3, #1
 80012e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			while (k<d) {
 80012ec:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80012f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80012f4:	429a      	cmp	r2, r3
 80012f6:	f6ff ae3f 	blt.w	8000f78 <FFTcore+0x88>
			}
			K += 2 * d;
 80012fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001304:	4413      	add	r3, r2
 8001306:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		while (K<N) {
 800130a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800130e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001312:	429a      	cmp	r2, r3
 8001314:	f6ff ae2c 	blt.w	8000f70 <FFTcore+0x80>
		}
		l *= 2;
 8001318:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		++L;
 8001322:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001326:	3301      	adds	r3, #1
 8001328:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	} while (d>1);
 800132c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001330:	2b01      	cmp	r3, #1
 8001332:	f73f ae12 	bgt.w	8000f5a <FFTcore+0x6a>

	for (d = 0; d<N; ++d) {
 8001336:	2300      	movs	r3, #0
 8001338:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800133c:	e0af      	b.n	800149e <FFTcore+0x5ae>
		k = bit_reverse(d, L);
 800133e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8001342:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8001346:	f7ff fda7 	bl	8000e98 <bit_reverse>
 800134a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		if (d < k) {
 800134e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001352:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001356:	429a      	cmp	r2, r3
 8001358:	f280 809c 	bge.w	8001494 <FFTcore+0x5a4>
			int it;
			for (it = 0; it<M; ++it) {
 800135c:	2300      	movs	r3, #0
 800135e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001360:	e092      	b.n	8001488 <FFTcore+0x598>
				int ind1 = (tran == 't') ? d * Ldr + it : d + Ldr * it;
 8001362:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 8001366:	2b74      	cmp	r3, #116	; 0x74
 8001368:	d107      	bne.n	800137a <FFTcore+0x48a>
 800136a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800136e:	683a      	ldr	r2, [r7, #0]
 8001370:	fb02 f203 	mul.w	r2, r2, r3
 8001374:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001376:	4413      	add	r3, r2
 8001378:	e006      	b.n	8001388 <FFTcore+0x498>
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800137e:	fb02 f203 	mul.w	r2, r2, r3
 8001382:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001386:	4413      	add	r3, r2
 8001388:	67bb      	str	r3, [r7, #120]	; 0x78
				int ind2 = (tran == 't') ? k * Ldr + it : k + Ldr * it;
 800138a:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 800138e:	2b74      	cmp	r3, #116	; 0x74
 8001390:	d107      	bne.n	80013a2 <FFTcore+0x4b2>
 8001392:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	fb02 f203 	mul.w	r2, r2, r3
 800139c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800139e:	4413      	add	r3, r2
 80013a0:	e006      	b.n	80013b0 <FFTcore+0x4c0>
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80013a6:	fb02 f203 	mul.w	r2, r2, r3
 80013aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80013ae:	4413      	add	r3, r2
 80013b0:	677b      	str	r3, [r7, #116]	; 0x74
				double temp = Ar[ind1];
 80013b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 80013be:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
				Ar[ind1] = Ar[ind2];
 80013c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80013cc:	00d2      	lsls	r2, r2, #3
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	440a      	add	r2, r1
 80013d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80013d6:	e9c2 3400 	strd	r3, r4, [r2]
				Ar[ind2] = temp;
 80013da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	441a      	add	r2, r3
 80013e2:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80013e6:	e9c2 3400 	strd	r3, r4, [r2]

				ind1 = (tran == 't') ? d * Ldi + it : d + Ldi * it;
 80013ea:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 80013ee:	2b74      	cmp	r3, #116	; 0x74
 80013f0:	d108      	bne.n	8001404 <FFTcore+0x514>
 80013f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80013f6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80013fa:	fb02 f203 	mul.w	r2, r2, r3
 80013fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001400:	4413      	add	r3, r2
 8001402:	e007      	b.n	8001414 <FFTcore+0x524>
 8001404:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001408:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800140a:	fb02 f203 	mul.w	r2, r2, r3
 800140e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001412:	4413      	add	r3, r2
 8001414:	67bb      	str	r3, [r7, #120]	; 0x78
				ind2 = (tran == 't') ? k * Ldi + it : k + Ldi * it;
 8001416:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 800141a:	2b74      	cmp	r3, #116	; 0x74
 800141c:	d108      	bne.n	8001430 <FFTcore+0x540>
 800141e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001422:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001426:	fb02 f203 	mul.w	r2, r2, r3
 800142a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800142c:	4413      	add	r3, r2
 800142e:	e007      	b.n	8001440 <FFTcore+0x550>
 8001430:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001434:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001436:	fb02 f203 	mul.w	r2, r2, r3
 800143a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800143e:	4413      	add	r3, r2
 8001440:	677b      	str	r3, [r7, #116]	; 0x74
				temp = Ai[ind1];
 8001442:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800144a:	4413      	add	r3, r2
 800144c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001450:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
				Ai[ind1] = Ai[ind2];
 8001454:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800145c:	4413      	add	r3, r2
 800145e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001460:	00d2      	lsls	r2, r2, #3
 8001462:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001466:	440a      	add	r2, r1
 8001468:	e9d3 3400 	ldrd	r3, r4, [r3]
 800146c:	e9c2 3400 	strd	r3, r4, [r2]
				Ai[ind2] = temp;
 8001470:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001478:	441a      	add	r2, r3
 800147a:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800147e:	e9c2 3400 	strd	r3, r4, [r2]
			for (it = 0; it<M; ++it) {
 8001482:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001484:	3301      	adds	r3, #1
 8001486:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001488:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800148a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800148e:	429a      	cmp	r2, r3
 8001490:	f6ff af67 	blt.w	8001362 <FFTcore+0x472>
	for (d = 0; d<N; ++d) {
 8001494:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001498:	3301      	adds	r3, #1
 800149a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800149e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80014a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80014a6:	429a      	cmp	r2, r3
 80014a8:	f6ff af49 	blt.w	800133e <FFTcore+0x44e>
			}
		}
	}
}
 80014ac:	bf00      	nop
 80014ae:	37a0      	adds	r7, #160	; 0xa0
 80014b0:	46bd      	mov	sp, r7
 80014b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014b6:	bf00      	nop
 80014b8:	54442d18 	.word	0x54442d18
 80014bc:	401921fb 	.word	0x401921fb

080014c0 <DCT2>:

void DCT2(int N, double* x) {
 80014c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014c4:	b092      	sub	sp, #72	; 0x48
 80014c6:	af04      	add	r7, sp, #16
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	6039      	str	r1, [r7, #0]
	double* Ar = (double*)malloc(4 * N * sizeof(double));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	015b      	lsls	r3, r3, #5
 80014d0:	4618      	mov	r0, r3
 80014d2:	f002 ff7d 	bl	80043d0 <malloc>
 80014d6:	4603      	mov	r3, r0
 80014d8:	633b      	str	r3, [r7, #48]	; 0x30
	//assert(Ar != NULL);
	double* Ai = Ar + 2 * N;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	011b      	lsls	r3, r3, #4
 80014de:	461a      	mov	r2, r3
 80014e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014e2:	4413      	add	r3, r2
 80014e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	memset(Ar, 0, 4 * N * sizeof(double));
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	015b      	lsls	r3, r3, #5
 80014ea:	461a      	mov	r2, r3
 80014ec:	2100      	movs	r1, #0
 80014ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80014f0:	f002 ff89 	bl	8004406 <memset>
	int n;
	for (n = 0; n<N; ++n) Ar[n] = x[n];
 80014f4:	2300      	movs	r3, #0
 80014f6:	637b      	str	r3, [r7, #52]	; 0x34
 80014f8:	e00e      	b.n	8001518 <DCT2+0x58>
 80014fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	4413      	add	r3, r2
 8001502:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001504:	00d2      	lsls	r2, r2, #3
 8001506:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001508:	440a      	add	r2, r1
 800150a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800150e:	e9c2 3400 	strd	r3, r4, [r2]
 8001512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001514:	3301      	adds	r3, #1
 8001516:	637b      	str	r3, [r7, #52]	; 0x34
 8001518:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	429a      	cmp	r2, r3
 800151e:	dbec      	blt.n	80014fa <DCT2+0x3a>
	for (n = N; n<2 * N; ++n) Ar[n] = x[2 * N - 1 - n];
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	637b      	str	r3, [r7, #52]	; 0x34
 8001524:	e012      	b.n	800154c <DCT2+0x8c>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	1e5a      	subs	r2, r3, #1
 800152c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	4413      	add	r3, r2
 8001536:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001538:	00d2      	lsls	r2, r2, #3
 800153a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800153c:	440a      	add	r2, r1
 800153e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001542:	e9c2 3400 	strd	r3, r4, [r2]
 8001546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001548:	3301      	adds	r3, #1
 800154a:	637b      	str	r3, [r7, #52]	; 0x34
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001552:	429a      	cmp	r2, r3
 8001554:	dbe7      	blt.n	8001526 <DCT2+0x66>
	FFTcore(2 * N, 1, Ar, 2 * n, Ai, 2 * n, 'n', 'f');
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	0058      	lsls	r0, r3, #1
 800155a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800155c:	0059      	lsls	r1, r3, #1
 800155e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	2266      	movs	r2, #102	; 0x66
 8001564:	9203      	str	r2, [sp, #12]
 8001566:	226e      	movs	r2, #110	; 0x6e
 8001568:	9202      	str	r2, [sp, #8]
 800156a:	9301      	str	r3, [sp, #4]
 800156c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	460b      	mov	r3, r1
 8001572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001574:	2101      	movs	r1, #1
 8001576:	f7ff fcbb 	bl	8000ef0 <FFTcore>
	double g = M_PI / (2 * N), p = sqrt(2.0 / N), po = sqrt(1.0 / N);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	4618      	mov	r0, r3
 8001580:	f7fe ffc8 	bl	8000514 <__aeabi_i2d>
 8001584:	4603      	mov	r3, r0
 8001586:	460c      	mov	r4, r1
 8001588:	461a      	mov	r2, r3
 800158a:	4623      	mov	r3, r4
 800158c:	a161      	add	r1, pc, #388	; (adr r1, 8001714 <DCT2+0x254>)
 800158e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001592:	f7ff f953 	bl	800083c <__aeabi_ddiv>
 8001596:	4603      	mov	r3, r0
 8001598:	460c      	mov	r4, r1
 800159a:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7fe ffb8 	bl	8000514 <__aeabi_i2d>
 80015a4:	4603      	mov	r3, r0
 80015a6:	460c      	mov	r4, r1
 80015a8:	461a      	mov	r2, r3
 80015aa:	4623      	mov	r3, r4
 80015ac:	f04f 0000 	mov.w	r0, #0
 80015b0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80015b4:	f7ff f942 	bl	800083c <__aeabi_ddiv>
 80015b8:	4603      	mov	r3, r0
 80015ba:	460c      	mov	r4, r1
 80015bc:	ec44 3b17 	vmov	d7, r3, r4
 80015c0:	eeb0 0a47 	vmov.f32	s0, s14
 80015c4:	eef0 0a67 	vmov.f32	s1, s15
 80015c8:	f003 fcca 	bl	8004f60 <sqrt>
 80015cc:	ed87 0b06 	vstr	d0, [r7, #24]
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7fe ff9f 	bl	8000514 <__aeabi_i2d>
 80015d6:	4603      	mov	r3, r0
 80015d8:	460c      	mov	r4, r1
 80015da:	461a      	mov	r2, r3
 80015dc:	4623      	mov	r3, r4
 80015de:	f04f 0000 	mov.w	r0, #0
 80015e2:	494b      	ldr	r1, [pc, #300]	; (8001710 <DCT2+0x250>)
 80015e4:	f7ff f92a 	bl	800083c <__aeabi_ddiv>
 80015e8:	4603      	mov	r3, r0
 80015ea:	460c      	mov	r4, r1
 80015ec:	ec44 3b17 	vmov	d7, r3, r4
 80015f0:	eeb0 0a47 	vmov.f32	s0, s14
 80015f4:	eef0 0a67 	vmov.f32	s1, s15
 80015f8:	f003 fcb2 	bl	8004f60 <sqrt>
 80015fc:	ed87 0b04 	vstr	d0, [r7, #16]
	for (n = 0; n<N; ++n) {
 8001600:	2300      	movs	r3, #0
 8001602:	637b      	str	r3, [r7, #52]	; 0x34
 8001604:	e076      	b.n	80016f4 <DCT2+0x234>
		double z = (Ar[n] * cos(n*g) + Ai[n] * sin(n*g)) / 2;
 8001606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800160c:	4413      	add	r3, r2
 800160e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001612:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001614:	f7fe ff7e 	bl	8000514 <__aeabi_i2d>
 8001618:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800161c:	f7fe ffe4 	bl	80005e8 <__aeabi_dmul>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	ec43 2b17 	vmov	d7, r2, r3
 8001628:	eeb0 0a47 	vmov.f32	s0, s14
 800162c:	eef0 0a67 	vmov.f32	s1, s15
 8001630:	f003 fc0a 	bl	8004e48 <cos>
 8001634:	ec53 2b10 	vmov	r2, r3, d0
 8001638:	4620      	mov	r0, r4
 800163a:	4629      	mov	r1, r5
 800163c:	f7fe ffd4 	bl	80005e8 <__aeabi_dmul>
 8001640:	4603      	mov	r3, r0
 8001642:	460c      	mov	r4, r1
 8001644:	4698      	mov	r8, r3
 8001646:	46a1      	mov	r9, r4
 8001648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800164e:	4413      	add	r3, r2
 8001650:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001654:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001656:	f7fe ff5d 	bl	8000514 <__aeabi_i2d>
 800165a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800165e:	f7fe ffc3 	bl	80005e8 <__aeabi_dmul>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	ec43 2b17 	vmov	d7, r2, r3
 800166a:	eeb0 0a47 	vmov.f32	s0, s14
 800166e:	eef0 0a67 	vmov.f32	s1, s15
 8001672:	f003 fc2d 	bl	8004ed0 <sin>
 8001676:	ec53 2b10 	vmov	r2, r3, d0
 800167a:	4620      	mov	r0, r4
 800167c:	4629      	mov	r1, r5
 800167e:	f7fe ffb3 	bl	80005e8 <__aeabi_dmul>
 8001682:	4603      	mov	r3, r0
 8001684:	460c      	mov	r4, r1
 8001686:	461a      	mov	r2, r3
 8001688:	4623      	mov	r3, r4
 800168a:	4640      	mov	r0, r8
 800168c:	4649      	mov	r1, r9
 800168e:	f7fe fdf5 	bl	800027c <__adddf3>
 8001692:	4603      	mov	r3, r0
 8001694:	460c      	mov	r4, r1
 8001696:	4618      	mov	r0, r3
 8001698:	4621      	mov	r1, r4
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016a2:	f7ff f8cb 	bl	800083c <__aeabi_ddiv>
 80016a6:	4603      	mov	r3, r0
 80016a8:	460c      	mov	r4, r1
 80016aa:	e9c7 3402 	strd	r3, r4, [r7, #8]
		if (n == 0) x[n] = po * z;
 80016ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d10e      	bne.n	80016d2 <DCT2+0x212>
 80016b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	18d5      	adds	r5, r2, r3
 80016bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016c4:	f7fe ff90 	bl	80005e8 <__aeabi_dmul>
 80016c8:	4603      	mov	r3, r0
 80016ca:	460c      	mov	r4, r1
 80016cc:	e9c5 3400 	strd	r3, r4, [r5]
 80016d0:	e00d      	b.n	80016ee <DCT2+0x22e>
		else     x[n] = p * z;
 80016d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	18d5      	adds	r5, r2, r3
 80016da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016de:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016e2:	f7fe ff81 	bl	80005e8 <__aeabi_dmul>
 80016e6:	4603      	mov	r3, r0
 80016e8:	460c      	mov	r4, r1
 80016ea:	e9c5 3400 	strd	r3, r4, [r5]
	for (n = 0; n<N; ++n) {
 80016ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016f0:	3301      	adds	r3, #1
 80016f2:	637b      	str	r3, [r7, #52]	; 0x34
 80016f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	db84      	blt.n	8001606 <DCT2+0x146>
	}
	free(Ar);
 80016fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80016fe:	f002 fe6f 	bl	80043e0 <free>
}
 8001702:	bf00      	nop
 8001704:	3738      	adds	r7, #56	; 0x38
 8001706:	46bd      	mov	sp, r7
 8001708:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800170c:	f3af 8000 	nop.w
 8001710:	3ff00000 	.word	0x3ff00000
 8001714:	54442d18 	.word	0x54442d18
 8001718:	400921fb 	.word	0x400921fb

0800171c <dct_test>:


void dct_test(double * z, unsigned long * data, int m) {
 800171c:	b5b0      	push	{r4, r5, r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]

	int i;
	for (i = 0; i < m; ++i) z[i] =  data[i];
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	e012      	b.n	8001754 <dct_test+0x38>
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	4413      	add	r3, r2
 8001736:	6819      	ldr	r1, [r3, #0]
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	68fa      	ldr	r2, [r7, #12]
 800173e:	18d5      	adds	r5, r2, r3
 8001740:	4608      	mov	r0, r1
 8001742:	f7fe fed7 	bl	80004f4 <__aeabi_ui2d>
 8001746:	4603      	mov	r3, r0
 8001748:	460c      	mov	r4, r1
 800174a:	e9c5 3400 	strd	r3, r4, [r5]
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	3301      	adds	r3, #1
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	429a      	cmp	r2, r3
 800175a:	dbe8      	blt.n	800172e <dct_test+0x12>

	DCT2(m, z);
 800175c:	68f9      	ldr	r1, [r7, #12]
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff feae 	bl	80014c0 <DCT2>
}
 8001764:	bf00      	nop
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bdb0      	pop	{r4, r5, r7, pc}

0800176c <parse_buffer>:
unsigned char RX_data[EPOCH_LENGTH_SAMPLES * CHARS_PER_SAMPLE] = {0};
long parsed_epoch_data[EPOCH_LENGTH_SAMPLES] = {0};
Linear_SVM_Model* SVM;
char model_received = 0;

int parse_buffer(void) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
	char delim[] = ",";
 8001772:	232c      	movs	r3, #44	; 0x2c
 8001774:	803b      	strh	r3, [r7, #0]
	char *ptr = strtok((char*)RX_data, delim);
 8001776:	463b      	mov	r3, r7
 8001778:	4619      	mov	r1, r3
 800177a:	4810      	ldr	r0, [pc, #64]	; (80017bc <parse_buffer+0x50>)
 800177c:	f002 ff38 	bl	80045f0 <strtok>
 8001780:	60f8      	str	r0, [r7, #12]
	int sample_number = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	60bb      	str	r3, [r7, #8]
	while(ptr != NULL)
 8001786:	e011      	b.n	80017ac <parse_buffer+0x40>
	{
		long value = atol(ptr);
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f002 fddf 	bl	800434c <atol>
 800178e:	6078      	str	r0, [r7, #4]
		parsed_epoch_data[sample_number] = value;
 8001790:	490b      	ldr	r1, [pc, #44]	; (80017c0 <parse_buffer+0x54>)
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		sample_number++;
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	3301      	adds	r3, #1
 800179e:	60bb      	str	r3, [r7, #8]
		ptr = strtok(NULL, delim);
 80017a0:	463b      	mov	r3, r7
 80017a2:	4619      	mov	r1, r3
 80017a4:	2000      	movs	r0, #0
 80017a6:	f002 ff23 	bl	80045f0 <strtok>
 80017aa:	60f8      	str	r0, [r7, #12]
	while(ptr != NULL)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1ea      	bne.n	8001788 <parse_buffer+0x1c>
	}
	return sample_number;
 80017b2:	68bb      	ldr	r3, [r7, #8]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	200001fc 	.word	0x200001fc
 80017c0:	200002ac 	.word	0x200002ac

080017c4 <process_sample>:

void process_sample(void) {
 80017c4:	b5b0      	push	{r4, r5, r7, lr}
 80017c6:	b088      	sub	sp, #32
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	466b      	mov	r3, sp
 80017cc:	461d      	mov	r5, r3
    parse_buffer();
 80017ce:	f7ff ffcd 	bl	800176c <parse_buffer>
	// Process this epoch
	int number_of_samples = sizeof(parsed_epoch_data) / sizeof(long);
 80017d2:	2310      	movs	r3, #16
 80017d4:	61bb      	str	r3, [r7, #24]
	double coeffs[number_of_samples];
 80017d6:	69b8      	ldr	r0, [r7, #24]
 80017d8:	1e43      	subs	r3, r0, #1
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	4603      	mov	r3, r0
 80017de:	4619      	mov	r1, r3
 80017e0:	f04f 0200 	mov.w	r2, #0
 80017e4:	f04f 0300 	mov.w	r3, #0
 80017e8:	f04f 0400 	mov.w	r4, #0
 80017ec:	0194      	lsls	r4, r2, #6
 80017ee:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80017f2:	018b      	lsls	r3, r1, #6
 80017f4:	4603      	mov	r3, r0
 80017f6:	4619      	mov	r1, r3
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	f04f 0300 	mov.w	r3, #0
 8001800:	f04f 0400 	mov.w	r4, #0
 8001804:	0194      	lsls	r4, r2, #6
 8001806:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800180a:	018b      	lsls	r3, r1, #6
 800180c:	4603      	mov	r3, r0
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	3307      	adds	r3, #7
 8001812:	3307      	adds	r3, #7
 8001814:	08db      	lsrs	r3, r3, #3
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	ebad 0d03 	sub.w	sp, sp, r3
 800181c:	466b      	mov	r3, sp
 800181e:	3307      	adds	r3, #7
 8001820:	08db      	lsrs	r3, r3, #3
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	613b      	str	r3, [r7, #16]
	dct_test(coeffs, parsed_epoch_data, number_of_samples);
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4927      	ldr	r1, [pc, #156]	; (80018c8 <process_sample+0x104>)
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff75 	bl	800171c <dct_test>
#ifdef PRINTING_COEFFS
	//This is just printing
	for (int i = 0; i < number_of_samples; i++) {
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
 8001836:	e039      	b.n	80018ac <process_sample+0xe8>
		coeffs[i] *= 100;
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	4413      	add	r3, r2
 8001840:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	4b20      	ldr	r3, [pc, #128]	; (80018cc <process_sample+0x108>)
 800184a:	f7fe fecd 	bl	80005e8 <__aeabi_dmul>
 800184e:	4603      	mov	r3, r0
 8001850:	460c      	mov	r4, r1
 8001852:	6939      	ldr	r1, [r7, #16]
 8001854:	69fa      	ldr	r2, [r7, #28]
 8001856:	00d2      	lsls	r2, r2, #3
 8001858:	440a      	add	r2, r1
 800185a:	e9c2 3400 	strd	r3, r4, [r2]
		char data_string[CHARS_PER_SAMPLE] = {0};
 800185e:	1d3b      	adds	r3, r7, #4
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	f8c3 2007 	str.w	r2, [r3, #7]
		snprintf(data_string,  CHARS_PER_SAMPLE, "%010ld", (long)coeffs[i]);
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	4413      	add	r3, r2
 8001872:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001876:	4618      	mov	r0, r3
 8001878:	4621      	mov	r1, r4
 800187a:	f7ff f965 	bl	8000b48 <__aeabi_d2iz>
 800187e:	4603      	mov	r3, r0
 8001880:	1d38      	adds	r0, r7, #4
 8001882:	4a13      	ldr	r2, [pc, #76]	; (80018d0 <process_sample+0x10c>)
 8001884:	210b      	movs	r1, #11
 8001886:	f002 fe7f 	bl	8004588 <sniprintf>
		HAL_UART_Transmit(&huart4, (unsigned char *)data_string, CHARS_PER_SAMPLE, 0xFFFF);
 800188a:	1d39      	adds	r1, r7, #4
 800188c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001890:	220b      	movs	r2, #11
 8001892:	4810      	ldr	r0, [pc, #64]	; (80018d4 <process_sample+0x110>)
 8001894:	f001 fe6f 	bl	8003576 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart4, (unsigned char *)"\n\r", 3, 0xFFFF);
 8001898:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800189c:	2203      	movs	r2, #3
 800189e:	490e      	ldr	r1, [pc, #56]	; (80018d8 <process_sample+0x114>)
 80018a0:	480c      	ldr	r0, [pc, #48]	; (80018d4 <process_sample+0x110>)
 80018a2:	f001 fe68 	bl	8003576 <HAL_UART_Transmit>
	for (int i = 0; i < number_of_samples; i++) {
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3301      	adds	r3, #1
 80018aa:	61fb      	str	r3, [r7, #28]
 80018ac:	69fa      	ldr	r2, [r7, #28]
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	dbc1      	blt.n	8001838 <process_sample+0x74>
	}
#endif

	//Garbage Collection
	free(coeffs);
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f002 fd92 	bl	80043e0 <free>
 80018bc:	46ad      	mov	sp, r5
}
 80018be:	bf00      	nop
 80018c0:	3720      	adds	r7, #32
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bdb0      	pop	{r4, r5, r7, pc}
 80018c6:	bf00      	nop
 80018c8:	200002ac 	.word	0x200002ac
 80018cc:	40590000 	.word	0x40590000
 80018d0:	08006130 	.word	0x08006130
 80018d4:	20000360 	.word	0x20000360
 80018d8:	08006138 	.word	0x08006138

080018dc <build_model>:

int build_model(void) {
 80018dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018de:	b087      	sub	sp, #28
 80018e0:	af00      	add	r7, sp, #0
	int ret_val = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
	parse_buffer();
 80018e6:	f7ff ff41 	bl	800176c <parse_buffer>
	if (model_received == 0) {
 80018ea:	4b31      	ldr	r3, [pc, #196]	; (80019b0 <build_model+0xd4>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d156      	bne.n	80019a0 <build_model+0xc4>
 80018f2:	466b      	mov	r3, sp
 80018f4:	461e      	mov	r6, r3
		/* Load the weight vector */
		int number_of_weights = sizeof(parsed_epoch_data) / sizeof(long);   // Get the number of coefficients in the weight vector
 80018f6:	2310      	movs	r3, #16
 80018f8:	60fb      	str	r3, [r7, #12]
		double vect[number_of_weights];      // This is an array to hold the weights once converted to double from long
 80018fa:	68fd      	ldr	r5, [r7, #12]
 80018fc:	1e6b      	subs	r3, r5, #1
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	462b      	mov	r3, r5
 8001902:	4619      	mov	r1, r3
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	f04f 0400 	mov.w	r4, #0
 8001910:	0194      	lsls	r4, r2, #6
 8001912:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001916:	018b      	lsls	r3, r1, #6
 8001918:	462b      	mov	r3, r5
 800191a:	4619      	mov	r1, r3
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	f04f 0300 	mov.w	r3, #0
 8001924:	f04f 0400 	mov.w	r4, #0
 8001928:	0194      	lsls	r4, r2, #6
 800192a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800192e:	018b      	lsls	r3, r1, #6
 8001930:	462b      	mov	r3, r5
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	3307      	adds	r3, #7
 8001936:	3307      	adds	r3, #7
 8001938:	08db      	lsrs	r3, r3, #3
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	ebad 0d03 	sub.w	sp, sp, r3
 8001940:	466b      	mov	r3, sp
 8001942:	3307      	adds	r3, #7
 8001944:	08db      	lsrs	r3, r3, #3
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	607b      	str	r3, [r7, #4]
		for (int i = 0; i < number_of_weights; i++) {
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	e016      	b.n	800197e <build_model+0xa2>
			vect[i] = ((double)parsed_epoch_data[i]) / 1000; // Convert the weight to double then divide by the scale factor
 8001950:	4a18      	ldr	r2, [pc, #96]	; (80019b4 <build_model+0xd8>)
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001958:	4618      	mov	r0, r3
 800195a:	f7fe fddb 	bl	8000514 <__aeabi_i2d>
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <build_model+0xdc>)
 8001964:	f7fe ff6a 	bl	800083c <__aeabi_ddiv>
 8001968:	4603      	mov	r3, r0
 800196a:	460c      	mov	r4, r1
 800196c:	6879      	ldr	r1, [r7, #4]
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	00d2      	lsls	r2, r2, #3
 8001972:	440a      	add	r2, r1
 8001974:	e9c2 3400 	strd	r3, r4, [r2]
		for (int i = 0; i < number_of_weights; i++) {
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	3301      	adds	r3, #1
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	429a      	cmp	r2, r3
 8001984:	dbe4      	blt.n	8001950 <build_model+0x74>
		}
		//SVM->weight_vector = malloc(number_of_weights * sizeof(double));
		memcpy(SVM->weight_vector, vect, sizeof(vect));   // Store the scaled weights into the model, SVM.weight_vector is no longer NULL
 8001986:	4b0d      	ldr	r3, [pc, #52]	; (80019bc <build_model+0xe0>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	462a      	mov	r2, r5
 8001990:	00d2      	lsls	r2, r2, #3
 8001992:	4619      	mov	r1, r3
 8001994:	f002 fd2c 	bl	80043f0 <memcpy>
		ret_val = 1;
 8001998:	2301      	movs	r3, #1
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	46b5      	mov	sp, r6
 800199e:	e001      	b.n	80019a4 <build_model+0xc8>
	}
	else {
		/* Load the offset, scale and dimension */
		ret_val = 2;    // Now we have the vector, scale, offset, and dimension, so we have all the info we need
 80019a0:	2302      	movs	r3, #2
 80019a2:	617b      	str	r3, [r7, #20]
	}
	return ret_val;
 80019a4:	697b      	ldr	r3, [r7, #20]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	371c      	adds	r7, #28
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200002ec 	.word	0x200002ec
 80019b4:	200002ac 	.word	0x200002ac
 80019b8:	408f4000 	.word	0x408f4000
 80019bc:	2000035c 	.word	0x2000035c

080019c0 <print_model>:

void print_model(Linear_SVM_Model* model) {
 80019c0:	b590      	push	{r4, r7, lr}
 80019c2:	b0c5      	sub	sp, #276	; 0x114
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	1d3b      	adds	r3, r7, #4
 80019c8:	6018      	str	r0, [r3, #0]
	char weight_str[255] = {0};
 80019ca:	f107 030c 	add.w	r3, r7, #12
 80019ce:	4618      	mov	r0, r3
 80019d0:	23ff      	movs	r3, #255	; 0xff
 80019d2:	461a      	mov	r2, r3
 80019d4:	2100      	movs	r1, #0
 80019d6:	f002 fd16 	bl	8004406 <memset>
	HAL_UART_Transmit(&huart4, (unsigned char *)"Weights\n\r", 10, 0xFFFF);
 80019da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019de:	220a      	movs	r2, #10
 80019e0:	491b      	ldr	r1, [pc, #108]	; (8001a50 <print_model+0x90>)
 80019e2:	481c      	ldr	r0, [pc, #112]	; (8001a54 <print_model+0x94>)
 80019e4:	f001 fdc7 	bl	8003576 <HAL_UART_Transmit>
	for (int i = 0; i < EPOCH_LENGTH_SAMPLES; i++) {
 80019e8:	2300      	movs	r3, #0
 80019ea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80019ee:	e026      	b.n	8001a3e <print_model+0x7e>
		snprintf(weight_str, 11, "%010ld", (long)(model->weight_vector[i]));
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	4413      	add	r3, r2
 80019fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a00:	4618      	mov	r0, r3
 8001a02:	4621      	mov	r1, r4
 8001a04:	f7ff f8a0 	bl	8000b48 <__aeabi_d2iz>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	f107 000c 	add.w	r0, r7, #12
 8001a0e:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <print_model+0x98>)
 8001a10:	210b      	movs	r1, #11
 8001a12:	f002 fdb9 	bl	8004588 <sniprintf>
		HAL_UART_Transmit(&huart4, (unsigned char *)weight_str, 11, 0xFFFF);
 8001a16:	f107 010c 	add.w	r1, r7, #12
 8001a1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a1e:	220b      	movs	r2, #11
 8001a20:	480c      	ldr	r0, [pc, #48]	; (8001a54 <print_model+0x94>)
 8001a22:	f001 fda8 	bl	8003576 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart4, (unsigned char *)"\r\n", 3, 0xFFFF);
 8001a26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	490b      	ldr	r1, [pc, #44]	; (8001a5c <print_model+0x9c>)
 8001a2e:	4809      	ldr	r0, [pc, #36]	; (8001a54 <print_model+0x94>)
 8001a30:	f001 fda1 	bl	8003576 <HAL_UART_Transmit>
	for (int i = 0; i < EPOCH_LENGTH_SAMPLES; i++) {
 8001a34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001a38:	3301      	adds	r3, #1
 8001a3a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001a3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001a42:	2b0f      	cmp	r3, #15
 8001a44:	ddd4      	ble.n	80019f0 <print_model+0x30>
	}
}
 8001a46:	bf00      	nop
 8001a48:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd90      	pop	{r4, r7, pc}
 8001a50:	0800613c 	.word	0x0800613c
 8001a54:	20000360 	.word	0x20000360
 8001a58:	08006130 	.word	0x08006130
 8001a5c:	08006148 	.word	0x08006148

08001a60 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, (unsigned char *)"\r\nInterrupt!\n\r", 14, 0xFFFF);
 8001a68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a6c:	220e      	movs	r2, #14
 8001a6e:	490f      	ldr	r1, [pc, #60]	; (8001aac <HAL_UART_RxCpltCallback+0x4c>)
 8001a70:	480f      	ldr	r0, [pc, #60]	; (8001ab0 <HAL_UART_RxCpltCallback+0x50>)
 8001a72:	f001 fd80 	bl	8003576 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart4, RX_data, EPOCH_LENGTH_SAMPLES * CHARS_PER_SAMPLE); // Start listening. You now have 1 epoch to process this epoch
 8001a76:	22b0      	movs	r2, #176	; 0xb0
 8001a78:	490e      	ldr	r1, [pc, #56]	; (8001ab4 <HAL_UART_RxCpltCallback+0x54>)
 8001a7a:	480d      	ldr	r0, [pc, #52]	; (8001ab0 <HAL_UART_RxCpltCallback+0x50>)
 8001a7c:	f001 fe14 	bl	80036a8 <HAL_UART_Receive_IT>
	if (model_received == 2) {  // This should be 2, not 0
 8001a80:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <HAL_UART_RxCpltCallback+0x58>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d102      	bne.n	8001a8e <HAL_UART_RxCpltCallback+0x2e>
        process_sample();
 8001a88:	f7ff fe9c 	bl	80017c4 <process_sample>
		/* Get the model */
		model_received = build_model();
		print_model(SVM);
	}

}
 8001a8c:	e00a      	b.n	8001aa4 <HAL_UART_RxCpltCallback+0x44>
		model_received = build_model();
 8001a8e:	f7ff ff25 	bl	80018dc <build_model>
 8001a92:	4603      	mov	r3, r0
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <HAL_UART_RxCpltCallback+0x58>)
 8001a98:	701a      	strb	r2, [r3, #0]
		print_model(SVM);
 8001a9a:	4b08      	ldr	r3, [pc, #32]	; (8001abc <HAL_UART_RxCpltCallback+0x5c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff ff8e 	bl	80019c0 <print_model>
}
 8001aa4:	bf00      	nop
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	0800614c 	.word	0x0800614c
 8001ab0:	20000360 	.word	0x20000360
 8001ab4:	200001fc 	.word	0x200001fc
 8001ab8:	200002ec 	.word	0x200002ec
 8001abc:	2000035c 	.word	0x2000035c

08001ac0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ac4:	f000 fa80 	bl	8001fc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ac8:	f000 f81a 	bl	8001b00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001acc:	f000 f8cc 	bl	8001c68 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ad0:	f000 f8aa 	bl	8001c28 <MX_DMA_Init>
  MX_UART4_Init();
 8001ad4:	f000 f87e 	bl	8001bd4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  SVM = malloc(sizeof(Linear_SVM_Model));
 8001ad8:	2098      	movs	r0, #152	; 0x98
 8001ada:	f002 fc79 	bl	80043d0 <malloc>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <main+0x34>)
 8001ae4:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart4, RX_data, EPOCH_LENGTH_SAMPLES * CHARS_PER_SAMPLE);
 8001ae6:	22b0      	movs	r2, #176	; 0xb0
 8001ae8:	4903      	ldr	r1, [pc, #12]	; (8001af8 <main+0x38>)
 8001aea:	4804      	ldr	r0, [pc, #16]	; (8001afc <main+0x3c>)
 8001aec:	f001 fddc 	bl	80036a8 <HAL_UART_Receive_IT>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001af0:	e7fe      	b.n	8001af0 <main+0x30>
 8001af2:	bf00      	nop
 8001af4:	2000035c 	.word	0x2000035c
 8001af8:	200001fc 	.word	0x200001fc
 8001afc:	20000360 	.word	0x20000360

08001b00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b094      	sub	sp, #80	; 0x50
 8001b04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b06:	f107 0320 	add.w	r3, r7, #32
 8001b0a:	2230      	movs	r2, #48	; 0x30
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f002 fc79 	bl	8004406 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b14:	f107 030c 	add.w	r3, r7, #12
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b24:	2300      	movs	r3, #0
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	4b28      	ldr	r3, [pc, #160]	; (8001bcc <SystemClock_Config+0xcc>)
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	4a27      	ldr	r2, [pc, #156]	; (8001bcc <SystemClock_Config+0xcc>)
 8001b2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b32:	6413      	str	r3, [r2, #64]	; 0x40
 8001b34:	4b25      	ldr	r3, [pc, #148]	; (8001bcc <SystemClock_Config+0xcc>)
 8001b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b40:	2300      	movs	r3, #0
 8001b42:	607b      	str	r3, [r7, #4]
 8001b44:	4b22      	ldr	r3, [pc, #136]	; (8001bd0 <SystemClock_Config+0xd0>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a21      	ldr	r2, [pc, #132]	; (8001bd0 <SystemClock_Config+0xd0>)
 8001b4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	4b1f      	ldr	r3, [pc, #124]	; (8001bd0 <SystemClock_Config+0xd0>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b58:	607b      	str	r3, [r7, #4]
 8001b5a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b66:	2302      	movs	r3, #2
 8001b68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b70:	2304      	movs	r3, #4
 8001b72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b74:	23a8      	movs	r3, #168	; 0xa8
 8001b76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b7c:	2304      	movs	r3, #4
 8001b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b80:	f107 0320 	add.w	r3, r7, #32
 8001b84:	4618      	mov	r0, r3
 8001b86:	f001 f847 	bl	8002c18 <HAL_RCC_OscConfig>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b90:	f000 f8a0 	bl	8001cd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b94:	230f      	movs	r3, #15
 8001b96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ba0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ba4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001baa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001bac:	f107 030c 	add.w	r3, r7, #12
 8001bb0:	2105      	movs	r1, #5
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f001 faa0 	bl	80030f8 <HAL_RCC_ClockConfig>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001bbe:	f000 f889 	bl	8001cd4 <Error_Handler>
  }
}
 8001bc2:	bf00      	nop
 8001bc4:	3750      	adds	r7, #80	; 0x50
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40007000 	.word	0x40007000

08001bd4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001bd8:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <MX_UART4_Init+0x4c>)
 8001bda:	4a12      	ldr	r2, [pc, #72]	; (8001c24 <MX_UART4_Init+0x50>)
 8001bdc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 8001bde:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <MX_UART4_Init+0x4c>)
 8001be0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001be4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001be6:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <MX_UART4_Init+0x4c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001bec:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <MX_UART4_Init+0x4c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001bf2:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <MX_UART4_Init+0x4c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <MX_UART4_Init+0x4c>)
 8001bfa:	220c      	movs	r2, #12
 8001bfc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bfe:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <MX_UART4_Init+0x4c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <MX_UART4_Init+0x4c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001c0a:	4805      	ldr	r0, [pc, #20]	; (8001c20 <MX_UART4_Init+0x4c>)
 8001c0c:	f001 fc66 	bl	80034dc <HAL_UART_Init>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001c16:	f000 f85d 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000360 	.word	0x20000360
 8001c24:	40004c00 	.word	0x40004c00

08001c28 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	607b      	str	r3, [r7, #4]
 8001c32:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <MX_DMA_Init+0x3c>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a0b      	ldr	r2, [pc, #44]	; (8001c64 <MX_DMA_Init+0x3c>)
 8001c38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <MX_DMA_Init+0x3c>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c46:	607b      	str	r3, [r7, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	200d      	movs	r0, #13
 8001c50:	f000 fb07 	bl	8002262 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001c54:	200d      	movs	r0, #13
 8001c56:	f000 fb20 	bl	800229a <HAL_NVIC_EnableIRQ>

}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40023800 	.word	0x40023800

08001c68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	4b17      	ldr	r3, [pc, #92]	; (8001cd0 <MX_GPIO_Init+0x68>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	4a16      	ldr	r2, [pc, #88]	; (8001cd0 <MX_GPIO_Init+0x68>)
 8001c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7e:	4b14      	ldr	r3, [pc, #80]	; (8001cd0 <MX_GPIO_Init+0x68>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60bb      	str	r3, [r7, #8]
 8001c8e:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <MX_GPIO_Init+0x68>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	4a0f      	ldr	r2, [pc, #60]	; (8001cd0 <MX_GPIO_Init+0x68>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <MX_GPIO_Init+0x68>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	60bb      	str	r3, [r7, #8]
 8001ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	607b      	str	r3, [r7, #4]
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <MX_GPIO_Init+0x68>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	4a08      	ldr	r2, [pc, #32]	; (8001cd0 <MX_GPIO_Init+0x68>)
 8001cb0:	f043 0304 	orr.w	r3, r3, #4
 8001cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <MX_GPIO_Init+0x68>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	f003 0304 	and.w	r3, r3, #4
 8001cbe:	607b      	str	r3, [r7, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]

}
 8001cc2:	bf00      	nop
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	40023800 	.word	0x40023800

08001cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
	...

08001ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	607b      	str	r3, [r7, #4]
 8001cee:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <HAL_MspInit+0x4c>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf2:	4a0f      	ldr	r2, [pc, #60]	; (8001d30 <HAL_MspInit+0x4c>)
 8001cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cfa:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <HAL_MspInit+0x4c>)
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d02:	607b      	str	r3, [r7, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	603b      	str	r3, [r7, #0]
 8001d0a:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <HAL_MspInit+0x4c>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	4a08      	ldr	r2, [pc, #32]	; (8001d30 <HAL_MspInit+0x4c>)
 8001d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d14:	6413      	str	r3, [r2, #64]	; 0x40
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_MspInit+0x4c>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40023800 	.word	0x40023800

08001d34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	; 0x28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a34      	ldr	r2, [pc, #208]	; (8001e24 <HAL_UART_MspInit+0xf0>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d162      	bne.n	8001e1c <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	4b33      	ldr	r3, [pc, #204]	; (8001e28 <HAL_UART_MspInit+0xf4>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	4a32      	ldr	r2, [pc, #200]	; (8001e28 <HAL_UART_MspInit+0xf4>)
 8001d60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d64:	6413      	str	r3, [r2, #64]	; 0x40
 8001d66:	4b30      	ldr	r3, [pc, #192]	; (8001e28 <HAL_UART_MspInit+0xf4>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	4b2c      	ldr	r3, [pc, #176]	; (8001e28 <HAL_UART_MspInit+0xf4>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a2b      	ldr	r2, [pc, #172]	; (8001e28 <HAL_UART_MspInit+0xf4>)
 8001d7c:	f043 0304 	orr.w	r3, r3, #4
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b29      	ldr	r3, [pc, #164]	; (8001e28 <HAL_UART_MspInit+0xf4>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0304 	and.w	r3, r3, #4
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d8e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d94:	2302      	movs	r3, #2
 8001d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001da0:	2308      	movs	r3, #8
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	4619      	mov	r1, r3
 8001daa:	4820      	ldr	r0, [pc, #128]	; (8001e2c <HAL_UART_MspInit+0xf8>)
 8001dac:	f000 fd9a 	bl	80028e4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001db0:	4b1f      	ldr	r3, [pc, #124]	; (8001e30 <HAL_UART_MspInit+0xfc>)
 8001db2:	4a20      	ldr	r2, [pc, #128]	; (8001e34 <HAL_UART_MspInit+0x100>)
 8001db4:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001db6:	4b1e      	ldr	r3, [pc, #120]	; (8001e30 <HAL_UART_MspInit+0xfc>)
 8001db8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dbc:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dbe:	4b1c      	ldr	r3, [pc, #112]	; (8001e30 <HAL_UART_MspInit+0xfc>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dc4:	4b1a      	ldr	r3, [pc, #104]	; (8001e30 <HAL_UART_MspInit+0xfc>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001dca:	4b19      	ldr	r3, [pc, #100]	; (8001e30 <HAL_UART_MspInit+0xfc>)
 8001dcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dd0:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dd2:	4b17      	ldr	r3, [pc, #92]	; (8001e30 <HAL_UART_MspInit+0xfc>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dd8:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <HAL_UART_MspInit+0xfc>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001dde:	4b14      	ldr	r3, [pc, #80]	; (8001e30 <HAL_UART_MspInit+0xfc>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001de4:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <HAL_UART_MspInit+0xfc>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dea:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <HAL_UART_MspInit+0xfc>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001df0:	480f      	ldr	r0, [pc, #60]	; (8001e30 <HAL_UART_MspInit+0xfc>)
 8001df2:	f000 fa6d 	bl	80022d0 <HAL_DMA_Init>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001dfc:	f7ff ff6a 	bl	8001cd4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a0b      	ldr	r2, [pc, #44]	; (8001e30 <HAL_UART_MspInit+0xfc>)
 8001e04:	635a      	str	r2, [r3, #52]	; 0x34
 8001e06:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <HAL_UART_MspInit+0xfc>)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2100      	movs	r1, #0
 8001e10:	2034      	movs	r0, #52	; 0x34
 8001e12:	f000 fa26 	bl	8002262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001e16:	2034      	movs	r0, #52	; 0x34
 8001e18:	f000 fa3f 	bl	800229a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001e1c:	bf00      	nop
 8001e1e:	3728      	adds	r7, #40	; 0x28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40004c00 	.word	0x40004c00
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40020800 	.word	0x40020800
 8001e30:	200002fc 	.word	0x200002fc
 8001e34:	40026040 	.word	0x40026040

08001e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e4a:	e7fe      	b.n	8001e4a <HardFault_Handler+0x4>

08001e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e50:	e7fe      	b.n	8001e50 <MemManage_Handler+0x4>

08001e52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e56:	e7fe      	b.n	8001e56 <BusFault_Handler+0x4>

08001e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e5c:	e7fe      	b.n	8001e5c <UsageFault_Handler+0x4>

08001e5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e8c:	f000 f8ee 	bl	800206c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001e98:	4802      	ldr	r0, [pc, #8]	; (8001ea4 <DMA1_Stream2_IRQHandler+0x10>)
 8001e9a:	f000 fae9 	bl	8002470 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	200002fc 	.word	0x200002fc

08001ea8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001eac:	4802      	ldr	r0, [pc, #8]	; (8001eb8 <UART4_IRQHandler+0x10>)
 8001eae:	f001 fc51 	bl	8003754 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000360 	.word	0x20000360

08001ebc <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ec6:	f002 fa45 	bl	8004354 <__errno>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	2316      	movs	r3, #22
 8001ece:	6013      	str	r3, [r2, #0]
	return -1;
 8001ed0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <_exit>:

void _exit (int status)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff ffe7 	bl	8001ebc <_kill>
	while (1) {}		/* Make sure we hang here */
 8001eee:	e7fe      	b.n	8001eee <_exit+0x12>

08001ef0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001ef8:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <_sbrk+0x50>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d102      	bne.n	8001f06 <_sbrk+0x16>
		heap_end = &end;
 8001f00:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <_sbrk+0x50>)
 8001f02:	4a10      	ldr	r2, [pc, #64]	; (8001f44 <_sbrk+0x54>)
 8001f04:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001f06:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <_sbrk+0x50>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <_sbrk+0x50>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4413      	add	r3, r2
 8001f14:	466a      	mov	r2, sp
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d907      	bls.n	8001f2a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001f1a:	f002 fa1b 	bl	8004354 <__errno>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	230c      	movs	r3, #12
 8001f22:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001f24:	f04f 33ff 	mov.w	r3, #4294967295
 8001f28:	e006      	b.n	8001f38 <_sbrk+0x48>
	}

	heap_end += incr;
 8001f2a:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <_sbrk+0x50>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4413      	add	r3, r2
 8001f32:	4a03      	ldr	r2, [pc, #12]	; (8001f40 <_sbrk+0x50>)
 8001f34:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001f36:	68fb      	ldr	r3, [r7, #12]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	200002f0 	.word	0x200002f0
 8001f44:	200003a8 	.word	0x200003a8

08001f48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f4c:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <SystemInit+0x28>)
 8001f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f52:	4a07      	ldr	r2, [pc, #28]	; (8001f70 <SystemInit+0x28>)
 8001f54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f5c:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <SystemInit+0x28>)
 8001f5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f62:	609a      	str	r2, [r3, #8]
#endif
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f7a:	e003      	b.n	8001f84 <LoopCopyDataInit>

08001f7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f82:	3104      	adds	r1, #4

08001f84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f84:	480b      	ldr	r0, [pc, #44]	; (8001fb4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f86:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f8c:	d3f6      	bcc.n	8001f7c <CopyDataInit>
  ldr  r2, =_sbss
 8001f8e:	4a0b      	ldr	r2, [pc, #44]	; (8001fbc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f90:	e002      	b.n	8001f98 <LoopFillZerobss>

08001f92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f94:	f842 3b04 	str.w	r3, [r2], #4

08001f98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f98:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f9c:	d3f9      	bcc.n	8001f92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f9e:	f7ff ffd3 	bl	8001f48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fa2:	f002 f9f1 	bl	8004388 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fa6:	f7ff fd8b 	bl	8001ac0 <main>
  bx  lr    
 8001faa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001fac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001fb0:	080064b0 	.word	0x080064b0
  ldr  r0, =_sdata
 8001fb4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001fb8:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8001fbc:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8001fc0:	200003a8 	.word	0x200003a8

08001fc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fc4:	e7fe      	b.n	8001fc4 <ADC_IRQHandler>
	...

08001fc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fcc:	4b0e      	ldr	r3, [pc, #56]	; (8002008 <HAL_Init+0x40>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a0d      	ldr	r2, [pc, #52]	; (8002008 <HAL_Init+0x40>)
 8001fd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <HAL_Init+0x40>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <HAL_Init+0x40>)
 8001fde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fe2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fe4:	4b08      	ldr	r3, [pc, #32]	; (8002008 <HAL_Init+0x40>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a07      	ldr	r2, [pc, #28]	; (8002008 <HAL_Init+0x40>)
 8001fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff0:	2003      	movs	r0, #3
 8001ff2:	f000 f92b 	bl	800224c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	f000 f808 	bl	800200c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ffc:	f7ff fe72 	bl	8001ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40023c00 	.word	0x40023c00

0800200c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002014:	4b12      	ldr	r3, [pc, #72]	; (8002060 <HAL_InitTick+0x54>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4b12      	ldr	r3, [pc, #72]	; (8002064 <HAL_InitTick+0x58>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	4619      	mov	r1, r3
 800201e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002022:	fbb3 f3f1 	udiv	r3, r3, r1
 8002026:	fbb2 f3f3 	udiv	r3, r2, r3
 800202a:	4618      	mov	r0, r3
 800202c:	f000 f943 	bl	80022b6 <HAL_SYSTICK_Config>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e00e      	b.n	8002058 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b0f      	cmp	r3, #15
 800203e:	d80a      	bhi.n	8002056 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002040:	2200      	movs	r2, #0
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	f04f 30ff 	mov.w	r0, #4294967295
 8002048:	f000 f90b 	bl	8002262 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800204c:	4a06      	ldr	r2, [pc, #24]	; (8002068 <HAL_InitTick+0x5c>)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002052:	2300      	movs	r3, #0
 8002054:	e000      	b.n	8002058 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
}
 8002058:	4618      	mov	r0, r3
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	20000000 	.word	0x20000000
 8002064:	20000008 	.word	0x20000008
 8002068:	20000004 	.word	0x20000004

0800206c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <HAL_IncTick+0x20>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	461a      	mov	r2, r3
 8002076:	4b06      	ldr	r3, [pc, #24]	; (8002090 <HAL_IncTick+0x24>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4413      	add	r3, r2
 800207c:	4a04      	ldr	r2, [pc, #16]	; (8002090 <HAL_IncTick+0x24>)
 800207e:	6013      	str	r3, [r2, #0]
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	20000008 	.word	0x20000008
 8002090:	200003a0 	.word	0x200003a0

08002094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return uwTick;
 8002098:	4b03      	ldr	r3, [pc, #12]	; (80020a8 <HAL_GetTick+0x14>)
 800209a:	681b      	ldr	r3, [r3, #0]
}
 800209c:	4618      	mov	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	200003a0 	.word	0x200003a0

080020ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020bc:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <__NVIC_SetPriorityGrouping+0x44>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020c8:	4013      	ands	r3, r2
 80020ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020de:	4a04      	ldr	r2, [pc, #16]	; (80020f0 <__NVIC_SetPriorityGrouping+0x44>)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	60d3      	str	r3, [r2, #12]
}
 80020e4:	bf00      	nop
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020f8:	4b04      	ldr	r3, [pc, #16]	; (800210c <__NVIC_GetPriorityGrouping+0x18>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	0a1b      	lsrs	r3, r3, #8
 80020fe:	f003 0307 	and.w	r3, r3, #7
}
 8002102:	4618      	mov	r0, r3
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800211a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211e:	2b00      	cmp	r3, #0
 8002120:	db0b      	blt.n	800213a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	f003 021f 	and.w	r2, r3, #31
 8002128:	4907      	ldr	r1, [pc, #28]	; (8002148 <__NVIC_EnableIRQ+0x38>)
 800212a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212e:	095b      	lsrs	r3, r3, #5
 8002130:	2001      	movs	r0, #1
 8002132:	fa00 f202 	lsl.w	r2, r0, r2
 8002136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	e000e100 	.word	0xe000e100

0800214c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	6039      	str	r1, [r7, #0]
 8002156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215c:	2b00      	cmp	r3, #0
 800215e:	db0a      	blt.n	8002176 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	b2da      	uxtb	r2, r3
 8002164:	490c      	ldr	r1, [pc, #48]	; (8002198 <__NVIC_SetPriority+0x4c>)
 8002166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216a:	0112      	lsls	r2, r2, #4
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	440b      	add	r3, r1
 8002170:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002174:	e00a      	b.n	800218c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	b2da      	uxtb	r2, r3
 800217a:	4908      	ldr	r1, [pc, #32]	; (800219c <__NVIC_SetPriority+0x50>)
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	3b04      	subs	r3, #4
 8002184:	0112      	lsls	r2, r2, #4
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	440b      	add	r3, r1
 800218a:	761a      	strb	r2, [r3, #24]
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	e000e100 	.word	0xe000e100
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b089      	sub	sp, #36	; 0x24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f1c3 0307 	rsb	r3, r3, #7
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	bf28      	it	cs
 80021be:	2304      	movcs	r3, #4
 80021c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	3304      	adds	r3, #4
 80021c6:	2b06      	cmp	r3, #6
 80021c8:	d902      	bls.n	80021d0 <NVIC_EncodePriority+0x30>
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	3b03      	subs	r3, #3
 80021ce:	e000      	b.n	80021d2 <NVIC_EncodePriority+0x32>
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d4:	f04f 32ff 	mov.w	r2, #4294967295
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43da      	mvns	r2, r3
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	401a      	ands	r2, r3
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021e8:	f04f 31ff 	mov.w	r1, #4294967295
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	fa01 f303 	lsl.w	r3, r1, r3
 80021f2:	43d9      	mvns	r1, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f8:	4313      	orrs	r3, r2
         );
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3724      	adds	r7, #36	; 0x24
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
	...

08002208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3b01      	subs	r3, #1
 8002214:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002218:	d301      	bcc.n	800221e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800221a:	2301      	movs	r3, #1
 800221c:	e00f      	b.n	800223e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800221e:	4a0a      	ldr	r2, [pc, #40]	; (8002248 <SysTick_Config+0x40>)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3b01      	subs	r3, #1
 8002224:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002226:	210f      	movs	r1, #15
 8002228:	f04f 30ff 	mov.w	r0, #4294967295
 800222c:	f7ff ff8e 	bl	800214c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002230:	4b05      	ldr	r3, [pc, #20]	; (8002248 <SysTick_Config+0x40>)
 8002232:	2200      	movs	r2, #0
 8002234:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002236:	4b04      	ldr	r3, [pc, #16]	; (8002248 <SysTick_Config+0x40>)
 8002238:	2207      	movs	r2, #7
 800223a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	e000e010 	.word	0xe000e010

0800224c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff ff29 	bl	80020ac <__NVIC_SetPriorityGrouping>
}
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002262:	b580      	push	{r7, lr}
 8002264:	b086      	sub	sp, #24
 8002266:	af00      	add	r7, sp, #0
 8002268:	4603      	mov	r3, r0
 800226a:	60b9      	str	r1, [r7, #8]
 800226c:	607a      	str	r2, [r7, #4]
 800226e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002274:	f7ff ff3e 	bl	80020f4 <__NVIC_GetPriorityGrouping>
 8002278:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	68b9      	ldr	r1, [r7, #8]
 800227e:	6978      	ldr	r0, [r7, #20]
 8002280:	f7ff ff8e 	bl	80021a0 <NVIC_EncodePriority>
 8002284:	4602      	mov	r2, r0
 8002286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800228a:	4611      	mov	r1, r2
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff ff5d 	bl	800214c <__NVIC_SetPriority>
}
 8002292:	bf00      	nop
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	4603      	mov	r3, r0
 80022a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff ff31 	bl	8002110 <__NVIC_EnableIRQ>
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff ffa2 	bl	8002208 <SysTick_Config>
 80022c4:	4603      	mov	r3, r0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022dc:	f7ff feda 	bl	8002094 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e099      	b.n	8002420 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2202      	movs	r2, #2
 80022f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 0201 	bic.w	r2, r2, #1
 800230a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800230c:	e00f      	b.n	800232e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800230e:	f7ff fec1 	bl	8002094 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b05      	cmp	r3, #5
 800231a:	d908      	bls.n	800232e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2220      	movs	r2, #32
 8002320:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2203      	movs	r2, #3
 8002326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e078      	b.n	8002420 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1e8      	bne.n	800230e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	4b38      	ldr	r3, [pc, #224]	; (8002428 <HAL_DMA_Init+0x158>)
 8002348:	4013      	ands	r3, r2
 800234a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800235a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002366:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002372:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	4313      	orrs	r3, r2
 800237e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002384:	2b04      	cmp	r3, #4
 8002386:	d107      	bne.n	8002398 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	4313      	orrs	r3, r2
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	4313      	orrs	r3, r2
 8002396:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	f023 0307 	bic.w	r3, r3, #7
 80023ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023be:	2b04      	cmp	r3, #4
 80023c0:	d117      	bne.n	80023f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00e      	beq.n	80023f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 fa0b 	bl	80027f0 <DMA_CheckFifoParam>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d008      	beq.n	80023f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2240      	movs	r2, #64	; 0x40
 80023e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80023ee:	2301      	movs	r3, #1
 80023f0:	e016      	b.n	8002420 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f9c2 	bl	8002784 <DMA_CalcBaseAndBitshift>
 8002400:	4603      	mov	r3, r0
 8002402:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002408:	223f      	movs	r2, #63	; 0x3f
 800240a:	409a      	lsls	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	f010803f 	.word	0xf010803f

0800242c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d004      	beq.n	800244a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2280      	movs	r2, #128	; 0x80
 8002444:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e00c      	b.n	8002464 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2205      	movs	r2, #5
 800244e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 0201 	bic.w	r2, r2, #1
 8002460:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002478:	2300      	movs	r3, #0
 800247a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800247c:	4b92      	ldr	r3, [pc, #584]	; (80026c8 <HAL_DMA_IRQHandler+0x258>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a92      	ldr	r2, [pc, #584]	; (80026cc <HAL_DMA_IRQHandler+0x25c>)
 8002482:	fba2 2303 	umull	r2, r3, r2, r3
 8002486:	0a9b      	lsrs	r3, r3, #10
 8002488:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249a:	2208      	movs	r2, #8
 800249c:	409a      	lsls	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4013      	ands	r3, r2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d01a      	beq.n	80024dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d013      	beq.n	80024dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0204 	bic.w	r2, r2, #4
 80024c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c8:	2208      	movs	r2, #8
 80024ca:	409a      	lsls	r2, r3
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d4:	f043 0201 	orr.w	r2, r3, #1
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e0:	2201      	movs	r2, #1
 80024e2:	409a      	lsls	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4013      	ands	r3, r2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d012      	beq.n	8002512 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00b      	beq.n	8002512 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024fe:	2201      	movs	r2, #1
 8002500:	409a      	lsls	r2, r3
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250a:	f043 0202 	orr.w	r2, r3, #2
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002516:	2204      	movs	r2, #4
 8002518:	409a      	lsls	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	4013      	ands	r3, r2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d012      	beq.n	8002548 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00b      	beq.n	8002548 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002534:	2204      	movs	r2, #4
 8002536:	409a      	lsls	r2, r3
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002540:	f043 0204 	orr.w	r2, r3, #4
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254c:	2210      	movs	r2, #16
 800254e:	409a      	lsls	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4013      	ands	r3, r2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d043      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	2b00      	cmp	r3, #0
 8002564:	d03c      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256a:	2210      	movs	r2, #16
 800256c:	409a      	lsls	r2, r3
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d018      	beq.n	80025b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d108      	bne.n	80025a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	2b00      	cmp	r3, #0
 8002594:	d024      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	4798      	blx	r3
 800259e:	e01f      	b.n	80025e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d01b      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	4798      	blx	r3
 80025b0:	e016      	b.n	80025e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d107      	bne.n	80025d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 0208 	bic.w	r2, r2, #8
 80025ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e4:	2220      	movs	r2, #32
 80025e6:	409a      	lsls	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 808e 	beq.w	800270e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0310 	and.w	r3, r3, #16
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 8086 	beq.w	800270e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002606:	2220      	movs	r2, #32
 8002608:	409a      	lsls	r2, r3
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b05      	cmp	r3, #5
 8002618:	d136      	bne.n	8002688 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 0216 	bic.w	r2, r2, #22
 8002628:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	695a      	ldr	r2, [r3, #20]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002638:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	2b00      	cmp	r3, #0
 8002640:	d103      	bne.n	800264a <HAL_DMA_IRQHandler+0x1da>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002646:	2b00      	cmp	r3, #0
 8002648:	d007      	beq.n	800265a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0208 	bic.w	r2, r2, #8
 8002658:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265e:	223f      	movs	r2, #63	; 0x3f
 8002660:	409a      	lsls	r2, r3
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800267a:	2b00      	cmp	r3, #0
 800267c:	d07d      	beq.n	800277a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	4798      	blx	r3
        }
        return;
 8002686:	e078      	b.n	800277a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d01c      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d108      	bne.n	80026b6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d030      	beq.n	800270e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	4798      	blx	r3
 80026b4:	e02b      	b.n	800270e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d027      	beq.n	800270e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	4798      	blx	r3
 80026c6:	e022      	b.n	800270e <HAL_DMA_IRQHandler+0x29e>
 80026c8:	20000000 	.word	0x20000000
 80026cc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10f      	bne.n	80026fe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 0210 	bic.w	r2, r2, #16
 80026ec:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002712:	2b00      	cmp	r3, #0
 8002714:	d032      	beq.n	800277c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d022      	beq.n	8002768 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2205      	movs	r2, #5
 8002726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 0201 	bic.w	r2, r2, #1
 8002738:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	3301      	adds	r3, #1
 800273e:	60bb      	str	r3, [r7, #8]
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	429a      	cmp	r2, r3
 8002744:	d307      	bcc.n	8002756 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1f2      	bne.n	800273a <HAL_DMA_IRQHandler+0x2ca>
 8002754:	e000      	b.n	8002758 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002756:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	4798      	blx	r3
 8002778:	e000      	b.n	800277c <HAL_DMA_IRQHandler+0x30c>
        return;
 800277a:	bf00      	nop
    }
  }
}
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop

08002784 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	b2db      	uxtb	r3, r3
 8002792:	3b10      	subs	r3, #16
 8002794:	4a14      	ldr	r2, [pc, #80]	; (80027e8 <DMA_CalcBaseAndBitshift+0x64>)
 8002796:	fba2 2303 	umull	r2, r3, r2, r3
 800279a:	091b      	lsrs	r3, r3, #4
 800279c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800279e:	4a13      	ldr	r2, [pc, #76]	; (80027ec <DMA_CalcBaseAndBitshift+0x68>)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4413      	add	r3, r2
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	461a      	mov	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2b03      	cmp	r3, #3
 80027b0:	d909      	bls.n	80027c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027ba:	f023 0303 	bic.w	r3, r3, #3
 80027be:	1d1a      	adds	r2, r3, #4
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	659a      	str	r2, [r3, #88]	; 0x58
 80027c4:	e007      	b.n	80027d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027ce:	f023 0303 	bic.w	r3, r3, #3
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3714      	adds	r7, #20
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	aaaaaaab 	.word	0xaaaaaaab
 80027ec:	08006174 	.word	0x08006174

080027f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027f8:	2300      	movs	r3, #0
 80027fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002800:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d11f      	bne.n	800284a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	2b03      	cmp	r3, #3
 800280e:	d855      	bhi.n	80028bc <DMA_CheckFifoParam+0xcc>
 8002810:	a201      	add	r2, pc, #4	; (adr r2, 8002818 <DMA_CheckFifoParam+0x28>)
 8002812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002816:	bf00      	nop
 8002818:	08002829 	.word	0x08002829
 800281c:	0800283b 	.word	0x0800283b
 8002820:	08002829 	.word	0x08002829
 8002824:	080028bd 	.word	0x080028bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d045      	beq.n	80028c0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002838:	e042      	b.n	80028c0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002842:	d13f      	bne.n	80028c4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002848:	e03c      	b.n	80028c4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002852:	d121      	bne.n	8002898 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2b03      	cmp	r3, #3
 8002858:	d836      	bhi.n	80028c8 <DMA_CheckFifoParam+0xd8>
 800285a:	a201      	add	r2, pc, #4	; (adr r2, 8002860 <DMA_CheckFifoParam+0x70>)
 800285c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002860:	08002871 	.word	0x08002871
 8002864:	08002877 	.word	0x08002877
 8002868:	08002871 	.word	0x08002871
 800286c:	08002889 	.word	0x08002889
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	73fb      	strb	r3, [r7, #15]
      break;
 8002874:	e02f      	b.n	80028d6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d024      	beq.n	80028cc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002886:	e021      	b.n	80028cc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002890:	d11e      	bne.n	80028d0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002896:	e01b      	b.n	80028d0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	2b02      	cmp	r3, #2
 800289c:	d902      	bls.n	80028a4 <DMA_CheckFifoParam+0xb4>
 800289e:	2b03      	cmp	r3, #3
 80028a0:	d003      	beq.n	80028aa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80028a2:	e018      	b.n	80028d6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
      break;
 80028a8:	e015      	b.n	80028d6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00e      	beq.n	80028d4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	73fb      	strb	r3, [r7, #15]
      break;
 80028ba:	e00b      	b.n	80028d4 <DMA_CheckFifoParam+0xe4>
      break;
 80028bc:	bf00      	nop
 80028be:	e00a      	b.n	80028d6 <DMA_CheckFifoParam+0xe6>
      break;
 80028c0:	bf00      	nop
 80028c2:	e008      	b.n	80028d6 <DMA_CheckFifoParam+0xe6>
      break;
 80028c4:	bf00      	nop
 80028c6:	e006      	b.n	80028d6 <DMA_CheckFifoParam+0xe6>
      break;
 80028c8:	bf00      	nop
 80028ca:	e004      	b.n	80028d6 <DMA_CheckFifoParam+0xe6>
      break;
 80028cc:	bf00      	nop
 80028ce:	e002      	b.n	80028d6 <DMA_CheckFifoParam+0xe6>
      break;   
 80028d0:	bf00      	nop
 80028d2:	e000      	b.n	80028d6 <DMA_CheckFifoParam+0xe6>
      break;
 80028d4:	bf00      	nop
    }
  } 
  
  return status; 
 80028d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b089      	sub	sp, #36	; 0x24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028fa:	2300      	movs	r3, #0
 80028fc:	61fb      	str	r3, [r7, #28]
 80028fe:	e16b      	b.n	8002bd8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002900:	2201      	movs	r2, #1
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	4013      	ands	r3, r2
 8002912:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	429a      	cmp	r2, r3
 800291a:	f040 815a 	bne.w	8002bd2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d00b      	beq.n	800293e <HAL_GPIO_Init+0x5a>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b02      	cmp	r3, #2
 800292c:	d007      	beq.n	800293e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002932:	2b11      	cmp	r3, #17
 8002934:	d003      	beq.n	800293e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b12      	cmp	r3, #18
 800293c:	d130      	bne.n	80029a0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	2203      	movs	r2, #3
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4313      	orrs	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002974:	2201      	movs	r2, #1
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4013      	ands	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	091b      	lsrs	r3, r3, #4
 800298a:	f003 0201 	and.w	r2, r3, #1
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	2203      	movs	r2, #3
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d003      	beq.n	80029e0 <HAL_GPIO_Init+0xfc>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2b12      	cmp	r3, #18
 80029de:	d123      	bne.n	8002a28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	08da      	lsrs	r2, r3, #3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3208      	adds	r2, #8
 80029e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	220f      	movs	r2, #15
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	43db      	mvns	r3, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4013      	ands	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	691a      	ldr	r2, [r3, #16]
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	08da      	lsrs	r2, r3, #3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	3208      	adds	r2, #8
 8002a22:	69b9      	ldr	r1, [r7, #24]
 8002a24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	2203      	movs	r2, #3
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f003 0203 	and.w	r2, r3, #3
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 80b4 	beq.w	8002bd2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	4b5f      	ldr	r3, [pc, #380]	; (8002bec <HAL_GPIO_Init+0x308>)
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	4a5e      	ldr	r2, [pc, #376]	; (8002bec <HAL_GPIO_Init+0x308>)
 8002a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a78:	6453      	str	r3, [r2, #68]	; 0x44
 8002a7a:	4b5c      	ldr	r3, [pc, #368]	; (8002bec <HAL_GPIO_Init+0x308>)
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a86:	4a5a      	ldr	r2, [pc, #360]	; (8002bf0 <HAL_GPIO_Init+0x30c>)
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	089b      	lsrs	r3, r3, #2
 8002a8c:	3302      	adds	r3, #2
 8002a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	220f      	movs	r2, #15
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a51      	ldr	r2, [pc, #324]	; (8002bf4 <HAL_GPIO_Init+0x310>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d02b      	beq.n	8002b0a <HAL_GPIO_Init+0x226>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a50      	ldr	r2, [pc, #320]	; (8002bf8 <HAL_GPIO_Init+0x314>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d025      	beq.n	8002b06 <HAL_GPIO_Init+0x222>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a4f      	ldr	r2, [pc, #316]	; (8002bfc <HAL_GPIO_Init+0x318>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d01f      	beq.n	8002b02 <HAL_GPIO_Init+0x21e>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a4e      	ldr	r2, [pc, #312]	; (8002c00 <HAL_GPIO_Init+0x31c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d019      	beq.n	8002afe <HAL_GPIO_Init+0x21a>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a4d      	ldr	r2, [pc, #308]	; (8002c04 <HAL_GPIO_Init+0x320>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d013      	beq.n	8002afa <HAL_GPIO_Init+0x216>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a4c      	ldr	r2, [pc, #304]	; (8002c08 <HAL_GPIO_Init+0x324>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d00d      	beq.n	8002af6 <HAL_GPIO_Init+0x212>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a4b      	ldr	r2, [pc, #300]	; (8002c0c <HAL_GPIO_Init+0x328>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d007      	beq.n	8002af2 <HAL_GPIO_Init+0x20e>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a4a      	ldr	r2, [pc, #296]	; (8002c10 <HAL_GPIO_Init+0x32c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d101      	bne.n	8002aee <HAL_GPIO_Init+0x20a>
 8002aea:	2307      	movs	r3, #7
 8002aec:	e00e      	b.n	8002b0c <HAL_GPIO_Init+0x228>
 8002aee:	2308      	movs	r3, #8
 8002af0:	e00c      	b.n	8002b0c <HAL_GPIO_Init+0x228>
 8002af2:	2306      	movs	r3, #6
 8002af4:	e00a      	b.n	8002b0c <HAL_GPIO_Init+0x228>
 8002af6:	2305      	movs	r3, #5
 8002af8:	e008      	b.n	8002b0c <HAL_GPIO_Init+0x228>
 8002afa:	2304      	movs	r3, #4
 8002afc:	e006      	b.n	8002b0c <HAL_GPIO_Init+0x228>
 8002afe:	2303      	movs	r3, #3
 8002b00:	e004      	b.n	8002b0c <HAL_GPIO_Init+0x228>
 8002b02:	2302      	movs	r3, #2
 8002b04:	e002      	b.n	8002b0c <HAL_GPIO_Init+0x228>
 8002b06:	2301      	movs	r3, #1
 8002b08:	e000      	b.n	8002b0c <HAL_GPIO_Init+0x228>
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	69fa      	ldr	r2, [r7, #28]
 8002b0e:	f002 0203 	and.w	r2, r2, #3
 8002b12:	0092      	lsls	r2, r2, #2
 8002b14:	4093      	lsls	r3, r2
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b1c:	4934      	ldr	r1, [pc, #208]	; (8002bf0 <HAL_GPIO_Init+0x30c>)
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	089b      	lsrs	r3, r3, #2
 8002b22:	3302      	adds	r3, #2
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b2a:	4b3a      	ldr	r3, [pc, #232]	; (8002c14 <HAL_GPIO_Init+0x330>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	43db      	mvns	r3, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4013      	ands	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b4e:	4a31      	ldr	r2, [pc, #196]	; (8002c14 <HAL_GPIO_Init+0x330>)
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b54:	4b2f      	ldr	r3, [pc, #188]	; (8002c14 <HAL_GPIO_Init+0x330>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4013      	ands	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b78:	4a26      	ldr	r2, [pc, #152]	; (8002c14 <HAL_GPIO_Init+0x330>)
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b7e:	4b25      	ldr	r3, [pc, #148]	; (8002c14 <HAL_GPIO_Init+0x330>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	43db      	mvns	r3, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ba2:	4a1c      	ldr	r2, [pc, #112]	; (8002c14 <HAL_GPIO_Init+0x330>)
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ba8:	4b1a      	ldr	r3, [pc, #104]	; (8002c14 <HAL_GPIO_Init+0x330>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d003      	beq.n	8002bcc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bcc:	4a11      	ldr	r2, [pc, #68]	; (8002c14 <HAL_GPIO_Init+0x330>)
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	61fb      	str	r3, [r7, #28]
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	2b0f      	cmp	r3, #15
 8002bdc:	f67f ae90 	bls.w	8002900 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002be0:	bf00      	nop
 8002be2:	3724      	adds	r7, #36	; 0x24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	40013800 	.word	0x40013800
 8002bf4:	40020000 	.word	0x40020000
 8002bf8:	40020400 	.word	0x40020400
 8002bfc:	40020800 	.word	0x40020800
 8002c00:	40020c00 	.word	0x40020c00
 8002c04:	40021000 	.word	0x40021000
 8002c08:	40021400 	.word	0x40021400
 8002c0c:	40021800 	.word	0x40021800
 8002c10:	40021c00 	.word	0x40021c00
 8002c14:	40013c00 	.word	0x40013c00

08002c18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e25b      	b.n	80030e2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d075      	beq.n	8002d22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c36:	4ba3      	ldr	r3, [pc, #652]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d00c      	beq.n	8002c5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c42:	4ba0      	ldr	r3, [pc, #640]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c4a:	2b08      	cmp	r3, #8
 8002c4c:	d112      	bne.n	8002c74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c4e:	4b9d      	ldr	r3, [pc, #628]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c5a:	d10b      	bne.n	8002c74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c5c:	4b99      	ldr	r3, [pc, #612]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d05b      	beq.n	8002d20 <HAL_RCC_OscConfig+0x108>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d157      	bne.n	8002d20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e236      	b.n	80030e2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c7c:	d106      	bne.n	8002c8c <HAL_RCC_OscConfig+0x74>
 8002c7e:	4b91      	ldr	r3, [pc, #580]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a90      	ldr	r2, [pc, #576]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	e01d      	b.n	8002cc8 <HAL_RCC_OscConfig+0xb0>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c94:	d10c      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x98>
 8002c96:	4b8b      	ldr	r3, [pc, #556]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a8a      	ldr	r2, [pc, #552]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002c9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	4b88      	ldr	r3, [pc, #544]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a87      	ldr	r2, [pc, #540]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	e00b      	b.n	8002cc8 <HAL_RCC_OscConfig+0xb0>
 8002cb0:	4b84      	ldr	r3, [pc, #528]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a83      	ldr	r2, [pc, #524]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cba:	6013      	str	r3, [r2, #0]
 8002cbc:	4b81      	ldr	r3, [pc, #516]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a80      	ldr	r2, [pc, #512]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002cc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d013      	beq.n	8002cf8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd0:	f7ff f9e0 	bl	8002094 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cd8:	f7ff f9dc 	bl	8002094 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b64      	cmp	r3, #100	; 0x64
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e1fb      	b.n	80030e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cea:	4b76      	ldr	r3, [pc, #472]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0f0      	beq.n	8002cd8 <HAL_RCC_OscConfig+0xc0>
 8002cf6:	e014      	b.n	8002d22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf8:	f7ff f9cc 	bl	8002094 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d00:	f7ff f9c8 	bl	8002094 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b64      	cmp	r3, #100	; 0x64
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e1e7      	b.n	80030e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d12:	4b6c      	ldr	r3, [pc, #432]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1f0      	bne.n	8002d00 <HAL_RCC_OscConfig+0xe8>
 8002d1e:	e000      	b.n	8002d22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d063      	beq.n	8002df6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d2e:	4b65      	ldr	r3, [pc, #404]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 030c 	and.w	r3, r3, #12
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00b      	beq.n	8002d52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d3a:	4b62      	ldr	r3, [pc, #392]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d42:	2b08      	cmp	r3, #8
 8002d44:	d11c      	bne.n	8002d80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d46:	4b5f      	ldr	r3, [pc, #380]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d116      	bne.n	8002d80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d52:	4b5c      	ldr	r3, [pc, #368]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d005      	beq.n	8002d6a <HAL_RCC_OscConfig+0x152>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d001      	beq.n	8002d6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e1bb      	b.n	80030e2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d6a:	4b56      	ldr	r3, [pc, #344]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	4952      	ldr	r1, [pc, #328]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d7e:	e03a      	b.n	8002df6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d020      	beq.n	8002dca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d88:	4b4f      	ldr	r3, [pc, #316]	; (8002ec8 <HAL_RCC_OscConfig+0x2b0>)
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8e:	f7ff f981 	bl	8002094 <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d96:	f7ff f97d 	bl	8002094 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e19c      	b.n	80030e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da8:	4b46      	ldr	r3, [pc, #280]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0f0      	beq.n	8002d96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db4:	4b43      	ldr	r3, [pc, #268]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	4940      	ldr	r1, [pc, #256]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	600b      	str	r3, [r1, #0]
 8002dc8:	e015      	b.n	8002df6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dca:	4b3f      	ldr	r3, [pc, #252]	; (8002ec8 <HAL_RCC_OscConfig+0x2b0>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd0:	f7ff f960 	bl	8002094 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dd8:	f7ff f95c 	bl	8002094 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e17b      	b.n	80030e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dea:	4b36      	ldr	r3, [pc, #216]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f0      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d030      	beq.n	8002e64 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d016      	beq.n	8002e38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e0a:	4b30      	ldr	r3, [pc, #192]	; (8002ecc <HAL_RCC_OscConfig+0x2b4>)
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e10:	f7ff f940 	bl	8002094 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e18:	f7ff f93c 	bl	8002094 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e15b      	b.n	80030e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e2a:	4b26      	ldr	r3, [pc, #152]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0f0      	beq.n	8002e18 <HAL_RCC_OscConfig+0x200>
 8002e36:	e015      	b.n	8002e64 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e38:	4b24      	ldr	r3, [pc, #144]	; (8002ecc <HAL_RCC_OscConfig+0x2b4>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e3e:	f7ff f929 	bl	8002094 <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e44:	e008      	b.n	8002e58 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e46:	f7ff f925 	bl	8002094 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e144      	b.n	80030e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e58:	4b1a      	ldr	r3, [pc, #104]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002e5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1f0      	bne.n	8002e46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 80a0 	beq.w	8002fb2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e72:	2300      	movs	r3, #0
 8002e74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e76:	4b13      	ldr	r3, [pc, #76]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10f      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e82:	2300      	movs	r3, #0
 8002e84:	60bb      	str	r3, [r7, #8]
 8002e86:	4b0f      	ldr	r3, [pc, #60]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	4a0e      	ldr	r2, [pc, #56]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e90:	6413      	str	r3, [r2, #64]	; 0x40
 8002e92:	4b0c      	ldr	r3, [pc, #48]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e9a:	60bb      	str	r3, [r7, #8]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea2:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <HAL_RCC_OscConfig+0x2b8>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d121      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eae:	4b08      	ldr	r3, [pc, #32]	; (8002ed0 <HAL_RCC_OscConfig+0x2b8>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a07      	ldr	r2, [pc, #28]	; (8002ed0 <HAL_RCC_OscConfig+0x2b8>)
 8002eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eba:	f7ff f8eb 	bl	8002094 <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec0:	e011      	b.n	8002ee6 <HAL_RCC_OscConfig+0x2ce>
 8002ec2:	bf00      	nop
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	42470000 	.word	0x42470000
 8002ecc:	42470e80 	.word	0x42470e80
 8002ed0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ed4:	f7ff f8de 	bl	8002094 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e0fd      	b.n	80030e2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee6:	4b81      	ldr	r3, [pc, #516]	; (80030ec <HAL_RCC_OscConfig+0x4d4>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0f0      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d106      	bne.n	8002f08 <HAL_RCC_OscConfig+0x2f0>
 8002efa:	4b7d      	ldr	r3, [pc, #500]	; (80030f0 <HAL_RCC_OscConfig+0x4d8>)
 8002efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efe:	4a7c      	ldr	r2, [pc, #496]	; (80030f0 <HAL_RCC_OscConfig+0x4d8>)
 8002f00:	f043 0301 	orr.w	r3, r3, #1
 8002f04:	6713      	str	r3, [r2, #112]	; 0x70
 8002f06:	e01c      	b.n	8002f42 <HAL_RCC_OscConfig+0x32a>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	2b05      	cmp	r3, #5
 8002f0e:	d10c      	bne.n	8002f2a <HAL_RCC_OscConfig+0x312>
 8002f10:	4b77      	ldr	r3, [pc, #476]	; (80030f0 <HAL_RCC_OscConfig+0x4d8>)
 8002f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f14:	4a76      	ldr	r2, [pc, #472]	; (80030f0 <HAL_RCC_OscConfig+0x4d8>)
 8002f16:	f043 0304 	orr.w	r3, r3, #4
 8002f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f1c:	4b74      	ldr	r3, [pc, #464]	; (80030f0 <HAL_RCC_OscConfig+0x4d8>)
 8002f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f20:	4a73      	ldr	r2, [pc, #460]	; (80030f0 <HAL_RCC_OscConfig+0x4d8>)
 8002f22:	f043 0301 	orr.w	r3, r3, #1
 8002f26:	6713      	str	r3, [r2, #112]	; 0x70
 8002f28:	e00b      	b.n	8002f42 <HAL_RCC_OscConfig+0x32a>
 8002f2a:	4b71      	ldr	r3, [pc, #452]	; (80030f0 <HAL_RCC_OscConfig+0x4d8>)
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2e:	4a70      	ldr	r2, [pc, #448]	; (80030f0 <HAL_RCC_OscConfig+0x4d8>)
 8002f30:	f023 0301 	bic.w	r3, r3, #1
 8002f34:	6713      	str	r3, [r2, #112]	; 0x70
 8002f36:	4b6e      	ldr	r3, [pc, #440]	; (80030f0 <HAL_RCC_OscConfig+0x4d8>)
 8002f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3a:	4a6d      	ldr	r2, [pc, #436]	; (80030f0 <HAL_RCC_OscConfig+0x4d8>)
 8002f3c:	f023 0304 	bic.w	r3, r3, #4
 8002f40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d015      	beq.n	8002f76 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4a:	f7ff f8a3 	bl	8002094 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f50:	e00a      	b.n	8002f68 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f52:	f7ff f89f 	bl	8002094 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e0bc      	b.n	80030e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f68:	4b61      	ldr	r3, [pc, #388]	; (80030f0 <HAL_RCC_OscConfig+0x4d8>)
 8002f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0ee      	beq.n	8002f52 <HAL_RCC_OscConfig+0x33a>
 8002f74:	e014      	b.n	8002fa0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f76:	f7ff f88d 	bl	8002094 <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f7c:	e00a      	b.n	8002f94 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f7e:	f7ff f889 	bl	8002094 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e0a6      	b.n	80030e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f94:	4b56      	ldr	r3, [pc, #344]	; (80030f0 <HAL_RCC_OscConfig+0x4d8>)
 8002f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1ee      	bne.n	8002f7e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fa0:	7dfb      	ldrb	r3, [r7, #23]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d105      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa6:	4b52      	ldr	r3, [pc, #328]	; (80030f0 <HAL_RCC_OscConfig+0x4d8>)
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	4a51      	ldr	r2, [pc, #324]	; (80030f0 <HAL_RCC_OscConfig+0x4d8>)
 8002fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fb0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 8092 	beq.w	80030e0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fbc:	4b4c      	ldr	r3, [pc, #304]	; (80030f0 <HAL_RCC_OscConfig+0x4d8>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 030c 	and.w	r3, r3, #12
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d05c      	beq.n	8003082 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d141      	bne.n	8003054 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd0:	4b48      	ldr	r3, [pc, #288]	; (80030f4 <HAL_RCC_OscConfig+0x4dc>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd6:	f7ff f85d 	bl	8002094 <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fde:	f7ff f859 	bl	8002094 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e078      	b.n	80030e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff0:	4b3f      	ldr	r3, [pc, #252]	; (80030f0 <HAL_RCC_OscConfig+0x4d8>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1f0      	bne.n	8002fde <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	69da      	ldr	r2, [r3, #28]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	431a      	orrs	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	019b      	lsls	r3, r3, #6
 800300c:	431a      	orrs	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003012:	085b      	lsrs	r3, r3, #1
 8003014:	3b01      	subs	r3, #1
 8003016:	041b      	lsls	r3, r3, #16
 8003018:	431a      	orrs	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301e:	061b      	lsls	r3, r3, #24
 8003020:	4933      	ldr	r1, [pc, #204]	; (80030f0 <HAL_RCC_OscConfig+0x4d8>)
 8003022:	4313      	orrs	r3, r2
 8003024:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003026:	4b33      	ldr	r3, [pc, #204]	; (80030f4 <HAL_RCC_OscConfig+0x4dc>)
 8003028:	2201      	movs	r2, #1
 800302a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302c:	f7ff f832 	bl	8002094 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003034:	f7ff f82e 	bl	8002094 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e04d      	b.n	80030e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003046:	4b2a      	ldr	r3, [pc, #168]	; (80030f0 <HAL_RCC_OscConfig+0x4d8>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0f0      	beq.n	8003034 <HAL_RCC_OscConfig+0x41c>
 8003052:	e045      	b.n	80030e0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003054:	4b27      	ldr	r3, [pc, #156]	; (80030f4 <HAL_RCC_OscConfig+0x4dc>)
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305a:	f7ff f81b 	bl	8002094 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003062:	f7ff f817 	bl	8002094 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e036      	b.n	80030e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003074:	4b1e      	ldr	r3, [pc, #120]	; (80030f0 <HAL_RCC_OscConfig+0x4d8>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1f0      	bne.n	8003062 <HAL_RCC_OscConfig+0x44a>
 8003080:	e02e      	b.n	80030e0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d101      	bne.n	800308e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e029      	b.n	80030e2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800308e:	4b18      	ldr	r3, [pc, #96]	; (80030f0 <HAL_RCC_OscConfig+0x4d8>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d11c      	bne.n	80030dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d115      	bne.n	80030dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030b6:	4013      	ands	r3, r2
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030bc:	4293      	cmp	r3, r2
 80030be:	d10d      	bne.n	80030dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d106      	bne.n	80030dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80030d8:	429a      	cmp	r2, r3
 80030da:	d001      	beq.n	80030e0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e000      	b.n	80030e2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40007000 	.word	0x40007000
 80030f0:	40023800 	.word	0x40023800
 80030f4:	42470060 	.word	0x42470060

080030f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0cc      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800310c:	4b68      	ldr	r3, [pc, #416]	; (80032b0 <HAL_RCC_ClockConfig+0x1b8>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 030f 	and.w	r3, r3, #15
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	429a      	cmp	r2, r3
 8003118:	d90c      	bls.n	8003134 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311a:	4b65      	ldr	r3, [pc, #404]	; (80032b0 <HAL_RCC_ClockConfig+0x1b8>)
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003122:	4b63      	ldr	r3, [pc, #396]	; (80032b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	429a      	cmp	r2, r3
 800312e:	d001      	beq.n	8003134 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e0b8      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d020      	beq.n	8003182 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0304 	and.w	r3, r3, #4
 8003148:	2b00      	cmp	r3, #0
 800314a:	d005      	beq.n	8003158 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800314c:	4b59      	ldr	r3, [pc, #356]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	4a58      	ldr	r2, [pc, #352]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003152:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003156:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0308 	and.w	r3, r3, #8
 8003160:	2b00      	cmp	r3, #0
 8003162:	d005      	beq.n	8003170 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003164:	4b53      	ldr	r3, [pc, #332]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	4a52      	ldr	r2, [pc, #328]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800316e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003170:	4b50      	ldr	r3, [pc, #320]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	494d      	ldr	r1, [pc, #308]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 800317e:	4313      	orrs	r3, r2
 8003180:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d044      	beq.n	8003218 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d107      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003196:	4b47      	ldr	r3, [pc, #284]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d119      	bne.n	80031d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e07f      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d003      	beq.n	80031b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031b2:	2b03      	cmp	r3, #3
 80031b4:	d107      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b6:	4b3f      	ldr	r3, [pc, #252]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d109      	bne.n	80031d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e06f      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c6:	4b3b      	ldr	r3, [pc, #236]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e067      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031d6:	4b37      	ldr	r3, [pc, #220]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f023 0203 	bic.w	r2, r3, #3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	4934      	ldr	r1, [pc, #208]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031e8:	f7fe ff54 	bl	8002094 <HAL_GetTick>
 80031ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ee:	e00a      	b.n	8003206 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031f0:	f7fe ff50 	bl	8002094 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80031fe:	4293      	cmp	r3, r2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e04f      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003206:	4b2b      	ldr	r3, [pc, #172]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 020c 	and.w	r2, r3, #12
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	429a      	cmp	r2, r3
 8003216:	d1eb      	bne.n	80031f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003218:	4b25      	ldr	r3, [pc, #148]	; (80032b0 <HAL_RCC_ClockConfig+0x1b8>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 030f 	and.w	r3, r3, #15
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	429a      	cmp	r2, r3
 8003224:	d20c      	bcs.n	8003240 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003226:	4b22      	ldr	r3, [pc, #136]	; (80032b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800322e:	4b20      	ldr	r3, [pc, #128]	; (80032b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	429a      	cmp	r2, r3
 800323a:	d001      	beq.n	8003240 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e032      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b00      	cmp	r3, #0
 800324a:	d008      	beq.n	800325e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800324c:	4b19      	ldr	r3, [pc, #100]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	4916      	ldr	r1, [pc, #88]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	4313      	orrs	r3, r2
 800325c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b00      	cmp	r3, #0
 8003268:	d009      	beq.n	800327e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800326a:	4b12      	ldr	r3, [pc, #72]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	490e      	ldr	r1, [pc, #56]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	4313      	orrs	r3, r2
 800327c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800327e:	f000 f821 	bl	80032c4 <HAL_RCC_GetSysClockFreq>
 8003282:	4601      	mov	r1, r0
 8003284:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	091b      	lsrs	r3, r3, #4
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	4a0a      	ldr	r2, [pc, #40]	; (80032b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003290:	5cd3      	ldrb	r3, [r2, r3]
 8003292:	fa21 f303 	lsr.w	r3, r1, r3
 8003296:	4a09      	ldr	r2, [pc, #36]	; (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 8003298:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800329a:	4b09      	ldr	r3, [pc, #36]	; (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fe feb4 	bl	800200c <HAL_InitTick>

  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	40023c00 	.word	0x40023c00
 80032b4:	40023800 	.word	0x40023800
 80032b8:	0800615c 	.word	0x0800615c
 80032bc:	20000000 	.word	0x20000000
 80032c0:	20000004 	.word	0x20000004

080032c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	607b      	str	r3, [r7, #4]
 80032ce:	2300      	movs	r3, #0
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	2300      	movs	r3, #0
 80032d4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032da:	4b63      	ldr	r3, [pc, #396]	; (8003468 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 030c 	and.w	r3, r3, #12
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d007      	beq.n	80032f6 <HAL_RCC_GetSysClockFreq+0x32>
 80032e6:	2b08      	cmp	r3, #8
 80032e8:	d008      	beq.n	80032fc <HAL_RCC_GetSysClockFreq+0x38>
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f040 80b4 	bne.w	8003458 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032f0:	4b5e      	ldr	r3, [pc, #376]	; (800346c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80032f2:	60bb      	str	r3, [r7, #8]
       break;
 80032f4:	e0b3      	b.n	800345e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032f6:	4b5e      	ldr	r3, [pc, #376]	; (8003470 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80032f8:	60bb      	str	r3, [r7, #8]
      break;
 80032fa:	e0b0      	b.n	800345e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032fc:	4b5a      	ldr	r3, [pc, #360]	; (8003468 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003304:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003306:	4b58      	ldr	r3, [pc, #352]	; (8003468 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d04a      	beq.n	80033a8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003312:	4b55      	ldr	r3, [pc, #340]	; (8003468 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	099b      	lsrs	r3, r3, #6
 8003318:	f04f 0400 	mov.w	r4, #0
 800331c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003320:	f04f 0200 	mov.w	r2, #0
 8003324:	ea03 0501 	and.w	r5, r3, r1
 8003328:	ea04 0602 	and.w	r6, r4, r2
 800332c:	4629      	mov	r1, r5
 800332e:	4632      	mov	r2, r6
 8003330:	f04f 0300 	mov.w	r3, #0
 8003334:	f04f 0400 	mov.w	r4, #0
 8003338:	0154      	lsls	r4, r2, #5
 800333a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800333e:	014b      	lsls	r3, r1, #5
 8003340:	4619      	mov	r1, r3
 8003342:	4622      	mov	r2, r4
 8003344:	1b49      	subs	r1, r1, r5
 8003346:	eb62 0206 	sbc.w	r2, r2, r6
 800334a:	f04f 0300 	mov.w	r3, #0
 800334e:	f04f 0400 	mov.w	r4, #0
 8003352:	0194      	lsls	r4, r2, #6
 8003354:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003358:	018b      	lsls	r3, r1, #6
 800335a:	1a5b      	subs	r3, r3, r1
 800335c:	eb64 0402 	sbc.w	r4, r4, r2
 8003360:	f04f 0100 	mov.w	r1, #0
 8003364:	f04f 0200 	mov.w	r2, #0
 8003368:	00e2      	lsls	r2, r4, #3
 800336a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800336e:	00d9      	lsls	r1, r3, #3
 8003370:	460b      	mov	r3, r1
 8003372:	4614      	mov	r4, r2
 8003374:	195b      	adds	r3, r3, r5
 8003376:	eb44 0406 	adc.w	r4, r4, r6
 800337a:	f04f 0100 	mov.w	r1, #0
 800337e:	f04f 0200 	mov.w	r2, #0
 8003382:	0262      	lsls	r2, r4, #9
 8003384:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003388:	0259      	lsls	r1, r3, #9
 800338a:	460b      	mov	r3, r1
 800338c:	4614      	mov	r4, r2
 800338e:	4618      	mov	r0, r3
 8003390:	4621      	mov	r1, r4
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f04f 0400 	mov.w	r4, #0
 8003398:	461a      	mov	r2, r3
 800339a:	4623      	mov	r3, r4
 800339c:	f7fd fbfc 	bl	8000b98 <__aeabi_uldivmod>
 80033a0:	4603      	mov	r3, r0
 80033a2:	460c      	mov	r4, r1
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	e049      	b.n	800343c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033a8:	4b2f      	ldr	r3, [pc, #188]	; (8003468 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	099b      	lsrs	r3, r3, #6
 80033ae:	f04f 0400 	mov.w	r4, #0
 80033b2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80033b6:	f04f 0200 	mov.w	r2, #0
 80033ba:	ea03 0501 	and.w	r5, r3, r1
 80033be:	ea04 0602 	and.w	r6, r4, r2
 80033c2:	4629      	mov	r1, r5
 80033c4:	4632      	mov	r2, r6
 80033c6:	f04f 0300 	mov.w	r3, #0
 80033ca:	f04f 0400 	mov.w	r4, #0
 80033ce:	0154      	lsls	r4, r2, #5
 80033d0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80033d4:	014b      	lsls	r3, r1, #5
 80033d6:	4619      	mov	r1, r3
 80033d8:	4622      	mov	r2, r4
 80033da:	1b49      	subs	r1, r1, r5
 80033dc:	eb62 0206 	sbc.w	r2, r2, r6
 80033e0:	f04f 0300 	mov.w	r3, #0
 80033e4:	f04f 0400 	mov.w	r4, #0
 80033e8:	0194      	lsls	r4, r2, #6
 80033ea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80033ee:	018b      	lsls	r3, r1, #6
 80033f0:	1a5b      	subs	r3, r3, r1
 80033f2:	eb64 0402 	sbc.w	r4, r4, r2
 80033f6:	f04f 0100 	mov.w	r1, #0
 80033fa:	f04f 0200 	mov.w	r2, #0
 80033fe:	00e2      	lsls	r2, r4, #3
 8003400:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003404:	00d9      	lsls	r1, r3, #3
 8003406:	460b      	mov	r3, r1
 8003408:	4614      	mov	r4, r2
 800340a:	195b      	adds	r3, r3, r5
 800340c:	eb44 0406 	adc.w	r4, r4, r6
 8003410:	f04f 0100 	mov.w	r1, #0
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	02a2      	lsls	r2, r4, #10
 800341a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800341e:	0299      	lsls	r1, r3, #10
 8003420:	460b      	mov	r3, r1
 8003422:	4614      	mov	r4, r2
 8003424:	4618      	mov	r0, r3
 8003426:	4621      	mov	r1, r4
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f04f 0400 	mov.w	r4, #0
 800342e:	461a      	mov	r2, r3
 8003430:	4623      	mov	r3, r4
 8003432:	f7fd fbb1 	bl	8000b98 <__aeabi_uldivmod>
 8003436:	4603      	mov	r3, r0
 8003438:	460c      	mov	r4, r1
 800343a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800343c:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	0c1b      	lsrs	r3, r3, #16
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	3301      	adds	r3, #1
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	fbb2 f3f3 	udiv	r3, r2, r3
 8003454:	60bb      	str	r3, [r7, #8]
      break;
 8003456:	e002      	b.n	800345e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003458:	4b04      	ldr	r3, [pc, #16]	; (800346c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800345a:	60bb      	str	r3, [r7, #8]
      break;
 800345c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800345e:	68bb      	ldr	r3, [r7, #8]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003468:	40023800 	.word	0x40023800
 800346c:	00f42400 	.word	0x00f42400
 8003470:	007a1200 	.word	0x007a1200

08003474 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003478:	4b03      	ldr	r3, [pc, #12]	; (8003488 <HAL_RCC_GetHCLKFreq+0x14>)
 800347a:	681b      	ldr	r3, [r3, #0]
}
 800347c:	4618      	mov	r0, r3
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	20000000 	.word	0x20000000

0800348c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003490:	f7ff fff0 	bl	8003474 <HAL_RCC_GetHCLKFreq>
 8003494:	4601      	mov	r1, r0
 8003496:	4b05      	ldr	r3, [pc, #20]	; (80034ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	0a9b      	lsrs	r3, r3, #10
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	4a03      	ldr	r2, [pc, #12]	; (80034b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034a2:	5cd3      	ldrb	r3, [r2, r3]
 80034a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40023800 	.word	0x40023800
 80034b0:	0800616c 	.word	0x0800616c

080034b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034b8:	f7ff ffdc 	bl	8003474 <HAL_RCC_GetHCLKFreq>
 80034bc:	4601      	mov	r1, r0
 80034be:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	0b5b      	lsrs	r3, r3, #13
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	4a03      	ldr	r2, [pc, #12]	; (80034d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034ca:	5cd3      	ldrb	r3, [r2, r3]
 80034cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40023800 	.word	0x40023800
 80034d8:	0800616c 	.word	0x0800616c

080034dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e03f      	b.n	800356e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d106      	bne.n	8003508 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7fe fc16 	bl	8001d34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2224      	movs	r2, #36	; 0x24
 800350c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68da      	ldr	r2, [r3, #12]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800351e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 fb97 	bl	8003c54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	691a      	ldr	r2, [r3, #16]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003534:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	695a      	ldr	r2, [r3, #20]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003544:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68da      	ldr	r2, [r3, #12]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003554:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2220      	movs	r2, #32
 8003560:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2220      	movs	r2, #32
 8003568:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b088      	sub	sp, #32
 800357a:	af02      	add	r7, sp, #8
 800357c:	60f8      	str	r0, [r7, #12]
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	603b      	str	r3, [r7, #0]
 8003582:	4613      	mov	r3, r2
 8003584:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003586:	2300      	movs	r3, #0
 8003588:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b20      	cmp	r3, #32
 8003594:	f040 8083 	bne.w	800369e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d002      	beq.n	80035a4 <HAL_UART_Transmit+0x2e>
 800359e:	88fb      	ldrh	r3, [r7, #6]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e07b      	b.n	80036a0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <HAL_UART_Transmit+0x40>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e074      	b.n	80036a0 <HAL_UART_Transmit+0x12a>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2221      	movs	r2, #33	; 0x21
 80035c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80035cc:	f7fe fd62 	bl	8002094 <HAL_GetTick>
 80035d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	88fa      	ldrh	r2, [r7, #6]
 80035d6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	88fa      	ldrh	r2, [r7, #6]
 80035dc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80035e6:	e042      	b.n	800366e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	3b01      	subs	r3, #1
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035fe:	d122      	bne.n	8003646 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	2200      	movs	r2, #0
 8003608:	2180      	movs	r1, #128	; 0x80
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f000 f9b6 	bl	800397c <UART_WaitOnFlagUntilTimeout>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e042      	b.n	80036a0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	881b      	ldrh	r3, [r3, #0]
 8003622:	461a      	mov	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800362c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d103      	bne.n	800363e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	3302      	adds	r3, #2
 800363a:	60bb      	str	r3, [r7, #8]
 800363c:	e017      	b.n	800366e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	3301      	adds	r3, #1
 8003642:	60bb      	str	r3, [r7, #8]
 8003644:	e013      	b.n	800366e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	2200      	movs	r2, #0
 800364e:	2180      	movs	r1, #128	; 0x80
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f000 f993 	bl	800397c <UART_WaitOnFlagUntilTimeout>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e01f      	b.n	80036a0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	1c5a      	adds	r2, r3, #1
 8003664:	60ba      	str	r2, [r7, #8]
 8003666:	781a      	ldrb	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003672:	b29b      	uxth	r3, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1b7      	bne.n	80035e8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	2200      	movs	r2, #0
 8003680:	2140      	movs	r1, #64	; 0x40
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 f97a 	bl	800397c <UART_WaitOnFlagUntilTimeout>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e006      	b.n	80036a0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2220      	movs	r2, #32
 8003696:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800369a:	2300      	movs	r3, #0
 800369c:	e000      	b.n	80036a0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800369e:	2302      	movs	r3, #2
  }
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	4613      	mov	r3, r2
 80036b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b20      	cmp	r3, #32
 80036c0:	d140      	bne.n	8003744 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d002      	beq.n	80036ce <HAL_UART_Receive_IT+0x26>
 80036c8:	88fb      	ldrh	r3, [r7, #6]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e039      	b.n	8003746 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d101      	bne.n	80036e0 <HAL_UART_Receive_IT+0x38>
 80036dc:	2302      	movs	r3, #2
 80036de:	e032      	b.n	8003746 <HAL_UART_Receive_IT+0x9e>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	88fa      	ldrh	r2, [r7, #6]
 80036f2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	88fa      	ldrh	r2, [r7, #6]
 80036f8:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2222      	movs	r2, #34	; 0x22
 8003704:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800371e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695a      	ldr	r2, [r3, #20]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 0201 	orr.w	r2, r2, #1
 800372e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68da      	ldr	r2, [r3, #12]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0220 	orr.w	r2, r2, #32
 800373e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003740:	2300      	movs	r3, #0
 8003742:	e000      	b.n	8003746 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003744:	2302      	movs	r3, #2
  }
}
 8003746:	4618      	mov	r0, r3
 8003748:	3714      	adds	r7, #20
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
	...

08003754 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b088      	sub	sp, #32
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003774:	2300      	movs	r3, #0
 8003776:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003778:	2300      	movs	r3, #0
 800377a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	f003 030f 	and.w	r3, r3, #15
 8003782:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10d      	bne.n	80037a6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	f003 0320 	and.w	r3, r3, #32
 8003790:	2b00      	cmp	r3, #0
 8003792:	d008      	beq.n	80037a6 <HAL_UART_IRQHandler+0x52>
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	f003 0320 	and.w	r3, r3, #32
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f9d6 	bl	8003b50 <UART_Receive_IT>
      return;
 80037a4:	e0d1      	b.n	800394a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 80b0 	beq.w	800390e <HAL_UART_IRQHandler+0x1ba>
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d105      	bne.n	80037c4 <HAL_UART_IRQHandler+0x70>
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 80a5 	beq.w	800390e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00a      	beq.n	80037e4 <HAL_UART_IRQHandler+0x90>
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d005      	beq.n	80037e4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037dc:	f043 0201 	orr.w	r2, r3, #1
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	f003 0304 	and.w	r3, r3, #4
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00a      	beq.n	8003804 <HAL_UART_IRQHandler+0xb0>
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d005      	beq.n	8003804 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fc:	f043 0202 	orr.w	r2, r3, #2
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00a      	beq.n	8003824 <HAL_UART_IRQHandler+0xd0>
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b00      	cmp	r3, #0
 8003816:	d005      	beq.n	8003824 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381c:	f043 0204 	orr.w	r2, r3, #4
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00f      	beq.n	800384e <HAL_UART_IRQHandler+0xfa>
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	f003 0320 	and.w	r3, r3, #32
 8003834:	2b00      	cmp	r3, #0
 8003836:	d104      	bne.n	8003842 <HAL_UART_IRQHandler+0xee>
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d005      	beq.n	800384e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003846:	f043 0208 	orr.w	r2, r3, #8
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003852:	2b00      	cmp	r3, #0
 8003854:	d078      	beq.n	8003948 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	f003 0320 	and.w	r3, r3, #32
 800385c:	2b00      	cmp	r3, #0
 800385e:	d007      	beq.n	8003870 <HAL_UART_IRQHandler+0x11c>
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	f003 0320 	and.w	r3, r3, #32
 8003866:	2b00      	cmp	r3, #0
 8003868:	d002      	beq.n	8003870 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f970 	bl	8003b50 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387a:	2b40      	cmp	r3, #64	; 0x40
 800387c:	bf0c      	ite	eq
 800387e:	2301      	moveq	r3, #1
 8003880:	2300      	movne	r3, #0
 8003882:	b2db      	uxtb	r3, r3
 8003884:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b00      	cmp	r3, #0
 8003890:	d102      	bne.n	8003898 <HAL_UART_IRQHandler+0x144>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d031      	beq.n	80038fc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 f8b9 	bl	8003a10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a8:	2b40      	cmp	r3, #64	; 0x40
 80038aa:	d123      	bne.n	80038f4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	695a      	ldr	r2, [r3, #20]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038ba:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d013      	beq.n	80038ec <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c8:	4a21      	ldr	r2, [pc, #132]	; (8003950 <HAL_UART_IRQHandler+0x1fc>)
 80038ca:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fe fdab 	bl	800242c <HAL_DMA_Abort_IT>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d016      	beq.n	800390a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038e6:	4610      	mov	r0, r2
 80038e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ea:	e00e      	b.n	800390a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f83b 	bl	8003968 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f2:	e00a      	b.n	800390a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 f837 	bl	8003968 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038fa:	e006      	b.n	800390a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f833 	bl	8003968 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003908:	e01e      	b.n	8003948 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800390a:	bf00      	nop
    return;
 800390c:	e01c      	b.n	8003948 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003914:	2b00      	cmp	r3, #0
 8003916:	d008      	beq.n	800392a <HAL_UART_IRQHandler+0x1d6>
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f8a6 	bl	8003a74 <UART_Transmit_IT>
    return;
 8003928:	e00f      	b.n	800394a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00a      	beq.n	800394a <HAL_UART_IRQHandler+0x1f6>
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393a:	2b00      	cmp	r3, #0
 800393c:	d005      	beq.n	800394a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f8ee 	bl	8003b20 <UART_EndTransmit_IT>
    return;
 8003944:	bf00      	nop
 8003946:	e000      	b.n	800394a <HAL_UART_IRQHandler+0x1f6>
    return;
 8003948:	bf00      	nop
  }
}
 800394a:	3720      	adds	r7, #32
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	08003a4d 	.word	0x08003a4d

08003954 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	603b      	str	r3, [r7, #0]
 8003988:	4613      	mov	r3, r2
 800398a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800398c:	e02c      	b.n	80039e8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003994:	d028      	beq.n	80039e8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d007      	beq.n	80039ac <UART_WaitOnFlagUntilTimeout+0x30>
 800399c:	f7fe fb7a 	bl	8002094 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d21d      	bcs.n	80039e8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80039ba:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	695a      	ldr	r2, [r3, #20]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0201 	bic.w	r2, r2, #1
 80039ca:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2220      	movs	r2, #32
 80039d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2220      	movs	r2, #32
 80039d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e00f      	b.n	8003a08 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	4013      	ands	r3, r2
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	bf0c      	ite	eq
 80039f8:	2301      	moveq	r3, #1
 80039fa:	2300      	movne	r3, #0
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	461a      	mov	r2, r3
 8003a00:	79fb      	ldrb	r3, [r7, #7]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d0c3      	beq.n	800398e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003a26:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	695a      	ldr	r2, [r3, #20]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0201 	bic.w	r2, r2, #1
 8003a36:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f7ff ff7e 	bl	8003968 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a6c:	bf00      	nop
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b21      	cmp	r3, #33	; 0x21
 8003a86:	d144      	bne.n	8003b12 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a90:	d11a      	bne.n	8003ac8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	881b      	ldrh	r3, [r3, #0]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003aa6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d105      	bne.n	8003abc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	1c9a      	adds	r2, r3, #2
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	621a      	str	r2, [r3, #32]
 8003aba:	e00e      	b.n	8003ada <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	1c5a      	adds	r2, r3, #1
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	621a      	str	r2, [r3, #32]
 8003ac6:	e008      	b.n	8003ada <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	1c59      	adds	r1, r3, #1
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6211      	str	r1, [r2, #32]
 8003ad2:	781a      	ldrb	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10f      	bne.n	8003b0e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68da      	ldr	r2, [r3, #12]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003afc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68da      	ldr	r2, [r3, #12]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b0c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	e000      	b.n	8003b14 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003b12:	2302      	movs	r3, #2
  }
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68da      	ldr	r2, [r3, #12]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b36:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f7ff ff07 	bl	8003954 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3708      	adds	r7, #8
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b22      	cmp	r3, #34	; 0x22
 8003b62:	d171      	bne.n	8003c48 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b6c:	d123      	bne.n	8003bb6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b72:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10e      	bne.n	8003b9a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b92:	1c9a      	adds	r2, r3, #2
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	629a      	str	r2, [r3, #40]	; 0x28
 8003b98:	e029      	b.n	8003bee <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bae:	1c5a      	adds	r2, r3, #1
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	629a      	str	r2, [r3, #40]	; 0x28
 8003bb4:	e01b      	b.n	8003bee <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10a      	bne.n	8003bd4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	6858      	ldr	r0, [r3, #4]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc8:	1c59      	adds	r1, r3, #1
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6291      	str	r1, [r2, #40]	; 0x28
 8003bce:	b2c2      	uxtb	r2, r0
 8003bd0:	701a      	strb	r2, [r3, #0]
 8003bd2:	e00c      	b.n	8003bee <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be0:	1c58      	adds	r0, r3, #1
 8003be2:	6879      	ldr	r1, [r7, #4]
 8003be4:	6288      	str	r0, [r1, #40]	; 0x28
 8003be6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003bea:	b2d2      	uxtb	r2, r2
 8003bec:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d120      	bne.n	8003c44 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68da      	ldr	r2, [r3, #12]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 0220 	bic.w	r2, r2, #32
 8003c10:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68da      	ldr	r2, [r3, #12]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c20:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695a      	ldr	r2, [r3, #20]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0201 	bic.w	r2, r2, #1
 8003c30:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2220      	movs	r2, #32
 8003c36:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7fd ff10 	bl	8001a60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003c40:	2300      	movs	r3, #0
 8003c42:	e002      	b.n	8003c4a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003c44:	2300      	movs	r3, #0
 8003c46:	e000      	b.n	8003c4a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003c48:	2302      	movs	r3, #2
  }
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
	...

08003c54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c58:	b085      	sub	sp, #20
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68da      	ldr	r2, [r3, #12]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	69db      	ldr	r3, [r3, #28]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003c96:	f023 030c 	bic.w	r3, r3, #12
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6812      	ldr	r2, [r2, #0]
 8003c9e:	68f9      	ldr	r1, [r7, #12]
 8003ca0:	430b      	orrs	r3, r1
 8003ca2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	699a      	ldr	r2, [r3, #24]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cc2:	f040 818b 	bne.w	8003fdc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4ac1      	ldr	r2, [pc, #772]	; (8003fd0 <UART_SetConfig+0x37c>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d005      	beq.n	8003cdc <UART_SetConfig+0x88>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4abf      	ldr	r2, [pc, #764]	; (8003fd4 <UART_SetConfig+0x380>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	f040 80bd 	bne.w	8003e56 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cdc:	f7ff fbea 	bl	80034b4 <HAL_RCC_GetPCLK2Freq>
 8003ce0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	461d      	mov	r5, r3
 8003ce6:	f04f 0600 	mov.w	r6, #0
 8003cea:	46a8      	mov	r8, r5
 8003cec:	46b1      	mov	r9, r6
 8003cee:	eb18 0308 	adds.w	r3, r8, r8
 8003cf2:	eb49 0409 	adc.w	r4, r9, r9
 8003cf6:	4698      	mov	r8, r3
 8003cf8:	46a1      	mov	r9, r4
 8003cfa:	eb18 0805 	adds.w	r8, r8, r5
 8003cfe:	eb49 0906 	adc.w	r9, r9, r6
 8003d02:	f04f 0100 	mov.w	r1, #0
 8003d06:	f04f 0200 	mov.w	r2, #0
 8003d0a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d0e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d12:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d16:	4688      	mov	r8, r1
 8003d18:	4691      	mov	r9, r2
 8003d1a:	eb18 0005 	adds.w	r0, r8, r5
 8003d1e:	eb49 0106 	adc.w	r1, r9, r6
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	461d      	mov	r5, r3
 8003d28:	f04f 0600 	mov.w	r6, #0
 8003d2c:	196b      	adds	r3, r5, r5
 8003d2e:	eb46 0406 	adc.w	r4, r6, r6
 8003d32:	461a      	mov	r2, r3
 8003d34:	4623      	mov	r3, r4
 8003d36:	f7fc ff2f 	bl	8000b98 <__aeabi_uldivmod>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	460c      	mov	r4, r1
 8003d3e:	461a      	mov	r2, r3
 8003d40:	4ba5      	ldr	r3, [pc, #660]	; (8003fd8 <UART_SetConfig+0x384>)
 8003d42:	fba3 2302 	umull	r2, r3, r3, r2
 8003d46:	095b      	lsrs	r3, r3, #5
 8003d48:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	461d      	mov	r5, r3
 8003d50:	f04f 0600 	mov.w	r6, #0
 8003d54:	46a9      	mov	r9, r5
 8003d56:	46b2      	mov	sl, r6
 8003d58:	eb19 0309 	adds.w	r3, r9, r9
 8003d5c:	eb4a 040a 	adc.w	r4, sl, sl
 8003d60:	4699      	mov	r9, r3
 8003d62:	46a2      	mov	sl, r4
 8003d64:	eb19 0905 	adds.w	r9, r9, r5
 8003d68:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d6c:	f04f 0100 	mov.w	r1, #0
 8003d70:	f04f 0200 	mov.w	r2, #0
 8003d74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d78:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d7c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d80:	4689      	mov	r9, r1
 8003d82:	4692      	mov	sl, r2
 8003d84:	eb19 0005 	adds.w	r0, r9, r5
 8003d88:	eb4a 0106 	adc.w	r1, sl, r6
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	461d      	mov	r5, r3
 8003d92:	f04f 0600 	mov.w	r6, #0
 8003d96:	196b      	adds	r3, r5, r5
 8003d98:	eb46 0406 	adc.w	r4, r6, r6
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	4623      	mov	r3, r4
 8003da0:	f7fc fefa 	bl	8000b98 <__aeabi_uldivmod>
 8003da4:	4603      	mov	r3, r0
 8003da6:	460c      	mov	r4, r1
 8003da8:	461a      	mov	r2, r3
 8003daa:	4b8b      	ldr	r3, [pc, #556]	; (8003fd8 <UART_SetConfig+0x384>)
 8003dac:	fba3 1302 	umull	r1, r3, r3, r2
 8003db0:	095b      	lsrs	r3, r3, #5
 8003db2:	2164      	movs	r1, #100	; 0x64
 8003db4:	fb01 f303 	mul.w	r3, r1, r3
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	3332      	adds	r3, #50	; 0x32
 8003dbe:	4a86      	ldr	r2, [pc, #536]	; (8003fd8 <UART_SetConfig+0x384>)
 8003dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc4:	095b      	lsrs	r3, r3, #5
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003dcc:	4498      	add	r8, r3
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	461d      	mov	r5, r3
 8003dd2:	f04f 0600 	mov.w	r6, #0
 8003dd6:	46a9      	mov	r9, r5
 8003dd8:	46b2      	mov	sl, r6
 8003dda:	eb19 0309 	adds.w	r3, r9, r9
 8003dde:	eb4a 040a 	adc.w	r4, sl, sl
 8003de2:	4699      	mov	r9, r3
 8003de4:	46a2      	mov	sl, r4
 8003de6:	eb19 0905 	adds.w	r9, r9, r5
 8003dea:	eb4a 0a06 	adc.w	sl, sl, r6
 8003dee:	f04f 0100 	mov.w	r1, #0
 8003df2:	f04f 0200 	mov.w	r2, #0
 8003df6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dfa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003dfe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e02:	4689      	mov	r9, r1
 8003e04:	4692      	mov	sl, r2
 8003e06:	eb19 0005 	adds.w	r0, r9, r5
 8003e0a:	eb4a 0106 	adc.w	r1, sl, r6
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	461d      	mov	r5, r3
 8003e14:	f04f 0600 	mov.w	r6, #0
 8003e18:	196b      	adds	r3, r5, r5
 8003e1a:	eb46 0406 	adc.w	r4, r6, r6
 8003e1e:	461a      	mov	r2, r3
 8003e20:	4623      	mov	r3, r4
 8003e22:	f7fc feb9 	bl	8000b98 <__aeabi_uldivmod>
 8003e26:	4603      	mov	r3, r0
 8003e28:	460c      	mov	r4, r1
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	4b6a      	ldr	r3, [pc, #424]	; (8003fd8 <UART_SetConfig+0x384>)
 8003e2e:	fba3 1302 	umull	r1, r3, r3, r2
 8003e32:	095b      	lsrs	r3, r3, #5
 8003e34:	2164      	movs	r1, #100	; 0x64
 8003e36:	fb01 f303 	mul.w	r3, r1, r3
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	3332      	adds	r3, #50	; 0x32
 8003e40:	4a65      	ldr	r2, [pc, #404]	; (8003fd8 <UART_SetConfig+0x384>)
 8003e42:	fba2 2303 	umull	r2, r3, r2, r3
 8003e46:	095b      	lsrs	r3, r3, #5
 8003e48:	f003 0207 	and.w	r2, r3, #7
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4442      	add	r2, r8
 8003e52:	609a      	str	r2, [r3, #8]
 8003e54:	e26f      	b.n	8004336 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e56:	f7ff fb19 	bl	800348c <HAL_RCC_GetPCLK1Freq>
 8003e5a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	461d      	mov	r5, r3
 8003e60:	f04f 0600 	mov.w	r6, #0
 8003e64:	46a8      	mov	r8, r5
 8003e66:	46b1      	mov	r9, r6
 8003e68:	eb18 0308 	adds.w	r3, r8, r8
 8003e6c:	eb49 0409 	adc.w	r4, r9, r9
 8003e70:	4698      	mov	r8, r3
 8003e72:	46a1      	mov	r9, r4
 8003e74:	eb18 0805 	adds.w	r8, r8, r5
 8003e78:	eb49 0906 	adc.w	r9, r9, r6
 8003e7c:	f04f 0100 	mov.w	r1, #0
 8003e80:	f04f 0200 	mov.w	r2, #0
 8003e84:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e88:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e8c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e90:	4688      	mov	r8, r1
 8003e92:	4691      	mov	r9, r2
 8003e94:	eb18 0005 	adds.w	r0, r8, r5
 8003e98:	eb49 0106 	adc.w	r1, r9, r6
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	461d      	mov	r5, r3
 8003ea2:	f04f 0600 	mov.w	r6, #0
 8003ea6:	196b      	adds	r3, r5, r5
 8003ea8:	eb46 0406 	adc.w	r4, r6, r6
 8003eac:	461a      	mov	r2, r3
 8003eae:	4623      	mov	r3, r4
 8003eb0:	f7fc fe72 	bl	8000b98 <__aeabi_uldivmod>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	460c      	mov	r4, r1
 8003eb8:	461a      	mov	r2, r3
 8003eba:	4b47      	ldr	r3, [pc, #284]	; (8003fd8 <UART_SetConfig+0x384>)
 8003ebc:	fba3 2302 	umull	r2, r3, r3, r2
 8003ec0:	095b      	lsrs	r3, r3, #5
 8003ec2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	461d      	mov	r5, r3
 8003eca:	f04f 0600 	mov.w	r6, #0
 8003ece:	46a9      	mov	r9, r5
 8003ed0:	46b2      	mov	sl, r6
 8003ed2:	eb19 0309 	adds.w	r3, r9, r9
 8003ed6:	eb4a 040a 	adc.w	r4, sl, sl
 8003eda:	4699      	mov	r9, r3
 8003edc:	46a2      	mov	sl, r4
 8003ede:	eb19 0905 	adds.w	r9, r9, r5
 8003ee2:	eb4a 0a06 	adc.w	sl, sl, r6
 8003ee6:	f04f 0100 	mov.w	r1, #0
 8003eea:	f04f 0200 	mov.w	r2, #0
 8003eee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ef2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ef6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003efa:	4689      	mov	r9, r1
 8003efc:	4692      	mov	sl, r2
 8003efe:	eb19 0005 	adds.w	r0, r9, r5
 8003f02:	eb4a 0106 	adc.w	r1, sl, r6
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	461d      	mov	r5, r3
 8003f0c:	f04f 0600 	mov.w	r6, #0
 8003f10:	196b      	adds	r3, r5, r5
 8003f12:	eb46 0406 	adc.w	r4, r6, r6
 8003f16:	461a      	mov	r2, r3
 8003f18:	4623      	mov	r3, r4
 8003f1a:	f7fc fe3d 	bl	8000b98 <__aeabi_uldivmod>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	460c      	mov	r4, r1
 8003f22:	461a      	mov	r2, r3
 8003f24:	4b2c      	ldr	r3, [pc, #176]	; (8003fd8 <UART_SetConfig+0x384>)
 8003f26:	fba3 1302 	umull	r1, r3, r3, r2
 8003f2a:	095b      	lsrs	r3, r3, #5
 8003f2c:	2164      	movs	r1, #100	; 0x64
 8003f2e:	fb01 f303 	mul.w	r3, r1, r3
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	3332      	adds	r3, #50	; 0x32
 8003f38:	4a27      	ldr	r2, [pc, #156]	; (8003fd8 <UART_SetConfig+0x384>)
 8003f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3e:	095b      	lsrs	r3, r3, #5
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f46:	4498      	add	r8, r3
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	461d      	mov	r5, r3
 8003f4c:	f04f 0600 	mov.w	r6, #0
 8003f50:	46a9      	mov	r9, r5
 8003f52:	46b2      	mov	sl, r6
 8003f54:	eb19 0309 	adds.w	r3, r9, r9
 8003f58:	eb4a 040a 	adc.w	r4, sl, sl
 8003f5c:	4699      	mov	r9, r3
 8003f5e:	46a2      	mov	sl, r4
 8003f60:	eb19 0905 	adds.w	r9, r9, r5
 8003f64:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f68:	f04f 0100 	mov.w	r1, #0
 8003f6c:	f04f 0200 	mov.w	r2, #0
 8003f70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f7c:	4689      	mov	r9, r1
 8003f7e:	4692      	mov	sl, r2
 8003f80:	eb19 0005 	adds.w	r0, r9, r5
 8003f84:	eb4a 0106 	adc.w	r1, sl, r6
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	461d      	mov	r5, r3
 8003f8e:	f04f 0600 	mov.w	r6, #0
 8003f92:	196b      	adds	r3, r5, r5
 8003f94:	eb46 0406 	adc.w	r4, r6, r6
 8003f98:	461a      	mov	r2, r3
 8003f9a:	4623      	mov	r3, r4
 8003f9c:	f7fc fdfc 	bl	8000b98 <__aeabi_uldivmod>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	460c      	mov	r4, r1
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	4b0c      	ldr	r3, [pc, #48]	; (8003fd8 <UART_SetConfig+0x384>)
 8003fa8:	fba3 1302 	umull	r1, r3, r3, r2
 8003fac:	095b      	lsrs	r3, r3, #5
 8003fae:	2164      	movs	r1, #100	; 0x64
 8003fb0:	fb01 f303 	mul.w	r3, r1, r3
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	3332      	adds	r3, #50	; 0x32
 8003fba:	4a07      	ldr	r2, [pc, #28]	; (8003fd8 <UART_SetConfig+0x384>)
 8003fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc0:	095b      	lsrs	r3, r3, #5
 8003fc2:	f003 0207 	and.w	r2, r3, #7
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4442      	add	r2, r8
 8003fcc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003fce:	e1b2      	b.n	8004336 <UART_SetConfig+0x6e2>
 8003fd0:	40011000 	.word	0x40011000
 8003fd4:	40011400 	.word	0x40011400
 8003fd8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4ad7      	ldr	r2, [pc, #860]	; (8004340 <UART_SetConfig+0x6ec>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d005      	beq.n	8003ff2 <UART_SetConfig+0x39e>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4ad6      	ldr	r2, [pc, #856]	; (8004344 <UART_SetConfig+0x6f0>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	f040 80d1 	bne.w	8004194 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ff2:	f7ff fa5f 	bl	80034b4 <HAL_RCC_GetPCLK2Freq>
 8003ff6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	469a      	mov	sl, r3
 8003ffc:	f04f 0b00 	mov.w	fp, #0
 8004000:	46d0      	mov	r8, sl
 8004002:	46d9      	mov	r9, fp
 8004004:	eb18 0308 	adds.w	r3, r8, r8
 8004008:	eb49 0409 	adc.w	r4, r9, r9
 800400c:	4698      	mov	r8, r3
 800400e:	46a1      	mov	r9, r4
 8004010:	eb18 080a 	adds.w	r8, r8, sl
 8004014:	eb49 090b 	adc.w	r9, r9, fp
 8004018:	f04f 0100 	mov.w	r1, #0
 800401c:	f04f 0200 	mov.w	r2, #0
 8004020:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004024:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004028:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800402c:	4688      	mov	r8, r1
 800402e:	4691      	mov	r9, r2
 8004030:	eb1a 0508 	adds.w	r5, sl, r8
 8004034:	eb4b 0609 	adc.w	r6, fp, r9
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	4619      	mov	r1, r3
 800403e:	f04f 0200 	mov.w	r2, #0
 8004042:	f04f 0300 	mov.w	r3, #0
 8004046:	f04f 0400 	mov.w	r4, #0
 800404a:	0094      	lsls	r4, r2, #2
 800404c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004050:	008b      	lsls	r3, r1, #2
 8004052:	461a      	mov	r2, r3
 8004054:	4623      	mov	r3, r4
 8004056:	4628      	mov	r0, r5
 8004058:	4631      	mov	r1, r6
 800405a:	f7fc fd9d 	bl	8000b98 <__aeabi_uldivmod>
 800405e:	4603      	mov	r3, r0
 8004060:	460c      	mov	r4, r1
 8004062:	461a      	mov	r2, r3
 8004064:	4bb8      	ldr	r3, [pc, #736]	; (8004348 <UART_SetConfig+0x6f4>)
 8004066:	fba3 2302 	umull	r2, r3, r3, r2
 800406a:	095b      	lsrs	r3, r3, #5
 800406c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	469b      	mov	fp, r3
 8004074:	f04f 0c00 	mov.w	ip, #0
 8004078:	46d9      	mov	r9, fp
 800407a:	46e2      	mov	sl, ip
 800407c:	eb19 0309 	adds.w	r3, r9, r9
 8004080:	eb4a 040a 	adc.w	r4, sl, sl
 8004084:	4699      	mov	r9, r3
 8004086:	46a2      	mov	sl, r4
 8004088:	eb19 090b 	adds.w	r9, r9, fp
 800408c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004090:	f04f 0100 	mov.w	r1, #0
 8004094:	f04f 0200 	mov.w	r2, #0
 8004098:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800409c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040a4:	4689      	mov	r9, r1
 80040a6:	4692      	mov	sl, r2
 80040a8:	eb1b 0509 	adds.w	r5, fp, r9
 80040ac:	eb4c 060a 	adc.w	r6, ip, sl
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	4619      	mov	r1, r3
 80040b6:	f04f 0200 	mov.w	r2, #0
 80040ba:	f04f 0300 	mov.w	r3, #0
 80040be:	f04f 0400 	mov.w	r4, #0
 80040c2:	0094      	lsls	r4, r2, #2
 80040c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040c8:	008b      	lsls	r3, r1, #2
 80040ca:	461a      	mov	r2, r3
 80040cc:	4623      	mov	r3, r4
 80040ce:	4628      	mov	r0, r5
 80040d0:	4631      	mov	r1, r6
 80040d2:	f7fc fd61 	bl	8000b98 <__aeabi_uldivmod>
 80040d6:	4603      	mov	r3, r0
 80040d8:	460c      	mov	r4, r1
 80040da:	461a      	mov	r2, r3
 80040dc:	4b9a      	ldr	r3, [pc, #616]	; (8004348 <UART_SetConfig+0x6f4>)
 80040de:	fba3 1302 	umull	r1, r3, r3, r2
 80040e2:	095b      	lsrs	r3, r3, #5
 80040e4:	2164      	movs	r1, #100	; 0x64
 80040e6:	fb01 f303 	mul.w	r3, r1, r3
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	011b      	lsls	r3, r3, #4
 80040ee:	3332      	adds	r3, #50	; 0x32
 80040f0:	4a95      	ldr	r2, [pc, #596]	; (8004348 <UART_SetConfig+0x6f4>)
 80040f2:	fba2 2303 	umull	r2, r3, r2, r3
 80040f6:	095b      	lsrs	r3, r3, #5
 80040f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040fc:	4498      	add	r8, r3
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	469b      	mov	fp, r3
 8004102:	f04f 0c00 	mov.w	ip, #0
 8004106:	46d9      	mov	r9, fp
 8004108:	46e2      	mov	sl, ip
 800410a:	eb19 0309 	adds.w	r3, r9, r9
 800410e:	eb4a 040a 	adc.w	r4, sl, sl
 8004112:	4699      	mov	r9, r3
 8004114:	46a2      	mov	sl, r4
 8004116:	eb19 090b 	adds.w	r9, r9, fp
 800411a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800411e:	f04f 0100 	mov.w	r1, #0
 8004122:	f04f 0200 	mov.w	r2, #0
 8004126:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800412a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800412e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004132:	4689      	mov	r9, r1
 8004134:	4692      	mov	sl, r2
 8004136:	eb1b 0509 	adds.w	r5, fp, r9
 800413a:	eb4c 060a 	adc.w	r6, ip, sl
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	4619      	mov	r1, r3
 8004144:	f04f 0200 	mov.w	r2, #0
 8004148:	f04f 0300 	mov.w	r3, #0
 800414c:	f04f 0400 	mov.w	r4, #0
 8004150:	0094      	lsls	r4, r2, #2
 8004152:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004156:	008b      	lsls	r3, r1, #2
 8004158:	461a      	mov	r2, r3
 800415a:	4623      	mov	r3, r4
 800415c:	4628      	mov	r0, r5
 800415e:	4631      	mov	r1, r6
 8004160:	f7fc fd1a 	bl	8000b98 <__aeabi_uldivmod>
 8004164:	4603      	mov	r3, r0
 8004166:	460c      	mov	r4, r1
 8004168:	461a      	mov	r2, r3
 800416a:	4b77      	ldr	r3, [pc, #476]	; (8004348 <UART_SetConfig+0x6f4>)
 800416c:	fba3 1302 	umull	r1, r3, r3, r2
 8004170:	095b      	lsrs	r3, r3, #5
 8004172:	2164      	movs	r1, #100	; 0x64
 8004174:	fb01 f303 	mul.w	r3, r1, r3
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	3332      	adds	r3, #50	; 0x32
 800417e:	4a72      	ldr	r2, [pc, #456]	; (8004348 <UART_SetConfig+0x6f4>)
 8004180:	fba2 2303 	umull	r2, r3, r2, r3
 8004184:	095b      	lsrs	r3, r3, #5
 8004186:	f003 020f 	and.w	r2, r3, #15
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4442      	add	r2, r8
 8004190:	609a      	str	r2, [r3, #8]
 8004192:	e0d0      	b.n	8004336 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004194:	f7ff f97a 	bl	800348c <HAL_RCC_GetPCLK1Freq>
 8004198:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	469a      	mov	sl, r3
 800419e:	f04f 0b00 	mov.w	fp, #0
 80041a2:	46d0      	mov	r8, sl
 80041a4:	46d9      	mov	r9, fp
 80041a6:	eb18 0308 	adds.w	r3, r8, r8
 80041aa:	eb49 0409 	adc.w	r4, r9, r9
 80041ae:	4698      	mov	r8, r3
 80041b0:	46a1      	mov	r9, r4
 80041b2:	eb18 080a 	adds.w	r8, r8, sl
 80041b6:	eb49 090b 	adc.w	r9, r9, fp
 80041ba:	f04f 0100 	mov.w	r1, #0
 80041be:	f04f 0200 	mov.w	r2, #0
 80041c2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80041c6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80041ca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80041ce:	4688      	mov	r8, r1
 80041d0:	4691      	mov	r9, r2
 80041d2:	eb1a 0508 	adds.w	r5, sl, r8
 80041d6:	eb4b 0609 	adc.w	r6, fp, r9
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	4619      	mov	r1, r3
 80041e0:	f04f 0200 	mov.w	r2, #0
 80041e4:	f04f 0300 	mov.w	r3, #0
 80041e8:	f04f 0400 	mov.w	r4, #0
 80041ec:	0094      	lsls	r4, r2, #2
 80041ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80041f2:	008b      	lsls	r3, r1, #2
 80041f4:	461a      	mov	r2, r3
 80041f6:	4623      	mov	r3, r4
 80041f8:	4628      	mov	r0, r5
 80041fa:	4631      	mov	r1, r6
 80041fc:	f7fc fccc 	bl	8000b98 <__aeabi_uldivmod>
 8004200:	4603      	mov	r3, r0
 8004202:	460c      	mov	r4, r1
 8004204:	461a      	mov	r2, r3
 8004206:	4b50      	ldr	r3, [pc, #320]	; (8004348 <UART_SetConfig+0x6f4>)
 8004208:	fba3 2302 	umull	r2, r3, r3, r2
 800420c:	095b      	lsrs	r3, r3, #5
 800420e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	469b      	mov	fp, r3
 8004216:	f04f 0c00 	mov.w	ip, #0
 800421a:	46d9      	mov	r9, fp
 800421c:	46e2      	mov	sl, ip
 800421e:	eb19 0309 	adds.w	r3, r9, r9
 8004222:	eb4a 040a 	adc.w	r4, sl, sl
 8004226:	4699      	mov	r9, r3
 8004228:	46a2      	mov	sl, r4
 800422a:	eb19 090b 	adds.w	r9, r9, fp
 800422e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004232:	f04f 0100 	mov.w	r1, #0
 8004236:	f04f 0200 	mov.w	r2, #0
 800423a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800423e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004242:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004246:	4689      	mov	r9, r1
 8004248:	4692      	mov	sl, r2
 800424a:	eb1b 0509 	adds.w	r5, fp, r9
 800424e:	eb4c 060a 	adc.w	r6, ip, sl
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	4619      	mov	r1, r3
 8004258:	f04f 0200 	mov.w	r2, #0
 800425c:	f04f 0300 	mov.w	r3, #0
 8004260:	f04f 0400 	mov.w	r4, #0
 8004264:	0094      	lsls	r4, r2, #2
 8004266:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800426a:	008b      	lsls	r3, r1, #2
 800426c:	461a      	mov	r2, r3
 800426e:	4623      	mov	r3, r4
 8004270:	4628      	mov	r0, r5
 8004272:	4631      	mov	r1, r6
 8004274:	f7fc fc90 	bl	8000b98 <__aeabi_uldivmod>
 8004278:	4603      	mov	r3, r0
 800427a:	460c      	mov	r4, r1
 800427c:	461a      	mov	r2, r3
 800427e:	4b32      	ldr	r3, [pc, #200]	; (8004348 <UART_SetConfig+0x6f4>)
 8004280:	fba3 1302 	umull	r1, r3, r3, r2
 8004284:	095b      	lsrs	r3, r3, #5
 8004286:	2164      	movs	r1, #100	; 0x64
 8004288:	fb01 f303 	mul.w	r3, r1, r3
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	011b      	lsls	r3, r3, #4
 8004290:	3332      	adds	r3, #50	; 0x32
 8004292:	4a2d      	ldr	r2, [pc, #180]	; (8004348 <UART_SetConfig+0x6f4>)
 8004294:	fba2 2303 	umull	r2, r3, r2, r3
 8004298:	095b      	lsrs	r3, r3, #5
 800429a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800429e:	4498      	add	r8, r3
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	469b      	mov	fp, r3
 80042a4:	f04f 0c00 	mov.w	ip, #0
 80042a8:	46d9      	mov	r9, fp
 80042aa:	46e2      	mov	sl, ip
 80042ac:	eb19 0309 	adds.w	r3, r9, r9
 80042b0:	eb4a 040a 	adc.w	r4, sl, sl
 80042b4:	4699      	mov	r9, r3
 80042b6:	46a2      	mov	sl, r4
 80042b8:	eb19 090b 	adds.w	r9, r9, fp
 80042bc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80042c0:	f04f 0100 	mov.w	r1, #0
 80042c4:	f04f 0200 	mov.w	r2, #0
 80042c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042d4:	4689      	mov	r9, r1
 80042d6:	4692      	mov	sl, r2
 80042d8:	eb1b 0509 	adds.w	r5, fp, r9
 80042dc:	eb4c 060a 	adc.w	r6, ip, sl
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	4619      	mov	r1, r3
 80042e6:	f04f 0200 	mov.w	r2, #0
 80042ea:	f04f 0300 	mov.w	r3, #0
 80042ee:	f04f 0400 	mov.w	r4, #0
 80042f2:	0094      	lsls	r4, r2, #2
 80042f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042f8:	008b      	lsls	r3, r1, #2
 80042fa:	461a      	mov	r2, r3
 80042fc:	4623      	mov	r3, r4
 80042fe:	4628      	mov	r0, r5
 8004300:	4631      	mov	r1, r6
 8004302:	f7fc fc49 	bl	8000b98 <__aeabi_uldivmod>
 8004306:	4603      	mov	r3, r0
 8004308:	460c      	mov	r4, r1
 800430a:	461a      	mov	r2, r3
 800430c:	4b0e      	ldr	r3, [pc, #56]	; (8004348 <UART_SetConfig+0x6f4>)
 800430e:	fba3 1302 	umull	r1, r3, r3, r2
 8004312:	095b      	lsrs	r3, r3, #5
 8004314:	2164      	movs	r1, #100	; 0x64
 8004316:	fb01 f303 	mul.w	r3, r1, r3
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	011b      	lsls	r3, r3, #4
 800431e:	3332      	adds	r3, #50	; 0x32
 8004320:	4a09      	ldr	r2, [pc, #36]	; (8004348 <UART_SetConfig+0x6f4>)
 8004322:	fba2 2303 	umull	r2, r3, r2, r3
 8004326:	095b      	lsrs	r3, r3, #5
 8004328:	f003 020f 	and.w	r2, r3, #15
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4442      	add	r2, r8
 8004332:	609a      	str	r2, [r3, #8]
}
 8004334:	e7ff      	b.n	8004336 <UART_SetConfig+0x6e2>
 8004336:	bf00      	nop
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004340:	40011000 	.word	0x40011000
 8004344:	40011400 	.word	0x40011400
 8004348:	51eb851f 	.word	0x51eb851f

0800434c <atol>:
 800434c:	220a      	movs	r2, #10
 800434e:	2100      	movs	r1, #0
 8004350:	f000 ba1e 	b.w	8004790 <strtol>

08004354 <__errno>:
 8004354:	4b01      	ldr	r3, [pc, #4]	; (800435c <__errno+0x8>)
 8004356:	6818      	ldr	r0, [r3, #0]
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	2000000c 	.word	0x2000000c

08004360 <exit>:
 8004360:	b508      	push	{r3, lr}
 8004362:	4b07      	ldr	r3, [pc, #28]	; (8004380 <exit+0x20>)
 8004364:	4604      	mov	r4, r0
 8004366:	b113      	cbz	r3, 800436e <exit+0xe>
 8004368:	2100      	movs	r1, #0
 800436a:	f3af 8000 	nop.w
 800436e:	4b05      	ldr	r3, [pc, #20]	; (8004384 <exit+0x24>)
 8004370:	6818      	ldr	r0, [r3, #0]
 8004372:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004374:	b103      	cbz	r3, 8004378 <exit+0x18>
 8004376:	4798      	blx	r3
 8004378:	4620      	mov	r0, r4
 800437a:	f7fd fdaf 	bl	8001edc <_exit>
 800437e:	bf00      	nop
 8004380:	00000000 	.word	0x00000000
 8004384:	0800617c 	.word	0x0800617c

08004388 <__libc_init_array>:
 8004388:	b570      	push	{r4, r5, r6, lr}
 800438a:	4e0d      	ldr	r6, [pc, #52]	; (80043c0 <__libc_init_array+0x38>)
 800438c:	4c0d      	ldr	r4, [pc, #52]	; (80043c4 <__libc_init_array+0x3c>)
 800438e:	1ba4      	subs	r4, r4, r6
 8004390:	10a4      	asrs	r4, r4, #2
 8004392:	2500      	movs	r5, #0
 8004394:	42a5      	cmp	r5, r4
 8004396:	d109      	bne.n	80043ac <__libc_init_array+0x24>
 8004398:	4e0b      	ldr	r6, [pc, #44]	; (80043c8 <__libc_init_array+0x40>)
 800439a:	4c0c      	ldr	r4, [pc, #48]	; (80043cc <__libc_init_array+0x44>)
 800439c:	f001 feba 	bl	8006114 <_init>
 80043a0:	1ba4      	subs	r4, r4, r6
 80043a2:	10a4      	asrs	r4, r4, #2
 80043a4:	2500      	movs	r5, #0
 80043a6:	42a5      	cmp	r5, r4
 80043a8:	d105      	bne.n	80043b6 <__libc_init_array+0x2e>
 80043aa:	bd70      	pop	{r4, r5, r6, pc}
 80043ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043b0:	4798      	blx	r3
 80043b2:	3501      	adds	r5, #1
 80043b4:	e7ee      	b.n	8004394 <__libc_init_array+0xc>
 80043b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043ba:	4798      	blx	r3
 80043bc:	3501      	adds	r5, #1
 80043be:	e7f2      	b.n	80043a6 <__libc_init_array+0x1e>
 80043c0:	080064a8 	.word	0x080064a8
 80043c4:	080064a8 	.word	0x080064a8
 80043c8:	080064a8 	.word	0x080064a8
 80043cc:	080064ac 	.word	0x080064ac

080043d0 <malloc>:
 80043d0:	4b02      	ldr	r3, [pc, #8]	; (80043dc <malloc+0xc>)
 80043d2:	4601      	mov	r1, r0
 80043d4:	6818      	ldr	r0, [r3, #0]
 80043d6:	f000 b86d 	b.w	80044b4 <_malloc_r>
 80043da:	bf00      	nop
 80043dc:	2000000c 	.word	0x2000000c

080043e0 <free>:
 80043e0:	4b02      	ldr	r3, [pc, #8]	; (80043ec <free+0xc>)
 80043e2:	4601      	mov	r1, r0
 80043e4:	6818      	ldr	r0, [r3, #0]
 80043e6:	f000 b817 	b.w	8004418 <_free_r>
 80043ea:	bf00      	nop
 80043ec:	2000000c 	.word	0x2000000c

080043f0 <memcpy>:
 80043f0:	b510      	push	{r4, lr}
 80043f2:	1e43      	subs	r3, r0, #1
 80043f4:	440a      	add	r2, r1
 80043f6:	4291      	cmp	r1, r2
 80043f8:	d100      	bne.n	80043fc <memcpy+0xc>
 80043fa:	bd10      	pop	{r4, pc}
 80043fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004400:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004404:	e7f7      	b.n	80043f6 <memcpy+0x6>

08004406 <memset>:
 8004406:	4402      	add	r2, r0
 8004408:	4603      	mov	r3, r0
 800440a:	4293      	cmp	r3, r2
 800440c:	d100      	bne.n	8004410 <memset+0xa>
 800440e:	4770      	bx	lr
 8004410:	f803 1b01 	strb.w	r1, [r3], #1
 8004414:	e7f9      	b.n	800440a <memset+0x4>
	...

08004418 <_free_r>:
 8004418:	b538      	push	{r3, r4, r5, lr}
 800441a:	4605      	mov	r5, r0
 800441c:	2900      	cmp	r1, #0
 800441e:	d045      	beq.n	80044ac <_free_r+0x94>
 8004420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004424:	1f0c      	subs	r4, r1, #4
 8004426:	2b00      	cmp	r3, #0
 8004428:	bfb8      	it	lt
 800442a:	18e4      	addlt	r4, r4, r3
 800442c:	f000 f9db 	bl	80047e6 <__malloc_lock>
 8004430:	4a1f      	ldr	r2, [pc, #124]	; (80044b0 <_free_r+0x98>)
 8004432:	6813      	ldr	r3, [r2, #0]
 8004434:	4610      	mov	r0, r2
 8004436:	b933      	cbnz	r3, 8004446 <_free_r+0x2e>
 8004438:	6063      	str	r3, [r4, #4]
 800443a:	6014      	str	r4, [r2, #0]
 800443c:	4628      	mov	r0, r5
 800443e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004442:	f000 b9d1 	b.w	80047e8 <__malloc_unlock>
 8004446:	42a3      	cmp	r3, r4
 8004448:	d90c      	bls.n	8004464 <_free_r+0x4c>
 800444a:	6821      	ldr	r1, [r4, #0]
 800444c:	1862      	adds	r2, r4, r1
 800444e:	4293      	cmp	r3, r2
 8004450:	bf04      	itt	eq
 8004452:	681a      	ldreq	r2, [r3, #0]
 8004454:	685b      	ldreq	r3, [r3, #4]
 8004456:	6063      	str	r3, [r4, #4]
 8004458:	bf04      	itt	eq
 800445a:	1852      	addeq	r2, r2, r1
 800445c:	6022      	streq	r2, [r4, #0]
 800445e:	6004      	str	r4, [r0, #0]
 8004460:	e7ec      	b.n	800443c <_free_r+0x24>
 8004462:	4613      	mov	r3, r2
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	b10a      	cbz	r2, 800446c <_free_r+0x54>
 8004468:	42a2      	cmp	r2, r4
 800446a:	d9fa      	bls.n	8004462 <_free_r+0x4a>
 800446c:	6819      	ldr	r1, [r3, #0]
 800446e:	1858      	adds	r0, r3, r1
 8004470:	42a0      	cmp	r0, r4
 8004472:	d10b      	bne.n	800448c <_free_r+0x74>
 8004474:	6820      	ldr	r0, [r4, #0]
 8004476:	4401      	add	r1, r0
 8004478:	1858      	adds	r0, r3, r1
 800447a:	4282      	cmp	r2, r0
 800447c:	6019      	str	r1, [r3, #0]
 800447e:	d1dd      	bne.n	800443c <_free_r+0x24>
 8004480:	6810      	ldr	r0, [r2, #0]
 8004482:	6852      	ldr	r2, [r2, #4]
 8004484:	605a      	str	r2, [r3, #4]
 8004486:	4401      	add	r1, r0
 8004488:	6019      	str	r1, [r3, #0]
 800448a:	e7d7      	b.n	800443c <_free_r+0x24>
 800448c:	d902      	bls.n	8004494 <_free_r+0x7c>
 800448e:	230c      	movs	r3, #12
 8004490:	602b      	str	r3, [r5, #0]
 8004492:	e7d3      	b.n	800443c <_free_r+0x24>
 8004494:	6820      	ldr	r0, [r4, #0]
 8004496:	1821      	adds	r1, r4, r0
 8004498:	428a      	cmp	r2, r1
 800449a:	bf04      	itt	eq
 800449c:	6811      	ldreq	r1, [r2, #0]
 800449e:	6852      	ldreq	r2, [r2, #4]
 80044a0:	6062      	str	r2, [r4, #4]
 80044a2:	bf04      	itt	eq
 80044a4:	1809      	addeq	r1, r1, r0
 80044a6:	6021      	streq	r1, [r4, #0]
 80044a8:	605c      	str	r4, [r3, #4]
 80044aa:	e7c7      	b.n	800443c <_free_r+0x24>
 80044ac:	bd38      	pop	{r3, r4, r5, pc}
 80044ae:	bf00      	nop
 80044b0:	200002f4 	.word	0x200002f4

080044b4 <_malloc_r>:
 80044b4:	b570      	push	{r4, r5, r6, lr}
 80044b6:	1ccd      	adds	r5, r1, #3
 80044b8:	f025 0503 	bic.w	r5, r5, #3
 80044bc:	3508      	adds	r5, #8
 80044be:	2d0c      	cmp	r5, #12
 80044c0:	bf38      	it	cc
 80044c2:	250c      	movcc	r5, #12
 80044c4:	2d00      	cmp	r5, #0
 80044c6:	4606      	mov	r6, r0
 80044c8:	db01      	blt.n	80044ce <_malloc_r+0x1a>
 80044ca:	42a9      	cmp	r1, r5
 80044cc:	d903      	bls.n	80044d6 <_malloc_r+0x22>
 80044ce:	230c      	movs	r3, #12
 80044d0:	6033      	str	r3, [r6, #0]
 80044d2:	2000      	movs	r0, #0
 80044d4:	bd70      	pop	{r4, r5, r6, pc}
 80044d6:	f000 f986 	bl	80047e6 <__malloc_lock>
 80044da:	4a21      	ldr	r2, [pc, #132]	; (8004560 <_malloc_r+0xac>)
 80044dc:	6814      	ldr	r4, [r2, #0]
 80044de:	4621      	mov	r1, r4
 80044e0:	b991      	cbnz	r1, 8004508 <_malloc_r+0x54>
 80044e2:	4c20      	ldr	r4, [pc, #128]	; (8004564 <_malloc_r+0xb0>)
 80044e4:	6823      	ldr	r3, [r4, #0]
 80044e6:	b91b      	cbnz	r3, 80044f0 <_malloc_r+0x3c>
 80044e8:	4630      	mov	r0, r6
 80044ea:	f000 f83d 	bl	8004568 <_sbrk_r>
 80044ee:	6020      	str	r0, [r4, #0]
 80044f0:	4629      	mov	r1, r5
 80044f2:	4630      	mov	r0, r6
 80044f4:	f000 f838 	bl	8004568 <_sbrk_r>
 80044f8:	1c43      	adds	r3, r0, #1
 80044fa:	d124      	bne.n	8004546 <_malloc_r+0x92>
 80044fc:	230c      	movs	r3, #12
 80044fe:	6033      	str	r3, [r6, #0]
 8004500:	4630      	mov	r0, r6
 8004502:	f000 f971 	bl	80047e8 <__malloc_unlock>
 8004506:	e7e4      	b.n	80044d2 <_malloc_r+0x1e>
 8004508:	680b      	ldr	r3, [r1, #0]
 800450a:	1b5b      	subs	r3, r3, r5
 800450c:	d418      	bmi.n	8004540 <_malloc_r+0x8c>
 800450e:	2b0b      	cmp	r3, #11
 8004510:	d90f      	bls.n	8004532 <_malloc_r+0x7e>
 8004512:	600b      	str	r3, [r1, #0]
 8004514:	50cd      	str	r5, [r1, r3]
 8004516:	18cc      	adds	r4, r1, r3
 8004518:	4630      	mov	r0, r6
 800451a:	f000 f965 	bl	80047e8 <__malloc_unlock>
 800451e:	f104 000b 	add.w	r0, r4, #11
 8004522:	1d23      	adds	r3, r4, #4
 8004524:	f020 0007 	bic.w	r0, r0, #7
 8004528:	1ac3      	subs	r3, r0, r3
 800452a:	d0d3      	beq.n	80044d4 <_malloc_r+0x20>
 800452c:	425a      	negs	r2, r3
 800452e:	50e2      	str	r2, [r4, r3]
 8004530:	e7d0      	b.n	80044d4 <_malloc_r+0x20>
 8004532:	428c      	cmp	r4, r1
 8004534:	684b      	ldr	r3, [r1, #4]
 8004536:	bf16      	itet	ne
 8004538:	6063      	strne	r3, [r4, #4]
 800453a:	6013      	streq	r3, [r2, #0]
 800453c:	460c      	movne	r4, r1
 800453e:	e7eb      	b.n	8004518 <_malloc_r+0x64>
 8004540:	460c      	mov	r4, r1
 8004542:	6849      	ldr	r1, [r1, #4]
 8004544:	e7cc      	b.n	80044e0 <_malloc_r+0x2c>
 8004546:	1cc4      	adds	r4, r0, #3
 8004548:	f024 0403 	bic.w	r4, r4, #3
 800454c:	42a0      	cmp	r0, r4
 800454e:	d005      	beq.n	800455c <_malloc_r+0xa8>
 8004550:	1a21      	subs	r1, r4, r0
 8004552:	4630      	mov	r0, r6
 8004554:	f000 f808 	bl	8004568 <_sbrk_r>
 8004558:	3001      	adds	r0, #1
 800455a:	d0cf      	beq.n	80044fc <_malloc_r+0x48>
 800455c:	6025      	str	r5, [r4, #0]
 800455e:	e7db      	b.n	8004518 <_malloc_r+0x64>
 8004560:	200002f4 	.word	0x200002f4
 8004564:	200002f8 	.word	0x200002f8

08004568 <_sbrk_r>:
 8004568:	b538      	push	{r3, r4, r5, lr}
 800456a:	4c06      	ldr	r4, [pc, #24]	; (8004584 <_sbrk_r+0x1c>)
 800456c:	2300      	movs	r3, #0
 800456e:	4605      	mov	r5, r0
 8004570:	4608      	mov	r0, r1
 8004572:	6023      	str	r3, [r4, #0]
 8004574:	f7fd fcbc 	bl	8001ef0 <_sbrk>
 8004578:	1c43      	adds	r3, r0, #1
 800457a:	d102      	bne.n	8004582 <_sbrk_r+0x1a>
 800457c:	6823      	ldr	r3, [r4, #0]
 800457e:	b103      	cbz	r3, 8004582 <_sbrk_r+0x1a>
 8004580:	602b      	str	r3, [r5, #0]
 8004582:	bd38      	pop	{r3, r4, r5, pc}
 8004584:	200003a4 	.word	0x200003a4

08004588 <sniprintf>:
 8004588:	b40c      	push	{r2, r3}
 800458a:	b530      	push	{r4, r5, lr}
 800458c:	4b17      	ldr	r3, [pc, #92]	; (80045ec <sniprintf+0x64>)
 800458e:	1e0c      	subs	r4, r1, #0
 8004590:	b09d      	sub	sp, #116	; 0x74
 8004592:	681d      	ldr	r5, [r3, #0]
 8004594:	da08      	bge.n	80045a8 <sniprintf+0x20>
 8004596:	238b      	movs	r3, #139	; 0x8b
 8004598:	602b      	str	r3, [r5, #0]
 800459a:	f04f 30ff 	mov.w	r0, #4294967295
 800459e:	b01d      	add	sp, #116	; 0x74
 80045a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045a4:	b002      	add	sp, #8
 80045a6:	4770      	bx	lr
 80045a8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80045ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 80045b0:	bf14      	ite	ne
 80045b2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80045b6:	4623      	moveq	r3, r4
 80045b8:	9304      	str	r3, [sp, #16]
 80045ba:	9307      	str	r3, [sp, #28]
 80045bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80045c0:	9002      	str	r0, [sp, #8]
 80045c2:	9006      	str	r0, [sp, #24]
 80045c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80045c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80045ca:	ab21      	add	r3, sp, #132	; 0x84
 80045cc:	a902      	add	r1, sp, #8
 80045ce:	4628      	mov	r0, r5
 80045d0:	9301      	str	r3, [sp, #4]
 80045d2:	f000 f965 	bl	80048a0 <_svfiprintf_r>
 80045d6:	1c43      	adds	r3, r0, #1
 80045d8:	bfbc      	itt	lt
 80045da:	238b      	movlt	r3, #139	; 0x8b
 80045dc:	602b      	strlt	r3, [r5, #0]
 80045de:	2c00      	cmp	r4, #0
 80045e0:	d0dd      	beq.n	800459e <sniprintf+0x16>
 80045e2:	9b02      	ldr	r3, [sp, #8]
 80045e4:	2200      	movs	r2, #0
 80045e6:	701a      	strb	r2, [r3, #0]
 80045e8:	e7d9      	b.n	800459e <sniprintf+0x16>
 80045ea:	bf00      	nop
 80045ec:	2000000c 	.word	0x2000000c

080045f0 <strtok>:
 80045f0:	4b13      	ldr	r3, [pc, #76]	; (8004640 <strtok+0x50>)
 80045f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045f6:	681d      	ldr	r5, [r3, #0]
 80045f8:	6dac      	ldr	r4, [r5, #88]	; 0x58
 80045fa:	4606      	mov	r6, r0
 80045fc:	460f      	mov	r7, r1
 80045fe:	b9b4      	cbnz	r4, 800462e <strtok+0x3e>
 8004600:	2050      	movs	r0, #80	; 0x50
 8004602:	f7ff fee5 	bl	80043d0 <malloc>
 8004606:	65a8      	str	r0, [r5, #88]	; 0x58
 8004608:	e9c0 4400 	strd	r4, r4, [r0]
 800460c:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004610:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004614:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004618:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800461c:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004620:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004624:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004628:	6184      	str	r4, [r0, #24]
 800462a:	7704      	strb	r4, [r0, #28]
 800462c:	6244      	str	r4, [r0, #36]	; 0x24
 800462e:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8004630:	4639      	mov	r1, r7
 8004632:	4630      	mov	r0, r6
 8004634:	2301      	movs	r3, #1
 8004636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800463a:	f000 b803 	b.w	8004644 <__strtok_r>
 800463e:	bf00      	nop
 8004640:	2000000c 	.word	0x2000000c

08004644 <__strtok_r>:
 8004644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004646:	b918      	cbnz	r0, 8004650 <__strtok_r+0xc>
 8004648:	6810      	ldr	r0, [r2, #0]
 800464a:	b908      	cbnz	r0, 8004650 <__strtok_r+0xc>
 800464c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800464e:	4620      	mov	r0, r4
 8004650:	4604      	mov	r4, r0
 8004652:	460f      	mov	r7, r1
 8004654:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004658:	f817 6b01 	ldrb.w	r6, [r7], #1
 800465c:	b91e      	cbnz	r6, 8004666 <__strtok_r+0x22>
 800465e:	b96d      	cbnz	r5, 800467c <__strtok_r+0x38>
 8004660:	6015      	str	r5, [r2, #0]
 8004662:	4628      	mov	r0, r5
 8004664:	e7f2      	b.n	800464c <__strtok_r+0x8>
 8004666:	42b5      	cmp	r5, r6
 8004668:	d1f6      	bne.n	8004658 <__strtok_r+0x14>
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1ef      	bne.n	800464e <__strtok_r+0xa>
 800466e:	6014      	str	r4, [r2, #0]
 8004670:	7003      	strb	r3, [r0, #0]
 8004672:	e7eb      	b.n	800464c <__strtok_r+0x8>
 8004674:	462b      	mov	r3, r5
 8004676:	e00d      	b.n	8004694 <__strtok_r+0x50>
 8004678:	b926      	cbnz	r6, 8004684 <__strtok_r+0x40>
 800467a:	461c      	mov	r4, r3
 800467c:	4623      	mov	r3, r4
 800467e:	460f      	mov	r7, r1
 8004680:	f813 5b01 	ldrb.w	r5, [r3], #1
 8004684:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004688:	42b5      	cmp	r5, r6
 800468a:	d1f5      	bne.n	8004678 <__strtok_r+0x34>
 800468c:	2d00      	cmp	r5, #0
 800468e:	d0f1      	beq.n	8004674 <__strtok_r+0x30>
 8004690:	2100      	movs	r1, #0
 8004692:	7021      	strb	r1, [r4, #0]
 8004694:	6013      	str	r3, [r2, #0]
 8004696:	e7d9      	b.n	800464c <__strtok_r+0x8>

08004698 <_strtol_l.isra.0>:
 8004698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800469c:	4680      	mov	r8, r0
 800469e:	4689      	mov	r9, r1
 80046a0:	4692      	mov	sl, r2
 80046a2:	461e      	mov	r6, r3
 80046a4:	460f      	mov	r7, r1
 80046a6:	463d      	mov	r5, r7
 80046a8:	9808      	ldr	r0, [sp, #32]
 80046aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80046ae:	f000 f885 	bl	80047bc <__locale_ctype_ptr_l>
 80046b2:	4420      	add	r0, r4
 80046b4:	7843      	ldrb	r3, [r0, #1]
 80046b6:	f013 0308 	ands.w	r3, r3, #8
 80046ba:	d132      	bne.n	8004722 <_strtol_l.isra.0+0x8a>
 80046bc:	2c2d      	cmp	r4, #45	; 0x2d
 80046be:	d132      	bne.n	8004726 <_strtol_l.isra.0+0x8e>
 80046c0:	787c      	ldrb	r4, [r7, #1]
 80046c2:	1cbd      	adds	r5, r7, #2
 80046c4:	2201      	movs	r2, #1
 80046c6:	2e00      	cmp	r6, #0
 80046c8:	d05d      	beq.n	8004786 <_strtol_l.isra.0+0xee>
 80046ca:	2e10      	cmp	r6, #16
 80046cc:	d109      	bne.n	80046e2 <_strtol_l.isra.0+0x4a>
 80046ce:	2c30      	cmp	r4, #48	; 0x30
 80046d0:	d107      	bne.n	80046e2 <_strtol_l.isra.0+0x4a>
 80046d2:	782b      	ldrb	r3, [r5, #0]
 80046d4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80046d8:	2b58      	cmp	r3, #88	; 0x58
 80046da:	d14f      	bne.n	800477c <_strtol_l.isra.0+0xe4>
 80046dc:	786c      	ldrb	r4, [r5, #1]
 80046de:	2610      	movs	r6, #16
 80046e0:	3502      	adds	r5, #2
 80046e2:	2a00      	cmp	r2, #0
 80046e4:	bf14      	ite	ne
 80046e6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80046ea:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80046ee:	2700      	movs	r7, #0
 80046f0:	fbb1 fcf6 	udiv	ip, r1, r6
 80046f4:	4638      	mov	r0, r7
 80046f6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80046fa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80046fe:	2b09      	cmp	r3, #9
 8004700:	d817      	bhi.n	8004732 <_strtol_l.isra.0+0x9a>
 8004702:	461c      	mov	r4, r3
 8004704:	42a6      	cmp	r6, r4
 8004706:	dd23      	ble.n	8004750 <_strtol_l.isra.0+0xb8>
 8004708:	1c7b      	adds	r3, r7, #1
 800470a:	d007      	beq.n	800471c <_strtol_l.isra.0+0x84>
 800470c:	4584      	cmp	ip, r0
 800470e:	d31c      	bcc.n	800474a <_strtol_l.isra.0+0xb2>
 8004710:	d101      	bne.n	8004716 <_strtol_l.isra.0+0x7e>
 8004712:	45a6      	cmp	lr, r4
 8004714:	db19      	blt.n	800474a <_strtol_l.isra.0+0xb2>
 8004716:	fb00 4006 	mla	r0, r0, r6, r4
 800471a:	2701      	movs	r7, #1
 800471c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004720:	e7eb      	b.n	80046fa <_strtol_l.isra.0+0x62>
 8004722:	462f      	mov	r7, r5
 8004724:	e7bf      	b.n	80046a6 <_strtol_l.isra.0+0xe>
 8004726:	2c2b      	cmp	r4, #43	; 0x2b
 8004728:	bf04      	itt	eq
 800472a:	1cbd      	addeq	r5, r7, #2
 800472c:	787c      	ldrbeq	r4, [r7, #1]
 800472e:	461a      	mov	r2, r3
 8004730:	e7c9      	b.n	80046c6 <_strtol_l.isra.0+0x2e>
 8004732:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004736:	2b19      	cmp	r3, #25
 8004738:	d801      	bhi.n	800473e <_strtol_l.isra.0+0xa6>
 800473a:	3c37      	subs	r4, #55	; 0x37
 800473c:	e7e2      	b.n	8004704 <_strtol_l.isra.0+0x6c>
 800473e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8004742:	2b19      	cmp	r3, #25
 8004744:	d804      	bhi.n	8004750 <_strtol_l.isra.0+0xb8>
 8004746:	3c57      	subs	r4, #87	; 0x57
 8004748:	e7dc      	b.n	8004704 <_strtol_l.isra.0+0x6c>
 800474a:	f04f 37ff 	mov.w	r7, #4294967295
 800474e:	e7e5      	b.n	800471c <_strtol_l.isra.0+0x84>
 8004750:	1c7b      	adds	r3, r7, #1
 8004752:	d108      	bne.n	8004766 <_strtol_l.isra.0+0xce>
 8004754:	2322      	movs	r3, #34	; 0x22
 8004756:	f8c8 3000 	str.w	r3, [r8]
 800475a:	4608      	mov	r0, r1
 800475c:	f1ba 0f00 	cmp.w	sl, #0
 8004760:	d107      	bne.n	8004772 <_strtol_l.isra.0+0xda>
 8004762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004766:	b102      	cbz	r2, 800476a <_strtol_l.isra.0+0xd2>
 8004768:	4240      	negs	r0, r0
 800476a:	f1ba 0f00 	cmp.w	sl, #0
 800476e:	d0f8      	beq.n	8004762 <_strtol_l.isra.0+0xca>
 8004770:	b10f      	cbz	r7, 8004776 <_strtol_l.isra.0+0xde>
 8004772:	f105 39ff 	add.w	r9, r5, #4294967295
 8004776:	f8ca 9000 	str.w	r9, [sl]
 800477a:	e7f2      	b.n	8004762 <_strtol_l.isra.0+0xca>
 800477c:	2430      	movs	r4, #48	; 0x30
 800477e:	2e00      	cmp	r6, #0
 8004780:	d1af      	bne.n	80046e2 <_strtol_l.isra.0+0x4a>
 8004782:	2608      	movs	r6, #8
 8004784:	e7ad      	b.n	80046e2 <_strtol_l.isra.0+0x4a>
 8004786:	2c30      	cmp	r4, #48	; 0x30
 8004788:	d0a3      	beq.n	80046d2 <_strtol_l.isra.0+0x3a>
 800478a:	260a      	movs	r6, #10
 800478c:	e7a9      	b.n	80046e2 <_strtol_l.isra.0+0x4a>
	...

08004790 <strtol>:
 8004790:	4b08      	ldr	r3, [pc, #32]	; (80047b4 <strtol+0x24>)
 8004792:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004794:	681c      	ldr	r4, [r3, #0]
 8004796:	4d08      	ldr	r5, [pc, #32]	; (80047b8 <strtol+0x28>)
 8004798:	6a23      	ldr	r3, [r4, #32]
 800479a:	2b00      	cmp	r3, #0
 800479c:	bf08      	it	eq
 800479e:	462b      	moveq	r3, r5
 80047a0:	9300      	str	r3, [sp, #0]
 80047a2:	4613      	mov	r3, r2
 80047a4:	460a      	mov	r2, r1
 80047a6:	4601      	mov	r1, r0
 80047a8:	4620      	mov	r0, r4
 80047aa:	f7ff ff75 	bl	8004698 <_strtol_l.isra.0>
 80047ae:	b003      	add	sp, #12
 80047b0:	bd30      	pop	{r4, r5, pc}
 80047b2:	bf00      	nop
 80047b4:	2000000c 	.word	0x2000000c
 80047b8:	20000070 	.word	0x20000070

080047bc <__locale_ctype_ptr_l>:
 80047bc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80047c0:	4770      	bx	lr

080047c2 <__ascii_mbtowc>:
 80047c2:	b082      	sub	sp, #8
 80047c4:	b901      	cbnz	r1, 80047c8 <__ascii_mbtowc+0x6>
 80047c6:	a901      	add	r1, sp, #4
 80047c8:	b142      	cbz	r2, 80047dc <__ascii_mbtowc+0x1a>
 80047ca:	b14b      	cbz	r3, 80047e0 <__ascii_mbtowc+0x1e>
 80047cc:	7813      	ldrb	r3, [r2, #0]
 80047ce:	600b      	str	r3, [r1, #0]
 80047d0:	7812      	ldrb	r2, [r2, #0]
 80047d2:	1c10      	adds	r0, r2, #0
 80047d4:	bf18      	it	ne
 80047d6:	2001      	movne	r0, #1
 80047d8:	b002      	add	sp, #8
 80047da:	4770      	bx	lr
 80047dc:	4610      	mov	r0, r2
 80047de:	e7fb      	b.n	80047d8 <__ascii_mbtowc+0x16>
 80047e0:	f06f 0001 	mvn.w	r0, #1
 80047e4:	e7f8      	b.n	80047d8 <__ascii_mbtowc+0x16>

080047e6 <__malloc_lock>:
 80047e6:	4770      	bx	lr

080047e8 <__malloc_unlock>:
 80047e8:	4770      	bx	lr

080047ea <__ssputs_r>:
 80047ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047ee:	688e      	ldr	r6, [r1, #8]
 80047f0:	429e      	cmp	r6, r3
 80047f2:	4682      	mov	sl, r0
 80047f4:	460c      	mov	r4, r1
 80047f6:	4690      	mov	r8, r2
 80047f8:	4699      	mov	r9, r3
 80047fa:	d837      	bhi.n	800486c <__ssputs_r+0x82>
 80047fc:	898a      	ldrh	r2, [r1, #12]
 80047fe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004802:	d031      	beq.n	8004868 <__ssputs_r+0x7e>
 8004804:	6825      	ldr	r5, [r4, #0]
 8004806:	6909      	ldr	r1, [r1, #16]
 8004808:	1a6f      	subs	r7, r5, r1
 800480a:	6965      	ldr	r5, [r4, #20]
 800480c:	2302      	movs	r3, #2
 800480e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004812:	fb95 f5f3 	sdiv	r5, r5, r3
 8004816:	f109 0301 	add.w	r3, r9, #1
 800481a:	443b      	add	r3, r7
 800481c:	429d      	cmp	r5, r3
 800481e:	bf38      	it	cc
 8004820:	461d      	movcc	r5, r3
 8004822:	0553      	lsls	r3, r2, #21
 8004824:	d530      	bpl.n	8004888 <__ssputs_r+0x9e>
 8004826:	4629      	mov	r1, r5
 8004828:	f7ff fe44 	bl	80044b4 <_malloc_r>
 800482c:	4606      	mov	r6, r0
 800482e:	b950      	cbnz	r0, 8004846 <__ssputs_r+0x5c>
 8004830:	230c      	movs	r3, #12
 8004832:	f8ca 3000 	str.w	r3, [sl]
 8004836:	89a3      	ldrh	r3, [r4, #12]
 8004838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800483c:	81a3      	strh	r3, [r4, #12]
 800483e:	f04f 30ff 	mov.w	r0, #4294967295
 8004842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004846:	463a      	mov	r2, r7
 8004848:	6921      	ldr	r1, [r4, #16]
 800484a:	f7ff fdd1 	bl	80043f0 <memcpy>
 800484e:	89a3      	ldrh	r3, [r4, #12]
 8004850:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004858:	81a3      	strh	r3, [r4, #12]
 800485a:	6126      	str	r6, [r4, #16]
 800485c:	6165      	str	r5, [r4, #20]
 800485e:	443e      	add	r6, r7
 8004860:	1bed      	subs	r5, r5, r7
 8004862:	6026      	str	r6, [r4, #0]
 8004864:	60a5      	str	r5, [r4, #8]
 8004866:	464e      	mov	r6, r9
 8004868:	454e      	cmp	r6, r9
 800486a:	d900      	bls.n	800486e <__ssputs_r+0x84>
 800486c:	464e      	mov	r6, r9
 800486e:	4632      	mov	r2, r6
 8004870:	4641      	mov	r1, r8
 8004872:	6820      	ldr	r0, [r4, #0]
 8004874:	f000 faa1 	bl	8004dba <memmove>
 8004878:	68a3      	ldr	r3, [r4, #8]
 800487a:	1b9b      	subs	r3, r3, r6
 800487c:	60a3      	str	r3, [r4, #8]
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	441e      	add	r6, r3
 8004882:	6026      	str	r6, [r4, #0]
 8004884:	2000      	movs	r0, #0
 8004886:	e7dc      	b.n	8004842 <__ssputs_r+0x58>
 8004888:	462a      	mov	r2, r5
 800488a:	f000 faaf 	bl	8004dec <_realloc_r>
 800488e:	4606      	mov	r6, r0
 8004890:	2800      	cmp	r0, #0
 8004892:	d1e2      	bne.n	800485a <__ssputs_r+0x70>
 8004894:	6921      	ldr	r1, [r4, #16]
 8004896:	4650      	mov	r0, sl
 8004898:	f7ff fdbe 	bl	8004418 <_free_r>
 800489c:	e7c8      	b.n	8004830 <__ssputs_r+0x46>
	...

080048a0 <_svfiprintf_r>:
 80048a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a4:	461d      	mov	r5, r3
 80048a6:	898b      	ldrh	r3, [r1, #12]
 80048a8:	061f      	lsls	r7, r3, #24
 80048aa:	b09d      	sub	sp, #116	; 0x74
 80048ac:	4680      	mov	r8, r0
 80048ae:	460c      	mov	r4, r1
 80048b0:	4616      	mov	r6, r2
 80048b2:	d50f      	bpl.n	80048d4 <_svfiprintf_r+0x34>
 80048b4:	690b      	ldr	r3, [r1, #16]
 80048b6:	b96b      	cbnz	r3, 80048d4 <_svfiprintf_r+0x34>
 80048b8:	2140      	movs	r1, #64	; 0x40
 80048ba:	f7ff fdfb 	bl	80044b4 <_malloc_r>
 80048be:	6020      	str	r0, [r4, #0]
 80048c0:	6120      	str	r0, [r4, #16]
 80048c2:	b928      	cbnz	r0, 80048d0 <_svfiprintf_r+0x30>
 80048c4:	230c      	movs	r3, #12
 80048c6:	f8c8 3000 	str.w	r3, [r8]
 80048ca:	f04f 30ff 	mov.w	r0, #4294967295
 80048ce:	e0c8      	b.n	8004a62 <_svfiprintf_r+0x1c2>
 80048d0:	2340      	movs	r3, #64	; 0x40
 80048d2:	6163      	str	r3, [r4, #20]
 80048d4:	2300      	movs	r3, #0
 80048d6:	9309      	str	r3, [sp, #36]	; 0x24
 80048d8:	2320      	movs	r3, #32
 80048da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048de:	2330      	movs	r3, #48	; 0x30
 80048e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048e4:	9503      	str	r5, [sp, #12]
 80048e6:	f04f 0b01 	mov.w	fp, #1
 80048ea:	4637      	mov	r7, r6
 80048ec:	463d      	mov	r5, r7
 80048ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 80048f2:	b10b      	cbz	r3, 80048f8 <_svfiprintf_r+0x58>
 80048f4:	2b25      	cmp	r3, #37	; 0x25
 80048f6:	d13e      	bne.n	8004976 <_svfiprintf_r+0xd6>
 80048f8:	ebb7 0a06 	subs.w	sl, r7, r6
 80048fc:	d00b      	beq.n	8004916 <_svfiprintf_r+0x76>
 80048fe:	4653      	mov	r3, sl
 8004900:	4632      	mov	r2, r6
 8004902:	4621      	mov	r1, r4
 8004904:	4640      	mov	r0, r8
 8004906:	f7ff ff70 	bl	80047ea <__ssputs_r>
 800490a:	3001      	adds	r0, #1
 800490c:	f000 80a4 	beq.w	8004a58 <_svfiprintf_r+0x1b8>
 8004910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004912:	4453      	add	r3, sl
 8004914:	9309      	str	r3, [sp, #36]	; 0x24
 8004916:	783b      	ldrb	r3, [r7, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 809d 	beq.w	8004a58 <_svfiprintf_r+0x1b8>
 800491e:	2300      	movs	r3, #0
 8004920:	f04f 32ff 	mov.w	r2, #4294967295
 8004924:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004928:	9304      	str	r3, [sp, #16]
 800492a:	9307      	str	r3, [sp, #28]
 800492c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004930:	931a      	str	r3, [sp, #104]	; 0x68
 8004932:	462f      	mov	r7, r5
 8004934:	2205      	movs	r2, #5
 8004936:	f817 1b01 	ldrb.w	r1, [r7], #1
 800493a:	4850      	ldr	r0, [pc, #320]	; (8004a7c <_svfiprintf_r+0x1dc>)
 800493c:	f7fb fc48 	bl	80001d0 <memchr>
 8004940:	9b04      	ldr	r3, [sp, #16]
 8004942:	b9d0      	cbnz	r0, 800497a <_svfiprintf_r+0xda>
 8004944:	06d9      	lsls	r1, r3, #27
 8004946:	bf44      	itt	mi
 8004948:	2220      	movmi	r2, #32
 800494a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800494e:	071a      	lsls	r2, r3, #28
 8004950:	bf44      	itt	mi
 8004952:	222b      	movmi	r2, #43	; 0x2b
 8004954:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004958:	782a      	ldrb	r2, [r5, #0]
 800495a:	2a2a      	cmp	r2, #42	; 0x2a
 800495c:	d015      	beq.n	800498a <_svfiprintf_r+0xea>
 800495e:	9a07      	ldr	r2, [sp, #28]
 8004960:	462f      	mov	r7, r5
 8004962:	2000      	movs	r0, #0
 8004964:	250a      	movs	r5, #10
 8004966:	4639      	mov	r1, r7
 8004968:	f811 3b01 	ldrb.w	r3, [r1], #1
 800496c:	3b30      	subs	r3, #48	; 0x30
 800496e:	2b09      	cmp	r3, #9
 8004970:	d94d      	bls.n	8004a0e <_svfiprintf_r+0x16e>
 8004972:	b1b8      	cbz	r0, 80049a4 <_svfiprintf_r+0x104>
 8004974:	e00f      	b.n	8004996 <_svfiprintf_r+0xf6>
 8004976:	462f      	mov	r7, r5
 8004978:	e7b8      	b.n	80048ec <_svfiprintf_r+0x4c>
 800497a:	4a40      	ldr	r2, [pc, #256]	; (8004a7c <_svfiprintf_r+0x1dc>)
 800497c:	1a80      	subs	r0, r0, r2
 800497e:	fa0b f000 	lsl.w	r0, fp, r0
 8004982:	4318      	orrs	r0, r3
 8004984:	9004      	str	r0, [sp, #16]
 8004986:	463d      	mov	r5, r7
 8004988:	e7d3      	b.n	8004932 <_svfiprintf_r+0x92>
 800498a:	9a03      	ldr	r2, [sp, #12]
 800498c:	1d11      	adds	r1, r2, #4
 800498e:	6812      	ldr	r2, [r2, #0]
 8004990:	9103      	str	r1, [sp, #12]
 8004992:	2a00      	cmp	r2, #0
 8004994:	db01      	blt.n	800499a <_svfiprintf_r+0xfa>
 8004996:	9207      	str	r2, [sp, #28]
 8004998:	e004      	b.n	80049a4 <_svfiprintf_r+0x104>
 800499a:	4252      	negs	r2, r2
 800499c:	f043 0302 	orr.w	r3, r3, #2
 80049a0:	9207      	str	r2, [sp, #28]
 80049a2:	9304      	str	r3, [sp, #16]
 80049a4:	783b      	ldrb	r3, [r7, #0]
 80049a6:	2b2e      	cmp	r3, #46	; 0x2e
 80049a8:	d10c      	bne.n	80049c4 <_svfiprintf_r+0x124>
 80049aa:	787b      	ldrb	r3, [r7, #1]
 80049ac:	2b2a      	cmp	r3, #42	; 0x2a
 80049ae:	d133      	bne.n	8004a18 <_svfiprintf_r+0x178>
 80049b0:	9b03      	ldr	r3, [sp, #12]
 80049b2:	1d1a      	adds	r2, r3, #4
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	9203      	str	r2, [sp, #12]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	bfb8      	it	lt
 80049bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80049c0:	3702      	adds	r7, #2
 80049c2:	9305      	str	r3, [sp, #20]
 80049c4:	4d2e      	ldr	r5, [pc, #184]	; (8004a80 <_svfiprintf_r+0x1e0>)
 80049c6:	7839      	ldrb	r1, [r7, #0]
 80049c8:	2203      	movs	r2, #3
 80049ca:	4628      	mov	r0, r5
 80049cc:	f7fb fc00 	bl	80001d0 <memchr>
 80049d0:	b138      	cbz	r0, 80049e2 <_svfiprintf_r+0x142>
 80049d2:	2340      	movs	r3, #64	; 0x40
 80049d4:	1b40      	subs	r0, r0, r5
 80049d6:	fa03 f000 	lsl.w	r0, r3, r0
 80049da:	9b04      	ldr	r3, [sp, #16]
 80049dc:	4303      	orrs	r3, r0
 80049de:	3701      	adds	r7, #1
 80049e0:	9304      	str	r3, [sp, #16]
 80049e2:	7839      	ldrb	r1, [r7, #0]
 80049e4:	4827      	ldr	r0, [pc, #156]	; (8004a84 <_svfiprintf_r+0x1e4>)
 80049e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049ea:	2206      	movs	r2, #6
 80049ec:	1c7e      	adds	r6, r7, #1
 80049ee:	f7fb fbef 	bl	80001d0 <memchr>
 80049f2:	2800      	cmp	r0, #0
 80049f4:	d038      	beq.n	8004a68 <_svfiprintf_r+0x1c8>
 80049f6:	4b24      	ldr	r3, [pc, #144]	; (8004a88 <_svfiprintf_r+0x1e8>)
 80049f8:	bb13      	cbnz	r3, 8004a40 <_svfiprintf_r+0x1a0>
 80049fa:	9b03      	ldr	r3, [sp, #12]
 80049fc:	3307      	adds	r3, #7
 80049fe:	f023 0307 	bic.w	r3, r3, #7
 8004a02:	3308      	adds	r3, #8
 8004a04:	9303      	str	r3, [sp, #12]
 8004a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a08:	444b      	add	r3, r9
 8004a0a:	9309      	str	r3, [sp, #36]	; 0x24
 8004a0c:	e76d      	b.n	80048ea <_svfiprintf_r+0x4a>
 8004a0e:	fb05 3202 	mla	r2, r5, r2, r3
 8004a12:	2001      	movs	r0, #1
 8004a14:	460f      	mov	r7, r1
 8004a16:	e7a6      	b.n	8004966 <_svfiprintf_r+0xc6>
 8004a18:	2300      	movs	r3, #0
 8004a1a:	3701      	adds	r7, #1
 8004a1c:	9305      	str	r3, [sp, #20]
 8004a1e:	4619      	mov	r1, r3
 8004a20:	250a      	movs	r5, #10
 8004a22:	4638      	mov	r0, r7
 8004a24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a28:	3a30      	subs	r2, #48	; 0x30
 8004a2a:	2a09      	cmp	r2, #9
 8004a2c:	d903      	bls.n	8004a36 <_svfiprintf_r+0x196>
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d0c8      	beq.n	80049c4 <_svfiprintf_r+0x124>
 8004a32:	9105      	str	r1, [sp, #20]
 8004a34:	e7c6      	b.n	80049c4 <_svfiprintf_r+0x124>
 8004a36:	fb05 2101 	mla	r1, r5, r1, r2
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	4607      	mov	r7, r0
 8004a3e:	e7f0      	b.n	8004a22 <_svfiprintf_r+0x182>
 8004a40:	ab03      	add	r3, sp, #12
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	4622      	mov	r2, r4
 8004a46:	4b11      	ldr	r3, [pc, #68]	; (8004a8c <_svfiprintf_r+0x1ec>)
 8004a48:	a904      	add	r1, sp, #16
 8004a4a:	4640      	mov	r0, r8
 8004a4c:	f3af 8000 	nop.w
 8004a50:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004a54:	4681      	mov	r9, r0
 8004a56:	d1d6      	bne.n	8004a06 <_svfiprintf_r+0x166>
 8004a58:	89a3      	ldrh	r3, [r4, #12]
 8004a5a:	065b      	lsls	r3, r3, #25
 8004a5c:	f53f af35 	bmi.w	80048ca <_svfiprintf_r+0x2a>
 8004a60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a62:	b01d      	add	sp, #116	; 0x74
 8004a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a68:	ab03      	add	r3, sp, #12
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	4622      	mov	r2, r4
 8004a6e:	4b07      	ldr	r3, [pc, #28]	; (8004a8c <_svfiprintf_r+0x1ec>)
 8004a70:	a904      	add	r1, sp, #16
 8004a72:	4640      	mov	r0, r8
 8004a74:	f000 f882 	bl	8004b7c <_printf_i>
 8004a78:	e7ea      	b.n	8004a50 <_svfiprintf_r+0x1b0>
 8004a7a:	bf00      	nop
 8004a7c:	0800618a 	.word	0x0800618a
 8004a80:	08006190 	.word	0x08006190
 8004a84:	08006194 	.word	0x08006194
 8004a88:	00000000 	.word	0x00000000
 8004a8c:	080047eb 	.word	0x080047eb

08004a90 <_printf_common>:
 8004a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a94:	4691      	mov	r9, r2
 8004a96:	461f      	mov	r7, r3
 8004a98:	688a      	ldr	r2, [r1, #8]
 8004a9a:	690b      	ldr	r3, [r1, #16]
 8004a9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	bfb8      	it	lt
 8004aa4:	4613      	movlt	r3, r2
 8004aa6:	f8c9 3000 	str.w	r3, [r9]
 8004aaa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004aae:	4606      	mov	r6, r0
 8004ab0:	460c      	mov	r4, r1
 8004ab2:	b112      	cbz	r2, 8004aba <_printf_common+0x2a>
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	f8c9 3000 	str.w	r3, [r9]
 8004aba:	6823      	ldr	r3, [r4, #0]
 8004abc:	0699      	lsls	r1, r3, #26
 8004abe:	bf42      	ittt	mi
 8004ac0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004ac4:	3302      	addmi	r3, #2
 8004ac6:	f8c9 3000 	strmi.w	r3, [r9]
 8004aca:	6825      	ldr	r5, [r4, #0]
 8004acc:	f015 0506 	ands.w	r5, r5, #6
 8004ad0:	d107      	bne.n	8004ae2 <_printf_common+0x52>
 8004ad2:	f104 0a19 	add.w	sl, r4, #25
 8004ad6:	68e3      	ldr	r3, [r4, #12]
 8004ad8:	f8d9 2000 	ldr.w	r2, [r9]
 8004adc:	1a9b      	subs	r3, r3, r2
 8004ade:	42ab      	cmp	r3, r5
 8004ae0:	dc28      	bgt.n	8004b34 <_printf_common+0xa4>
 8004ae2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004ae6:	6822      	ldr	r2, [r4, #0]
 8004ae8:	3300      	adds	r3, #0
 8004aea:	bf18      	it	ne
 8004aec:	2301      	movne	r3, #1
 8004aee:	0692      	lsls	r2, r2, #26
 8004af0:	d42d      	bmi.n	8004b4e <_printf_common+0xbe>
 8004af2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004af6:	4639      	mov	r1, r7
 8004af8:	4630      	mov	r0, r6
 8004afa:	47c0      	blx	r8
 8004afc:	3001      	adds	r0, #1
 8004afe:	d020      	beq.n	8004b42 <_printf_common+0xb2>
 8004b00:	6823      	ldr	r3, [r4, #0]
 8004b02:	68e5      	ldr	r5, [r4, #12]
 8004b04:	f8d9 2000 	ldr.w	r2, [r9]
 8004b08:	f003 0306 	and.w	r3, r3, #6
 8004b0c:	2b04      	cmp	r3, #4
 8004b0e:	bf08      	it	eq
 8004b10:	1aad      	subeq	r5, r5, r2
 8004b12:	68a3      	ldr	r3, [r4, #8]
 8004b14:	6922      	ldr	r2, [r4, #16]
 8004b16:	bf0c      	ite	eq
 8004b18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b1c:	2500      	movne	r5, #0
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	bfc4      	itt	gt
 8004b22:	1a9b      	subgt	r3, r3, r2
 8004b24:	18ed      	addgt	r5, r5, r3
 8004b26:	f04f 0900 	mov.w	r9, #0
 8004b2a:	341a      	adds	r4, #26
 8004b2c:	454d      	cmp	r5, r9
 8004b2e:	d11a      	bne.n	8004b66 <_printf_common+0xd6>
 8004b30:	2000      	movs	r0, #0
 8004b32:	e008      	b.n	8004b46 <_printf_common+0xb6>
 8004b34:	2301      	movs	r3, #1
 8004b36:	4652      	mov	r2, sl
 8004b38:	4639      	mov	r1, r7
 8004b3a:	4630      	mov	r0, r6
 8004b3c:	47c0      	blx	r8
 8004b3e:	3001      	adds	r0, #1
 8004b40:	d103      	bne.n	8004b4a <_printf_common+0xba>
 8004b42:	f04f 30ff 	mov.w	r0, #4294967295
 8004b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b4a:	3501      	adds	r5, #1
 8004b4c:	e7c3      	b.n	8004ad6 <_printf_common+0x46>
 8004b4e:	18e1      	adds	r1, r4, r3
 8004b50:	1c5a      	adds	r2, r3, #1
 8004b52:	2030      	movs	r0, #48	; 0x30
 8004b54:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b58:	4422      	add	r2, r4
 8004b5a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b62:	3302      	adds	r3, #2
 8004b64:	e7c5      	b.n	8004af2 <_printf_common+0x62>
 8004b66:	2301      	movs	r3, #1
 8004b68:	4622      	mov	r2, r4
 8004b6a:	4639      	mov	r1, r7
 8004b6c:	4630      	mov	r0, r6
 8004b6e:	47c0      	blx	r8
 8004b70:	3001      	adds	r0, #1
 8004b72:	d0e6      	beq.n	8004b42 <_printf_common+0xb2>
 8004b74:	f109 0901 	add.w	r9, r9, #1
 8004b78:	e7d8      	b.n	8004b2c <_printf_common+0x9c>
	...

08004b7c <_printf_i>:
 8004b7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b80:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004b84:	460c      	mov	r4, r1
 8004b86:	7e09      	ldrb	r1, [r1, #24]
 8004b88:	b085      	sub	sp, #20
 8004b8a:	296e      	cmp	r1, #110	; 0x6e
 8004b8c:	4617      	mov	r7, r2
 8004b8e:	4606      	mov	r6, r0
 8004b90:	4698      	mov	r8, r3
 8004b92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b94:	f000 80b3 	beq.w	8004cfe <_printf_i+0x182>
 8004b98:	d822      	bhi.n	8004be0 <_printf_i+0x64>
 8004b9a:	2963      	cmp	r1, #99	; 0x63
 8004b9c:	d036      	beq.n	8004c0c <_printf_i+0x90>
 8004b9e:	d80a      	bhi.n	8004bb6 <_printf_i+0x3a>
 8004ba0:	2900      	cmp	r1, #0
 8004ba2:	f000 80b9 	beq.w	8004d18 <_printf_i+0x19c>
 8004ba6:	2958      	cmp	r1, #88	; 0x58
 8004ba8:	f000 8083 	beq.w	8004cb2 <_printf_i+0x136>
 8004bac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bb0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004bb4:	e032      	b.n	8004c1c <_printf_i+0xa0>
 8004bb6:	2964      	cmp	r1, #100	; 0x64
 8004bb8:	d001      	beq.n	8004bbe <_printf_i+0x42>
 8004bba:	2969      	cmp	r1, #105	; 0x69
 8004bbc:	d1f6      	bne.n	8004bac <_printf_i+0x30>
 8004bbe:	6820      	ldr	r0, [r4, #0]
 8004bc0:	6813      	ldr	r3, [r2, #0]
 8004bc2:	0605      	lsls	r5, r0, #24
 8004bc4:	f103 0104 	add.w	r1, r3, #4
 8004bc8:	d52a      	bpl.n	8004c20 <_printf_i+0xa4>
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6011      	str	r1, [r2, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	da03      	bge.n	8004bda <_printf_i+0x5e>
 8004bd2:	222d      	movs	r2, #45	; 0x2d
 8004bd4:	425b      	negs	r3, r3
 8004bd6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004bda:	486f      	ldr	r0, [pc, #444]	; (8004d98 <_printf_i+0x21c>)
 8004bdc:	220a      	movs	r2, #10
 8004bde:	e039      	b.n	8004c54 <_printf_i+0xd8>
 8004be0:	2973      	cmp	r1, #115	; 0x73
 8004be2:	f000 809d 	beq.w	8004d20 <_printf_i+0x1a4>
 8004be6:	d808      	bhi.n	8004bfa <_printf_i+0x7e>
 8004be8:	296f      	cmp	r1, #111	; 0x6f
 8004bea:	d020      	beq.n	8004c2e <_printf_i+0xb2>
 8004bec:	2970      	cmp	r1, #112	; 0x70
 8004bee:	d1dd      	bne.n	8004bac <_printf_i+0x30>
 8004bf0:	6823      	ldr	r3, [r4, #0]
 8004bf2:	f043 0320 	orr.w	r3, r3, #32
 8004bf6:	6023      	str	r3, [r4, #0]
 8004bf8:	e003      	b.n	8004c02 <_printf_i+0x86>
 8004bfa:	2975      	cmp	r1, #117	; 0x75
 8004bfc:	d017      	beq.n	8004c2e <_printf_i+0xb2>
 8004bfe:	2978      	cmp	r1, #120	; 0x78
 8004c00:	d1d4      	bne.n	8004bac <_printf_i+0x30>
 8004c02:	2378      	movs	r3, #120	; 0x78
 8004c04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c08:	4864      	ldr	r0, [pc, #400]	; (8004d9c <_printf_i+0x220>)
 8004c0a:	e055      	b.n	8004cb8 <_printf_i+0x13c>
 8004c0c:	6813      	ldr	r3, [r2, #0]
 8004c0e:	1d19      	adds	r1, r3, #4
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6011      	str	r1, [r2, #0]
 8004c14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e08c      	b.n	8004d3a <_printf_i+0x1be>
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	6011      	str	r1, [r2, #0]
 8004c24:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c28:	bf18      	it	ne
 8004c2a:	b21b      	sxthne	r3, r3
 8004c2c:	e7cf      	b.n	8004bce <_printf_i+0x52>
 8004c2e:	6813      	ldr	r3, [r2, #0]
 8004c30:	6825      	ldr	r5, [r4, #0]
 8004c32:	1d18      	adds	r0, r3, #4
 8004c34:	6010      	str	r0, [r2, #0]
 8004c36:	0628      	lsls	r0, r5, #24
 8004c38:	d501      	bpl.n	8004c3e <_printf_i+0xc2>
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	e002      	b.n	8004c44 <_printf_i+0xc8>
 8004c3e:	0668      	lsls	r0, r5, #25
 8004c40:	d5fb      	bpl.n	8004c3a <_printf_i+0xbe>
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	4854      	ldr	r0, [pc, #336]	; (8004d98 <_printf_i+0x21c>)
 8004c46:	296f      	cmp	r1, #111	; 0x6f
 8004c48:	bf14      	ite	ne
 8004c4a:	220a      	movne	r2, #10
 8004c4c:	2208      	moveq	r2, #8
 8004c4e:	2100      	movs	r1, #0
 8004c50:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c54:	6865      	ldr	r5, [r4, #4]
 8004c56:	60a5      	str	r5, [r4, #8]
 8004c58:	2d00      	cmp	r5, #0
 8004c5a:	f2c0 8095 	blt.w	8004d88 <_printf_i+0x20c>
 8004c5e:	6821      	ldr	r1, [r4, #0]
 8004c60:	f021 0104 	bic.w	r1, r1, #4
 8004c64:	6021      	str	r1, [r4, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d13d      	bne.n	8004ce6 <_printf_i+0x16a>
 8004c6a:	2d00      	cmp	r5, #0
 8004c6c:	f040 808e 	bne.w	8004d8c <_printf_i+0x210>
 8004c70:	4665      	mov	r5, ip
 8004c72:	2a08      	cmp	r2, #8
 8004c74:	d10b      	bne.n	8004c8e <_printf_i+0x112>
 8004c76:	6823      	ldr	r3, [r4, #0]
 8004c78:	07db      	lsls	r3, r3, #31
 8004c7a:	d508      	bpl.n	8004c8e <_printf_i+0x112>
 8004c7c:	6923      	ldr	r3, [r4, #16]
 8004c7e:	6862      	ldr	r2, [r4, #4]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	bfde      	ittt	le
 8004c84:	2330      	movle	r3, #48	; 0x30
 8004c86:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c8a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c8e:	ebac 0305 	sub.w	r3, ip, r5
 8004c92:	6123      	str	r3, [r4, #16]
 8004c94:	f8cd 8000 	str.w	r8, [sp]
 8004c98:	463b      	mov	r3, r7
 8004c9a:	aa03      	add	r2, sp, #12
 8004c9c:	4621      	mov	r1, r4
 8004c9e:	4630      	mov	r0, r6
 8004ca0:	f7ff fef6 	bl	8004a90 <_printf_common>
 8004ca4:	3001      	adds	r0, #1
 8004ca6:	d14d      	bne.n	8004d44 <_printf_i+0x1c8>
 8004ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cac:	b005      	add	sp, #20
 8004cae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004cb2:	4839      	ldr	r0, [pc, #228]	; (8004d98 <_printf_i+0x21c>)
 8004cb4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004cb8:	6813      	ldr	r3, [r2, #0]
 8004cba:	6821      	ldr	r1, [r4, #0]
 8004cbc:	1d1d      	adds	r5, r3, #4
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6015      	str	r5, [r2, #0]
 8004cc2:	060a      	lsls	r2, r1, #24
 8004cc4:	d50b      	bpl.n	8004cde <_printf_i+0x162>
 8004cc6:	07ca      	lsls	r2, r1, #31
 8004cc8:	bf44      	itt	mi
 8004cca:	f041 0120 	orrmi.w	r1, r1, #32
 8004cce:	6021      	strmi	r1, [r4, #0]
 8004cd0:	b91b      	cbnz	r3, 8004cda <_printf_i+0x15e>
 8004cd2:	6822      	ldr	r2, [r4, #0]
 8004cd4:	f022 0220 	bic.w	r2, r2, #32
 8004cd8:	6022      	str	r2, [r4, #0]
 8004cda:	2210      	movs	r2, #16
 8004cdc:	e7b7      	b.n	8004c4e <_printf_i+0xd2>
 8004cde:	064d      	lsls	r5, r1, #25
 8004ce0:	bf48      	it	mi
 8004ce2:	b29b      	uxthmi	r3, r3
 8004ce4:	e7ef      	b.n	8004cc6 <_printf_i+0x14a>
 8004ce6:	4665      	mov	r5, ip
 8004ce8:	fbb3 f1f2 	udiv	r1, r3, r2
 8004cec:	fb02 3311 	mls	r3, r2, r1, r3
 8004cf0:	5cc3      	ldrb	r3, [r0, r3]
 8004cf2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	2900      	cmp	r1, #0
 8004cfa:	d1f5      	bne.n	8004ce8 <_printf_i+0x16c>
 8004cfc:	e7b9      	b.n	8004c72 <_printf_i+0xf6>
 8004cfe:	6813      	ldr	r3, [r2, #0]
 8004d00:	6825      	ldr	r5, [r4, #0]
 8004d02:	6961      	ldr	r1, [r4, #20]
 8004d04:	1d18      	adds	r0, r3, #4
 8004d06:	6010      	str	r0, [r2, #0]
 8004d08:	0628      	lsls	r0, r5, #24
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	d501      	bpl.n	8004d12 <_printf_i+0x196>
 8004d0e:	6019      	str	r1, [r3, #0]
 8004d10:	e002      	b.n	8004d18 <_printf_i+0x19c>
 8004d12:	066a      	lsls	r2, r5, #25
 8004d14:	d5fb      	bpl.n	8004d0e <_printf_i+0x192>
 8004d16:	8019      	strh	r1, [r3, #0]
 8004d18:	2300      	movs	r3, #0
 8004d1a:	6123      	str	r3, [r4, #16]
 8004d1c:	4665      	mov	r5, ip
 8004d1e:	e7b9      	b.n	8004c94 <_printf_i+0x118>
 8004d20:	6813      	ldr	r3, [r2, #0]
 8004d22:	1d19      	adds	r1, r3, #4
 8004d24:	6011      	str	r1, [r2, #0]
 8004d26:	681d      	ldr	r5, [r3, #0]
 8004d28:	6862      	ldr	r2, [r4, #4]
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	4628      	mov	r0, r5
 8004d2e:	f7fb fa4f 	bl	80001d0 <memchr>
 8004d32:	b108      	cbz	r0, 8004d38 <_printf_i+0x1bc>
 8004d34:	1b40      	subs	r0, r0, r5
 8004d36:	6060      	str	r0, [r4, #4]
 8004d38:	6863      	ldr	r3, [r4, #4]
 8004d3a:	6123      	str	r3, [r4, #16]
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d42:	e7a7      	b.n	8004c94 <_printf_i+0x118>
 8004d44:	6923      	ldr	r3, [r4, #16]
 8004d46:	462a      	mov	r2, r5
 8004d48:	4639      	mov	r1, r7
 8004d4a:	4630      	mov	r0, r6
 8004d4c:	47c0      	blx	r8
 8004d4e:	3001      	adds	r0, #1
 8004d50:	d0aa      	beq.n	8004ca8 <_printf_i+0x12c>
 8004d52:	6823      	ldr	r3, [r4, #0]
 8004d54:	079b      	lsls	r3, r3, #30
 8004d56:	d413      	bmi.n	8004d80 <_printf_i+0x204>
 8004d58:	68e0      	ldr	r0, [r4, #12]
 8004d5a:	9b03      	ldr	r3, [sp, #12]
 8004d5c:	4298      	cmp	r0, r3
 8004d5e:	bfb8      	it	lt
 8004d60:	4618      	movlt	r0, r3
 8004d62:	e7a3      	b.n	8004cac <_printf_i+0x130>
 8004d64:	2301      	movs	r3, #1
 8004d66:	464a      	mov	r2, r9
 8004d68:	4639      	mov	r1, r7
 8004d6a:	4630      	mov	r0, r6
 8004d6c:	47c0      	blx	r8
 8004d6e:	3001      	adds	r0, #1
 8004d70:	d09a      	beq.n	8004ca8 <_printf_i+0x12c>
 8004d72:	3501      	adds	r5, #1
 8004d74:	68e3      	ldr	r3, [r4, #12]
 8004d76:	9a03      	ldr	r2, [sp, #12]
 8004d78:	1a9b      	subs	r3, r3, r2
 8004d7a:	42ab      	cmp	r3, r5
 8004d7c:	dcf2      	bgt.n	8004d64 <_printf_i+0x1e8>
 8004d7e:	e7eb      	b.n	8004d58 <_printf_i+0x1dc>
 8004d80:	2500      	movs	r5, #0
 8004d82:	f104 0919 	add.w	r9, r4, #25
 8004d86:	e7f5      	b.n	8004d74 <_printf_i+0x1f8>
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1ac      	bne.n	8004ce6 <_printf_i+0x16a>
 8004d8c:	7803      	ldrb	r3, [r0, #0]
 8004d8e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d92:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d96:	e76c      	b.n	8004c72 <_printf_i+0xf6>
 8004d98:	0800619b 	.word	0x0800619b
 8004d9c:	080061ac 	.word	0x080061ac

08004da0 <__ascii_wctomb>:
 8004da0:	b149      	cbz	r1, 8004db6 <__ascii_wctomb+0x16>
 8004da2:	2aff      	cmp	r2, #255	; 0xff
 8004da4:	bf85      	ittet	hi
 8004da6:	238a      	movhi	r3, #138	; 0x8a
 8004da8:	6003      	strhi	r3, [r0, #0]
 8004daa:	700a      	strbls	r2, [r1, #0]
 8004dac:	f04f 30ff 	movhi.w	r0, #4294967295
 8004db0:	bf98      	it	ls
 8004db2:	2001      	movls	r0, #1
 8004db4:	4770      	bx	lr
 8004db6:	4608      	mov	r0, r1
 8004db8:	4770      	bx	lr

08004dba <memmove>:
 8004dba:	4288      	cmp	r0, r1
 8004dbc:	b510      	push	{r4, lr}
 8004dbe:	eb01 0302 	add.w	r3, r1, r2
 8004dc2:	d807      	bhi.n	8004dd4 <memmove+0x1a>
 8004dc4:	1e42      	subs	r2, r0, #1
 8004dc6:	4299      	cmp	r1, r3
 8004dc8:	d00a      	beq.n	8004de0 <memmove+0x26>
 8004dca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dce:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004dd2:	e7f8      	b.n	8004dc6 <memmove+0xc>
 8004dd4:	4283      	cmp	r3, r0
 8004dd6:	d9f5      	bls.n	8004dc4 <memmove+0xa>
 8004dd8:	1881      	adds	r1, r0, r2
 8004dda:	1ad2      	subs	r2, r2, r3
 8004ddc:	42d3      	cmn	r3, r2
 8004dde:	d100      	bne.n	8004de2 <memmove+0x28>
 8004de0:	bd10      	pop	{r4, pc}
 8004de2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004de6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004dea:	e7f7      	b.n	8004ddc <memmove+0x22>

08004dec <_realloc_r>:
 8004dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dee:	4607      	mov	r7, r0
 8004df0:	4614      	mov	r4, r2
 8004df2:	460e      	mov	r6, r1
 8004df4:	b921      	cbnz	r1, 8004e00 <_realloc_r+0x14>
 8004df6:	4611      	mov	r1, r2
 8004df8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004dfc:	f7ff bb5a 	b.w	80044b4 <_malloc_r>
 8004e00:	b922      	cbnz	r2, 8004e0c <_realloc_r+0x20>
 8004e02:	f7ff fb09 	bl	8004418 <_free_r>
 8004e06:	4625      	mov	r5, r4
 8004e08:	4628      	mov	r0, r5
 8004e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e0c:	f000 f814 	bl	8004e38 <_malloc_usable_size_r>
 8004e10:	42a0      	cmp	r0, r4
 8004e12:	d20f      	bcs.n	8004e34 <_realloc_r+0x48>
 8004e14:	4621      	mov	r1, r4
 8004e16:	4638      	mov	r0, r7
 8004e18:	f7ff fb4c 	bl	80044b4 <_malloc_r>
 8004e1c:	4605      	mov	r5, r0
 8004e1e:	2800      	cmp	r0, #0
 8004e20:	d0f2      	beq.n	8004e08 <_realloc_r+0x1c>
 8004e22:	4631      	mov	r1, r6
 8004e24:	4622      	mov	r2, r4
 8004e26:	f7ff fae3 	bl	80043f0 <memcpy>
 8004e2a:	4631      	mov	r1, r6
 8004e2c:	4638      	mov	r0, r7
 8004e2e:	f7ff faf3 	bl	8004418 <_free_r>
 8004e32:	e7e9      	b.n	8004e08 <_realloc_r+0x1c>
 8004e34:	4635      	mov	r5, r6
 8004e36:	e7e7      	b.n	8004e08 <_realloc_r+0x1c>

08004e38 <_malloc_usable_size_r>:
 8004e38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e3c:	1f18      	subs	r0, r3, #4
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	bfbc      	itt	lt
 8004e42:	580b      	ldrlt	r3, [r1, r0]
 8004e44:	18c0      	addlt	r0, r0, r3
 8004e46:	4770      	bx	lr

08004e48 <cos>:
 8004e48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004e4a:	ec51 0b10 	vmov	r0, r1, d0
 8004e4e:	4a1e      	ldr	r2, [pc, #120]	; (8004ec8 <cos+0x80>)
 8004e50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004e54:	4293      	cmp	r3, r2
 8004e56:	dc06      	bgt.n	8004e66 <cos+0x1e>
 8004e58:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8004ec0 <cos+0x78>
 8004e5c:	f000 fb80 	bl	8005560 <__kernel_cos>
 8004e60:	ec51 0b10 	vmov	r0, r1, d0
 8004e64:	e007      	b.n	8004e76 <cos+0x2e>
 8004e66:	4a19      	ldr	r2, [pc, #100]	; (8004ecc <cos+0x84>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	dd09      	ble.n	8004e80 <cos+0x38>
 8004e6c:	ee10 2a10 	vmov	r2, s0
 8004e70:	460b      	mov	r3, r1
 8004e72:	f7fb fa01 	bl	8000278 <__aeabi_dsub>
 8004e76:	ec41 0b10 	vmov	d0, r0, r1
 8004e7a:	b005      	add	sp, #20
 8004e7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e80:	4668      	mov	r0, sp
 8004e82:	f000 f8c9 	bl	8005018 <__ieee754_rem_pio2>
 8004e86:	f000 0003 	and.w	r0, r0, #3
 8004e8a:	2801      	cmp	r0, #1
 8004e8c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004e90:	ed9d 0b00 	vldr	d0, [sp]
 8004e94:	d007      	beq.n	8004ea6 <cos+0x5e>
 8004e96:	2802      	cmp	r0, #2
 8004e98:	d00e      	beq.n	8004eb8 <cos+0x70>
 8004e9a:	2800      	cmp	r0, #0
 8004e9c:	d0de      	beq.n	8004e5c <cos+0x14>
 8004e9e:	2001      	movs	r0, #1
 8004ea0:	f000 ff66 	bl	8005d70 <__kernel_sin>
 8004ea4:	e7dc      	b.n	8004e60 <cos+0x18>
 8004ea6:	f000 ff63 	bl	8005d70 <__kernel_sin>
 8004eaa:	ec53 2b10 	vmov	r2, r3, d0
 8004eae:	ee10 0a10 	vmov	r0, s0
 8004eb2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004eb6:	e7de      	b.n	8004e76 <cos+0x2e>
 8004eb8:	f000 fb52 	bl	8005560 <__kernel_cos>
 8004ebc:	e7f5      	b.n	8004eaa <cos+0x62>
 8004ebe:	bf00      	nop
	...
 8004ec8:	3fe921fb 	.word	0x3fe921fb
 8004ecc:	7fefffff 	.word	0x7fefffff

08004ed0 <sin>:
 8004ed0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004ed2:	ec51 0b10 	vmov	r0, r1, d0
 8004ed6:	4a20      	ldr	r2, [pc, #128]	; (8004f58 <sin+0x88>)
 8004ed8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004edc:	4293      	cmp	r3, r2
 8004ede:	dc07      	bgt.n	8004ef0 <sin+0x20>
 8004ee0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8004f50 <sin+0x80>
 8004ee4:	2000      	movs	r0, #0
 8004ee6:	f000 ff43 	bl	8005d70 <__kernel_sin>
 8004eea:	ec51 0b10 	vmov	r0, r1, d0
 8004eee:	e007      	b.n	8004f00 <sin+0x30>
 8004ef0:	4a1a      	ldr	r2, [pc, #104]	; (8004f5c <sin+0x8c>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	dd09      	ble.n	8004f0a <sin+0x3a>
 8004ef6:	ee10 2a10 	vmov	r2, s0
 8004efa:	460b      	mov	r3, r1
 8004efc:	f7fb f9bc 	bl	8000278 <__aeabi_dsub>
 8004f00:	ec41 0b10 	vmov	d0, r0, r1
 8004f04:	b005      	add	sp, #20
 8004f06:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f0a:	4668      	mov	r0, sp
 8004f0c:	f000 f884 	bl	8005018 <__ieee754_rem_pio2>
 8004f10:	f000 0003 	and.w	r0, r0, #3
 8004f14:	2801      	cmp	r0, #1
 8004f16:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004f1a:	ed9d 0b00 	vldr	d0, [sp]
 8004f1e:	d004      	beq.n	8004f2a <sin+0x5a>
 8004f20:	2802      	cmp	r0, #2
 8004f22:	d005      	beq.n	8004f30 <sin+0x60>
 8004f24:	b970      	cbnz	r0, 8004f44 <sin+0x74>
 8004f26:	2001      	movs	r0, #1
 8004f28:	e7dd      	b.n	8004ee6 <sin+0x16>
 8004f2a:	f000 fb19 	bl	8005560 <__kernel_cos>
 8004f2e:	e7dc      	b.n	8004eea <sin+0x1a>
 8004f30:	2001      	movs	r0, #1
 8004f32:	f000 ff1d 	bl	8005d70 <__kernel_sin>
 8004f36:	ec53 2b10 	vmov	r2, r3, d0
 8004f3a:	ee10 0a10 	vmov	r0, s0
 8004f3e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004f42:	e7dd      	b.n	8004f00 <sin+0x30>
 8004f44:	f000 fb0c 	bl	8005560 <__kernel_cos>
 8004f48:	e7f5      	b.n	8004f36 <sin+0x66>
 8004f4a:	bf00      	nop
 8004f4c:	f3af 8000 	nop.w
	...
 8004f58:	3fe921fb 	.word	0x3fe921fb
 8004f5c:	7fefffff 	.word	0x7fefffff

08004f60 <sqrt>:
 8004f60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f64:	ed2d 8b02 	vpush	{d8}
 8004f68:	b08b      	sub	sp, #44	; 0x2c
 8004f6a:	ec55 4b10 	vmov	r4, r5, d0
 8004f6e:	f000 fa45 	bl	80053fc <__ieee754_sqrt>
 8004f72:	4b26      	ldr	r3, [pc, #152]	; (800500c <sqrt+0xac>)
 8004f74:	eeb0 8a40 	vmov.f32	s16, s0
 8004f78:	eef0 8a60 	vmov.f32	s17, s1
 8004f7c:	f993 6000 	ldrsb.w	r6, [r3]
 8004f80:	1c73      	adds	r3, r6, #1
 8004f82:	d02a      	beq.n	8004fda <sqrt+0x7a>
 8004f84:	4622      	mov	r2, r4
 8004f86:	462b      	mov	r3, r5
 8004f88:	4620      	mov	r0, r4
 8004f8a:	4629      	mov	r1, r5
 8004f8c:	f7fb fdc6 	bl	8000b1c <__aeabi_dcmpun>
 8004f90:	4607      	mov	r7, r0
 8004f92:	bb10      	cbnz	r0, 8004fda <sqrt+0x7a>
 8004f94:	f04f 0800 	mov.w	r8, #0
 8004f98:	f04f 0900 	mov.w	r9, #0
 8004f9c:	4642      	mov	r2, r8
 8004f9e:	464b      	mov	r3, r9
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	4629      	mov	r1, r5
 8004fa4:	f7fb fd92 	bl	8000acc <__aeabi_dcmplt>
 8004fa8:	b1b8      	cbz	r0, 8004fda <sqrt+0x7a>
 8004faa:	2301      	movs	r3, #1
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	4b18      	ldr	r3, [pc, #96]	; (8005010 <sqrt+0xb0>)
 8004fb0:	9301      	str	r3, [sp, #4]
 8004fb2:	9708      	str	r7, [sp, #32]
 8004fb4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8004fb8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004fbc:	b9b6      	cbnz	r6, 8004fec <sqrt+0x8c>
 8004fbe:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004fc2:	4668      	mov	r0, sp
 8004fc4:	f001 f81c 	bl	8006000 <matherr>
 8004fc8:	b1d0      	cbz	r0, 8005000 <sqrt+0xa0>
 8004fca:	9b08      	ldr	r3, [sp, #32]
 8004fcc:	b11b      	cbz	r3, 8004fd6 <sqrt+0x76>
 8004fce:	f7ff f9c1 	bl	8004354 <__errno>
 8004fd2:	9b08      	ldr	r3, [sp, #32]
 8004fd4:	6003      	str	r3, [r0, #0]
 8004fd6:	ed9d 8b06 	vldr	d8, [sp, #24]
 8004fda:	eeb0 0a48 	vmov.f32	s0, s16
 8004fde:	eef0 0a68 	vmov.f32	s1, s17
 8004fe2:	b00b      	add	sp, #44	; 0x2c
 8004fe4:	ecbd 8b02 	vpop	{d8}
 8004fe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004fec:	4642      	mov	r2, r8
 8004fee:	464b      	mov	r3, r9
 8004ff0:	4640      	mov	r0, r8
 8004ff2:	4649      	mov	r1, r9
 8004ff4:	f7fb fc22 	bl	800083c <__aeabi_ddiv>
 8004ff8:	2e02      	cmp	r6, #2
 8004ffa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004ffe:	d1e0      	bne.n	8004fc2 <sqrt+0x62>
 8005000:	f7ff f9a8 	bl	8004354 <__errno>
 8005004:	2321      	movs	r3, #33	; 0x21
 8005006:	6003      	str	r3, [r0, #0]
 8005008:	e7df      	b.n	8004fca <sqrt+0x6a>
 800500a:	bf00      	nop
 800500c:	200001dc 	.word	0x200001dc
 8005010:	080062be 	.word	0x080062be
 8005014:	00000000 	.word	0x00000000

08005018 <__ieee754_rem_pio2>:
 8005018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800501c:	ec57 6b10 	vmov	r6, r7, d0
 8005020:	4bc3      	ldr	r3, [pc, #780]	; (8005330 <__ieee754_rem_pio2+0x318>)
 8005022:	b08d      	sub	sp, #52	; 0x34
 8005024:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005028:	4598      	cmp	r8, r3
 800502a:	4604      	mov	r4, r0
 800502c:	9704      	str	r7, [sp, #16]
 800502e:	dc07      	bgt.n	8005040 <__ieee754_rem_pio2+0x28>
 8005030:	2200      	movs	r2, #0
 8005032:	2300      	movs	r3, #0
 8005034:	ed84 0b00 	vstr	d0, [r4]
 8005038:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800503c:	2500      	movs	r5, #0
 800503e:	e027      	b.n	8005090 <__ieee754_rem_pio2+0x78>
 8005040:	4bbc      	ldr	r3, [pc, #752]	; (8005334 <__ieee754_rem_pio2+0x31c>)
 8005042:	4598      	cmp	r8, r3
 8005044:	dc75      	bgt.n	8005132 <__ieee754_rem_pio2+0x11a>
 8005046:	9b04      	ldr	r3, [sp, #16]
 8005048:	4dbb      	ldr	r5, [pc, #748]	; (8005338 <__ieee754_rem_pio2+0x320>)
 800504a:	2b00      	cmp	r3, #0
 800504c:	ee10 0a10 	vmov	r0, s0
 8005050:	a3a9      	add	r3, pc, #676	; (adr r3, 80052f8 <__ieee754_rem_pio2+0x2e0>)
 8005052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005056:	4639      	mov	r1, r7
 8005058:	dd36      	ble.n	80050c8 <__ieee754_rem_pio2+0xb0>
 800505a:	f7fb f90d 	bl	8000278 <__aeabi_dsub>
 800505e:	45a8      	cmp	r8, r5
 8005060:	4606      	mov	r6, r0
 8005062:	460f      	mov	r7, r1
 8005064:	d018      	beq.n	8005098 <__ieee754_rem_pio2+0x80>
 8005066:	a3a6      	add	r3, pc, #664	; (adr r3, 8005300 <__ieee754_rem_pio2+0x2e8>)
 8005068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506c:	f7fb f904 	bl	8000278 <__aeabi_dsub>
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	e9c4 2300 	strd	r2, r3, [r4]
 8005078:	4630      	mov	r0, r6
 800507a:	4639      	mov	r1, r7
 800507c:	f7fb f8fc 	bl	8000278 <__aeabi_dsub>
 8005080:	a39f      	add	r3, pc, #636	; (adr r3, 8005300 <__ieee754_rem_pio2+0x2e8>)
 8005082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005086:	f7fb f8f7 	bl	8000278 <__aeabi_dsub>
 800508a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800508e:	2501      	movs	r5, #1
 8005090:	4628      	mov	r0, r5
 8005092:	b00d      	add	sp, #52	; 0x34
 8005094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005098:	a39b      	add	r3, pc, #620	; (adr r3, 8005308 <__ieee754_rem_pio2+0x2f0>)
 800509a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509e:	f7fb f8eb 	bl	8000278 <__aeabi_dsub>
 80050a2:	a39b      	add	r3, pc, #620	; (adr r3, 8005310 <__ieee754_rem_pio2+0x2f8>)
 80050a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a8:	4606      	mov	r6, r0
 80050aa:	460f      	mov	r7, r1
 80050ac:	f7fb f8e4 	bl	8000278 <__aeabi_dsub>
 80050b0:	4602      	mov	r2, r0
 80050b2:	460b      	mov	r3, r1
 80050b4:	e9c4 2300 	strd	r2, r3, [r4]
 80050b8:	4630      	mov	r0, r6
 80050ba:	4639      	mov	r1, r7
 80050bc:	f7fb f8dc 	bl	8000278 <__aeabi_dsub>
 80050c0:	a393      	add	r3, pc, #588	; (adr r3, 8005310 <__ieee754_rem_pio2+0x2f8>)
 80050c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c6:	e7de      	b.n	8005086 <__ieee754_rem_pio2+0x6e>
 80050c8:	f7fb f8d8 	bl	800027c <__adddf3>
 80050cc:	45a8      	cmp	r8, r5
 80050ce:	4606      	mov	r6, r0
 80050d0:	460f      	mov	r7, r1
 80050d2:	d016      	beq.n	8005102 <__ieee754_rem_pio2+0xea>
 80050d4:	a38a      	add	r3, pc, #552	; (adr r3, 8005300 <__ieee754_rem_pio2+0x2e8>)
 80050d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050da:	f7fb f8cf 	bl	800027c <__adddf3>
 80050de:	4602      	mov	r2, r0
 80050e0:	460b      	mov	r3, r1
 80050e2:	e9c4 2300 	strd	r2, r3, [r4]
 80050e6:	4630      	mov	r0, r6
 80050e8:	4639      	mov	r1, r7
 80050ea:	f7fb f8c5 	bl	8000278 <__aeabi_dsub>
 80050ee:	a384      	add	r3, pc, #528	; (adr r3, 8005300 <__ieee754_rem_pio2+0x2e8>)
 80050f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f4:	f7fb f8c2 	bl	800027c <__adddf3>
 80050f8:	f04f 35ff 	mov.w	r5, #4294967295
 80050fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005100:	e7c6      	b.n	8005090 <__ieee754_rem_pio2+0x78>
 8005102:	a381      	add	r3, pc, #516	; (adr r3, 8005308 <__ieee754_rem_pio2+0x2f0>)
 8005104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005108:	f7fb f8b8 	bl	800027c <__adddf3>
 800510c:	a380      	add	r3, pc, #512	; (adr r3, 8005310 <__ieee754_rem_pio2+0x2f8>)
 800510e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005112:	4606      	mov	r6, r0
 8005114:	460f      	mov	r7, r1
 8005116:	f7fb f8b1 	bl	800027c <__adddf3>
 800511a:	4602      	mov	r2, r0
 800511c:	460b      	mov	r3, r1
 800511e:	e9c4 2300 	strd	r2, r3, [r4]
 8005122:	4630      	mov	r0, r6
 8005124:	4639      	mov	r1, r7
 8005126:	f7fb f8a7 	bl	8000278 <__aeabi_dsub>
 800512a:	a379      	add	r3, pc, #484	; (adr r3, 8005310 <__ieee754_rem_pio2+0x2f8>)
 800512c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005130:	e7e0      	b.n	80050f4 <__ieee754_rem_pio2+0xdc>
 8005132:	4b82      	ldr	r3, [pc, #520]	; (800533c <__ieee754_rem_pio2+0x324>)
 8005134:	4598      	cmp	r8, r3
 8005136:	f300 80d0 	bgt.w	80052da <__ieee754_rem_pio2+0x2c2>
 800513a:	f000 fed3 	bl	8005ee4 <fabs>
 800513e:	ec57 6b10 	vmov	r6, r7, d0
 8005142:	ee10 0a10 	vmov	r0, s0
 8005146:	a374      	add	r3, pc, #464	; (adr r3, 8005318 <__ieee754_rem_pio2+0x300>)
 8005148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514c:	4639      	mov	r1, r7
 800514e:	f7fb fa4b 	bl	80005e8 <__aeabi_dmul>
 8005152:	2200      	movs	r2, #0
 8005154:	4b7a      	ldr	r3, [pc, #488]	; (8005340 <__ieee754_rem_pio2+0x328>)
 8005156:	f7fb f891 	bl	800027c <__adddf3>
 800515a:	f7fb fcf5 	bl	8000b48 <__aeabi_d2iz>
 800515e:	4605      	mov	r5, r0
 8005160:	f7fb f9d8 	bl	8000514 <__aeabi_i2d>
 8005164:	a364      	add	r3, pc, #400	; (adr r3, 80052f8 <__ieee754_rem_pio2+0x2e0>)
 8005166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800516e:	f7fb fa3b 	bl	80005e8 <__aeabi_dmul>
 8005172:	4602      	mov	r2, r0
 8005174:	460b      	mov	r3, r1
 8005176:	4630      	mov	r0, r6
 8005178:	4639      	mov	r1, r7
 800517a:	f7fb f87d 	bl	8000278 <__aeabi_dsub>
 800517e:	a360      	add	r3, pc, #384	; (adr r3, 8005300 <__ieee754_rem_pio2+0x2e8>)
 8005180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005184:	4682      	mov	sl, r0
 8005186:	468b      	mov	fp, r1
 8005188:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800518c:	f7fb fa2c 	bl	80005e8 <__aeabi_dmul>
 8005190:	2d1f      	cmp	r5, #31
 8005192:	4606      	mov	r6, r0
 8005194:	460f      	mov	r7, r1
 8005196:	dc0c      	bgt.n	80051b2 <__ieee754_rem_pio2+0x19a>
 8005198:	1e6a      	subs	r2, r5, #1
 800519a:	4b6a      	ldr	r3, [pc, #424]	; (8005344 <__ieee754_rem_pio2+0x32c>)
 800519c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051a0:	4543      	cmp	r3, r8
 80051a2:	d006      	beq.n	80051b2 <__ieee754_rem_pio2+0x19a>
 80051a4:	4632      	mov	r2, r6
 80051a6:	463b      	mov	r3, r7
 80051a8:	4650      	mov	r0, sl
 80051aa:	4659      	mov	r1, fp
 80051ac:	f7fb f864 	bl	8000278 <__aeabi_dsub>
 80051b0:	e00e      	b.n	80051d0 <__ieee754_rem_pio2+0x1b8>
 80051b2:	4632      	mov	r2, r6
 80051b4:	463b      	mov	r3, r7
 80051b6:	4650      	mov	r0, sl
 80051b8:	4659      	mov	r1, fp
 80051ba:	f7fb f85d 	bl	8000278 <__aeabi_dsub>
 80051be:	ea4f 5328 	mov.w	r3, r8, asr #20
 80051c2:	9305      	str	r3, [sp, #20]
 80051c4:	9a05      	ldr	r2, [sp, #20]
 80051c6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b10      	cmp	r3, #16
 80051ce:	dc02      	bgt.n	80051d6 <__ieee754_rem_pio2+0x1be>
 80051d0:	e9c4 0100 	strd	r0, r1, [r4]
 80051d4:	e039      	b.n	800524a <__ieee754_rem_pio2+0x232>
 80051d6:	a34c      	add	r3, pc, #304	; (adr r3, 8005308 <__ieee754_rem_pio2+0x2f0>)
 80051d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051e0:	f7fb fa02 	bl	80005e8 <__aeabi_dmul>
 80051e4:	4606      	mov	r6, r0
 80051e6:	460f      	mov	r7, r1
 80051e8:	4602      	mov	r2, r0
 80051ea:	460b      	mov	r3, r1
 80051ec:	4650      	mov	r0, sl
 80051ee:	4659      	mov	r1, fp
 80051f0:	f7fb f842 	bl	8000278 <__aeabi_dsub>
 80051f4:	4602      	mov	r2, r0
 80051f6:	460b      	mov	r3, r1
 80051f8:	4680      	mov	r8, r0
 80051fa:	4689      	mov	r9, r1
 80051fc:	4650      	mov	r0, sl
 80051fe:	4659      	mov	r1, fp
 8005200:	f7fb f83a 	bl	8000278 <__aeabi_dsub>
 8005204:	4632      	mov	r2, r6
 8005206:	463b      	mov	r3, r7
 8005208:	f7fb f836 	bl	8000278 <__aeabi_dsub>
 800520c:	a340      	add	r3, pc, #256	; (adr r3, 8005310 <__ieee754_rem_pio2+0x2f8>)
 800520e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005212:	4606      	mov	r6, r0
 8005214:	460f      	mov	r7, r1
 8005216:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800521a:	f7fb f9e5 	bl	80005e8 <__aeabi_dmul>
 800521e:	4632      	mov	r2, r6
 8005220:	463b      	mov	r3, r7
 8005222:	f7fb f829 	bl	8000278 <__aeabi_dsub>
 8005226:	4602      	mov	r2, r0
 8005228:	460b      	mov	r3, r1
 800522a:	4606      	mov	r6, r0
 800522c:	460f      	mov	r7, r1
 800522e:	4640      	mov	r0, r8
 8005230:	4649      	mov	r1, r9
 8005232:	f7fb f821 	bl	8000278 <__aeabi_dsub>
 8005236:	9a05      	ldr	r2, [sp, #20]
 8005238:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	2b31      	cmp	r3, #49	; 0x31
 8005240:	dc20      	bgt.n	8005284 <__ieee754_rem_pio2+0x26c>
 8005242:	e9c4 0100 	strd	r0, r1, [r4]
 8005246:	46c2      	mov	sl, r8
 8005248:	46cb      	mov	fp, r9
 800524a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800524e:	4650      	mov	r0, sl
 8005250:	4642      	mov	r2, r8
 8005252:	464b      	mov	r3, r9
 8005254:	4659      	mov	r1, fp
 8005256:	f7fb f80f 	bl	8000278 <__aeabi_dsub>
 800525a:	463b      	mov	r3, r7
 800525c:	4632      	mov	r2, r6
 800525e:	f7fb f80b 	bl	8000278 <__aeabi_dsub>
 8005262:	9b04      	ldr	r3, [sp, #16]
 8005264:	2b00      	cmp	r3, #0
 8005266:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800526a:	f6bf af11 	bge.w	8005090 <__ieee754_rem_pio2+0x78>
 800526e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005272:	6063      	str	r3, [r4, #4]
 8005274:	f8c4 8000 	str.w	r8, [r4]
 8005278:	60a0      	str	r0, [r4, #8]
 800527a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800527e:	60e3      	str	r3, [r4, #12]
 8005280:	426d      	negs	r5, r5
 8005282:	e705      	b.n	8005090 <__ieee754_rem_pio2+0x78>
 8005284:	a326      	add	r3, pc, #152	; (adr r3, 8005320 <__ieee754_rem_pio2+0x308>)
 8005286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800528e:	f7fb f9ab 	bl	80005e8 <__aeabi_dmul>
 8005292:	4606      	mov	r6, r0
 8005294:	460f      	mov	r7, r1
 8005296:	4602      	mov	r2, r0
 8005298:	460b      	mov	r3, r1
 800529a:	4640      	mov	r0, r8
 800529c:	4649      	mov	r1, r9
 800529e:	f7fa ffeb 	bl	8000278 <__aeabi_dsub>
 80052a2:	4602      	mov	r2, r0
 80052a4:	460b      	mov	r3, r1
 80052a6:	4682      	mov	sl, r0
 80052a8:	468b      	mov	fp, r1
 80052aa:	4640      	mov	r0, r8
 80052ac:	4649      	mov	r1, r9
 80052ae:	f7fa ffe3 	bl	8000278 <__aeabi_dsub>
 80052b2:	4632      	mov	r2, r6
 80052b4:	463b      	mov	r3, r7
 80052b6:	f7fa ffdf 	bl	8000278 <__aeabi_dsub>
 80052ba:	a31b      	add	r3, pc, #108	; (adr r3, 8005328 <__ieee754_rem_pio2+0x310>)
 80052bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c0:	4606      	mov	r6, r0
 80052c2:	460f      	mov	r7, r1
 80052c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052c8:	f7fb f98e 	bl	80005e8 <__aeabi_dmul>
 80052cc:	4632      	mov	r2, r6
 80052ce:	463b      	mov	r3, r7
 80052d0:	f7fa ffd2 	bl	8000278 <__aeabi_dsub>
 80052d4:	4606      	mov	r6, r0
 80052d6:	460f      	mov	r7, r1
 80052d8:	e764      	b.n	80051a4 <__ieee754_rem_pio2+0x18c>
 80052da:	4b1b      	ldr	r3, [pc, #108]	; (8005348 <__ieee754_rem_pio2+0x330>)
 80052dc:	4598      	cmp	r8, r3
 80052de:	dd35      	ble.n	800534c <__ieee754_rem_pio2+0x334>
 80052e0:	ee10 2a10 	vmov	r2, s0
 80052e4:	463b      	mov	r3, r7
 80052e6:	4630      	mov	r0, r6
 80052e8:	4639      	mov	r1, r7
 80052ea:	f7fa ffc5 	bl	8000278 <__aeabi_dsub>
 80052ee:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80052f2:	e9c4 0100 	strd	r0, r1, [r4]
 80052f6:	e6a1      	b.n	800503c <__ieee754_rem_pio2+0x24>
 80052f8:	54400000 	.word	0x54400000
 80052fc:	3ff921fb 	.word	0x3ff921fb
 8005300:	1a626331 	.word	0x1a626331
 8005304:	3dd0b461 	.word	0x3dd0b461
 8005308:	1a600000 	.word	0x1a600000
 800530c:	3dd0b461 	.word	0x3dd0b461
 8005310:	2e037073 	.word	0x2e037073
 8005314:	3ba3198a 	.word	0x3ba3198a
 8005318:	6dc9c883 	.word	0x6dc9c883
 800531c:	3fe45f30 	.word	0x3fe45f30
 8005320:	2e000000 	.word	0x2e000000
 8005324:	3ba3198a 	.word	0x3ba3198a
 8005328:	252049c1 	.word	0x252049c1
 800532c:	397b839a 	.word	0x397b839a
 8005330:	3fe921fb 	.word	0x3fe921fb
 8005334:	4002d97b 	.word	0x4002d97b
 8005338:	3ff921fb 	.word	0x3ff921fb
 800533c:	413921fb 	.word	0x413921fb
 8005340:	3fe00000 	.word	0x3fe00000
 8005344:	080062c4 	.word	0x080062c4
 8005348:	7fefffff 	.word	0x7fefffff
 800534c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005350:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8005354:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005358:	4630      	mov	r0, r6
 800535a:	460f      	mov	r7, r1
 800535c:	f7fb fbf4 	bl	8000b48 <__aeabi_d2iz>
 8005360:	f7fb f8d8 	bl	8000514 <__aeabi_i2d>
 8005364:	4602      	mov	r2, r0
 8005366:	460b      	mov	r3, r1
 8005368:	4630      	mov	r0, r6
 800536a:	4639      	mov	r1, r7
 800536c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005370:	f7fa ff82 	bl	8000278 <__aeabi_dsub>
 8005374:	2200      	movs	r2, #0
 8005376:	4b1f      	ldr	r3, [pc, #124]	; (80053f4 <__ieee754_rem_pio2+0x3dc>)
 8005378:	f7fb f936 	bl	80005e8 <__aeabi_dmul>
 800537c:	460f      	mov	r7, r1
 800537e:	4606      	mov	r6, r0
 8005380:	f7fb fbe2 	bl	8000b48 <__aeabi_d2iz>
 8005384:	f7fb f8c6 	bl	8000514 <__aeabi_i2d>
 8005388:	4602      	mov	r2, r0
 800538a:	460b      	mov	r3, r1
 800538c:	4630      	mov	r0, r6
 800538e:	4639      	mov	r1, r7
 8005390:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005394:	f7fa ff70 	bl	8000278 <__aeabi_dsub>
 8005398:	2200      	movs	r2, #0
 800539a:	4b16      	ldr	r3, [pc, #88]	; (80053f4 <__ieee754_rem_pio2+0x3dc>)
 800539c:	f7fb f924 	bl	80005e8 <__aeabi_dmul>
 80053a0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80053a4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80053a8:	f04f 0803 	mov.w	r8, #3
 80053ac:	2600      	movs	r6, #0
 80053ae:	2700      	movs	r7, #0
 80053b0:	4632      	mov	r2, r6
 80053b2:	463b      	mov	r3, r7
 80053b4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80053b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80053bc:	f7fb fb7c 	bl	8000ab8 <__aeabi_dcmpeq>
 80053c0:	b9b0      	cbnz	r0, 80053f0 <__ieee754_rem_pio2+0x3d8>
 80053c2:	4b0d      	ldr	r3, [pc, #52]	; (80053f8 <__ieee754_rem_pio2+0x3e0>)
 80053c4:	9301      	str	r3, [sp, #4]
 80053c6:	2302      	movs	r3, #2
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	462a      	mov	r2, r5
 80053cc:	4643      	mov	r3, r8
 80053ce:	4621      	mov	r1, r4
 80053d0:	a806      	add	r0, sp, #24
 80053d2:	f000 f98d 	bl	80056f0 <__kernel_rem_pio2>
 80053d6:	9b04      	ldr	r3, [sp, #16]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	4605      	mov	r5, r0
 80053dc:	f6bf ae58 	bge.w	8005090 <__ieee754_rem_pio2+0x78>
 80053e0:	6863      	ldr	r3, [r4, #4]
 80053e2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80053e6:	6063      	str	r3, [r4, #4]
 80053e8:	68e3      	ldr	r3, [r4, #12]
 80053ea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80053ee:	e746      	b.n	800527e <__ieee754_rem_pio2+0x266>
 80053f0:	46d0      	mov	r8, sl
 80053f2:	e7dd      	b.n	80053b0 <__ieee754_rem_pio2+0x398>
 80053f4:	41700000 	.word	0x41700000
 80053f8:	08006344 	.word	0x08006344

080053fc <__ieee754_sqrt>:
 80053fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005400:	4955      	ldr	r1, [pc, #340]	; (8005558 <__ieee754_sqrt+0x15c>)
 8005402:	ec55 4b10 	vmov	r4, r5, d0
 8005406:	43a9      	bics	r1, r5
 8005408:	462b      	mov	r3, r5
 800540a:	462a      	mov	r2, r5
 800540c:	d112      	bne.n	8005434 <__ieee754_sqrt+0x38>
 800540e:	ee10 2a10 	vmov	r2, s0
 8005412:	ee10 0a10 	vmov	r0, s0
 8005416:	4629      	mov	r1, r5
 8005418:	f7fb f8e6 	bl	80005e8 <__aeabi_dmul>
 800541c:	4602      	mov	r2, r0
 800541e:	460b      	mov	r3, r1
 8005420:	4620      	mov	r0, r4
 8005422:	4629      	mov	r1, r5
 8005424:	f7fa ff2a 	bl	800027c <__adddf3>
 8005428:	4604      	mov	r4, r0
 800542a:	460d      	mov	r5, r1
 800542c:	ec45 4b10 	vmov	d0, r4, r5
 8005430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005434:	2d00      	cmp	r5, #0
 8005436:	ee10 0a10 	vmov	r0, s0
 800543a:	4621      	mov	r1, r4
 800543c:	dc0f      	bgt.n	800545e <__ieee754_sqrt+0x62>
 800543e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005442:	4330      	orrs	r0, r6
 8005444:	d0f2      	beq.n	800542c <__ieee754_sqrt+0x30>
 8005446:	b155      	cbz	r5, 800545e <__ieee754_sqrt+0x62>
 8005448:	ee10 2a10 	vmov	r2, s0
 800544c:	4620      	mov	r0, r4
 800544e:	4629      	mov	r1, r5
 8005450:	f7fa ff12 	bl	8000278 <__aeabi_dsub>
 8005454:	4602      	mov	r2, r0
 8005456:	460b      	mov	r3, r1
 8005458:	f7fb f9f0 	bl	800083c <__aeabi_ddiv>
 800545c:	e7e4      	b.n	8005428 <__ieee754_sqrt+0x2c>
 800545e:	151b      	asrs	r3, r3, #20
 8005460:	d073      	beq.n	800554a <__ieee754_sqrt+0x14e>
 8005462:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005466:	07dd      	lsls	r5, r3, #31
 8005468:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800546c:	bf48      	it	mi
 800546e:	0fc8      	lsrmi	r0, r1, #31
 8005470:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005474:	bf44      	itt	mi
 8005476:	0049      	lslmi	r1, r1, #1
 8005478:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800547c:	2500      	movs	r5, #0
 800547e:	1058      	asrs	r0, r3, #1
 8005480:	0fcb      	lsrs	r3, r1, #31
 8005482:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8005486:	0049      	lsls	r1, r1, #1
 8005488:	2316      	movs	r3, #22
 800548a:	462c      	mov	r4, r5
 800548c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8005490:	19a7      	adds	r7, r4, r6
 8005492:	4297      	cmp	r7, r2
 8005494:	bfde      	ittt	le
 8005496:	19bc      	addle	r4, r7, r6
 8005498:	1bd2      	suble	r2, r2, r7
 800549a:	19ad      	addle	r5, r5, r6
 800549c:	0fcf      	lsrs	r7, r1, #31
 800549e:	3b01      	subs	r3, #1
 80054a0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80054a4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80054a8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80054ac:	d1f0      	bne.n	8005490 <__ieee754_sqrt+0x94>
 80054ae:	f04f 0c20 	mov.w	ip, #32
 80054b2:	469e      	mov	lr, r3
 80054b4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80054b8:	42a2      	cmp	r2, r4
 80054ba:	eb06 070e 	add.w	r7, r6, lr
 80054be:	dc02      	bgt.n	80054c6 <__ieee754_sqrt+0xca>
 80054c0:	d112      	bne.n	80054e8 <__ieee754_sqrt+0xec>
 80054c2:	428f      	cmp	r7, r1
 80054c4:	d810      	bhi.n	80054e8 <__ieee754_sqrt+0xec>
 80054c6:	2f00      	cmp	r7, #0
 80054c8:	eb07 0e06 	add.w	lr, r7, r6
 80054cc:	da42      	bge.n	8005554 <__ieee754_sqrt+0x158>
 80054ce:	f1be 0f00 	cmp.w	lr, #0
 80054d2:	db3f      	blt.n	8005554 <__ieee754_sqrt+0x158>
 80054d4:	f104 0801 	add.w	r8, r4, #1
 80054d8:	1b12      	subs	r2, r2, r4
 80054da:	428f      	cmp	r7, r1
 80054dc:	bf88      	it	hi
 80054de:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80054e2:	1bc9      	subs	r1, r1, r7
 80054e4:	4433      	add	r3, r6
 80054e6:	4644      	mov	r4, r8
 80054e8:	0052      	lsls	r2, r2, #1
 80054ea:	f1bc 0c01 	subs.w	ip, ip, #1
 80054ee:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80054f2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80054f6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80054fa:	d1dd      	bne.n	80054b8 <__ieee754_sqrt+0xbc>
 80054fc:	430a      	orrs	r2, r1
 80054fe:	d006      	beq.n	800550e <__ieee754_sqrt+0x112>
 8005500:	1c5c      	adds	r4, r3, #1
 8005502:	bf13      	iteet	ne
 8005504:	3301      	addne	r3, #1
 8005506:	3501      	addeq	r5, #1
 8005508:	4663      	moveq	r3, ip
 800550a:	f023 0301 	bicne.w	r3, r3, #1
 800550e:	106a      	asrs	r2, r5, #1
 8005510:	085b      	lsrs	r3, r3, #1
 8005512:	07e9      	lsls	r1, r5, #31
 8005514:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8005518:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800551c:	bf48      	it	mi
 800551e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8005522:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8005526:	461c      	mov	r4, r3
 8005528:	e780      	b.n	800542c <__ieee754_sqrt+0x30>
 800552a:	0aca      	lsrs	r2, r1, #11
 800552c:	3815      	subs	r0, #21
 800552e:	0549      	lsls	r1, r1, #21
 8005530:	2a00      	cmp	r2, #0
 8005532:	d0fa      	beq.n	800552a <__ieee754_sqrt+0x12e>
 8005534:	02d6      	lsls	r6, r2, #11
 8005536:	d50a      	bpl.n	800554e <__ieee754_sqrt+0x152>
 8005538:	f1c3 0420 	rsb	r4, r3, #32
 800553c:	fa21 f404 	lsr.w	r4, r1, r4
 8005540:	1e5d      	subs	r5, r3, #1
 8005542:	4099      	lsls	r1, r3
 8005544:	4322      	orrs	r2, r4
 8005546:	1b43      	subs	r3, r0, r5
 8005548:	e78b      	b.n	8005462 <__ieee754_sqrt+0x66>
 800554a:	4618      	mov	r0, r3
 800554c:	e7f0      	b.n	8005530 <__ieee754_sqrt+0x134>
 800554e:	0052      	lsls	r2, r2, #1
 8005550:	3301      	adds	r3, #1
 8005552:	e7ef      	b.n	8005534 <__ieee754_sqrt+0x138>
 8005554:	46a0      	mov	r8, r4
 8005556:	e7bf      	b.n	80054d8 <__ieee754_sqrt+0xdc>
 8005558:	7ff00000 	.word	0x7ff00000
 800555c:	00000000 	.word	0x00000000

08005560 <__kernel_cos>:
 8005560:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005564:	ec59 8b10 	vmov	r8, r9, d0
 8005568:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800556c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8005570:	ed2d 8b02 	vpush	{d8}
 8005574:	eeb0 8a41 	vmov.f32	s16, s2
 8005578:	eef0 8a61 	vmov.f32	s17, s3
 800557c:	da07      	bge.n	800558e <__kernel_cos+0x2e>
 800557e:	ee10 0a10 	vmov	r0, s0
 8005582:	4649      	mov	r1, r9
 8005584:	f7fb fae0 	bl	8000b48 <__aeabi_d2iz>
 8005588:	2800      	cmp	r0, #0
 800558a:	f000 8089 	beq.w	80056a0 <__kernel_cos+0x140>
 800558e:	4642      	mov	r2, r8
 8005590:	464b      	mov	r3, r9
 8005592:	4640      	mov	r0, r8
 8005594:	4649      	mov	r1, r9
 8005596:	f7fb f827 	bl	80005e8 <__aeabi_dmul>
 800559a:	2200      	movs	r2, #0
 800559c:	4b4e      	ldr	r3, [pc, #312]	; (80056d8 <__kernel_cos+0x178>)
 800559e:	4604      	mov	r4, r0
 80055a0:	460d      	mov	r5, r1
 80055a2:	f7fb f821 	bl	80005e8 <__aeabi_dmul>
 80055a6:	a340      	add	r3, pc, #256	; (adr r3, 80056a8 <__kernel_cos+0x148>)
 80055a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ac:	4682      	mov	sl, r0
 80055ae:	468b      	mov	fp, r1
 80055b0:	4620      	mov	r0, r4
 80055b2:	4629      	mov	r1, r5
 80055b4:	f7fb f818 	bl	80005e8 <__aeabi_dmul>
 80055b8:	a33d      	add	r3, pc, #244	; (adr r3, 80056b0 <__kernel_cos+0x150>)
 80055ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055be:	f7fa fe5d 	bl	800027c <__adddf3>
 80055c2:	4622      	mov	r2, r4
 80055c4:	462b      	mov	r3, r5
 80055c6:	f7fb f80f 	bl	80005e8 <__aeabi_dmul>
 80055ca:	a33b      	add	r3, pc, #236	; (adr r3, 80056b8 <__kernel_cos+0x158>)
 80055cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d0:	f7fa fe52 	bl	8000278 <__aeabi_dsub>
 80055d4:	4622      	mov	r2, r4
 80055d6:	462b      	mov	r3, r5
 80055d8:	f7fb f806 	bl	80005e8 <__aeabi_dmul>
 80055dc:	a338      	add	r3, pc, #224	; (adr r3, 80056c0 <__kernel_cos+0x160>)
 80055de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e2:	f7fa fe4b 	bl	800027c <__adddf3>
 80055e6:	4622      	mov	r2, r4
 80055e8:	462b      	mov	r3, r5
 80055ea:	f7fa fffd 	bl	80005e8 <__aeabi_dmul>
 80055ee:	a336      	add	r3, pc, #216	; (adr r3, 80056c8 <__kernel_cos+0x168>)
 80055f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f4:	f7fa fe40 	bl	8000278 <__aeabi_dsub>
 80055f8:	4622      	mov	r2, r4
 80055fa:	462b      	mov	r3, r5
 80055fc:	f7fa fff4 	bl	80005e8 <__aeabi_dmul>
 8005600:	a333      	add	r3, pc, #204	; (adr r3, 80056d0 <__kernel_cos+0x170>)
 8005602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005606:	f7fa fe39 	bl	800027c <__adddf3>
 800560a:	4622      	mov	r2, r4
 800560c:	462b      	mov	r3, r5
 800560e:	f7fa ffeb 	bl	80005e8 <__aeabi_dmul>
 8005612:	4622      	mov	r2, r4
 8005614:	462b      	mov	r3, r5
 8005616:	f7fa ffe7 	bl	80005e8 <__aeabi_dmul>
 800561a:	ec53 2b18 	vmov	r2, r3, d8
 800561e:	4604      	mov	r4, r0
 8005620:	460d      	mov	r5, r1
 8005622:	4640      	mov	r0, r8
 8005624:	4649      	mov	r1, r9
 8005626:	f7fa ffdf 	bl	80005e8 <__aeabi_dmul>
 800562a:	460b      	mov	r3, r1
 800562c:	4602      	mov	r2, r0
 800562e:	4629      	mov	r1, r5
 8005630:	4620      	mov	r0, r4
 8005632:	f7fa fe21 	bl	8000278 <__aeabi_dsub>
 8005636:	4b29      	ldr	r3, [pc, #164]	; (80056dc <__kernel_cos+0x17c>)
 8005638:	429e      	cmp	r6, r3
 800563a:	4680      	mov	r8, r0
 800563c:	4689      	mov	r9, r1
 800563e:	dc11      	bgt.n	8005664 <__kernel_cos+0x104>
 8005640:	4602      	mov	r2, r0
 8005642:	460b      	mov	r3, r1
 8005644:	4650      	mov	r0, sl
 8005646:	4659      	mov	r1, fp
 8005648:	f7fa fe16 	bl	8000278 <__aeabi_dsub>
 800564c:	460b      	mov	r3, r1
 800564e:	4924      	ldr	r1, [pc, #144]	; (80056e0 <__kernel_cos+0x180>)
 8005650:	4602      	mov	r2, r0
 8005652:	2000      	movs	r0, #0
 8005654:	f7fa fe10 	bl	8000278 <__aeabi_dsub>
 8005658:	ecbd 8b02 	vpop	{d8}
 800565c:	ec41 0b10 	vmov	d0, r0, r1
 8005660:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005664:	4b1f      	ldr	r3, [pc, #124]	; (80056e4 <__kernel_cos+0x184>)
 8005666:	491e      	ldr	r1, [pc, #120]	; (80056e0 <__kernel_cos+0x180>)
 8005668:	429e      	cmp	r6, r3
 800566a:	bfcc      	ite	gt
 800566c:	4d1e      	ldrgt	r5, [pc, #120]	; (80056e8 <__kernel_cos+0x188>)
 800566e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8005672:	2400      	movs	r4, #0
 8005674:	4622      	mov	r2, r4
 8005676:	462b      	mov	r3, r5
 8005678:	2000      	movs	r0, #0
 800567a:	f7fa fdfd 	bl	8000278 <__aeabi_dsub>
 800567e:	4622      	mov	r2, r4
 8005680:	4606      	mov	r6, r0
 8005682:	460f      	mov	r7, r1
 8005684:	462b      	mov	r3, r5
 8005686:	4650      	mov	r0, sl
 8005688:	4659      	mov	r1, fp
 800568a:	f7fa fdf5 	bl	8000278 <__aeabi_dsub>
 800568e:	4642      	mov	r2, r8
 8005690:	464b      	mov	r3, r9
 8005692:	f7fa fdf1 	bl	8000278 <__aeabi_dsub>
 8005696:	4602      	mov	r2, r0
 8005698:	460b      	mov	r3, r1
 800569a:	4630      	mov	r0, r6
 800569c:	4639      	mov	r1, r7
 800569e:	e7d9      	b.n	8005654 <__kernel_cos+0xf4>
 80056a0:	2000      	movs	r0, #0
 80056a2:	490f      	ldr	r1, [pc, #60]	; (80056e0 <__kernel_cos+0x180>)
 80056a4:	e7d8      	b.n	8005658 <__kernel_cos+0xf8>
 80056a6:	bf00      	nop
 80056a8:	be8838d4 	.word	0xbe8838d4
 80056ac:	bda8fae9 	.word	0xbda8fae9
 80056b0:	bdb4b1c4 	.word	0xbdb4b1c4
 80056b4:	3e21ee9e 	.word	0x3e21ee9e
 80056b8:	809c52ad 	.word	0x809c52ad
 80056bc:	3e927e4f 	.word	0x3e927e4f
 80056c0:	19cb1590 	.word	0x19cb1590
 80056c4:	3efa01a0 	.word	0x3efa01a0
 80056c8:	16c15177 	.word	0x16c15177
 80056cc:	3f56c16c 	.word	0x3f56c16c
 80056d0:	5555554c 	.word	0x5555554c
 80056d4:	3fa55555 	.word	0x3fa55555
 80056d8:	3fe00000 	.word	0x3fe00000
 80056dc:	3fd33332 	.word	0x3fd33332
 80056e0:	3ff00000 	.word	0x3ff00000
 80056e4:	3fe90000 	.word	0x3fe90000
 80056e8:	3fd20000 	.word	0x3fd20000
 80056ec:	00000000 	.word	0x00000000

080056f0 <__kernel_rem_pio2>:
 80056f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056f4:	ed2d 8b02 	vpush	{d8}
 80056f8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80056fc:	1ed4      	subs	r4, r2, #3
 80056fe:	9308      	str	r3, [sp, #32]
 8005700:	9101      	str	r1, [sp, #4]
 8005702:	4bc5      	ldr	r3, [pc, #788]	; (8005a18 <__kernel_rem_pio2+0x328>)
 8005704:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8005706:	9009      	str	r0, [sp, #36]	; 0x24
 8005708:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800570c:	9304      	str	r3, [sp, #16]
 800570e:	9b08      	ldr	r3, [sp, #32]
 8005710:	3b01      	subs	r3, #1
 8005712:	9307      	str	r3, [sp, #28]
 8005714:	2318      	movs	r3, #24
 8005716:	fb94 f4f3 	sdiv	r4, r4, r3
 800571a:	f06f 0317 	mvn.w	r3, #23
 800571e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8005722:	fb04 3303 	mla	r3, r4, r3, r3
 8005726:	eb03 0a02 	add.w	sl, r3, r2
 800572a:	9b04      	ldr	r3, [sp, #16]
 800572c:	9a07      	ldr	r2, [sp, #28]
 800572e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8005a08 <__kernel_rem_pio2+0x318>
 8005732:	eb03 0802 	add.w	r8, r3, r2
 8005736:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005738:	1aa7      	subs	r7, r4, r2
 800573a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800573e:	ae22      	add	r6, sp, #136	; 0x88
 8005740:	2500      	movs	r5, #0
 8005742:	4545      	cmp	r5, r8
 8005744:	dd13      	ble.n	800576e <__kernel_rem_pio2+0x7e>
 8005746:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8005a08 <__kernel_rem_pio2+0x318>
 800574a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800574e:	2600      	movs	r6, #0
 8005750:	9b04      	ldr	r3, [sp, #16]
 8005752:	429e      	cmp	r6, r3
 8005754:	dc32      	bgt.n	80057bc <__kernel_rem_pio2+0xcc>
 8005756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005758:	9302      	str	r3, [sp, #8]
 800575a:	9b08      	ldr	r3, [sp, #32]
 800575c:	199d      	adds	r5, r3, r6
 800575e:	ab22      	add	r3, sp, #136	; 0x88
 8005760:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005764:	9306      	str	r3, [sp, #24]
 8005766:	ec59 8b18 	vmov	r8, r9, d8
 800576a:	2700      	movs	r7, #0
 800576c:	e01f      	b.n	80057ae <__kernel_rem_pio2+0xbe>
 800576e:	42ef      	cmn	r7, r5
 8005770:	d407      	bmi.n	8005782 <__kernel_rem_pio2+0x92>
 8005772:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005776:	f7fa fecd 	bl	8000514 <__aeabi_i2d>
 800577a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800577e:	3501      	adds	r5, #1
 8005780:	e7df      	b.n	8005742 <__kernel_rem_pio2+0x52>
 8005782:	ec51 0b18 	vmov	r0, r1, d8
 8005786:	e7f8      	b.n	800577a <__kernel_rem_pio2+0x8a>
 8005788:	9906      	ldr	r1, [sp, #24]
 800578a:	9d02      	ldr	r5, [sp, #8]
 800578c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8005790:	9106      	str	r1, [sp, #24]
 8005792:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8005796:	9502      	str	r5, [sp, #8]
 8005798:	f7fa ff26 	bl	80005e8 <__aeabi_dmul>
 800579c:	4602      	mov	r2, r0
 800579e:	460b      	mov	r3, r1
 80057a0:	4640      	mov	r0, r8
 80057a2:	4649      	mov	r1, r9
 80057a4:	f7fa fd6a 	bl	800027c <__adddf3>
 80057a8:	3701      	adds	r7, #1
 80057aa:	4680      	mov	r8, r0
 80057ac:	4689      	mov	r9, r1
 80057ae:	9b07      	ldr	r3, [sp, #28]
 80057b0:	429f      	cmp	r7, r3
 80057b2:	dde9      	ble.n	8005788 <__kernel_rem_pio2+0x98>
 80057b4:	e8eb 8902 	strd	r8, r9, [fp], #8
 80057b8:	3601      	adds	r6, #1
 80057ba:	e7c9      	b.n	8005750 <__kernel_rem_pio2+0x60>
 80057bc:	9b04      	ldr	r3, [sp, #16]
 80057be:	aa0e      	add	r2, sp, #56	; 0x38
 80057c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80057c4:	930c      	str	r3, [sp, #48]	; 0x30
 80057c6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80057c8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80057cc:	9c04      	ldr	r4, [sp, #16]
 80057ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80057d0:	ab9a      	add	r3, sp, #616	; 0x268
 80057d2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80057d6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80057da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80057de:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80057e2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80057e6:	ab9a      	add	r3, sp, #616	; 0x268
 80057e8:	445b      	add	r3, fp
 80057ea:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80057ee:	2500      	movs	r5, #0
 80057f0:	1b63      	subs	r3, r4, r5
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	dc78      	bgt.n	80058e8 <__kernel_rem_pio2+0x1f8>
 80057f6:	4650      	mov	r0, sl
 80057f8:	ec49 8b10 	vmov	d0, r8, r9
 80057fc:	f000 fc04 	bl	8006008 <scalbn>
 8005800:	ec57 6b10 	vmov	r6, r7, d0
 8005804:	2200      	movs	r2, #0
 8005806:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800580a:	ee10 0a10 	vmov	r0, s0
 800580e:	4639      	mov	r1, r7
 8005810:	f7fa feea 	bl	80005e8 <__aeabi_dmul>
 8005814:	ec41 0b10 	vmov	d0, r0, r1
 8005818:	f000 fb6e 	bl	8005ef8 <floor>
 800581c:	2200      	movs	r2, #0
 800581e:	ec51 0b10 	vmov	r0, r1, d0
 8005822:	4b7e      	ldr	r3, [pc, #504]	; (8005a1c <__kernel_rem_pio2+0x32c>)
 8005824:	f7fa fee0 	bl	80005e8 <__aeabi_dmul>
 8005828:	4602      	mov	r2, r0
 800582a:	460b      	mov	r3, r1
 800582c:	4630      	mov	r0, r6
 800582e:	4639      	mov	r1, r7
 8005830:	f7fa fd22 	bl	8000278 <__aeabi_dsub>
 8005834:	460f      	mov	r7, r1
 8005836:	4606      	mov	r6, r0
 8005838:	f7fb f986 	bl	8000b48 <__aeabi_d2iz>
 800583c:	9006      	str	r0, [sp, #24]
 800583e:	f7fa fe69 	bl	8000514 <__aeabi_i2d>
 8005842:	4602      	mov	r2, r0
 8005844:	460b      	mov	r3, r1
 8005846:	4630      	mov	r0, r6
 8005848:	4639      	mov	r1, r7
 800584a:	f7fa fd15 	bl	8000278 <__aeabi_dsub>
 800584e:	f1ba 0f00 	cmp.w	sl, #0
 8005852:	4606      	mov	r6, r0
 8005854:	460f      	mov	r7, r1
 8005856:	dd6c      	ble.n	8005932 <__kernel_rem_pio2+0x242>
 8005858:	1e62      	subs	r2, r4, #1
 800585a:	ab0e      	add	r3, sp, #56	; 0x38
 800585c:	f1ca 0118 	rsb	r1, sl, #24
 8005860:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005864:	9d06      	ldr	r5, [sp, #24]
 8005866:	fa40 f301 	asr.w	r3, r0, r1
 800586a:	441d      	add	r5, r3
 800586c:	408b      	lsls	r3, r1
 800586e:	1ac0      	subs	r0, r0, r3
 8005870:	ab0e      	add	r3, sp, #56	; 0x38
 8005872:	9506      	str	r5, [sp, #24]
 8005874:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005878:	f1ca 0317 	rsb	r3, sl, #23
 800587c:	fa40 f303 	asr.w	r3, r0, r3
 8005880:	9302      	str	r3, [sp, #8]
 8005882:	9b02      	ldr	r3, [sp, #8]
 8005884:	2b00      	cmp	r3, #0
 8005886:	dd62      	ble.n	800594e <__kernel_rem_pio2+0x25e>
 8005888:	9b06      	ldr	r3, [sp, #24]
 800588a:	2200      	movs	r2, #0
 800588c:	3301      	adds	r3, #1
 800588e:	9306      	str	r3, [sp, #24]
 8005890:	4615      	mov	r5, r2
 8005892:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005896:	4294      	cmp	r4, r2
 8005898:	f300 8095 	bgt.w	80059c6 <__kernel_rem_pio2+0x2d6>
 800589c:	f1ba 0f00 	cmp.w	sl, #0
 80058a0:	dd07      	ble.n	80058b2 <__kernel_rem_pio2+0x1c2>
 80058a2:	f1ba 0f01 	cmp.w	sl, #1
 80058a6:	f000 80a2 	beq.w	80059ee <__kernel_rem_pio2+0x2fe>
 80058aa:	f1ba 0f02 	cmp.w	sl, #2
 80058ae:	f000 80c1 	beq.w	8005a34 <__kernel_rem_pio2+0x344>
 80058b2:	9b02      	ldr	r3, [sp, #8]
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d14a      	bne.n	800594e <__kernel_rem_pio2+0x25e>
 80058b8:	4632      	mov	r2, r6
 80058ba:	463b      	mov	r3, r7
 80058bc:	2000      	movs	r0, #0
 80058be:	4958      	ldr	r1, [pc, #352]	; (8005a20 <__kernel_rem_pio2+0x330>)
 80058c0:	f7fa fcda 	bl	8000278 <__aeabi_dsub>
 80058c4:	4606      	mov	r6, r0
 80058c6:	460f      	mov	r7, r1
 80058c8:	2d00      	cmp	r5, #0
 80058ca:	d040      	beq.n	800594e <__kernel_rem_pio2+0x25e>
 80058cc:	4650      	mov	r0, sl
 80058ce:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8005a10 <__kernel_rem_pio2+0x320>
 80058d2:	f000 fb99 	bl	8006008 <scalbn>
 80058d6:	4630      	mov	r0, r6
 80058d8:	4639      	mov	r1, r7
 80058da:	ec53 2b10 	vmov	r2, r3, d0
 80058de:	f7fa fccb 	bl	8000278 <__aeabi_dsub>
 80058e2:	4606      	mov	r6, r0
 80058e4:	460f      	mov	r7, r1
 80058e6:	e032      	b.n	800594e <__kernel_rem_pio2+0x25e>
 80058e8:	2200      	movs	r2, #0
 80058ea:	4b4e      	ldr	r3, [pc, #312]	; (8005a24 <__kernel_rem_pio2+0x334>)
 80058ec:	4640      	mov	r0, r8
 80058ee:	4649      	mov	r1, r9
 80058f0:	f7fa fe7a 	bl	80005e8 <__aeabi_dmul>
 80058f4:	f7fb f928 	bl	8000b48 <__aeabi_d2iz>
 80058f8:	f7fa fe0c 	bl	8000514 <__aeabi_i2d>
 80058fc:	2200      	movs	r2, #0
 80058fe:	4b4a      	ldr	r3, [pc, #296]	; (8005a28 <__kernel_rem_pio2+0x338>)
 8005900:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005904:	f7fa fe70 	bl	80005e8 <__aeabi_dmul>
 8005908:	4602      	mov	r2, r0
 800590a:	460b      	mov	r3, r1
 800590c:	4640      	mov	r0, r8
 800590e:	4649      	mov	r1, r9
 8005910:	f7fa fcb2 	bl	8000278 <__aeabi_dsub>
 8005914:	f7fb f918 	bl	8000b48 <__aeabi_d2iz>
 8005918:	ab0e      	add	r3, sp, #56	; 0x38
 800591a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800591e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8005922:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005926:	f7fa fca9 	bl	800027c <__adddf3>
 800592a:	3501      	adds	r5, #1
 800592c:	4680      	mov	r8, r0
 800592e:	4689      	mov	r9, r1
 8005930:	e75e      	b.n	80057f0 <__kernel_rem_pio2+0x100>
 8005932:	d105      	bne.n	8005940 <__kernel_rem_pio2+0x250>
 8005934:	1e63      	subs	r3, r4, #1
 8005936:	aa0e      	add	r2, sp, #56	; 0x38
 8005938:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800593c:	15c3      	asrs	r3, r0, #23
 800593e:	e79f      	b.n	8005880 <__kernel_rem_pio2+0x190>
 8005940:	2200      	movs	r2, #0
 8005942:	4b3a      	ldr	r3, [pc, #232]	; (8005a2c <__kernel_rem_pio2+0x33c>)
 8005944:	f7fb f8d6 	bl	8000af4 <__aeabi_dcmpge>
 8005948:	2800      	cmp	r0, #0
 800594a:	d139      	bne.n	80059c0 <__kernel_rem_pio2+0x2d0>
 800594c:	9002      	str	r0, [sp, #8]
 800594e:	2200      	movs	r2, #0
 8005950:	2300      	movs	r3, #0
 8005952:	4630      	mov	r0, r6
 8005954:	4639      	mov	r1, r7
 8005956:	f7fb f8af 	bl	8000ab8 <__aeabi_dcmpeq>
 800595a:	2800      	cmp	r0, #0
 800595c:	f000 80c7 	beq.w	8005aee <__kernel_rem_pio2+0x3fe>
 8005960:	1e65      	subs	r5, r4, #1
 8005962:	462b      	mov	r3, r5
 8005964:	2200      	movs	r2, #0
 8005966:	9904      	ldr	r1, [sp, #16]
 8005968:	428b      	cmp	r3, r1
 800596a:	da6a      	bge.n	8005a42 <__kernel_rem_pio2+0x352>
 800596c:	2a00      	cmp	r2, #0
 800596e:	f000 8088 	beq.w	8005a82 <__kernel_rem_pio2+0x392>
 8005972:	ab0e      	add	r3, sp, #56	; 0x38
 8005974:	f1aa 0a18 	sub.w	sl, sl, #24
 8005978:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 80b4 	beq.w	8005aea <__kernel_rem_pio2+0x3fa>
 8005982:	4650      	mov	r0, sl
 8005984:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8005a10 <__kernel_rem_pio2+0x320>
 8005988:	f000 fb3e 	bl	8006008 <scalbn>
 800598c:	00ec      	lsls	r4, r5, #3
 800598e:	ab72      	add	r3, sp, #456	; 0x1c8
 8005990:	191e      	adds	r6, r3, r4
 8005992:	ec59 8b10 	vmov	r8, r9, d0
 8005996:	f106 0a08 	add.w	sl, r6, #8
 800599a:	462f      	mov	r7, r5
 800599c:	2f00      	cmp	r7, #0
 800599e:	f280 80df 	bge.w	8005b60 <__kernel_rem_pio2+0x470>
 80059a2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8005a08 <__kernel_rem_pio2+0x318>
 80059a6:	f04f 0a00 	mov.w	sl, #0
 80059aa:	eba5 030a 	sub.w	r3, r5, sl
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f2c0 810a 	blt.w	8005bc8 <__kernel_rem_pio2+0x4d8>
 80059b4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8005a30 <__kernel_rem_pio2+0x340>
 80059b8:	ec59 8b18 	vmov	r8, r9, d8
 80059bc:	2700      	movs	r7, #0
 80059be:	e0f5      	b.n	8005bac <__kernel_rem_pio2+0x4bc>
 80059c0:	2302      	movs	r3, #2
 80059c2:	9302      	str	r3, [sp, #8]
 80059c4:	e760      	b.n	8005888 <__kernel_rem_pio2+0x198>
 80059c6:	ab0e      	add	r3, sp, #56	; 0x38
 80059c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059cc:	b94d      	cbnz	r5, 80059e2 <__kernel_rem_pio2+0x2f2>
 80059ce:	b12b      	cbz	r3, 80059dc <__kernel_rem_pio2+0x2ec>
 80059d0:	a80e      	add	r0, sp, #56	; 0x38
 80059d2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80059d6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80059da:	2301      	movs	r3, #1
 80059dc:	3201      	adds	r2, #1
 80059de:	461d      	mov	r5, r3
 80059e0:	e759      	b.n	8005896 <__kernel_rem_pio2+0x1a6>
 80059e2:	a80e      	add	r0, sp, #56	; 0x38
 80059e4:	1acb      	subs	r3, r1, r3
 80059e6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80059ea:	462b      	mov	r3, r5
 80059ec:	e7f6      	b.n	80059dc <__kernel_rem_pio2+0x2ec>
 80059ee:	1e62      	subs	r2, r4, #1
 80059f0:	ab0e      	add	r3, sp, #56	; 0x38
 80059f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059f6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80059fa:	a90e      	add	r1, sp, #56	; 0x38
 80059fc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005a00:	e757      	b.n	80058b2 <__kernel_rem_pio2+0x1c2>
 8005a02:	bf00      	nop
 8005a04:	f3af 8000 	nop.w
	...
 8005a14:	3ff00000 	.word	0x3ff00000
 8005a18:	08006490 	.word	0x08006490
 8005a1c:	40200000 	.word	0x40200000
 8005a20:	3ff00000 	.word	0x3ff00000
 8005a24:	3e700000 	.word	0x3e700000
 8005a28:	41700000 	.word	0x41700000
 8005a2c:	3fe00000 	.word	0x3fe00000
 8005a30:	08006450 	.word	0x08006450
 8005a34:	1e62      	subs	r2, r4, #1
 8005a36:	ab0e      	add	r3, sp, #56	; 0x38
 8005a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a3c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005a40:	e7db      	b.n	80059fa <__kernel_rem_pio2+0x30a>
 8005a42:	a90e      	add	r1, sp, #56	; 0x38
 8005a44:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	e78b      	b.n	8005966 <__kernel_rem_pio2+0x276>
 8005a4e:	3301      	adds	r3, #1
 8005a50:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005a54:	2900      	cmp	r1, #0
 8005a56:	d0fa      	beq.n	8005a4e <__kernel_rem_pio2+0x35e>
 8005a58:	9a08      	ldr	r2, [sp, #32]
 8005a5a:	4422      	add	r2, r4
 8005a5c:	00d2      	lsls	r2, r2, #3
 8005a5e:	a922      	add	r1, sp, #136	; 0x88
 8005a60:	18e3      	adds	r3, r4, r3
 8005a62:	9206      	str	r2, [sp, #24]
 8005a64:	440a      	add	r2, r1
 8005a66:	9302      	str	r3, [sp, #8]
 8005a68:	f10b 0108 	add.w	r1, fp, #8
 8005a6c:	f102 0308 	add.w	r3, r2, #8
 8005a70:	1c66      	adds	r6, r4, #1
 8005a72:	910a      	str	r1, [sp, #40]	; 0x28
 8005a74:	2500      	movs	r5, #0
 8005a76:	930d      	str	r3, [sp, #52]	; 0x34
 8005a78:	9b02      	ldr	r3, [sp, #8]
 8005a7a:	42b3      	cmp	r3, r6
 8005a7c:	da04      	bge.n	8005a88 <__kernel_rem_pio2+0x398>
 8005a7e:	461c      	mov	r4, r3
 8005a80:	e6a6      	b.n	80057d0 <__kernel_rem_pio2+0xe0>
 8005a82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a84:	2301      	movs	r3, #1
 8005a86:	e7e3      	b.n	8005a50 <__kernel_rem_pio2+0x360>
 8005a88:	9b06      	ldr	r3, [sp, #24]
 8005a8a:	18ef      	adds	r7, r5, r3
 8005a8c:	ab22      	add	r3, sp, #136	; 0x88
 8005a8e:	441f      	add	r7, r3
 8005a90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a92:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005a96:	f7fa fd3d 	bl	8000514 <__aeabi_i2d>
 8005a9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a9c:	461c      	mov	r4, r3
 8005a9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005aa0:	e9c7 0100 	strd	r0, r1, [r7]
 8005aa4:	eb03 0b05 	add.w	fp, r3, r5
 8005aa8:	2700      	movs	r7, #0
 8005aaa:	f04f 0800 	mov.w	r8, #0
 8005aae:	f04f 0900 	mov.w	r9, #0
 8005ab2:	9b07      	ldr	r3, [sp, #28]
 8005ab4:	429f      	cmp	r7, r3
 8005ab6:	dd08      	ble.n	8005aca <__kernel_rem_pio2+0x3da>
 8005ab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aba:	aa72      	add	r2, sp, #456	; 0x1c8
 8005abc:	18eb      	adds	r3, r5, r3
 8005abe:	4413      	add	r3, r2
 8005ac0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8005ac4:	3601      	adds	r6, #1
 8005ac6:	3508      	adds	r5, #8
 8005ac8:	e7d6      	b.n	8005a78 <__kernel_rem_pio2+0x388>
 8005aca:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005ace:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005ad2:	f7fa fd89 	bl	80005e8 <__aeabi_dmul>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	460b      	mov	r3, r1
 8005ada:	4640      	mov	r0, r8
 8005adc:	4649      	mov	r1, r9
 8005ade:	f7fa fbcd 	bl	800027c <__adddf3>
 8005ae2:	3701      	adds	r7, #1
 8005ae4:	4680      	mov	r8, r0
 8005ae6:	4689      	mov	r9, r1
 8005ae8:	e7e3      	b.n	8005ab2 <__kernel_rem_pio2+0x3c2>
 8005aea:	3d01      	subs	r5, #1
 8005aec:	e741      	b.n	8005972 <__kernel_rem_pio2+0x282>
 8005aee:	f1ca 0000 	rsb	r0, sl, #0
 8005af2:	ec47 6b10 	vmov	d0, r6, r7
 8005af6:	f000 fa87 	bl	8006008 <scalbn>
 8005afa:	ec57 6b10 	vmov	r6, r7, d0
 8005afe:	2200      	movs	r2, #0
 8005b00:	4b99      	ldr	r3, [pc, #612]	; (8005d68 <__kernel_rem_pio2+0x678>)
 8005b02:	ee10 0a10 	vmov	r0, s0
 8005b06:	4639      	mov	r1, r7
 8005b08:	f7fa fff4 	bl	8000af4 <__aeabi_dcmpge>
 8005b0c:	b1f8      	cbz	r0, 8005b4e <__kernel_rem_pio2+0x45e>
 8005b0e:	2200      	movs	r2, #0
 8005b10:	4b96      	ldr	r3, [pc, #600]	; (8005d6c <__kernel_rem_pio2+0x67c>)
 8005b12:	4630      	mov	r0, r6
 8005b14:	4639      	mov	r1, r7
 8005b16:	f7fa fd67 	bl	80005e8 <__aeabi_dmul>
 8005b1a:	f7fb f815 	bl	8000b48 <__aeabi_d2iz>
 8005b1e:	4680      	mov	r8, r0
 8005b20:	f7fa fcf8 	bl	8000514 <__aeabi_i2d>
 8005b24:	2200      	movs	r2, #0
 8005b26:	4b90      	ldr	r3, [pc, #576]	; (8005d68 <__kernel_rem_pio2+0x678>)
 8005b28:	f7fa fd5e 	bl	80005e8 <__aeabi_dmul>
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	4602      	mov	r2, r0
 8005b30:	4639      	mov	r1, r7
 8005b32:	4630      	mov	r0, r6
 8005b34:	f7fa fba0 	bl	8000278 <__aeabi_dsub>
 8005b38:	f7fb f806 	bl	8000b48 <__aeabi_d2iz>
 8005b3c:	1c65      	adds	r5, r4, #1
 8005b3e:	ab0e      	add	r3, sp, #56	; 0x38
 8005b40:	f10a 0a18 	add.w	sl, sl, #24
 8005b44:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005b48:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005b4c:	e719      	b.n	8005982 <__kernel_rem_pio2+0x292>
 8005b4e:	4630      	mov	r0, r6
 8005b50:	4639      	mov	r1, r7
 8005b52:	f7fa fff9 	bl	8000b48 <__aeabi_d2iz>
 8005b56:	ab0e      	add	r3, sp, #56	; 0x38
 8005b58:	4625      	mov	r5, r4
 8005b5a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005b5e:	e710      	b.n	8005982 <__kernel_rem_pio2+0x292>
 8005b60:	ab0e      	add	r3, sp, #56	; 0x38
 8005b62:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8005b66:	f7fa fcd5 	bl	8000514 <__aeabi_i2d>
 8005b6a:	4642      	mov	r2, r8
 8005b6c:	464b      	mov	r3, r9
 8005b6e:	f7fa fd3b 	bl	80005e8 <__aeabi_dmul>
 8005b72:	2200      	movs	r2, #0
 8005b74:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8005b78:	4b7c      	ldr	r3, [pc, #496]	; (8005d6c <__kernel_rem_pio2+0x67c>)
 8005b7a:	4640      	mov	r0, r8
 8005b7c:	4649      	mov	r1, r9
 8005b7e:	f7fa fd33 	bl	80005e8 <__aeabi_dmul>
 8005b82:	3f01      	subs	r7, #1
 8005b84:	4680      	mov	r8, r0
 8005b86:	4689      	mov	r9, r1
 8005b88:	e708      	b.n	800599c <__kernel_rem_pio2+0x2ac>
 8005b8a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8005b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b92:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8005b96:	f7fa fd27 	bl	80005e8 <__aeabi_dmul>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	4640      	mov	r0, r8
 8005ba0:	4649      	mov	r1, r9
 8005ba2:	f7fa fb6b 	bl	800027c <__adddf3>
 8005ba6:	3701      	adds	r7, #1
 8005ba8:	4680      	mov	r8, r0
 8005baa:	4689      	mov	r9, r1
 8005bac:	9b04      	ldr	r3, [sp, #16]
 8005bae:	429f      	cmp	r7, r3
 8005bb0:	dc01      	bgt.n	8005bb6 <__kernel_rem_pio2+0x4c6>
 8005bb2:	45ba      	cmp	sl, r7
 8005bb4:	dae9      	bge.n	8005b8a <__kernel_rem_pio2+0x49a>
 8005bb6:	ab4a      	add	r3, sp, #296	; 0x128
 8005bb8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005bbc:	e9c3 8900 	strd	r8, r9, [r3]
 8005bc0:	f10a 0a01 	add.w	sl, sl, #1
 8005bc4:	3e08      	subs	r6, #8
 8005bc6:	e6f0      	b.n	80059aa <__kernel_rem_pio2+0x2ba>
 8005bc8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005bca:	2b03      	cmp	r3, #3
 8005bcc:	d85b      	bhi.n	8005c86 <__kernel_rem_pio2+0x596>
 8005bce:	e8df f003 	tbb	[pc, r3]
 8005bd2:	264a      	.short	0x264a
 8005bd4:	0226      	.short	0x0226
 8005bd6:	ab9a      	add	r3, sp, #616	; 0x268
 8005bd8:	441c      	add	r4, r3
 8005bda:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005bde:	46a2      	mov	sl, r4
 8005be0:	46ab      	mov	fp, r5
 8005be2:	f1bb 0f00 	cmp.w	fp, #0
 8005be6:	dc6c      	bgt.n	8005cc2 <__kernel_rem_pio2+0x5d2>
 8005be8:	46a2      	mov	sl, r4
 8005bea:	46ab      	mov	fp, r5
 8005bec:	f1bb 0f01 	cmp.w	fp, #1
 8005bf0:	f300 8086 	bgt.w	8005d00 <__kernel_rem_pio2+0x610>
 8005bf4:	2000      	movs	r0, #0
 8005bf6:	2100      	movs	r1, #0
 8005bf8:	2d01      	cmp	r5, #1
 8005bfa:	f300 80a0 	bgt.w	8005d3e <__kernel_rem_pio2+0x64e>
 8005bfe:	9b02      	ldr	r3, [sp, #8]
 8005c00:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8005c04:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f040 809e 	bne.w	8005d4a <__kernel_rem_pio2+0x65a>
 8005c0e:	9b01      	ldr	r3, [sp, #4]
 8005c10:	e9c3 7800 	strd	r7, r8, [r3]
 8005c14:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005c18:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005c1c:	e033      	b.n	8005c86 <__kernel_rem_pio2+0x596>
 8005c1e:	3408      	adds	r4, #8
 8005c20:	ab4a      	add	r3, sp, #296	; 0x128
 8005c22:	441c      	add	r4, r3
 8005c24:	462e      	mov	r6, r5
 8005c26:	2000      	movs	r0, #0
 8005c28:	2100      	movs	r1, #0
 8005c2a:	2e00      	cmp	r6, #0
 8005c2c:	da3a      	bge.n	8005ca4 <__kernel_rem_pio2+0x5b4>
 8005c2e:	9b02      	ldr	r3, [sp, #8]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d03d      	beq.n	8005cb0 <__kernel_rem_pio2+0x5c0>
 8005c34:	4602      	mov	r2, r0
 8005c36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c3a:	9c01      	ldr	r4, [sp, #4]
 8005c3c:	e9c4 2300 	strd	r2, r3, [r4]
 8005c40:	4602      	mov	r2, r0
 8005c42:	460b      	mov	r3, r1
 8005c44:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8005c48:	f7fa fb16 	bl	8000278 <__aeabi_dsub>
 8005c4c:	ae4c      	add	r6, sp, #304	; 0x130
 8005c4e:	2401      	movs	r4, #1
 8005c50:	42a5      	cmp	r5, r4
 8005c52:	da30      	bge.n	8005cb6 <__kernel_rem_pio2+0x5c6>
 8005c54:	9b02      	ldr	r3, [sp, #8]
 8005c56:	b113      	cbz	r3, 8005c5e <__kernel_rem_pio2+0x56e>
 8005c58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	9b01      	ldr	r3, [sp, #4]
 8005c60:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005c64:	e00f      	b.n	8005c86 <__kernel_rem_pio2+0x596>
 8005c66:	ab9a      	add	r3, sp, #616	; 0x268
 8005c68:	441c      	add	r4, r3
 8005c6a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005c6e:	2000      	movs	r0, #0
 8005c70:	2100      	movs	r1, #0
 8005c72:	2d00      	cmp	r5, #0
 8005c74:	da10      	bge.n	8005c98 <__kernel_rem_pio2+0x5a8>
 8005c76:	9b02      	ldr	r3, [sp, #8]
 8005c78:	b113      	cbz	r3, 8005c80 <__kernel_rem_pio2+0x590>
 8005c7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c7e:	4619      	mov	r1, r3
 8005c80:	9b01      	ldr	r3, [sp, #4]
 8005c82:	e9c3 0100 	strd	r0, r1, [r3]
 8005c86:	9b06      	ldr	r3, [sp, #24]
 8005c88:	f003 0007 	and.w	r0, r3, #7
 8005c8c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005c90:	ecbd 8b02 	vpop	{d8}
 8005c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c98:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005c9c:	f7fa faee 	bl	800027c <__adddf3>
 8005ca0:	3d01      	subs	r5, #1
 8005ca2:	e7e6      	b.n	8005c72 <__kernel_rem_pio2+0x582>
 8005ca4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005ca8:	f7fa fae8 	bl	800027c <__adddf3>
 8005cac:	3e01      	subs	r6, #1
 8005cae:	e7bc      	b.n	8005c2a <__kernel_rem_pio2+0x53a>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	e7c1      	b.n	8005c3a <__kernel_rem_pio2+0x54a>
 8005cb6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8005cba:	f7fa fadf 	bl	800027c <__adddf3>
 8005cbe:	3401      	adds	r4, #1
 8005cc0:	e7c6      	b.n	8005c50 <__kernel_rem_pio2+0x560>
 8005cc2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8005cc6:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005cca:	4640      	mov	r0, r8
 8005ccc:	ec53 2b17 	vmov	r2, r3, d7
 8005cd0:	4649      	mov	r1, r9
 8005cd2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005cd6:	f7fa fad1 	bl	800027c <__adddf3>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	460b      	mov	r3, r1
 8005cde:	4606      	mov	r6, r0
 8005ce0:	460f      	mov	r7, r1
 8005ce2:	4640      	mov	r0, r8
 8005ce4:	4649      	mov	r1, r9
 8005ce6:	f7fa fac7 	bl	8000278 <__aeabi_dsub>
 8005cea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cee:	f7fa fac5 	bl	800027c <__adddf3>
 8005cf2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005cf6:	e9ca 0100 	strd	r0, r1, [sl]
 8005cfa:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8005cfe:	e770      	b.n	8005be2 <__kernel_rem_pio2+0x4f2>
 8005d00:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8005d04:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005d08:	4630      	mov	r0, r6
 8005d0a:	ec53 2b17 	vmov	r2, r3, d7
 8005d0e:	4639      	mov	r1, r7
 8005d10:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005d14:	f7fa fab2 	bl	800027c <__adddf3>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	4680      	mov	r8, r0
 8005d1e:	4689      	mov	r9, r1
 8005d20:	4630      	mov	r0, r6
 8005d22:	4639      	mov	r1, r7
 8005d24:	f7fa faa8 	bl	8000278 <__aeabi_dsub>
 8005d28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d2c:	f7fa faa6 	bl	800027c <__adddf3>
 8005d30:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005d34:	e9ca 0100 	strd	r0, r1, [sl]
 8005d38:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8005d3c:	e756      	b.n	8005bec <__kernel_rem_pio2+0x4fc>
 8005d3e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005d42:	f7fa fa9b 	bl	800027c <__adddf3>
 8005d46:	3d01      	subs	r5, #1
 8005d48:	e756      	b.n	8005bf8 <__kernel_rem_pio2+0x508>
 8005d4a:	9b01      	ldr	r3, [sp, #4]
 8005d4c:	9a01      	ldr	r2, [sp, #4]
 8005d4e:	601f      	str	r7, [r3, #0]
 8005d50:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8005d54:	605c      	str	r4, [r3, #4]
 8005d56:	609d      	str	r5, [r3, #8]
 8005d58:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005d5c:	60d3      	str	r3, [r2, #12]
 8005d5e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d62:	6110      	str	r0, [r2, #16]
 8005d64:	6153      	str	r3, [r2, #20]
 8005d66:	e78e      	b.n	8005c86 <__kernel_rem_pio2+0x596>
 8005d68:	41700000 	.word	0x41700000
 8005d6c:	3e700000 	.word	0x3e700000

08005d70 <__kernel_sin>:
 8005d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d74:	ec55 4b10 	vmov	r4, r5, d0
 8005d78:	b085      	sub	sp, #20
 8005d7a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005d7e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005d82:	ed8d 1b00 	vstr	d1, [sp]
 8005d86:	9002      	str	r0, [sp, #8]
 8005d88:	da06      	bge.n	8005d98 <__kernel_sin+0x28>
 8005d8a:	ee10 0a10 	vmov	r0, s0
 8005d8e:	4629      	mov	r1, r5
 8005d90:	f7fa feda 	bl	8000b48 <__aeabi_d2iz>
 8005d94:	2800      	cmp	r0, #0
 8005d96:	d051      	beq.n	8005e3c <__kernel_sin+0xcc>
 8005d98:	4622      	mov	r2, r4
 8005d9a:	462b      	mov	r3, r5
 8005d9c:	4620      	mov	r0, r4
 8005d9e:	4629      	mov	r1, r5
 8005da0:	f7fa fc22 	bl	80005e8 <__aeabi_dmul>
 8005da4:	4682      	mov	sl, r0
 8005da6:	468b      	mov	fp, r1
 8005da8:	4602      	mov	r2, r0
 8005daa:	460b      	mov	r3, r1
 8005dac:	4620      	mov	r0, r4
 8005dae:	4629      	mov	r1, r5
 8005db0:	f7fa fc1a 	bl	80005e8 <__aeabi_dmul>
 8005db4:	a341      	add	r3, pc, #260	; (adr r3, 8005ebc <__kernel_sin+0x14c>)
 8005db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dba:	4680      	mov	r8, r0
 8005dbc:	4689      	mov	r9, r1
 8005dbe:	4650      	mov	r0, sl
 8005dc0:	4659      	mov	r1, fp
 8005dc2:	f7fa fc11 	bl	80005e8 <__aeabi_dmul>
 8005dc6:	a33f      	add	r3, pc, #252	; (adr r3, 8005ec4 <__kernel_sin+0x154>)
 8005dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dcc:	f7fa fa54 	bl	8000278 <__aeabi_dsub>
 8005dd0:	4652      	mov	r2, sl
 8005dd2:	465b      	mov	r3, fp
 8005dd4:	f7fa fc08 	bl	80005e8 <__aeabi_dmul>
 8005dd8:	a33c      	add	r3, pc, #240	; (adr r3, 8005ecc <__kernel_sin+0x15c>)
 8005dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dde:	f7fa fa4d 	bl	800027c <__adddf3>
 8005de2:	4652      	mov	r2, sl
 8005de4:	465b      	mov	r3, fp
 8005de6:	f7fa fbff 	bl	80005e8 <__aeabi_dmul>
 8005dea:	a33a      	add	r3, pc, #232	; (adr r3, 8005ed4 <__kernel_sin+0x164>)
 8005dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df0:	f7fa fa42 	bl	8000278 <__aeabi_dsub>
 8005df4:	4652      	mov	r2, sl
 8005df6:	465b      	mov	r3, fp
 8005df8:	f7fa fbf6 	bl	80005e8 <__aeabi_dmul>
 8005dfc:	a337      	add	r3, pc, #220	; (adr r3, 8005edc <__kernel_sin+0x16c>)
 8005dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e02:	f7fa fa3b 	bl	800027c <__adddf3>
 8005e06:	9b02      	ldr	r3, [sp, #8]
 8005e08:	4606      	mov	r6, r0
 8005e0a:	460f      	mov	r7, r1
 8005e0c:	b9db      	cbnz	r3, 8005e46 <__kernel_sin+0xd6>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	460b      	mov	r3, r1
 8005e12:	4650      	mov	r0, sl
 8005e14:	4659      	mov	r1, fp
 8005e16:	f7fa fbe7 	bl	80005e8 <__aeabi_dmul>
 8005e1a:	a325      	add	r3, pc, #148	; (adr r3, 8005eb0 <__kernel_sin+0x140>)
 8005e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e20:	f7fa fa2a 	bl	8000278 <__aeabi_dsub>
 8005e24:	4642      	mov	r2, r8
 8005e26:	464b      	mov	r3, r9
 8005e28:	f7fa fbde 	bl	80005e8 <__aeabi_dmul>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	460b      	mov	r3, r1
 8005e30:	4620      	mov	r0, r4
 8005e32:	4629      	mov	r1, r5
 8005e34:	f7fa fa22 	bl	800027c <__adddf3>
 8005e38:	4604      	mov	r4, r0
 8005e3a:	460d      	mov	r5, r1
 8005e3c:	ec45 4b10 	vmov	d0, r4, r5
 8005e40:	b005      	add	sp, #20
 8005e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e46:	2200      	movs	r2, #0
 8005e48:	4b1b      	ldr	r3, [pc, #108]	; (8005eb8 <__kernel_sin+0x148>)
 8005e4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e4e:	f7fa fbcb 	bl	80005e8 <__aeabi_dmul>
 8005e52:	4632      	mov	r2, r6
 8005e54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e58:	463b      	mov	r3, r7
 8005e5a:	4640      	mov	r0, r8
 8005e5c:	4649      	mov	r1, r9
 8005e5e:	f7fa fbc3 	bl	80005e8 <__aeabi_dmul>
 8005e62:	4602      	mov	r2, r0
 8005e64:	460b      	mov	r3, r1
 8005e66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e6a:	f7fa fa05 	bl	8000278 <__aeabi_dsub>
 8005e6e:	4652      	mov	r2, sl
 8005e70:	465b      	mov	r3, fp
 8005e72:	f7fa fbb9 	bl	80005e8 <__aeabi_dmul>
 8005e76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e7a:	f7fa f9fd 	bl	8000278 <__aeabi_dsub>
 8005e7e:	a30c      	add	r3, pc, #48	; (adr r3, 8005eb0 <__kernel_sin+0x140>)
 8005e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e84:	4606      	mov	r6, r0
 8005e86:	460f      	mov	r7, r1
 8005e88:	4640      	mov	r0, r8
 8005e8a:	4649      	mov	r1, r9
 8005e8c:	f7fa fbac 	bl	80005e8 <__aeabi_dmul>
 8005e90:	4602      	mov	r2, r0
 8005e92:	460b      	mov	r3, r1
 8005e94:	4630      	mov	r0, r6
 8005e96:	4639      	mov	r1, r7
 8005e98:	f7fa f9f0 	bl	800027c <__adddf3>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	4629      	mov	r1, r5
 8005ea4:	f7fa f9e8 	bl	8000278 <__aeabi_dsub>
 8005ea8:	e7c6      	b.n	8005e38 <__kernel_sin+0xc8>
 8005eaa:	bf00      	nop
 8005eac:	f3af 8000 	nop.w
 8005eb0:	55555549 	.word	0x55555549
 8005eb4:	3fc55555 	.word	0x3fc55555
 8005eb8:	3fe00000 	.word	0x3fe00000
 8005ebc:	5acfd57c 	.word	0x5acfd57c
 8005ec0:	3de5d93a 	.word	0x3de5d93a
 8005ec4:	8a2b9ceb 	.word	0x8a2b9ceb
 8005ec8:	3e5ae5e6 	.word	0x3e5ae5e6
 8005ecc:	57b1fe7d 	.word	0x57b1fe7d
 8005ed0:	3ec71de3 	.word	0x3ec71de3
 8005ed4:	19c161d5 	.word	0x19c161d5
 8005ed8:	3f2a01a0 	.word	0x3f2a01a0
 8005edc:	1110f8a6 	.word	0x1110f8a6
 8005ee0:	3f811111 	.word	0x3f811111

08005ee4 <fabs>:
 8005ee4:	ec51 0b10 	vmov	r0, r1, d0
 8005ee8:	ee10 2a10 	vmov	r2, s0
 8005eec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005ef0:	ec43 2b10 	vmov	d0, r2, r3
 8005ef4:	4770      	bx	lr
	...

08005ef8 <floor>:
 8005ef8:	ec51 0b10 	vmov	r0, r1, d0
 8005efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f00:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005f04:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005f08:	2e13      	cmp	r6, #19
 8005f0a:	460c      	mov	r4, r1
 8005f0c:	ee10 5a10 	vmov	r5, s0
 8005f10:	4680      	mov	r8, r0
 8005f12:	dc34      	bgt.n	8005f7e <floor+0x86>
 8005f14:	2e00      	cmp	r6, #0
 8005f16:	da16      	bge.n	8005f46 <floor+0x4e>
 8005f18:	a335      	add	r3, pc, #212	; (adr r3, 8005ff0 <floor+0xf8>)
 8005f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1e:	f7fa f9ad 	bl	800027c <__adddf3>
 8005f22:	2200      	movs	r2, #0
 8005f24:	2300      	movs	r3, #0
 8005f26:	f7fa fdef 	bl	8000b08 <__aeabi_dcmpgt>
 8005f2a:	b148      	cbz	r0, 8005f40 <floor+0x48>
 8005f2c:	2c00      	cmp	r4, #0
 8005f2e:	da59      	bge.n	8005fe4 <floor+0xec>
 8005f30:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005f34:	4a30      	ldr	r2, [pc, #192]	; (8005ff8 <floor+0x100>)
 8005f36:	432b      	orrs	r3, r5
 8005f38:	2500      	movs	r5, #0
 8005f3a:	42ab      	cmp	r3, r5
 8005f3c:	bf18      	it	ne
 8005f3e:	4614      	movne	r4, r2
 8005f40:	4621      	mov	r1, r4
 8005f42:	4628      	mov	r0, r5
 8005f44:	e025      	b.n	8005f92 <floor+0x9a>
 8005f46:	4f2d      	ldr	r7, [pc, #180]	; (8005ffc <floor+0x104>)
 8005f48:	4137      	asrs	r7, r6
 8005f4a:	ea01 0307 	and.w	r3, r1, r7
 8005f4e:	4303      	orrs	r3, r0
 8005f50:	d01f      	beq.n	8005f92 <floor+0x9a>
 8005f52:	a327      	add	r3, pc, #156	; (adr r3, 8005ff0 <floor+0xf8>)
 8005f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f58:	f7fa f990 	bl	800027c <__adddf3>
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	2300      	movs	r3, #0
 8005f60:	f7fa fdd2 	bl	8000b08 <__aeabi_dcmpgt>
 8005f64:	2800      	cmp	r0, #0
 8005f66:	d0eb      	beq.n	8005f40 <floor+0x48>
 8005f68:	2c00      	cmp	r4, #0
 8005f6a:	bfbe      	ittt	lt
 8005f6c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005f70:	fa43 f606 	asrlt.w	r6, r3, r6
 8005f74:	19a4      	addlt	r4, r4, r6
 8005f76:	ea24 0407 	bic.w	r4, r4, r7
 8005f7a:	2500      	movs	r5, #0
 8005f7c:	e7e0      	b.n	8005f40 <floor+0x48>
 8005f7e:	2e33      	cmp	r6, #51	; 0x33
 8005f80:	dd0b      	ble.n	8005f9a <floor+0xa2>
 8005f82:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005f86:	d104      	bne.n	8005f92 <floor+0x9a>
 8005f88:	ee10 2a10 	vmov	r2, s0
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	f7fa f975 	bl	800027c <__adddf3>
 8005f92:	ec41 0b10 	vmov	d0, r0, r1
 8005f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f9a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005fa2:	fa23 f707 	lsr.w	r7, r3, r7
 8005fa6:	4207      	tst	r7, r0
 8005fa8:	d0f3      	beq.n	8005f92 <floor+0x9a>
 8005faa:	a311      	add	r3, pc, #68	; (adr r3, 8005ff0 <floor+0xf8>)
 8005fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb0:	f7fa f964 	bl	800027c <__adddf3>
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	f7fa fda6 	bl	8000b08 <__aeabi_dcmpgt>
 8005fbc:	2800      	cmp	r0, #0
 8005fbe:	d0bf      	beq.n	8005f40 <floor+0x48>
 8005fc0:	2c00      	cmp	r4, #0
 8005fc2:	da02      	bge.n	8005fca <floor+0xd2>
 8005fc4:	2e14      	cmp	r6, #20
 8005fc6:	d103      	bne.n	8005fd0 <floor+0xd8>
 8005fc8:	3401      	adds	r4, #1
 8005fca:	ea25 0507 	bic.w	r5, r5, r7
 8005fce:	e7b7      	b.n	8005f40 <floor+0x48>
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005fd6:	fa03 f606 	lsl.w	r6, r3, r6
 8005fda:	4435      	add	r5, r6
 8005fdc:	4545      	cmp	r5, r8
 8005fde:	bf38      	it	cc
 8005fe0:	18e4      	addcc	r4, r4, r3
 8005fe2:	e7f2      	b.n	8005fca <floor+0xd2>
 8005fe4:	2500      	movs	r5, #0
 8005fe6:	462c      	mov	r4, r5
 8005fe8:	e7aa      	b.n	8005f40 <floor+0x48>
 8005fea:	bf00      	nop
 8005fec:	f3af 8000 	nop.w
 8005ff0:	8800759c 	.word	0x8800759c
 8005ff4:	7e37e43c 	.word	0x7e37e43c
 8005ff8:	bff00000 	.word	0xbff00000
 8005ffc:	000fffff 	.word	0x000fffff

08006000 <matherr>:
 8006000:	2000      	movs	r0, #0
 8006002:	4770      	bx	lr
 8006004:	0000      	movs	r0, r0
	...

08006008 <scalbn>:
 8006008:	b570      	push	{r4, r5, r6, lr}
 800600a:	ec55 4b10 	vmov	r4, r5, d0
 800600e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006012:	4606      	mov	r6, r0
 8006014:	462b      	mov	r3, r5
 8006016:	b9aa      	cbnz	r2, 8006044 <scalbn+0x3c>
 8006018:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800601c:	4323      	orrs	r3, r4
 800601e:	d03b      	beq.n	8006098 <scalbn+0x90>
 8006020:	4b31      	ldr	r3, [pc, #196]	; (80060e8 <scalbn+0xe0>)
 8006022:	4629      	mov	r1, r5
 8006024:	2200      	movs	r2, #0
 8006026:	ee10 0a10 	vmov	r0, s0
 800602a:	f7fa fadd 	bl	80005e8 <__aeabi_dmul>
 800602e:	4b2f      	ldr	r3, [pc, #188]	; (80060ec <scalbn+0xe4>)
 8006030:	429e      	cmp	r6, r3
 8006032:	4604      	mov	r4, r0
 8006034:	460d      	mov	r5, r1
 8006036:	da12      	bge.n	800605e <scalbn+0x56>
 8006038:	a327      	add	r3, pc, #156	; (adr r3, 80060d8 <scalbn+0xd0>)
 800603a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603e:	f7fa fad3 	bl	80005e8 <__aeabi_dmul>
 8006042:	e009      	b.n	8006058 <scalbn+0x50>
 8006044:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006048:	428a      	cmp	r2, r1
 800604a:	d10c      	bne.n	8006066 <scalbn+0x5e>
 800604c:	ee10 2a10 	vmov	r2, s0
 8006050:	4620      	mov	r0, r4
 8006052:	4629      	mov	r1, r5
 8006054:	f7fa f912 	bl	800027c <__adddf3>
 8006058:	4604      	mov	r4, r0
 800605a:	460d      	mov	r5, r1
 800605c:	e01c      	b.n	8006098 <scalbn+0x90>
 800605e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006062:	460b      	mov	r3, r1
 8006064:	3a36      	subs	r2, #54	; 0x36
 8006066:	4432      	add	r2, r6
 8006068:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800606c:	428a      	cmp	r2, r1
 800606e:	dd0b      	ble.n	8006088 <scalbn+0x80>
 8006070:	ec45 4b11 	vmov	d1, r4, r5
 8006074:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80060e0 <scalbn+0xd8>
 8006078:	f000 f83c 	bl	80060f4 <copysign>
 800607c:	a318      	add	r3, pc, #96	; (adr r3, 80060e0 <scalbn+0xd8>)
 800607e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006082:	ec51 0b10 	vmov	r0, r1, d0
 8006086:	e7da      	b.n	800603e <scalbn+0x36>
 8006088:	2a00      	cmp	r2, #0
 800608a:	dd08      	ble.n	800609e <scalbn+0x96>
 800608c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006090:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006094:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006098:	ec45 4b10 	vmov	d0, r4, r5
 800609c:	bd70      	pop	{r4, r5, r6, pc}
 800609e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80060a2:	da0d      	bge.n	80060c0 <scalbn+0xb8>
 80060a4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80060a8:	429e      	cmp	r6, r3
 80060aa:	ec45 4b11 	vmov	d1, r4, r5
 80060ae:	dce1      	bgt.n	8006074 <scalbn+0x6c>
 80060b0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80060d8 <scalbn+0xd0>
 80060b4:	f000 f81e 	bl	80060f4 <copysign>
 80060b8:	a307      	add	r3, pc, #28	; (adr r3, 80060d8 <scalbn+0xd0>)
 80060ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060be:	e7e0      	b.n	8006082 <scalbn+0x7a>
 80060c0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80060c4:	3236      	adds	r2, #54	; 0x36
 80060c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80060ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80060ce:	4620      	mov	r0, r4
 80060d0:	4629      	mov	r1, r5
 80060d2:	2200      	movs	r2, #0
 80060d4:	4b06      	ldr	r3, [pc, #24]	; (80060f0 <scalbn+0xe8>)
 80060d6:	e7b2      	b.n	800603e <scalbn+0x36>
 80060d8:	c2f8f359 	.word	0xc2f8f359
 80060dc:	01a56e1f 	.word	0x01a56e1f
 80060e0:	8800759c 	.word	0x8800759c
 80060e4:	7e37e43c 	.word	0x7e37e43c
 80060e8:	43500000 	.word	0x43500000
 80060ec:	ffff3cb0 	.word	0xffff3cb0
 80060f0:	3c900000 	.word	0x3c900000

080060f4 <copysign>:
 80060f4:	ec51 0b10 	vmov	r0, r1, d0
 80060f8:	ee11 0a90 	vmov	r0, s3
 80060fc:	ee10 2a10 	vmov	r2, s0
 8006100:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006104:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006108:	ea41 0300 	orr.w	r3, r1, r0
 800610c:	ec43 2b10 	vmov	d0, r2, r3
 8006110:	4770      	bx	lr
	...

08006114 <_init>:
 8006114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006116:	bf00      	nop
 8006118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800611a:	bc08      	pop	{r3}
 800611c:	469e      	mov	lr, r3
 800611e:	4770      	bx	lr

08006120 <_fini>:
 8006120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006122:	bf00      	nop
 8006124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006126:	bc08      	pop	{r3}
 8006128:	469e      	mov	lr, r3
 800612a:	4770      	bx	lr
