
CandC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007974  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  08007b08  08007b08  00017b08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fc0  08007fc0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007fc0  08007fc0  00017fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fc8  08007fc8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fc8  08007fc8  00017fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fcc  08007fcc  00017fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007fd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  200001e0  080081b0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  080081b0  000203a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009711  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a55  00000000  00000000  00029921  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007b0  00000000  00000000  0002b378  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006d8  00000000  00000000  0002bb28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021222  00000000  00000000  0002c200  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006ffb  00000000  00000000  0004d422  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c36b8  00000000  00000000  0005441d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00117ad5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c30  00000000  00000000  00117b50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007aec 	.word	0x08007aec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08007aec 	.word	0x08007aec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <bit_reverse>:
	return j;
}



int bit_reverse(int N, int l) {
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
	int ans = 0, i;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
	for (i = 0; i<l; ++i)
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	e014      	b.n	8000ee6 <bit_reverse+0x3e>
		if (N & (1 << i))    ans |= (1 << l - 1 - i);
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	fa42 f303 	asr.w	r3, r2, r3
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d009      	beq.n	8000ee0 <bit_reverse+0x38>
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	1e5a      	subs	r2, r3, #1
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	60fb      	str	r3, [r7, #12]
	for (i = 0; i<l; ++i)
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	dbe6      	blt.n	8000ebc <bit_reverse+0x14>
	return(ans);
 8000eee:	68fb      	ldr	r3, [r7, #12]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	0000      	movs	r0, r0
	...

08000f00 <FFTcore>:


void FFTcore(int Nr, int Nc, double* Ar, int Ldr, double* Ai, int Ldi, char tran, char flag) {
 8000f00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f04:	b0a8      	sub	sp, #160	; 0xa0
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	60f8      	str	r0, [r7, #12]
 8000f0a:	60b9      	str	r1, [r7, #8]
 8000f0c:	607a      	str	r2, [r7, #4]
 8000f0e:	603b      	str	r3, [r7, #0]

	int N, M, d, K = 0, k = 0, l = 1, L = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000f16:	2300      	movs	r3, #0
 8000f18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000f22:	2300      	movs	r3, #0
 8000f24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	double Wr, Wi, C1r, C1i, C2r, C2i, Dr, Di;

	if (tran == 't') {
 8000f28:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 8000f2c:	2b74      	cmp	r3, #116	; 0x74
 8000f2e:	d10a      	bne.n	8000f46 <FFTcore+0x46>
		d = N = Nc;
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000f36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000f3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		M = Nr;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000f44:	e011      	b.n	8000f6a <FFTcore+0x6a>
	}
	else if (tran == 'n') {
 8000f46:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 8000f4a:	2b6e      	cmp	r3, #110	; 0x6e
 8000f4c:	d10a      	bne.n	8000f64 <FFTcore+0x64>
		d = N = Nr;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000f54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000f58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		M = Nc;
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000f62:	e002      	b.n	8000f6a <FFTcore+0x6a>
	}
	else {
		//("tran can be either 'n' or 't'\n");
		exit(1);
 8000f64:	2001      	movs	r0, #1
 8000f66:	f003 fad5 	bl	8004514 <exit>
	}

	do
	{
		d /= 2;
 8000f6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000f6e:	0fda      	lsrs	r2, r3, #31
 8000f70:	4413      	add	r3, r2
 8000f72:	105b      	asrs	r3, r3, #1
 8000f74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		K = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		while (K<N) {
 8000f7e:	e1cc      	b.n	800131a <FFTcore+0x41a>
			k = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			while (k<d) {
 8000f86:	e1b9      	b.n	80012fc <FFTcore+0x3fc>
				int it, Ind1 = K + k, Ind2 = K + k + d;
 8000f88:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000f8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000f90:	4413      	add	r3, r2
 8000f92:	667b      	str	r3, [r7, #100]	; 0x64
 8000f94:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000f98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000f9c:	4413      	add	r3, r2
 8000f9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000fa2:	4413      	add	r3, r2
 8000fa4:	663b      	str	r3, [r7, #96]	; 0x60
				Wr = cos(2 * M_PI*k*l / N);
 8000fa6:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000faa:	f7ff fabb 	bl	8000524 <__aeabi_i2d>
 8000fae:	f20f 5318 	addw	r3, pc, #1304	; 0x518
 8000fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb6:	f7ff fb1f 	bl	80005f8 <__aeabi_dmul>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	4690      	mov	r8, r2
 8000fc0:	4699      	mov	r9, r3
 8000fc2:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8000fc6:	f7ff faad 	bl	8000524 <__aeabi_i2d>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	460b      	mov	r3, r1
 8000fce:	4640      	mov	r0, r8
 8000fd0:	4649      	mov	r1, r9
 8000fd2:	f7ff fb11 	bl	80005f8 <__aeabi_dmul>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4690      	mov	r8, r2
 8000fdc:	4699      	mov	r9, r3
 8000fde:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8000fe2:	f7ff fa9f 	bl	8000524 <__aeabi_i2d>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4640      	mov	r0, r8
 8000fec:	4649      	mov	r1, r9
 8000fee:	f7ff fc2d 	bl	800084c <__aeabi_ddiv>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	ec43 2b17 	vmov	d7, r2, r3
 8000ffa:	eeb0 0a47 	vmov.f32	s0, s14
 8000ffe:	eef0 0a67 	vmov.f32	s1, s15
 8001002:	f005 fc0d 	bl	8006820 <cos>
 8001006:	ed87 0b16 	vstr	d0, [r7, #88]	; 0x58
				Wi = (flag == 'f') ? -sin(2 * M_PI*k*l / N) : sin(2 * M_PI*k*l / N);
 800100a:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800100e:	2b66      	cmp	r3, #102	; 0x66
 8001010:	d135      	bne.n	800107e <FFTcore+0x17e>
 8001012:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001016:	f7ff fa85 	bl	8000524 <__aeabi_i2d>
 800101a:	f20f 43ac 	addw	r3, pc, #1196	; 0x4ac
 800101e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001022:	f7ff fae9 	bl	80005f8 <__aeabi_dmul>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	4690      	mov	r8, r2
 800102c:	4699      	mov	r9, r3
 800102e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001032:	f7ff fa77 	bl	8000524 <__aeabi_i2d>
 8001036:	4602      	mov	r2, r0
 8001038:	460b      	mov	r3, r1
 800103a:	4640      	mov	r0, r8
 800103c:	4649      	mov	r1, r9
 800103e:	f7ff fadb 	bl	80005f8 <__aeabi_dmul>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	4690      	mov	r8, r2
 8001048:	4699      	mov	r9, r3
 800104a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800104e:	f7ff fa69 	bl	8000524 <__aeabi_i2d>
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
 8001056:	4640      	mov	r0, r8
 8001058:	4649      	mov	r1, r9
 800105a:	f7ff fbf7 	bl	800084c <__aeabi_ddiv>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	ec43 2b17 	vmov	d7, r2, r3
 8001066:	eeb0 0a47 	vmov.f32	s0, s14
 800106a:	eef0 0a67 	vmov.f32	s1, s15
 800106e:	f005 fc1b 	bl	80068a8 <sin>
 8001072:	ec53 2b10 	vmov	r2, r3, d0
 8001076:	4614      	mov	r4, r2
 8001078:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800107c:	e031      	b.n	80010e2 <FFTcore+0x1e2>
 800107e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001082:	f7ff fa4f 	bl	8000524 <__aeabi_i2d>
 8001086:	f20f 4340 	addw	r3, pc, #1088	; 0x440
 800108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108e:	f7ff fab3 	bl	80005f8 <__aeabi_dmul>
 8001092:	4603      	mov	r3, r0
 8001094:	460c      	mov	r4, r1
 8001096:	4625      	mov	r5, r4
 8001098:	461c      	mov	r4, r3
 800109a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800109e:	f7ff fa41 	bl	8000524 <__aeabi_i2d>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	4620      	mov	r0, r4
 80010a8:	4629      	mov	r1, r5
 80010aa:	f7ff faa5 	bl	80005f8 <__aeabi_dmul>
 80010ae:	4603      	mov	r3, r0
 80010b0:	460c      	mov	r4, r1
 80010b2:	4625      	mov	r5, r4
 80010b4:	461c      	mov	r4, r3
 80010b6:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80010ba:	f7ff fa33 	bl	8000524 <__aeabi_i2d>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	4620      	mov	r0, r4
 80010c4:	4629      	mov	r1, r5
 80010c6:	f7ff fbc1 	bl	800084c <__aeabi_ddiv>
 80010ca:	4603      	mov	r3, r0
 80010cc:	460c      	mov	r4, r1
 80010ce:	ec44 3b17 	vmov	d7, r3, r4
 80010d2:	eeb0 0a47 	vmov.f32	s0, s14
 80010d6:	eef0 0a67 	vmov.f32	s1, s15
 80010da:	f005 fbe5 	bl	80068a8 <sin>
 80010de:	ec55 4b10 	vmov	r4, r5, d0
 80010e2:	e9c7 4514 	strd	r4, r5, [r7, #80]	; 0x50

				for (it = 0; it<M; ++it) {
 80010e6:	2300      	movs	r3, #0
 80010e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80010ec:	e0fa      	b.n	80012e4 <FFTcore+0x3e4>
					int rind1 = (tran == 't') ? Ind1 * Ldr + it : Ind1 + Ldr * it;
 80010ee:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 80010f2:	2b74      	cmp	r3, #116	; 0x74
 80010f4:	d107      	bne.n	8001106 <FFTcore+0x206>
 80010f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	fb02 f203 	mul.w	r2, r2, r3
 80010fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001102:	4413      	add	r3, r2
 8001104:	e006      	b.n	8001114 <FFTcore+0x214>
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800110c:	fb02 f203 	mul.w	r2, r2, r3
 8001110:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001112:	4413      	add	r3, r2
 8001114:	64fb      	str	r3, [r7, #76]	; 0x4c
					int iind1 = (tran == 't') ? Ind1 * Ldi + it : Ind1 + Ldi * it;
 8001116:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 800111a:	2b74      	cmp	r3, #116	; 0x74
 800111c:	d108      	bne.n	8001130 <FFTcore+0x230>
 800111e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001120:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001124:	fb02 f203 	mul.w	r2, r2, r3
 8001128:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800112c:	4413      	add	r3, r2
 800112e:	e007      	b.n	8001140 <FFTcore+0x240>
 8001130:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001134:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001138:	fb02 f203 	mul.w	r2, r2, r3
 800113c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800113e:	4413      	add	r3, r2
 8001140:	64bb      	str	r3, [r7, #72]	; 0x48
					int rind2 = (tran == 't') ? Ind2 * Ldr + it : Ind2 + Ldr * it;
 8001142:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 8001146:	2b74      	cmp	r3, #116	; 0x74
 8001148:	d107      	bne.n	800115a <FFTcore+0x25a>
 800114a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	fb02 f203 	mul.w	r2, r2, r3
 8001152:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001156:	4413      	add	r3, r2
 8001158:	e006      	b.n	8001168 <FFTcore+0x268>
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001160:	fb02 f203 	mul.w	r2, r2, r3
 8001164:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001166:	4413      	add	r3, r2
 8001168:	647b      	str	r3, [r7, #68]	; 0x44
					int iind2 = (tran == 't') ? Ind2 * Ldi + it : Ind2 + Ldi * it;
 800116a:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 800116e:	2b74      	cmp	r3, #116	; 0x74
 8001170:	d108      	bne.n	8001184 <FFTcore+0x284>
 8001172:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001174:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001178:	fb02 f203 	mul.w	r2, r2, r3
 800117c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001180:	4413      	add	r3, r2
 8001182:	e007      	b.n	8001194 <FFTcore+0x294>
 8001184:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001188:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800118c:	fb02 f203 	mul.w	r2, r2, r3
 8001190:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001192:	4413      	add	r3, r2
 8001194:	643b      	str	r3, [r7, #64]	; 0x40

					C1r = Ar[rind1] + Ar[rind2];
 8001196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ae:	f7ff f86d 	bl	800028c <__adddf3>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
					C1i = Ai[iind1] + Ai[iind2];
 80011ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80011c2:	4413      	add	r3, r2
 80011c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80011d0:	4413      	add	r3, r2
 80011d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d6:	f7ff f859 	bl	800028c <__adddf3>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
					Dr = Ar[rind1] - Ar[rind2];
 80011e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fa:	f7ff f845 	bl	8000288 <__aeabi_dsub>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
					Di = Ai[iind1] - Ai[iind2];
 8001206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800120e:	4413      	add	r3, r2
 8001210:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800121c:	4413      	add	r3, r2
 800121e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001222:	f7ff f831 	bl	8000288 <__aeabi_dsub>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	e9c7 2308 	strd	r2, r3, [r7, #32]
					C2r = Dr * Wr - Di * Wi;
 800122e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001232:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001236:	f7ff f9df 	bl	80005f8 <__aeabi_dmul>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	4690      	mov	r8, r2
 8001240:	4699      	mov	r9, r3
 8001242:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001246:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800124a:	f7ff f9d5 	bl	80005f8 <__aeabi_dmul>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4640      	mov	r0, r8
 8001254:	4649      	mov	r1, r9
 8001256:	f7ff f817 	bl	8000288 <__aeabi_dsub>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	e9c7 2306 	strd	r2, r3, [r7, #24]
					C2i = Dr * Wi + Di * Wr;
 8001262:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001266:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800126a:	f7ff f9c5 	bl	80005f8 <__aeabi_dmul>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4690      	mov	r8, r2
 8001274:	4699      	mov	r9, r3
 8001276:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800127a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800127e:	f7ff f9bb 	bl	80005f8 <__aeabi_dmul>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4640      	mov	r0, r8
 8001288:	4649      	mov	r1, r9
 800128a:	f7fe ffff 	bl	800028c <__adddf3>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	e9c7 2304 	strd	r2, r3, [r7, #16]
					Ar[rind1] = C1r;
 8001296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	18d1      	adds	r1, r2, r3
 800129e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80012a2:	e9c1 2300 	strd	r2, r3, [r1]
					Ai[iind1] = C1i;
 80012a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80012ae:	18d1      	adds	r1, r2, r3
 80012b0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80012b4:	e9c1 2300 	strd	r2, r3, [r1]
					Ar[rind2] = C2r;
 80012b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	18d1      	adds	r1, r2, r3
 80012c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012c4:	e9c1 2300 	strd	r2, r3, [r1]
					Ai[iind2] = C2i;
 80012c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80012d0:	18d1      	adds	r1, r2, r3
 80012d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012d6:	e9c1 2300 	strd	r2, r3, [r1]
				for (it = 0; it<M; ++it) {
 80012da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80012de:	3301      	adds	r3, #1
 80012e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80012e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80012e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80012ec:	429a      	cmp	r2, r3
 80012ee:	f6ff aefe 	blt.w	80010ee <FFTcore+0x1ee>
				}
				++k;
 80012f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012f6:	3301      	adds	r3, #1
 80012f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			while (k<d) {
 80012fc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001300:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001304:	429a      	cmp	r2, r3
 8001306:	f6ff ae3f 	blt.w	8000f88 <FFTcore+0x88>
			}
			K += 2 * d;
 800130a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001314:	4413      	add	r3, r2
 8001316:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		while (K<N) {
 800131a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800131e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001322:	429a      	cmp	r2, r3
 8001324:	f6ff ae2c 	blt.w	8000f80 <FFTcore+0x80>
		}
		l *= 2;
 8001328:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		++L;
 8001332:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001336:	3301      	adds	r3, #1
 8001338:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	} while (d>1);
 800133c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001340:	2b01      	cmp	r3, #1
 8001342:	f73f ae12 	bgt.w	8000f6a <FFTcore+0x6a>

	for (d = 0; d<N; ++d) {
 8001346:	2300      	movs	r3, #0
 8001348:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800134c:	e0af      	b.n	80014ae <FFTcore+0x5ae>
		k = bit_reverse(d, L);
 800134e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8001352:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8001356:	f7ff fda7 	bl	8000ea8 <bit_reverse>
 800135a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		if (d < k) {
 800135e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001362:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001366:	429a      	cmp	r2, r3
 8001368:	f280 809c 	bge.w	80014a4 <FFTcore+0x5a4>
			int it;
			for (it = 0; it<M; ++it) {
 800136c:	2300      	movs	r3, #0
 800136e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001370:	e092      	b.n	8001498 <FFTcore+0x598>
				int ind1 = (tran == 't') ? d * Ldr + it : d + Ldr * it;
 8001372:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 8001376:	2b74      	cmp	r3, #116	; 0x74
 8001378:	d107      	bne.n	800138a <FFTcore+0x48a>
 800137a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800137e:	683a      	ldr	r2, [r7, #0]
 8001380:	fb02 f203 	mul.w	r2, r2, r3
 8001384:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001386:	4413      	add	r3, r2
 8001388:	e006      	b.n	8001398 <FFTcore+0x498>
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800138e:	fb02 f203 	mul.w	r2, r2, r3
 8001392:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001396:	4413      	add	r3, r2
 8001398:	67bb      	str	r3, [r7, #120]	; 0x78
				int ind2 = (tran == 't') ? k * Ldr + it : k + Ldr * it;
 800139a:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 800139e:	2b74      	cmp	r3, #116	; 0x74
 80013a0:	d107      	bne.n	80013b2 <FFTcore+0x4b2>
 80013a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	fb02 f203 	mul.w	r2, r2, r3
 80013ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80013ae:	4413      	add	r3, r2
 80013b0:	e006      	b.n	80013c0 <FFTcore+0x4c0>
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80013b6:	fb02 f203 	mul.w	r2, r2, r3
 80013ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80013be:	4413      	add	r3, r2
 80013c0:	677b      	str	r3, [r7, #116]	; 0x74
				double temp = Ar[ind1];
 80013c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80013ce:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
				Ar[ind1] = Ar[ind2];
 80013d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80013dc:	00d2      	lsls	r2, r2, #3
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	440a      	add	r2, r1
 80013e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80013e6:	e9c2 3400 	strd	r3, r4, [r2]
				Ar[ind2] = temp;
 80013ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	441a      	add	r2, r3
 80013f2:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80013f6:	e9c2 3400 	strd	r3, r4, [r2]

				ind1 = (tran == 't') ? d * Ldi + it : d + Ldi * it;
 80013fa:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 80013fe:	2b74      	cmp	r3, #116	; 0x74
 8001400:	d108      	bne.n	8001414 <FFTcore+0x514>
 8001402:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001406:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800140a:	fb02 f203 	mul.w	r2, r2, r3
 800140e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001410:	4413      	add	r3, r2
 8001412:	e007      	b.n	8001424 <FFTcore+0x524>
 8001414:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001418:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800141a:	fb02 f203 	mul.w	r2, r2, r3
 800141e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001422:	4413      	add	r3, r2
 8001424:	67bb      	str	r3, [r7, #120]	; 0x78
				ind2 = (tran == 't') ? k * Ldi + it : k + Ldi * it;
 8001426:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 800142a:	2b74      	cmp	r3, #116	; 0x74
 800142c:	d108      	bne.n	8001440 <FFTcore+0x540>
 800142e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001432:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001436:	fb02 f203 	mul.w	r2, r2, r3
 800143a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800143c:	4413      	add	r3, r2
 800143e:	e007      	b.n	8001450 <FFTcore+0x550>
 8001440:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001444:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001446:	fb02 f203 	mul.w	r2, r2, r3
 800144a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800144e:	4413      	add	r3, r2
 8001450:	677b      	str	r3, [r7, #116]	; 0x74
				temp = Ai[ind1];
 8001452:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800145a:	4413      	add	r3, r2
 800145c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001460:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
				Ai[ind1] = Ai[ind2];
 8001464:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800146c:	4413      	add	r3, r2
 800146e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001470:	00d2      	lsls	r2, r2, #3
 8001472:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001476:	440a      	add	r2, r1
 8001478:	e9d3 3400 	ldrd	r3, r4, [r3]
 800147c:	e9c2 3400 	strd	r3, r4, [r2]
				Ai[ind2] = temp;
 8001480:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001488:	441a      	add	r2, r3
 800148a:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800148e:	e9c2 3400 	strd	r3, r4, [r2]
			for (it = 0; it<M; ++it) {
 8001492:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001494:	3301      	adds	r3, #1
 8001496:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001498:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800149a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800149e:	429a      	cmp	r2, r3
 80014a0:	f6ff af67 	blt.w	8001372 <FFTcore+0x472>
	for (d = 0; d<N; ++d) {
 80014a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80014a8:	3301      	adds	r3, #1
 80014aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80014ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80014b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80014b6:	429a      	cmp	r2, r3
 80014b8:	f6ff af49 	blt.w	800134e <FFTcore+0x44e>
			}
		}
	}
}
 80014bc:	bf00      	nop
 80014be:	37a0      	adds	r7, #160	; 0xa0
 80014c0:	46bd      	mov	sp, r7
 80014c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014c6:	bf00      	nop
 80014c8:	54442d18 	.word	0x54442d18
 80014cc:	401921fb 	.word	0x401921fb

080014d0 <DCT2>:

void DCT2(int N, double* x) {
 80014d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014d4:	b092      	sub	sp, #72	; 0x48
 80014d6:	af04      	add	r7, sp, #16
 80014d8:	6078      	str	r0, [r7, #4]
 80014da:	6039      	str	r1, [r7, #0]
	double* Ar = (double*)malloc(4 * N * sizeof(double));
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	015b      	lsls	r3, r3, #5
 80014e0:	4618      	mov	r0, r3
 80014e2:	f003 f84f 	bl	8004584 <malloc>
 80014e6:	4603      	mov	r3, r0
 80014e8:	633b      	str	r3, [r7, #48]	; 0x30
	//assert(Ar != NULL);
	double* Ai = Ar + 2 * N;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	011b      	lsls	r3, r3, #4
 80014ee:	461a      	mov	r2, r3
 80014f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014f2:	4413      	add	r3, r2
 80014f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	memset(Ar, 0, 4 * N * sizeof(double));
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	015b      	lsls	r3, r3, #5
 80014fa:	461a      	mov	r2, r3
 80014fc:	2100      	movs	r1, #0
 80014fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001500:	f003 f85b 	bl	80045ba <memset>
	int n;
	for (n = 0; n<N; ++n) Ar[n] = x[n];
 8001504:	2300      	movs	r3, #0
 8001506:	637b      	str	r3, [r7, #52]	; 0x34
 8001508:	e00e      	b.n	8001528 <DCT2+0x58>
 800150a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	4413      	add	r3, r2
 8001512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001514:	00d2      	lsls	r2, r2, #3
 8001516:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001518:	440a      	add	r2, r1
 800151a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800151e:	e9c2 3400 	strd	r3, r4, [r2]
 8001522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001524:	3301      	adds	r3, #1
 8001526:	637b      	str	r3, [r7, #52]	; 0x34
 8001528:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	429a      	cmp	r2, r3
 800152e:	dbec      	blt.n	800150a <DCT2+0x3a>
	for (n = N; n<2 * N; ++n) Ar[n] = x[2 * N - 1 - n];
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	637b      	str	r3, [r7, #52]	; 0x34
 8001534:	e012      	b.n	800155c <DCT2+0x8c>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	1e5a      	subs	r2, r3, #1
 800153c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	4413      	add	r3, r2
 8001546:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001548:	00d2      	lsls	r2, r2, #3
 800154a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800154c:	440a      	add	r2, r1
 800154e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001552:	e9c2 3400 	strd	r3, r4, [r2]
 8001556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001558:	3301      	adds	r3, #1
 800155a:	637b      	str	r3, [r7, #52]	; 0x34
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001562:	429a      	cmp	r2, r3
 8001564:	dbe7      	blt.n	8001536 <DCT2+0x66>
	FFTcore(2 * N, 1, Ar, 2 * n, Ai, 2 * n, 'n', 'f');
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	0058      	lsls	r0, r3, #1
 800156a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800156c:	0059      	lsls	r1, r3, #1
 800156e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	2266      	movs	r2, #102	; 0x66
 8001574:	9203      	str	r2, [sp, #12]
 8001576:	226e      	movs	r2, #110	; 0x6e
 8001578:	9202      	str	r2, [sp, #8]
 800157a:	9301      	str	r3, [sp, #4]
 800157c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	460b      	mov	r3, r1
 8001582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001584:	2101      	movs	r1, #1
 8001586:	f7ff fcbb 	bl	8000f00 <FFTcore>
	double g = M_PI / (2 * N), p = sqrt(2.0 / N), po = sqrt(1.0 / N);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe ffc8 	bl	8000524 <__aeabi_i2d>
 8001594:	4603      	mov	r3, r0
 8001596:	460c      	mov	r4, r1
 8001598:	461a      	mov	r2, r3
 800159a:	4623      	mov	r3, r4
 800159c:	a161      	add	r1, pc, #388	; (adr r1, 8001724 <DCT2+0x254>)
 800159e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015a2:	f7ff f953 	bl	800084c <__aeabi_ddiv>
 80015a6:	4603      	mov	r3, r0
 80015a8:	460c      	mov	r4, r1
 80015aa:	e9c7 3408 	strd	r3, r4, [r7, #32]
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7fe ffb8 	bl	8000524 <__aeabi_i2d>
 80015b4:	4603      	mov	r3, r0
 80015b6:	460c      	mov	r4, r1
 80015b8:	461a      	mov	r2, r3
 80015ba:	4623      	mov	r3, r4
 80015bc:	f04f 0000 	mov.w	r0, #0
 80015c0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80015c4:	f7ff f942 	bl	800084c <__aeabi_ddiv>
 80015c8:	4603      	mov	r3, r0
 80015ca:	460c      	mov	r4, r1
 80015cc:	ec44 3b17 	vmov	d7, r3, r4
 80015d0:	eeb0 0a47 	vmov.f32	s0, s14
 80015d4:	eef0 0a67 	vmov.f32	s1, s15
 80015d8:	f005 f9ae 	bl	8006938 <sqrt>
 80015dc:	ed87 0b06 	vstr	d0, [r7, #24]
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7fe ff9f 	bl	8000524 <__aeabi_i2d>
 80015e6:	4603      	mov	r3, r0
 80015e8:	460c      	mov	r4, r1
 80015ea:	461a      	mov	r2, r3
 80015ec:	4623      	mov	r3, r4
 80015ee:	f04f 0000 	mov.w	r0, #0
 80015f2:	494b      	ldr	r1, [pc, #300]	; (8001720 <DCT2+0x250>)
 80015f4:	f7ff f92a 	bl	800084c <__aeabi_ddiv>
 80015f8:	4603      	mov	r3, r0
 80015fa:	460c      	mov	r4, r1
 80015fc:	ec44 3b17 	vmov	d7, r3, r4
 8001600:	eeb0 0a47 	vmov.f32	s0, s14
 8001604:	eef0 0a67 	vmov.f32	s1, s15
 8001608:	f005 f996 	bl	8006938 <sqrt>
 800160c:	ed87 0b04 	vstr	d0, [r7, #16]
	for (n = 0; n<N; ++n) {
 8001610:	2300      	movs	r3, #0
 8001612:	637b      	str	r3, [r7, #52]	; 0x34
 8001614:	e076      	b.n	8001704 <DCT2+0x234>
		double z = (Ar[n] * cos(n*g) + Ai[n] * sin(n*g)) / 2;
 8001616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800161c:	4413      	add	r3, r2
 800161e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001622:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001624:	f7fe ff7e 	bl	8000524 <__aeabi_i2d>
 8001628:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800162c:	f7fe ffe4 	bl	80005f8 <__aeabi_dmul>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	ec43 2b17 	vmov	d7, r2, r3
 8001638:	eeb0 0a47 	vmov.f32	s0, s14
 800163c:	eef0 0a67 	vmov.f32	s1, s15
 8001640:	f005 f8ee 	bl	8006820 <cos>
 8001644:	ec53 2b10 	vmov	r2, r3, d0
 8001648:	4620      	mov	r0, r4
 800164a:	4629      	mov	r1, r5
 800164c:	f7fe ffd4 	bl	80005f8 <__aeabi_dmul>
 8001650:	4603      	mov	r3, r0
 8001652:	460c      	mov	r4, r1
 8001654:	4698      	mov	r8, r3
 8001656:	46a1      	mov	r9, r4
 8001658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800165e:	4413      	add	r3, r2
 8001660:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001664:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001666:	f7fe ff5d 	bl	8000524 <__aeabi_i2d>
 800166a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800166e:	f7fe ffc3 	bl	80005f8 <__aeabi_dmul>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	ec43 2b17 	vmov	d7, r2, r3
 800167a:	eeb0 0a47 	vmov.f32	s0, s14
 800167e:	eef0 0a67 	vmov.f32	s1, s15
 8001682:	f005 f911 	bl	80068a8 <sin>
 8001686:	ec53 2b10 	vmov	r2, r3, d0
 800168a:	4620      	mov	r0, r4
 800168c:	4629      	mov	r1, r5
 800168e:	f7fe ffb3 	bl	80005f8 <__aeabi_dmul>
 8001692:	4603      	mov	r3, r0
 8001694:	460c      	mov	r4, r1
 8001696:	461a      	mov	r2, r3
 8001698:	4623      	mov	r3, r4
 800169a:	4640      	mov	r0, r8
 800169c:	4649      	mov	r1, r9
 800169e:	f7fe fdf5 	bl	800028c <__adddf3>
 80016a2:	4603      	mov	r3, r0
 80016a4:	460c      	mov	r4, r1
 80016a6:	4618      	mov	r0, r3
 80016a8:	4621      	mov	r1, r4
 80016aa:	f04f 0200 	mov.w	r2, #0
 80016ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016b2:	f7ff f8cb 	bl	800084c <__aeabi_ddiv>
 80016b6:	4603      	mov	r3, r0
 80016b8:	460c      	mov	r4, r1
 80016ba:	e9c7 3402 	strd	r3, r4, [r7, #8]
		if (n == 0) x[n] = po * z;
 80016be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d10e      	bne.n	80016e2 <DCT2+0x212>
 80016c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	18d5      	adds	r5, r2, r3
 80016cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016d4:	f7fe ff90 	bl	80005f8 <__aeabi_dmul>
 80016d8:	4603      	mov	r3, r0
 80016da:	460c      	mov	r4, r1
 80016dc:	e9c5 3400 	strd	r3, r4, [r5]
 80016e0:	e00d      	b.n	80016fe <DCT2+0x22e>
		else     x[n] = p * z;
 80016e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	18d5      	adds	r5, r2, r3
 80016ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016f2:	f7fe ff81 	bl	80005f8 <__aeabi_dmul>
 80016f6:	4603      	mov	r3, r0
 80016f8:	460c      	mov	r4, r1
 80016fa:	e9c5 3400 	strd	r3, r4, [r5]
	for (n = 0; n<N; ++n) {
 80016fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001700:	3301      	adds	r3, #1
 8001702:	637b      	str	r3, [r7, #52]	; 0x34
 8001704:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	429a      	cmp	r2, r3
 800170a:	db84      	blt.n	8001616 <DCT2+0x146>
	}
	free(Ar);
 800170c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800170e:	f002 ff41 	bl	8004594 <free>
}
 8001712:	bf00      	nop
 8001714:	3738      	adds	r7, #56	; 0x38
 8001716:	46bd      	mov	sp, r7
 8001718:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800171c:	f3af 8000 	nop.w
 8001720:	3ff00000 	.word	0x3ff00000
 8001724:	54442d18 	.word	0x54442d18
 8001728:	400921fb 	.word	0x400921fb

0800172c <dct_test>:


void dct_test(double * z, unsigned long * data, int m) {
 800172c:	b5b0      	push	{r4, r5, r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]

	int i;
	for (i = 0; i < m; ++i) z[i] =  data[i];
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	e012      	b.n	8001764 <dct_test+0x38>
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	68ba      	ldr	r2, [r7, #8]
 8001744:	4413      	add	r3, r2
 8001746:	6819      	ldr	r1, [r3, #0]
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	68fa      	ldr	r2, [r7, #12]
 800174e:	18d5      	adds	r5, r2, r3
 8001750:	4608      	mov	r0, r1
 8001752:	f7fe fed7 	bl	8000504 <__aeabi_ui2d>
 8001756:	4603      	mov	r3, r0
 8001758:	460c      	mov	r4, r1
 800175a:	e9c5 3400 	strd	r3, r4, [r5]
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	3301      	adds	r3, #1
 8001762:	617b      	str	r3, [r7, #20]
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	429a      	cmp	r2, r3
 800176a:	dbe8      	blt.n	800173e <dct_test+0x12>

	DCT2(m, z);
 800176c:	68f9      	ldr	r1, [r7, #12]
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff feae 	bl	80014d0 <DCT2>
}
 8001774:	bf00      	nop
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bdb0      	pop	{r4, r5, r7, pc}

0800177c <parse_buffer>:
/* USER CODE BEGIN 0 */
unsigned char RX_data[EPOCH_LENGTH_SAMPLES * CHARS_PER_SAMPLE] = {0};
long parsed_epoch_data[EPOCH_LENGTH_SAMPLES] = {0};
Linear_SVM_Model* SVM;

int parse_buffer(void) {
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
	char delim[] = ",";
 8001782:	232c      	movs	r3, #44	; 0x2c
 8001784:	803b      	strh	r3, [r7, #0]
	char *ptr = strtok((char*)RX_data, delim);
 8001786:	463b      	mov	r3, r7
 8001788:	4619      	mov	r1, r3
 800178a:	4810      	ldr	r0, [pc, #64]	; (80017cc <parse_buffer+0x50>)
 800178c:	f003 fc66 	bl	800505c <strtok>
 8001790:	60f8      	str	r0, [r7, #12]
	int sample_number = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	60bb      	str	r3, [r7, #8]
	while(ptr != NULL)
 8001796:	e011      	b.n	80017bc <parse_buffer+0x40>
	{
		long value = atol(ptr);
 8001798:	68f8      	ldr	r0, [r7, #12]
 800179a:	f002 feb1 	bl	8004500 <atol>
 800179e:	6078      	str	r0, [r7, #4]
		parsed_epoch_data[sample_number] = value;
 80017a0:	490b      	ldr	r1, [pc, #44]	; (80017d0 <parse_buffer+0x54>)
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		sample_number++;
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	3301      	adds	r3, #1
 80017ae:	60bb      	str	r3, [r7, #8]
		ptr = strtok(NULL, delim);
 80017b0:	463b      	mov	r3, r7
 80017b2:	4619      	mov	r1, r3
 80017b4:	2000      	movs	r0, #0
 80017b6:	f003 fc51 	bl	800505c <strtok>
 80017ba:	60f8      	str	r0, [r7, #12]
	while(ptr != NULL)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1ea      	bne.n	8001798 <parse_buffer+0x1c>
	}
	return sample_number;
 80017c2:	68bb      	ldr	r3, [r7, #8]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	200001fc 	.word	0x200001fc
 80017d0:	200002ac 	.word	0x200002ac

080017d4 <process_sample>:

void process_sample(void) {
 80017d4:	b5b0      	push	{r4, r5, r7, lr}
 80017d6:	b08a      	sub	sp, #40	; 0x28
 80017d8:	af02      	add	r7, sp, #8
 80017da:	466b      	mov	r3, sp
 80017dc:	461d      	mov	r5, r3
    parse_buffer();
 80017de:	f7ff ffcd 	bl	800177c <parse_buffer>
	// Process this epoch
	int number_of_samples = sizeof(parsed_epoch_data) / sizeof(long);
 80017e2:	2310      	movs	r3, #16
 80017e4:	61bb      	str	r3, [r7, #24]
	double coeffs[number_of_samples];
 80017e6:	69b8      	ldr	r0, [r7, #24]
 80017e8:	1e43      	subs	r3, r0, #1
 80017ea:	617b      	str	r3, [r7, #20]
 80017ec:	4603      	mov	r3, r0
 80017ee:	4619      	mov	r1, r3
 80017f0:	f04f 0200 	mov.w	r2, #0
 80017f4:	f04f 0300 	mov.w	r3, #0
 80017f8:	f04f 0400 	mov.w	r4, #0
 80017fc:	0194      	lsls	r4, r2, #6
 80017fe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001802:	018b      	lsls	r3, r1, #6
 8001804:	4603      	mov	r3, r0
 8001806:	4619      	mov	r1, r3
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	f04f 0300 	mov.w	r3, #0
 8001810:	f04f 0400 	mov.w	r4, #0
 8001814:	0194      	lsls	r4, r2, #6
 8001816:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800181a:	018b      	lsls	r3, r1, #6
 800181c:	4603      	mov	r3, r0
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	3307      	adds	r3, #7
 8001822:	3307      	adds	r3, #7
 8001824:	08db      	lsrs	r3, r3, #3
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	ebad 0d03 	sub.w	sp, sp, r3
 800182c:	ab02      	add	r3, sp, #8
 800182e:	3307      	adds	r3, #7
 8001830:	08db      	lsrs	r3, r3, #3
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	613b      	str	r3, [r7, #16]
	dct_test(coeffs, (unsigned long *)parsed_epoch_data, number_of_samples);
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	491a      	ldr	r1, [pc, #104]	; (80018a4 <process_sample+0xd0>)
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff75 	bl	800172c <dct_test>
#ifdef PRINTING_COEFFS
	//This is just printing
	for (int i = 0; i < number_of_samples; i++) {
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
 8001846:	e023      	b.n	8001890 <process_sample+0xbc>
		char data_string[CHARS_PER_SAMPLE] = {0};
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	f8c3 2007 	str.w	r2, [r3, #7]
		snprintf(data_string,  CHARS_PER_SAMPLE, "%010lf", coeffs[i]);
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	4413      	add	r3, r2
 800185c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001860:	1d38      	adds	r0, r7, #4
 8001862:	e9cd 3400 	strd	r3, r4, [sp]
 8001866:	4a10      	ldr	r2, [pc, #64]	; (80018a8 <process_sample+0xd4>)
 8001868:	210b      	movs	r1, #11
 800186a:	f003 fbc3 	bl	8004ff4 <sniprintf>
		HAL_UART_Transmit(&huart4, (unsigned char *)data_string, CHARS_PER_SAMPLE, 0xFFFF);
 800186e:	1d39      	adds	r1, r7, #4
 8001870:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001874:	220b      	movs	r2, #11
 8001876:	480d      	ldr	r0, [pc, #52]	; (80018ac <process_sample+0xd8>)
 8001878:	f001 ff57 	bl	800372a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart4, (unsigned char *)"\n\r", 3, 0xFFFF);
 800187c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001880:	2203      	movs	r2, #3
 8001882:	490b      	ldr	r1, [pc, #44]	; (80018b0 <process_sample+0xdc>)
 8001884:	4809      	ldr	r0, [pc, #36]	; (80018ac <process_sample+0xd8>)
 8001886:	f001 ff50 	bl	800372a <HAL_UART_Transmit>
	for (int i = 0; i < number_of_samples; i++) {
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3301      	adds	r3, #1
 800188e:	61fb      	str	r3, [r7, #28]
 8001890:	69fa      	ldr	r2, [r7, #28]
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	429a      	cmp	r2, r3
 8001896:	dbd7      	blt.n	8001848 <process_sample+0x74>
 8001898:	46ad      	mov	sp, r5
	}
#endif

}
 800189a:	bf00      	nop
 800189c:	3720      	adds	r7, #32
 800189e:	46bd      	mov	sp, r7
 80018a0:	bdb0      	pop	{r4, r5, r7, pc}
 80018a2:	bf00      	nop
 80018a4:	200002ac 	.word	0x200002ac
 80018a8:	08007b08 	.word	0x08007b08
 80018ac:	2000035c 	.word	0x2000035c
 80018b0:	08007b10 	.word	0x08007b10

080018b4 <print_model>:

#ifdef PRINTING_MODEL
void print_model(Linear_SVM_Model* model) {
 80018b4:	b590      	push	{r4, r7, lr}
 80018b6:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	6018      	str	r0, [r3, #0]
	if (model->complete) {
 80018c0:	1d3b      	adds	r3, r7, #4
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f000 80d9 	beq.w	8001a80 <print_model+0x1cc>
		char weight_str[255] = {0};
 80018ce:	f107 030c 	add.w	r3, r7, #12
 80018d2:	4618      	mov	r0, r3
 80018d4:	23ff      	movs	r3, #255	; 0xff
 80018d6:	461a      	mov	r2, r3
 80018d8:	2100      	movs	r1, #0
 80018da:	f002 fe6e 	bl	80045ba <memset>
		HAL_UART_Transmit(&huart4, (unsigned char *)"Weights\n\r", 10, 0xFFFF);
 80018de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018e2:	220a      	movs	r2, #10
 80018e4:	4969      	ldr	r1, [pc, #420]	; (8001a8c <print_model+0x1d8>)
 80018e6:	486a      	ldr	r0, [pc, #424]	; (8001a90 <print_model+0x1dc>)
 80018e8:	f001 ff1f 	bl	800372a <HAL_UART_Transmit>
		for (int i = 0; i < EPOCH_LENGTH_SAMPLES; i++) {
 80018ec:	2300      	movs	r3, #0
 80018ee:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 80018f2:	e02d      	b.n	8001950 <print_model+0x9c>
			snprintf(weight_str, 11, "%010ld", (long)(model->weight_vector[i]*1000));
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	4413      	add	r3, r2
 8001900:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	4b62      	ldr	r3, [pc, #392]	; (8001a94 <print_model+0x1e0>)
 800190a:	f7fe fe75 	bl	80005f8 <__aeabi_dmul>
 800190e:	4603      	mov	r3, r0
 8001910:	460c      	mov	r4, r1
 8001912:	4618      	mov	r0, r3
 8001914:	4621      	mov	r1, r4
 8001916:	f7ff f91f 	bl	8000b58 <__aeabi_d2iz>
 800191a:	4603      	mov	r3, r0
 800191c:	f107 000c 	add.w	r0, r7, #12
 8001920:	4a5d      	ldr	r2, [pc, #372]	; (8001a98 <print_model+0x1e4>)
 8001922:	210b      	movs	r1, #11
 8001924:	f003 fb66 	bl	8004ff4 <sniprintf>
			HAL_UART_Transmit(&huart4, (unsigned char *)weight_str, 11, 0xFFFF);
 8001928:	f107 010c 	add.w	r1, r7, #12
 800192c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001930:	220b      	movs	r2, #11
 8001932:	4857      	ldr	r0, [pc, #348]	; (8001a90 <print_model+0x1dc>)
 8001934:	f001 fef9 	bl	800372a <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart4, (unsigned char *)"\r\n", 3, 0xFFFF);
 8001938:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800193c:	2203      	movs	r2, #3
 800193e:	4957      	ldr	r1, [pc, #348]	; (8001a9c <print_model+0x1e8>)
 8001940:	4853      	ldr	r0, [pc, #332]	; (8001a90 <print_model+0x1dc>)
 8001942:	f001 fef2 	bl	800372a <HAL_UART_Transmit>
		for (int i = 0; i < EPOCH_LENGTH_SAMPLES; i++) {
 8001946:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 800194a:	3301      	adds	r3, #1
 800194c:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8001950:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001954:	2b0f      	cmp	r3, #15
 8001956:	ddcd      	ble.n	80018f4 <print_model+0x40>
		}

		char scale_str[255] = {0};
 8001958:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800195c:	4618      	mov	r0, r3
 800195e:	23ff      	movs	r3, #255	; 0xff
 8001960:	461a      	mov	r2, r3
 8001962:	2100      	movs	r1, #0
 8001964:	f002 fe29 	bl	80045ba <memset>
		char offset_str[255] = {0};
 8001968:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 800196c:	4618      	mov	r0, r3
 800196e:	23ff      	movs	r3, #255	; 0xff
 8001970:	461a      	mov	r2, r3
 8001972:	2100      	movs	r1, #0
 8001974:	f002 fe21 	bl	80045ba <memset>
		char dimension_str[255] = {0};
 8001978:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 800197c:	4618      	mov	r0, r3
 800197e:	23ff      	movs	r3, #255	; 0xff
 8001980:	461a      	mov	r2, r3
 8001982:	2100      	movs	r1, #0
 8001984:	f002 fe19 	bl	80045ba <memset>
		snprintf(scale_str, 11, "%010ld", (long)(model->scale * 1000));
 8001988:	1d3b      	adds	r3, r7, #4
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	4b3f      	ldr	r3, [pc, #252]	; (8001a94 <print_model+0x1e0>)
 8001996:	f7fe fe2f 	bl	80005f8 <__aeabi_dmul>
 800199a:	4603      	mov	r3, r0
 800199c:	460c      	mov	r4, r1
 800199e:	4618      	mov	r0, r3
 80019a0:	4621      	mov	r1, r4
 80019a2:	f7ff f8d9 	bl	8000b58 <__aeabi_d2iz>
 80019a6:	4603      	mov	r3, r0
 80019a8:	f507 7086 	add.w	r0, r7, #268	; 0x10c
 80019ac:	4a3a      	ldr	r2, [pc, #232]	; (8001a98 <print_model+0x1e4>)
 80019ae:	210b      	movs	r1, #11
 80019b0:	f003 fb20 	bl	8004ff4 <sniprintf>
		snprintf(offset_str, 11, "%010ld", (long)(model->offset * 1000));
 80019b4:	1d3b      	adds	r3, r7, #4
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 80019bc:	f04f 0200 	mov.w	r2, #0
 80019c0:	4b34      	ldr	r3, [pc, #208]	; (8001a94 <print_model+0x1e0>)
 80019c2:	f7fe fe19 	bl	80005f8 <__aeabi_dmul>
 80019c6:	4603      	mov	r3, r0
 80019c8:	460c      	mov	r4, r1
 80019ca:	4618      	mov	r0, r3
 80019cc:	4621      	mov	r1, r4
 80019ce:	f7ff f8c3 	bl	8000b58 <__aeabi_d2iz>
 80019d2:	4603      	mov	r3, r0
 80019d4:	f507 7003 	add.w	r0, r7, #524	; 0x20c
 80019d8:	4a2f      	ldr	r2, [pc, #188]	; (8001a98 <print_model+0x1e4>)
 80019da:	210b      	movs	r1, #11
 80019dc:	f003 fb0a 	bl	8004ff4 <sniprintf>
		snprintf(dimension_str, 11, "%010ld", (long)(model->dimension * 1000));
 80019e0:	1d3b      	adds	r3, r7, #4
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019ec:	fb02 f303 	mul.w	r3, r2, r3
 80019f0:	f507 7043 	add.w	r0, r7, #780	; 0x30c
 80019f4:	4a28      	ldr	r2, [pc, #160]	; (8001a98 <print_model+0x1e4>)
 80019f6:	210b      	movs	r1, #11
 80019f8:	f003 fafc 	bl	8004ff4 <sniprintf>

		HAL_UART_Transmit(&huart4, (unsigned char*)"Scale: ", 7, 0xFFFF);
 80019fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a00:	2207      	movs	r2, #7
 8001a02:	4927      	ldr	r1, [pc, #156]	; (8001aa0 <print_model+0x1ec>)
 8001a04:	4822      	ldr	r0, [pc, #136]	; (8001a90 <print_model+0x1dc>)
 8001a06:	f001 fe90 	bl	800372a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart4, (unsigned char*)scale_str, 11, 0xFFFF);
 8001a0a:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8001a0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a12:	220b      	movs	r2, #11
 8001a14:	481e      	ldr	r0, [pc, #120]	; (8001a90 <print_model+0x1dc>)
 8001a16:	f001 fe88 	bl	800372a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart4, (unsigned char*)"\n\r", 3, 0xFFFF);
 8001a1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a1e:	2203      	movs	r2, #3
 8001a20:	4920      	ldr	r1, [pc, #128]	; (8001aa4 <print_model+0x1f0>)
 8001a22:	481b      	ldr	r0, [pc, #108]	; (8001a90 <print_model+0x1dc>)
 8001a24:	f001 fe81 	bl	800372a <HAL_UART_Transmit>

		HAL_UART_Transmit(&huart4, (unsigned char*)"Offset: ", 8, 0xFFFF);
 8001a28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a2c:	2208      	movs	r2, #8
 8001a2e:	491e      	ldr	r1, [pc, #120]	; (8001aa8 <print_model+0x1f4>)
 8001a30:	4817      	ldr	r0, [pc, #92]	; (8001a90 <print_model+0x1dc>)
 8001a32:	f001 fe7a 	bl	800372a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart4, (unsigned char*)offset_str, 11, 0xFFFF);
 8001a36:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 8001a3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a3e:	220b      	movs	r2, #11
 8001a40:	4813      	ldr	r0, [pc, #76]	; (8001a90 <print_model+0x1dc>)
 8001a42:	f001 fe72 	bl	800372a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart4, (unsigned char*)"\n\r", 3, 0xFFFF);
 8001a46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	4915      	ldr	r1, [pc, #84]	; (8001aa4 <print_model+0x1f0>)
 8001a4e:	4810      	ldr	r0, [pc, #64]	; (8001a90 <print_model+0x1dc>)
 8001a50:	f001 fe6b 	bl	800372a <HAL_UART_Transmit>

		HAL_UART_Transmit(&huart4, (unsigned char*)"Dimension: ", 11, 0xFFFF);
 8001a54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a58:	220b      	movs	r2, #11
 8001a5a:	4914      	ldr	r1, [pc, #80]	; (8001aac <print_model+0x1f8>)
 8001a5c:	480c      	ldr	r0, [pc, #48]	; (8001a90 <print_model+0x1dc>)
 8001a5e:	f001 fe64 	bl	800372a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart4, (unsigned char*)dimension_str, 11, 0xFFFF);
 8001a62:	f507 7143 	add.w	r1, r7, #780	; 0x30c
 8001a66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a6a:	220b      	movs	r2, #11
 8001a6c:	4808      	ldr	r0, [pc, #32]	; (8001a90 <print_model+0x1dc>)
 8001a6e:	f001 fe5c 	bl	800372a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart4, (unsigned char*)"\n\r", 3, 0xFFFF);
 8001a72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a76:	2203      	movs	r2, #3
 8001a78:	490a      	ldr	r1, [pc, #40]	; (8001aa4 <print_model+0x1f0>)
 8001a7a:	4805      	ldr	r0, [pc, #20]	; (8001a90 <print_model+0x1dc>)
 8001a7c:	f001 fe55 	bl	800372a <HAL_UART_Transmit>
	}

}
 8001a80:	bf00      	nop
 8001a82:	f207 4714 	addw	r7, r7, #1044	; 0x414
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd90      	pop	{r4, r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	08007b14 	.word	0x08007b14
 8001a90:	2000035c 	.word	0x2000035c
 8001a94:	408f4000 	.word	0x408f4000
 8001a98:	08007b20 	.word	0x08007b20
 8001a9c:	08007b28 	.word	0x08007b28
 8001aa0:	08007b2c 	.word	0x08007b2c
 8001aa4:	08007b10 	.word	0x08007b10
 8001aa8:	08007b34 	.word	0x08007b34
 8001aac:	08007b40 	.word	0x08007b40

08001ab0 <build_model>:
#endif

void build_model(void) {
 8001ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
	parse_buffer();
 8001ab6:	f7ff fe61 	bl	800177c <parse_buffer>
	if (SVM->has_vector == 0) {
 8001aba:	4b52      	ldr	r3, [pc, #328]	; (8001c04 <build_model+0x154>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d159      	bne.n	8001b7a <build_model+0xca>
 8001ac6:	466b      	mov	r3, sp
 8001ac8:	461e      	mov	r6, r3
		/* Load the weight vector */
		int number_of_weights = sizeof(parsed_epoch_data) / sizeof(long);   // Get the number of coefficients in the weight vector
 8001aca:	2310      	movs	r3, #16
 8001acc:	60bb      	str	r3, [r7, #8]
		double vect[number_of_weights];      // This is an array to hold the weights once converted to double from long
 8001ace:	68bd      	ldr	r5, [r7, #8]
 8001ad0:	1e6b      	subs	r3, r5, #1
 8001ad2:	607b      	str	r3, [r7, #4]
 8001ad4:	462b      	mov	r3, r5
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	f04f 0400 	mov.w	r4, #0
 8001ae4:	0194      	lsls	r4, r2, #6
 8001ae6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001aea:	018b      	lsls	r3, r1, #6
 8001aec:	462b      	mov	r3, r5
 8001aee:	4619      	mov	r1, r3
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	f04f 0300 	mov.w	r3, #0
 8001af8:	f04f 0400 	mov.w	r4, #0
 8001afc:	0194      	lsls	r4, r2, #6
 8001afe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b02:	018b      	lsls	r3, r1, #6
 8001b04:	462b      	mov	r3, r5
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	3307      	adds	r3, #7
 8001b0a:	3307      	adds	r3, #7
 8001b0c:	08db      	lsrs	r3, r3, #3
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	ebad 0d03 	sub.w	sp, sp, r3
 8001b14:	466b      	mov	r3, sp
 8001b16:	3307      	adds	r3, #7
 8001b18:	08db      	lsrs	r3, r3, #3
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	603b      	str	r3, [r7, #0]
		for (int i = 0; i < number_of_weights; i++) {
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	e016      	b.n	8001b52 <build_model+0xa2>
			vect[i] = ((double)parsed_epoch_data[i]) / 1000; // Convert the weight to double then divide by the scale factor
 8001b24:	4a38      	ldr	r2, [pc, #224]	; (8001c08 <build_model+0x158>)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fcf9 	bl	8000524 <__aeabi_i2d>
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	4b35      	ldr	r3, [pc, #212]	; (8001c0c <build_model+0x15c>)
 8001b38:	f7fe fe88 	bl	800084c <__aeabi_ddiv>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	460c      	mov	r4, r1
 8001b40:	6839      	ldr	r1, [r7, #0]
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	00d2      	lsls	r2, r2, #3
 8001b46:	440a      	add	r2, r1
 8001b48:	e9c2 3400 	strd	r3, r4, [r2]
		for (int i = 0; i < number_of_weights; i++) {
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	dbe4      	blt.n	8001b24 <build_model+0x74>
		}
		//SVM->weight_vector = malloc(number_of_weights * sizeof(double));
		memcpy(SVM->weight_vector, vect, sizeof(vect));   // Store the scaled weights into the model, SVM.weight_vector is no longer NULL
 8001b5a:	4b2a      	ldr	r3, [pc, #168]	; (8001c04 <build_model+0x154>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	462a      	mov	r2, r5
 8001b64:	00d2      	lsls	r2, r2, #3
 8001b66:	4619      	mov	r1, r3
 8001b68:	f002 fd1c 	bl	80045a4 <memcpy>
		SVM->has_vector = 1;
 8001b6c:	4b25      	ldr	r3, [pc, #148]	; (8001c04 <build_model+0x154>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8001b76:	46b5      	mov	sp, r6
		SVM->complete = 1;
#ifdef PRINTING_MODEL
		print_model(SVM);
#endif
	}
}
 8001b78:	e040      	b.n	8001bfc <build_model+0x14c>
		SVM->scale = ((double)parsed_epoch_data[0]) / 1000;
 8001b7a:	4b23      	ldr	r3, [pc, #140]	; (8001c08 <build_model+0x158>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7fe fcd0 	bl	8000524 <__aeabi_i2d>
 8001b84:	4b1f      	ldr	r3, [pc, #124]	; (8001c04 <build_model+0x154>)
 8001b86:	681d      	ldr	r5, [r3, #0]
 8001b88:	f04f 0200 	mov.w	r2, #0
 8001b8c:	4b1f      	ldr	r3, [pc, #124]	; (8001c0c <build_model+0x15c>)
 8001b8e:	f7fe fe5d 	bl	800084c <__aeabi_ddiv>
 8001b92:	4603      	mov	r3, r0
 8001b94:	460c      	mov	r4, r1
 8001b96:	e9c5 3422 	strd	r3, r4, [r5, #136]	; 0x88
		SVM->offset = ((double)parsed_epoch_data[1]) / 1000;
 8001b9a:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <build_model+0x158>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fcc0 	bl	8000524 <__aeabi_i2d>
 8001ba4:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <build_model+0x154>)
 8001ba6:	681d      	ldr	r5, [r3, #0]
 8001ba8:	f04f 0200 	mov.w	r2, #0
 8001bac:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <build_model+0x15c>)
 8001bae:	f7fe fe4d 	bl	800084c <__aeabi_ddiv>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	460c      	mov	r4, r1
 8001bb6:	e9c5 3420 	strd	r3, r4, [r5, #128]	; 0x80
		SVM->dimension = ((double)parsed_epoch_data[2]) / 1000;
 8001bba:	4b13      	ldr	r3, [pc, #76]	; (8001c08 <build_model+0x158>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe fcb0 	bl	8000524 <__aeabi_i2d>
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <build_model+0x15c>)
 8001bca:	f7fe fe3f 	bl	800084c <__aeabi_ddiv>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	460c      	mov	r4, r1
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4622      	mov	r2, r4
 8001bd6:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <build_model+0x154>)
 8001bd8:	681c      	ldr	r4, [r3, #0]
 8001bda:	4608      	mov	r0, r1
 8001bdc:	4611      	mov	r1, r2
 8001bde:	f7fe ffbb 	bl	8000b58 <__aeabi_d2iz>
 8001be2:	4603      	mov	r3, r0
 8001be4:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		SVM->complete = 1;
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <build_model+0x154>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		print_model(SVM);
 8001bf2:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <build_model+0x154>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff fe5c 	bl	80018b4 <print_model>
}
 8001bfc:	bf00      	nop
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c04:	20000358 	.word	0x20000358
 8001c08:	200002ac 	.word	0x200002ac
 8001c0c:	408f4000 	.word	0x408f4000

08001c10 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, (unsigned char *)"\r\nInterrupt!\n\r", 14, 0xFFFF);
 8001c18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c1c:	220e      	movs	r2, #14
 8001c1e:	490c      	ldr	r1, [pc, #48]	; (8001c50 <HAL_UART_RxCpltCallback+0x40>)
 8001c20:	480c      	ldr	r0, [pc, #48]	; (8001c54 <HAL_UART_RxCpltCallback+0x44>)
 8001c22:	f001 fd82 	bl	800372a <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart4, RX_data, EPOCH_LENGTH_SAMPLES * CHARS_PER_SAMPLE); // Start listening. You now have 1 epoch to process this epoch
 8001c26:	22b0      	movs	r2, #176	; 0xb0
 8001c28:	490b      	ldr	r1, [pc, #44]	; (8001c58 <HAL_UART_RxCpltCallback+0x48>)
 8001c2a:	480a      	ldr	r0, [pc, #40]	; (8001c54 <HAL_UART_RxCpltCallback+0x44>)
 8001c2c:	f001 fe16 	bl	800385c <HAL_UART_Receive_IT>
	if (SVM->complete) {  // This should be 2, not 0
 8001c30:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <HAL_UART_RxCpltCallback+0x4c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <HAL_UART_RxCpltCallback+0x32>
        process_sample();
 8001c3c:	f7ff fdca 	bl	80017d4 <process_sample>
	else {        //This happens when we haven't got the model yet
		/* Get the model */
		build_model();
	}

}
 8001c40:	e001      	b.n	8001c46 <HAL_UART_RxCpltCallback+0x36>
		build_model();
 8001c42:	f7ff ff35 	bl	8001ab0 <build_model>
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	08007b4c 	.word	0x08007b4c
 8001c54:	2000035c 	.word	0x2000035c
 8001c58:	200001fc 	.word	0x200001fc
 8001c5c:	20000358 	.word	0x20000358

08001c60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c64:	f000 fa8a 	bl	800217c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c68:	f000 f824 	bl	8001cb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c6c:	f000 f8d6 	bl	8001e1c <MX_GPIO_Init>
  MX_DMA_Init();
 8001c70:	f000 f8b4 	bl	8001ddc <MX_DMA_Init>
  MX_UART4_Init();
 8001c74:	f000 f888 	bl	8001d88 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  SVM = malloc(sizeof(Linear_SVM_Model));
 8001c78:	20a0      	movs	r0, #160	; 0xa0
 8001c7a:	f002 fc83 	bl	8004584 <malloc>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	461a      	mov	r2, r3
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <main+0x48>)
 8001c84:	601a      	str	r2, [r3, #0]
  SVM->has_vector = 0;
 8001c86:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <main+0x48>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  SVM->complete = 0;
 8001c90:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <main+0x48>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  HAL_UART_Receive_IT(&huart4, RX_data, EPOCH_LENGTH_SAMPLES * CHARS_PER_SAMPLE);
 8001c9a:	22b0      	movs	r2, #176	; 0xb0
 8001c9c:	4903      	ldr	r1, [pc, #12]	; (8001cac <main+0x4c>)
 8001c9e:	4804      	ldr	r0, [pc, #16]	; (8001cb0 <main+0x50>)
 8001ca0:	f001 fddc 	bl	800385c <HAL_UART_Receive_IT>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ca4:	e7fe      	b.n	8001ca4 <main+0x44>
 8001ca6:	bf00      	nop
 8001ca8:	20000358 	.word	0x20000358
 8001cac:	200001fc 	.word	0x200001fc
 8001cb0:	2000035c 	.word	0x2000035c

08001cb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b094      	sub	sp, #80	; 0x50
 8001cb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cba:	f107 0320 	add.w	r3, r7, #32
 8001cbe:	2230      	movs	r2, #48	; 0x30
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f002 fc79 	bl	80045ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cc8:	f107 030c 	add.w	r3, r7, #12
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60bb      	str	r3, [r7, #8]
 8001cdc:	4b28      	ldr	r3, [pc, #160]	; (8001d80 <SystemClock_Config+0xcc>)
 8001cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce0:	4a27      	ldr	r2, [pc, #156]	; (8001d80 <SystemClock_Config+0xcc>)
 8001ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce8:	4b25      	ldr	r3, [pc, #148]	; (8001d80 <SystemClock_Config+0xcc>)
 8001cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf0:	60bb      	str	r3, [r7, #8]
 8001cf2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	607b      	str	r3, [r7, #4]
 8001cf8:	4b22      	ldr	r3, [pc, #136]	; (8001d84 <SystemClock_Config+0xd0>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a21      	ldr	r2, [pc, #132]	; (8001d84 <SystemClock_Config+0xd0>)
 8001cfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d02:	6013      	str	r3, [r2, #0]
 8001d04:	4b1f      	ldr	r3, [pc, #124]	; (8001d84 <SystemClock_Config+0xd0>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d0c:	607b      	str	r3, [r7, #4]
 8001d0e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d10:	2301      	movs	r3, #1
 8001d12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d24:	2304      	movs	r3, #4
 8001d26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001d28:	23a8      	movs	r3, #168	; 0xa8
 8001d2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d30:	2304      	movs	r3, #4
 8001d32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d34:	f107 0320 	add.w	r3, r7, #32
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f001 f847 	bl	8002dcc <HAL_RCC_OscConfig>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d44:	f000 f8a0 	bl	8001e88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d48:	230f      	movs	r3, #15
 8001d4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d54:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d60:	f107 030c 	add.w	r3, r7, #12
 8001d64:	2105      	movs	r1, #5
 8001d66:	4618      	mov	r0, r3
 8001d68:	f001 faa0 	bl	80032ac <HAL_RCC_ClockConfig>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001d72:	f000 f889 	bl	8001e88 <Error_Handler>
  }
}
 8001d76:	bf00      	nop
 8001d78:	3750      	adds	r7, #80	; 0x50
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40007000 	.word	0x40007000

08001d88 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001d8c:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <MX_UART4_Init+0x4c>)
 8001d8e:	4a12      	ldr	r2, [pc, #72]	; (8001dd8 <MX_UART4_Init+0x50>)
 8001d90:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 8001d92:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <MX_UART4_Init+0x4c>)
 8001d94:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001d98:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d9a:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <MX_UART4_Init+0x4c>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001da0:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <MX_UART4_Init+0x4c>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001da6:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <MX_UART4_Init+0x4c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001dac:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <MX_UART4_Init+0x4c>)
 8001dae:	220c      	movs	r2, #12
 8001db0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001db2:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <MX_UART4_Init+0x4c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <MX_UART4_Init+0x4c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001dbe:	4805      	ldr	r0, [pc, #20]	; (8001dd4 <MX_UART4_Init+0x4c>)
 8001dc0:	f001 fc66 	bl	8003690 <HAL_UART_Init>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001dca:	f000 f85d 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	2000035c 	.word	0x2000035c
 8001dd8:	40004c00 	.word	0x40004c00

08001ddc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	607b      	str	r3, [r7, #4]
 8001de6:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <MX_DMA_Init+0x3c>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	4a0b      	ldr	r2, [pc, #44]	; (8001e18 <MX_DMA_Init+0x3c>)
 8001dec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001df0:	6313      	str	r3, [r2, #48]	; 0x30
 8001df2:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <MX_DMA_Init+0x3c>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dfa:	607b      	str	r3, [r7, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2100      	movs	r1, #0
 8001e02:	200d      	movs	r0, #13
 8001e04:	f000 fb07 	bl	8002416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001e08:	200d      	movs	r0, #13
 8001e0a:	f000 fb20 	bl	800244e <HAL_NVIC_EnableIRQ>

}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40023800 	.word	0x40023800

08001e1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	4b17      	ldr	r3, [pc, #92]	; (8001e84 <MX_GPIO_Init+0x68>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	4a16      	ldr	r2, [pc, #88]	; (8001e84 <MX_GPIO_Init+0x68>)
 8001e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e30:	6313      	str	r3, [r2, #48]	; 0x30
 8001e32:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <MX_GPIO_Init+0x68>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60bb      	str	r3, [r7, #8]
 8001e42:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <MX_GPIO_Init+0x68>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a0f      	ldr	r2, [pc, #60]	; (8001e84 <MX_GPIO_Init+0x68>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <MX_GPIO_Init+0x68>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	60bb      	str	r3, [r7, #8]
 8001e58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	607b      	str	r3, [r7, #4]
 8001e5e:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <MX_GPIO_Init+0x68>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	4a08      	ldr	r2, [pc, #32]	; (8001e84 <MX_GPIO_Init+0x68>)
 8001e64:	f043 0304 	orr.w	r3, r3, #4
 8001e68:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6a:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <MX_GPIO_Init+0x68>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	f003 0304 	and.w	r3, r3, #4
 8001e72:	607b      	str	r3, [r7, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]

}
 8001e76:	bf00      	nop
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40023800 	.word	0x40023800

08001e88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
	...

08001e98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	607b      	str	r3, [r7, #4]
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <HAL_MspInit+0x4c>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea6:	4a0f      	ldr	r2, [pc, #60]	; (8001ee4 <HAL_MspInit+0x4c>)
 8001ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eac:	6453      	str	r3, [r2, #68]	; 0x44
 8001eae:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <HAL_MspInit+0x4c>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eb6:	607b      	str	r3, [r7, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	603b      	str	r3, [r7, #0]
 8001ebe:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <HAL_MspInit+0x4c>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	4a08      	ldr	r2, [pc, #32]	; (8001ee4 <HAL_MspInit+0x4c>)
 8001ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eca:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <HAL_MspInit+0x4c>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	603b      	str	r3, [r7, #0]
 8001ed4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	40023800 	.word	0x40023800

08001ee8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08a      	sub	sp, #40	; 0x28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 0314 	add.w	r3, r7, #20
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a34      	ldr	r2, [pc, #208]	; (8001fd8 <HAL_UART_MspInit+0xf0>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d162      	bne.n	8001fd0 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	4b33      	ldr	r3, [pc, #204]	; (8001fdc <HAL_UART_MspInit+0xf4>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	4a32      	ldr	r2, [pc, #200]	; (8001fdc <HAL_UART_MspInit+0xf4>)
 8001f14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f18:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1a:	4b30      	ldr	r3, [pc, #192]	; (8001fdc <HAL_UART_MspInit+0xf4>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	4b2c      	ldr	r3, [pc, #176]	; (8001fdc <HAL_UART_MspInit+0xf4>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	4a2b      	ldr	r2, [pc, #172]	; (8001fdc <HAL_UART_MspInit+0xf4>)
 8001f30:	f043 0304 	orr.w	r3, r3, #4
 8001f34:	6313      	str	r3, [r2, #48]	; 0x30
 8001f36:	4b29      	ldr	r3, [pc, #164]	; (8001fdc <HAL_UART_MspInit+0xf4>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f003 0304 	and.w	r3, r3, #4
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f42:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f50:	2303      	movs	r3, #3
 8001f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f54:	2308      	movs	r3, #8
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f58:	f107 0314 	add.w	r3, r7, #20
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4820      	ldr	r0, [pc, #128]	; (8001fe0 <HAL_UART_MspInit+0xf8>)
 8001f60:	f000 fd9a 	bl	8002a98 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001f64:	4b1f      	ldr	r3, [pc, #124]	; (8001fe4 <HAL_UART_MspInit+0xfc>)
 8001f66:	4a20      	ldr	r2, [pc, #128]	; (8001fe8 <HAL_UART_MspInit+0x100>)
 8001f68:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001f6a:	4b1e      	ldr	r3, [pc, #120]	; (8001fe4 <HAL_UART_MspInit+0xfc>)
 8001f6c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f70:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f72:	4b1c      	ldr	r3, [pc, #112]	; (8001fe4 <HAL_UART_MspInit+0xfc>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f78:	4b1a      	ldr	r3, [pc, #104]	; (8001fe4 <HAL_UART_MspInit+0xfc>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f7e:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <HAL_UART_MspInit+0xfc>)
 8001f80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f84:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f86:	4b17      	ldr	r3, [pc, #92]	; (8001fe4 <HAL_UART_MspInit+0xfc>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f8c:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <HAL_UART_MspInit+0xfc>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001f92:	4b14      	ldr	r3, [pc, #80]	; (8001fe4 <HAL_UART_MspInit+0xfc>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f98:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <HAL_UART_MspInit+0xfc>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f9e:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <HAL_UART_MspInit+0xfc>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001fa4:	480f      	ldr	r0, [pc, #60]	; (8001fe4 <HAL_UART_MspInit+0xfc>)
 8001fa6:	f000 fa6d 	bl	8002484 <HAL_DMA_Init>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001fb0:	f7ff ff6a 	bl	8001e88 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a0b      	ldr	r2, [pc, #44]	; (8001fe4 <HAL_UART_MspInit+0xfc>)
 8001fb8:	635a      	str	r2, [r3, #52]	; 0x34
 8001fba:	4a0a      	ldr	r2, [pc, #40]	; (8001fe4 <HAL_UART_MspInit+0xfc>)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	2034      	movs	r0, #52	; 0x34
 8001fc6:	f000 fa26 	bl	8002416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001fca:	2034      	movs	r0, #52	; 0x34
 8001fcc:	f000 fa3f 	bl	800244e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001fd0:	bf00      	nop
 8001fd2:	3728      	adds	r7, #40	; 0x28
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40004c00 	.word	0x40004c00
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40020800 	.word	0x40020800
 8001fe4:	200002f8 	.word	0x200002f8
 8001fe8:	40026040 	.word	0x40026040

08001fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ffe:	e7fe      	b.n	8001ffe <HardFault_Handler+0x4>

08002000 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002004:	e7fe      	b.n	8002004 <MemManage_Handler+0x4>

08002006 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002006:	b480      	push	{r7}
 8002008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800200a:	e7fe      	b.n	800200a <BusFault_Handler+0x4>

0800200c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002010:	e7fe      	b.n	8002010 <UsageFault_Handler+0x4>

08002012 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002012:	b480      	push	{r7}
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800202e:	b480      	push	{r7}
 8002030:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002040:	f000 f8ee 	bl	8002220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002044:	bf00      	nop
 8002046:	bd80      	pop	{r7, pc}

08002048 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800204c:	4802      	ldr	r0, [pc, #8]	; (8002058 <DMA1_Stream2_IRQHandler+0x10>)
 800204e:	f000 fae9 	bl	8002624 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	200002f8 	.word	0x200002f8

0800205c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002060:	4802      	ldr	r0, [pc, #8]	; (800206c <UART4_IRQHandler+0x10>)
 8002062:	f001 fc51 	bl	8003908 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	2000035c 	.word	0x2000035c

08002070 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800207a:	f002 fa45 	bl	8004508 <__errno>
 800207e:	4602      	mov	r2, r0
 8002080:	2316      	movs	r3, #22
 8002082:	6013      	str	r3, [r2, #0]
	return -1;
 8002084:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002088:	4618      	mov	r0, r3
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <_exit>:

void _exit (int status)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002098:	f04f 31ff 	mov.w	r1, #4294967295
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff ffe7 	bl	8002070 <_kill>
	while (1) {}		/* Make sure we hang here */
 80020a2:	e7fe      	b.n	80020a2 <_exit+0x12>

080020a4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80020ac:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <_sbrk+0x50>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d102      	bne.n	80020ba <_sbrk+0x16>
		heap_end = &end;
 80020b4:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <_sbrk+0x50>)
 80020b6:	4a10      	ldr	r2, [pc, #64]	; (80020f8 <_sbrk+0x54>)
 80020b8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80020ba:	4b0e      	ldr	r3, [pc, #56]	; (80020f4 <_sbrk+0x50>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80020c0:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <_sbrk+0x50>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4413      	add	r3, r2
 80020c8:	466a      	mov	r2, sp
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d907      	bls.n	80020de <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80020ce:	f002 fa1b 	bl	8004508 <__errno>
 80020d2:	4602      	mov	r2, r0
 80020d4:	230c      	movs	r3, #12
 80020d6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80020d8:	f04f 33ff 	mov.w	r3, #4294967295
 80020dc:	e006      	b.n	80020ec <_sbrk+0x48>
	}

	heap_end += incr;
 80020de:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <_sbrk+0x50>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	4a03      	ldr	r2, [pc, #12]	; (80020f4 <_sbrk+0x50>)
 80020e8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80020ea:	68fb      	ldr	r3, [r7, #12]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	200002ec 	.word	0x200002ec
 80020f8:	200003a8 	.word	0x200003a8

080020fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002100:	4b08      	ldr	r3, [pc, #32]	; (8002124 <SystemInit+0x28>)
 8002102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002106:	4a07      	ldr	r2, [pc, #28]	; (8002124 <SystemInit+0x28>)
 8002108:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800210c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002110:	4b04      	ldr	r3, [pc, #16]	; (8002124 <SystemInit+0x28>)
 8002112:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002116:	609a      	str	r2, [r3, #8]
#endif
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002128:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002160 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800212c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800212e:	e003      	b.n	8002138 <LoopCopyDataInit>

08002130 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002130:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002132:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002134:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002136:	3104      	adds	r1, #4

08002138 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002138:	480b      	ldr	r0, [pc, #44]	; (8002168 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800213a:	4b0c      	ldr	r3, [pc, #48]	; (800216c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800213c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800213e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002140:	d3f6      	bcc.n	8002130 <CopyDataInit>
  ldr  r2, =_sbss
 8002142:	4a0b      	ldr	r2, [pc, #44]	; (8002170 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002144:	e002      	b.n	800214c <LoopFillZerobss>

08002146 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002146:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002148:	f842 3b04 	str.w	r3, [r2], #4

0800214c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800214c:	4b09      	ldr	r3, [pc, #36]	; (8002174 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800214e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002150:	d3f9      	bcc.n	8002146 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002152:	f7ff ffd3 	bl	80020fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002156:	f002 f9f1 	bl	800453c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800215a:	f7ff fd81 	bl	8001c60 <main>
  bx  lr    
 800215e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002160:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002164:	08007fd0 	.word	0x08007fd0
  ldr  r0, =_sdata
 8002168:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800216c:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8002170:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8002174:	200003a4 	.word	0x200003a4

08002178 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002178:	e7fe      	b.n	8002178 <ADC_IRQHandler>
	...

0800217c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002180:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <HAL_Init+0x40>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a0d      	ldr	r2, [pc, #52]	; (80021bc <HAL_Init+0x40>)
 8002186:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800218a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800218c:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <HAL_Init+0x40>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a0a      	ldr	r2, [pc, #40]	; (80021bc <HAL_Init+0x40>)
 8002192:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002196:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002198:	4b08      	ldr	r3, [pc, #32]	; (80021bc <HAL_Init+0x40>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a07      	ldr	r2, [pc, #28]	; (80021bc <HAL_Init+0x40>)
 800219e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021a4:	2003      	movs	r0, #3
 80021a6:	f000 f92b 	bl	8002400 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021aa:	2000      	movs	r0, #0
 80021ac:	f000 f808 	bl	80021c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021b0:	f7ff fe72 	bl	8001e98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40023c00 	.word	0x40023c00

080021c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021c8:	4b12      	ldr	r3, [pc, #72]	; (8002214 <HAL_InitTick+0x54>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	4b12      	ldr	r3, [pc, #72]	; (8002218 <HAL_InitTick+0x58>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	4619      	mov	r1, r3
 80021d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021da:	fbb2 f3f3 	udiv	r3, r2, r3
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 f943 	bl	800246a <HAL_SYSTICK_Config>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e00e      	b.n	800220c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b0f      	cmp	r3, #15
 80021f2:	d80a      	bhi.n	800220a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021f4:	2200      	movs	r2, #0
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	f04f 30ff 	mov.w	r0, #4294967295
 80021fc:	f000 f90b 	bl	8002416 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002200:	4a06      	ldr	r2, [pc, #24]	; (800221c <HAL_InitTick+0x5c>)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	e000      	b.n	800220c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
}
 800220c:	4618      	mov	r0, r3
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20000000 	.word	0x20000000
 8002218:	20000008 	.word	0x20000008
 800221c:	20000004 	.word	0x20000004

08002220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002224:	4b06      	ldr	r3, [pc, #24]	; (8002240 <HAL_IncTick+0x20>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	461a      	mov	r2, r3
 800222a:	4b06      	ldr	r3, [pc, #24]	; (8002244 <HAL_IncTick+0x24>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4413      	add	r3, r2
 8002230:	4a04      	ldr	r2, [pc, #16]	; (8002244 <HAL_IncTick+0x24>)
 8002232:	6013      	str	r3, [r2, #0]
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	20000008 	.word	0x20000008
 8002244:	2000039c 	.word	0x2000039c

08002248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return uwTick;
 800224c:	4b03      	ldr	r3, [pc, #12]	; (800225c <HAL_GetTick+0x14>)
 800224e:	681b      	ldr	r3, [r3, #0]
}
 8002250:	4618      	mov	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	2000039c 	.word	0x2000039c

08002260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002270:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800227c:	4013      	ands	r3, r2
 800227e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002288:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800228c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002292:	4a04      	ldr	r2, [pc, #16]	; (80022a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	60d3      	str	r3, [r2, #12]
}
 8002298:	bf00      	nop
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022ac:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <__NVIC_GetPriorityGrouping+0x18>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	0a1b      	lsrs	r3, r3, #8
 80022b2:	f003 0307 	and.w	r3, r3, #7
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	db0b      	blt.n	80022ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	f003 021f 	and.w	r2, r3, #31
 80022dc:	4907      	ldr	r1, [pc, #28]	; (80022fc <__NVIC_EnableIRQ+0x38>)
 80022de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e2:	095b      	lsrs	r3, r3, #5
 80022e4:	2001      	movs	r0, #1
 80022e6:	fa00 f202 	lsl.w	r2, r0, r2
 80022ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	e000e100 	.word	0xe000e100

08002300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	6039      	str	r1, [r7, #0]
 800230a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800230c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002310:	2b00      	cmp	r3, #0
 8002312:	db0a      	blt.n	800232a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	b2da      	uxtb	r2, r3
 8002318:	490c      	ldr	r1, [pc, #48]	; (800234c <__NVIC_SetPriority+0x4c>)
 800231a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231e:	0112      	lsls	r2, r2, #4
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	440b      	add	r3, r1
 8002324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002328:	e00a      	b.n	8002340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	b2da      	uxtb	r2, r3
 800232e:	4908      	ldr	r1, [pc, #32]	; (8002350 <__NVIC_SetPriority+0x50>)
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	3b04      	subs	r3, #4
 8002338:	0112      	lsls	r2, r2, #4
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	440b      	add	r3, r1
 800233e:	761a      	strb	r2, [r3, #24]
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	e000e100 	.word	0xe000e100
 8002350:	e000ed00 	.word	0xe000ed00

08002354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002354:	b480      	push	{r7}
 8002356:	b089      	sub	sp, #36	; 0x24
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f1c3 0307 	rsb	r3, r3, #7
 800236e:	2b04      	cmp	r3, #4
 8002370:	bf28      	it	cs
 8002372:	2304      	movcs	r3, #4
 8002374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	3304      	adds	r3, #4
 800237a:	2b06      	cmp	r3, #6
 800237c:	d902      	bls.n	8002384 <NVIC_EncodePriority+0x30>
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3b03      	subs	r3, #3
 8002382:	e000      	b.n	8002386 <NVIC_EncodePriority+0x32>
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002388:	f04f 32ff 	mov.w	r2, #4294967295
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43da      	mvns	r2, r3
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	401a      	ands	r2, r3
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800239c:	f04f 31ff 	mov.w	r1, #4294967295
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	fa01 f303 	lsl.w	r3, r1, r3
 80023a6:	43d9      	mvns	r1, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ac:	4313      	orrs	r3, r2
         );
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3724      	adds	r7, #36	; 0x24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
	...

080023bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023cc:	d301      	bcc.n	80023d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ce:	2301      	movs	r3, #1
 80023d0:	e00f      	b.n	80023f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023d2:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <SysTick_Config+0x40>)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023da:	210f      	movs	r1, #15
 80023dc:	f04f 30ff 	mov.w	r0, #4294967295
 80023e0:	f7ff ff8e 	bl	8002300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <SysTick_Config+0x40>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ea:	4b04      	ldr	r3, [pc, #16]	; (80023fc <SysTick_Config+0x40>)
 80023ec:	2207      	movs	r2, #7
 80023ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	e000e010 	.word	0xe000e010

08002400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7ff ff29 	bl	8002260 <__NVIC_SetPriorityGrouping>
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002416:	b580      	push	{r7, lr}
 8002418:	b086      	sub	sp, #24
 800241a:	af00      	add	r7, sp, #0
 800241c:	4603      	mov	r3, r0
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	607a      	str	r2, [r7, #4]
 8002422:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002428:	f7ff ff3e 	bl	80022a8 <__NVIC_GetPriorityGrouping>
 800242c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68b9      	ldr	r1, [r7, #8]
 8002432:	6978      	ldr	r0, [r7, #20]
 8002434:	f7ff ff8e 	bl	8002354 <NVIC_EncodePriority>
 8002438:	4602      	mov	r2, r0
 800243a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800243e:	4611      	mov	r1, r2
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff ff5d 	bl	8002300 <__NVIC_SetPriority>
}
 8002446:	bf00      	nop
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	4603      	mov	r3, r0
 8002456:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff ff31 	bl	80022c4 <__NVIC_EnableIRQ>
}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff ffa2 	bl	80023bc <SysTick_Config>
 8002478:	4603      	mov	r3, r0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002490:	f7ff feda 	bl	8002248 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e099      	b.n	80025d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2202      	movs	r2, #2
 80024ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0201 	bic.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024c0:	e00f      	b.n	80024e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024c2:	f7ff fec1 	bl	8002248 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b05      	cmp	r3, #5
 80024ce:	d908      	bls.n	80024e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2220      	movs	r2, #32
 80024d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2203      	movs	r2, #3
 80024da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e078      	b.n	80025d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1e8      	bne.n	80024c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	4b38      	ldr	r3, [pc, #224]	; (80025dc <HAL_DMA_Init+0x158>)
 80024fc:	4013      	ands	r3, r2
 80024fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800250e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800251a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002526:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	4313      	orrs	r3, r2
 8002532:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	2b04      	cmp	r3, #4
 800253a:	d107      	bne.n	800254c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002544:	4313      	orrs	r3, r2
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	4313      	orrs	r3, r2
 800254a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f023 0307 	bic.w	r3, r3, #7
 8002562:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	4313      	orrs	r3, r2
 800256c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	2b04      	cmp	r3, #4
 8002574:	d117      	bne.n	80025a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	4313      	orrs	r3, r2
 800257e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00e      	beq.n	80025a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 fa0b 	bl	80029a4 <DMA_CheckFifoParam>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d008      	beq.n	80025a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2240      	movs	r2, #64	; 0x40
 8002598:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80025a2:	2301      	movs	r3, #1
 80025a4:	e016      	b.n	80025d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f9c2 	bl	8002938 <DMA_CalcBaseAndBitshift>
 80025b4:	4603      	mov	r3, r0
 80025b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025bc:	223f      	movs	r2, #63	; 0x3f
 80025be:	409a      	lsls	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3718      	adds	r7, #24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	f010803f 	.word	0xf010803f

080025e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d004      	beq.n	80025fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2280      	movs	r2, #128	; 0x80
 80025f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e00c      	b.n	8002618 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2205      	movs	r2, #5
 8002602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0201 	bic.w	r2, r2, #1
 8002614:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800262c:	2300      	movs	r3, #0
 800262e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002630:	4b92      	ldr	r3, [pc, #584]	; (800287c <HAL_DMA_IRQHandler+0x258>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a92      	ldr	r2, [pc, #584]	; (8002880 <HAL_DMA_IRQHandler+0x25c>)
 8002636:	fba2 2303 	umull	r2, r3, r2, r3
 800263a:	0a9b      	lsrs	r3, r3, #10
 800263c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002642:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264e:	2208      	movs	r2, #8
 8002650:	409a      	lsls	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	4013      	ands	r3, r2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d01a      	beq.n	8002690 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	d013      	beq.n	8002690 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0204 	bic.w	r2, r2, #4
 8002676:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267c:	2208      	movs	r2, #8
 800267e:	409a      	lsls	r2, r3
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002688:	f043 0201 	orr.w	r2, r3, #1
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002694:	2201      	movs	r2, #1
 8002696:	409a      	lsls	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4013      	ands	r3, r2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d012      	beq.n	80026c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00b      	beq.n	80026c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b2:	2201      	movs	r2, #1
 80026b4:	409a      	lsls	r2, r3
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026be:	f043 0202 	orr.w	r2, r3, #2
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ca:	2204      	movs	r2, #4
 80026cc:	409a      	lsls	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	4013      	ands	r3, r2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d012      	beq.n	80026fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00b      	beq.n	80026fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e8:	2204      	movs	r2, #4
 80026ea:	409a      	lsls	r2, r3
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f4:	f043 0204 	orr.w	r2, r3, #4
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002700:	2210      	movs	r2, #16
 8002702:	409a      	lsls	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4013      	ands	r3, r2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d043      	beq.n	8002794 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d03c      	beq.n	8002794 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271e:	2210      	movs	r2, #16
 8002720:	409a      	lsls	r2, r3
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d018      	beq.n	8002766 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d108      	bne.n	8002754 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	2b00      	cmp	r3, #0
 8002748:	d024      	beq.n	8002794 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	4798      	blx	r3
 8002752:	e01f      	b.n	8002794 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002758:	2b00      	cmp	r3, #0
 800275a:	d01b      	beq.n	8002794 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	4798      	blx	r3
 8002764:	e016      	b.n	8002794 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002770:	2b00      	cmp	r3, #0
 8002772:	d107      	bne.n	8002784 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 0208 	bic.w	r2, r2, #8
 8002782:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002798:	2220      	movs	r2, #32
 800279a:	409a      	lsls	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	4013      	ands	r3, r2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 808e 	beq.w	80028c2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0310 	and.w	r3, r3, #16
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 8086 	beq.w	80028c2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ba:	2220      	movs	r2, #32
 80027bc:	409a      	lsls	r2, r3
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b05      	cmp	r3, #5
 80027cc:	d136      	bne.n	800283c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0216 	bic.w	r2, r2, #22
 80027dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	695a      	ldr	r2, [r3, #20]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d103      	bne.n	80027fe <HAL_DMA_IRQHandler+0x1da>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d007      	beq.n	800280e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0208 	bic.w	r2, r2, #8
 800280c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002812:	223f      	movs	r2, #63	; 0x3f
 8002814:	409a      	lsls	r2, r3
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800282e:	2b00      	cmp	r3, #0
 8002830:	d07d      	beq.n	800292e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	4798      	blx	r3
        }
        return;
 800283a:	e078      	b.n	800292e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d01c      	beq.n	8002884 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d108      	bne.n	800286a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285c:	2b00      	cmp	r3, #0
 800285e:	d030      	beq.n	80028c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	4798      	blx	r3
 8002868:	e02b      	b.n	80028c2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286e:	2b00      	cmp	r3, #0
 8002870:	d027      	beq.n	80028c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	4798      	blx	r3
 800287a:	e022      	b.n	80028c2 <HAL_DMA_IRQHandler+0x29e>
 800287c:	20000000 	.word	0x20000000
 8002880:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10f      	bne.n	80028b2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 0210 	bic.w	r2, r2, #16
 80028a0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d032      	beq.n	8002930 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d022      	beq.n	800291c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2205      	movs	r2, #5
 80028da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 0201 	bic.w	r2, r2, #1
 80028ec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	3301      	adds	r3, #1
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d307      	bcc.n	800290a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1f2      	bne.n	80028ee <HAL_DMA_IRQHandler+0x2ca>
 8002908:	e000      	b.n	800290c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800290a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002920:	2b00      	cmp	r3, #0
 8002922:	d005      	beq.n	8002930 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	4798      	blx	r3
 800292c:	e000      	b.n	8002930 <HAL_DMA_IRQHandler+0x30c>
        return;
 800292e:	bf00      	nop
    }
  }
}
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop

08002938 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	b2db      	uxtb	r3, r3
 8002946:	3b10      	subs	r3, #16
 8002948:	4a14      	ldr	r2, [pc, #80]	; (800299c <DMA_CalcBaseAndBitshift+0x64>)
 800294a:	fba2 2303 	umull	r2, r3, r2, r3
 800294e:	091b      	lsrs	r3, r3, #4
 8002950:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002952:	4a13      	ldr	r2, [pc, #76]	; (80029a0 <DMA_CalcBaseAndBitshift+0x68>)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4413      	add	r3, r2
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	461a      	mov	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2b03      	cmp	r3, #3
 8002964:	d909      	bls.n	800297a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800296e:	f023 0303 	bic.w	r3, r3, #3
 8002972:	1d1a      	adds	r2, r3, #4
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	659a      	str	r2, [r3, #88]	; 0x58
 8002978:	e007      	b.n	800298a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002982:	f023 0303 	bic.w	r3, r3, #3
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800298e:	4618      	mov	r0, r3
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	aaaaaaab 	.word	0xaaaaaaab
 80029a0:	08007b74 	.word	0x08007b74

080029a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d11f      	bne.n	80029fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	2b03      	cmp	r3, #3
 80029c2:	d855      	bhi.n	8002a70 <DMA_CheckFifoParam+0xcc>
 80029c4:	a201      	add	r2, pc, #4	; (adr r2, 80029cc <DMA_CheckFifoParam+0x28>)
 80029c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ca:	bf00      	nop
 80029cc:	080029dd 	.word	0x080029dd
 80029d0:	080029ef 	.word	0x080029ef
 80029d4:	080029dd 	.word	0x080029dd
 80029d8:	08002a71 	.word	0x08002a71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d045      	beq.n	8002a74 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ec:	e042      	b.n	8002a74 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029f6:	d13f      	bne.n	8002a78 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029fc:	e03c      	b.n	8002a78 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a06:	d121      	bne.n	8002a4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2b03      	cmp	r3, #3
 8002a0c:	d836      	bhi.n	8002a7c <DMA_CheckFifoParam+0xd8>
 8002a0e:	a201      	add	r2, pc, #4	; (adr r2, 8002a14 <DMA_CheckFifoParam+0x70>)
 8002a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a14:	08002a25 	.word	0x08002a25
 8002a18:	08002a2b 	.word	0x08002a2b
 8002a1c:	08002a25 	.word	0x08002a25
 8002a20:	08002a3d 	.word	0x08002a3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	73fb      	strb	r3, [r7, #15]
      break;
 8002a28:	e02f      	b.n	8002a8a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d024      	beq.n	8002a80 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a3a:	e021      	b.n	8002a80 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a44:	d11e      	bne.n	8002a84 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a4a:	e01b      	b.n	8002a84 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d902      	bls.n	8002a58 <DMA_CheckFifoParam+0xb4>
 8002a52:	2b03      	cmp	r3, #3
 8002a54:	d003      	beq.n	8002a5e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a56:	e018      	b.n	8002a8a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a5c:	e015      	b.n	8002a8a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00e      	beq.n	8002a88 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	73fb      	strb	r3, [r7, #15]
      break;
 8002a6e:	e00b      	b.n	8002a88 <DMA_CheckFifoParam+0xe4>
      break;
 8002a70:	bf00      	nop
 8002a72:	e00a      	b.n	8002a8a <DMA_CheckFifoParam+0xe6>
      break;
 8002a74:	bf00      	nop
 8002a76:	e008      	b.n	8002a8a <DMA_CheckFifoParam+0xe6>
      break;
 8002a78:	bf00      	nop
 8002a7a:	e006      	b.n	8002a8a <DMA_CheckFifoParam+0xe6>
      break;
 8002a7c:	bf00      	nop
 8002a7e:	e004      	b.n	8002a8a <DMA_CheckFifoParam+0xe6>
      break;
 8002a80:	bf00      	nop
 8002a82:	e002      	b.n	8002a8a <DMA_CheckFifoParam+0xe6>
      break;   
 8002a84:	bf00      	nop
 8002a86:	e000      	b.n	8002a8a <DMA_CheckFifoParam+0xe6>
      break;
 8002a88:	bf00      	nop
    }
  } 
  
  return status; 
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b089      	sub	sp, #36	; 0x24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61fb      	str	r3, [r7, #28]
 8002ab2:	e16b      	b.n	8002d8c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	f040 815a 	bne.w	8002d86 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d00b      	beq.n	8002af2 <HAL_GPIO_Init+0x5a>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d007      	beq.n	8002af2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ae6:	2b11      	cmp	r3, #17
 8002ae8:	d003      	beq.n	8002af2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b12      	cmp	r3, #18
 8002af0:	d130      	bne.n	8002b54 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	2203      	movs	r2, #3
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43db      	mvns	r3, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4013      	ands	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b28:	2201      	movs	r2, #1
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	43db      	mvns	r3, r3
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4013      	ands	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	091b      	lsrs	r3, r3, #4
 8002b3e:	f003 0201 	and.w	r2, r3, #1
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	2203      	movs	r2, #3
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	43db      	mvns	r3, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d003      	beq.n	8002b94 <HAL_GPIO_Init+0xfc>
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2b12      	cmp	r3, #18
 8002b92:	d123      	bne.n	8002bdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	08da      	lsrs	r2, r3, #3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3208      	adds	r2, #8
 8002b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	220f      	movs	r2, #15
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	691a      	ldr	r2, [r3, #16]
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	08da      	lsrs	r2, r3, #3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3208      	adds	r2, #8
 8002bd6:	69b9      	ldr	r1, [r7, #24]
 8002bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	2203      	movs	r2, #3
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	43db      	mvns	r3, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 0203 	and.w	r2, r3, #3
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 80b4 	beq.w	8002d86 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	4b5f      	ldr	r3, [pc, #380]	; (8002da0 <HAL_GPIO_Init+0x308>)
 8002c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c26:	4a5e      	ldr	r2, [pc, #376]	; (8002da0 <HAL_GPIO_Init+0x308>)
 8002c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c2e:	4b5c      	ldr	r3, [pc, #368]	; (8002da0 <HAL_GPIO_Init+0x308>)
 8002c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c3a:	4a5a      	ldr	r2, [pc, #360]	; (8002da4 <HAL_GPIO_Init+0x30c>)
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	089b      	lsrs	r3, r3, #2
 8002c40:	3302      	adds	r3, #2
 8002c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	220f      	movs	r2, #15
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	43db      	mvns	r3, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a51      	ldr	r2, [pc, #324]	; (8002da8 <HAL_GPIO_Init+0x310>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d02b      	beq.n	8002cbe <HAL_GPIO_Init+0x226>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a50      	ldr	r2, [pc, #320]	; (8002dac <HAL_GPIO_Init+0x314>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d025      	beq.n	8002cba <HAL_GPIO_Init+0x222>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a4f      	ldr	r2, [pc, #316]	; (8002db0 <HAL_GPIO_Init+0x318>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d01f      	beq.n	8002cb6 <HAL_GPIO_Init+0x21e>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a4e      	ldr	r2, [pc, #312]	; (8002db4 <HAL_GPIO_Init+0x31c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d019      	beq.n	8002cb2 <HAL_GPIO_Init+0x21a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a4d      	ldr	r2, [pc, #308]	; (8002db8 <HAL_GPIO_Init+0x320>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d013      	beq.n	8002cae <HAL_GPIO_Init+0x216>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a4c      	ldr	r2, [pc, #304]	; (8002dbc <HAL_GPIO_Init+0x324>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d00d      	beq.n	8002caa <HAL_GPIO_Init+0x212>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a4b      	ldr	r2, [pc, #300]	; (8002dc0 <HAL_GPIO_Init+0x328>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d007      	beq.n	8002ca6 <HAL_GPIO_Init+0x20e>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a4a      	ldr	r2, [pc, #296]	; (8002dc4 <HAL_GPIO_Init+0x32c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d101      	bne.n	8002ca2 <HAL_GPIO_Init+0x20a>
 8002c9e:	2307      	movs	r3, #7
 8002ca0:	e00e      	b.n	8002cc0 <HAL_GPIO_Init+0x228>
 8002ca2:	2308      	movs	r3, #8
 8002ca4:	e00c      	b.n	8002cc0 <HAL_GPIO_Init+0x228>
 8002ca6:	2306      	movs	r3, #6
 8002ca8:	e00a      	b.n	8002cc0 <HAL_GPIO_Init+0x228>
 8002caa:	2305      	movs	r3, #5
 8002cac:	e008      	b.n	8002cc0 <HAL_GPIO_Init+0x228>
 8002cae:	2304      	movs	r3, #4
 8002cb0:	e006      	b.n	8002cc0 <HAL_GPIO_Init+0x228>
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e004      	b.n	8002cc0 <HAL_GPIO_Init+0x228>
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	e002      	b.n	8002cc0 <HAL_GPIO_Init+0x228>
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e000      	b.n	8002cc0 <HAL_GPIO_Init+0x228>
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	69fa      	ldr	r2, [r7, #28]
 8002cc2:	f002 0203 	and.w	r2, r2, #3
 8002cc6:	0092      	lsls	r2, r2, #2
 8002cc8:	4093      	lsls	r3, r2
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cd0:	4934      	ldr	r1, [pc, #208]	; (8002da4 <HAL_GPIO_Init+0x30c>)
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	089b      	lsrs	r3, r3, #2
 8002cd6:	3302      	adds	r3, #2
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cde:	4b3a      	ldr	r3, [pc, #232]	; (8002dc8 <HAL_GPIO_Init+0x330>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4013      	ands	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d02:	4a31      	ldr	r2, [pc, #196]	; (8002dc8 <HAL_GPIO_Init+0x330>)
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d08:	4b2f      	ldr	r3, [pc, #188]	; (8002dc8 <HAL_GPIO_Init+0x330>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	43db      	mvns	r3, r3
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4013      	ands	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d003      	beq.n	8002d2c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d2c:	4a26      	ldr	r2, [pc, #152]	; (8002dc8 <HAL_GPIO_Init+0x330>)
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d32:	4b25      	ldr	r3, [pc, #148]	; (8002dc8 <HAL_GPIO_Init+0x330>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d56:	4a1c      	ldr	r2, [pc, #112]	; (8002dc8 <HAL_GPIO_Init+0x330>)
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d5c:	4b1a      	ldr	r3, [pc, #104]	; (8002dc8 <HAL_GPIO_Init+0x330>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	43db      	mvns	r3, r3
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d003      	beq.n	8002d80 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d80:	4a11      	ldr	r2, [pc, #68]	; (8002dc8 <HAL_GPIO_Init+0x330>)
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	61fb      	str	r3, [r7, #28]
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	2b0f      	cmp	r3, #15
 8002d90:	f67f ae90 	bls.w	8002ab4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d94:	bf00      	nop
 8002d96:	3724      	adds	r7, #36	; 0x24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	40023800 	.word	0x40023800
 8002da4:	40013800 	.word	0x40013800
 8002da8:	40020000 	.word	0x40020000
 8002dac:	40020400 	.word	0x40020400
 8002db0:	40020800 	.word	0x40020800
 8002db4:	40020c00 	.word	0x40020c00
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	40021400 	.word	0x40021400
 8002dc0:	40021800 	.word	0x40021800
 8002dc4:	40021c00 	.word	0x40021c00
 8002dc8:	40013c00 	.word	0x40013c00

08002dcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e25b      	b.n	8003296 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d075      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dea:	4ba3      	ldr	r3, [pc, #652]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 030c 	and.w	r3, r3, #12
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d00c      	beq.n	8002e10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002df6:	4ba0      	ldr	r3, [pc, #640]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dfe:	2b08      	cmp	r3, #8
 8002e00:	d112      	bne.n	8002e28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e02:	4b9d      	ldr	r3, [pc, #628]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e0e:	d10b      	bne.n	8002e28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e10:	4b99      	ldr	r3, [pc, #612]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d05b      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x108>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d157      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e236      	b.n	8003296 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e30:	d106      	bne.n	8002e40 <HAL_RCC_OscConfig+0x74>
 8002e32:	4b91      	ldr	r3, [pc, #580]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a90      	ldr	r2, [pc, #576]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e3c:	6013      	str	r3, [r2, #0]
 8002e3e:	e01d      	b.n	8002e7c <HAL_RCC_OscConfig+0xb0>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e48:	d10c      	bne.n	8002e64 <HAL_RCC_OscConfig+0x98>
 8002e4a:	4b8b      	ldr	r3, [pc, #556]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a8a      	ldr	r2, [pc, #552]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e54:	6013      	str	r3, [r2, #0]
 8002e56:	4b88      	ldr	r3, [pc, #544]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a87      	ldr	r2, [pc, #540]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e60:	6013      	str	r3, [r2, #0]
 8002e62:	e00b      	b.n	8002e7c <HAL_RCC_OscConfig+0xb0>
 8002e64:	4b84      	ldr	r3, [pc, #528]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a83      	ldr	r2, [pc, #524]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e6e:	6013      	str	r3, [r2, #0]
 8002e70:	4b81      	ldr	r3, [pc, #516]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a80      	ldr	r2, [pc, #512]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002e76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d013      	beq.n	8002eac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e84:	f7ff f9e0 	bl	8002248 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e8c:	f7ff f9dc 	bl	8002248 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b64      	cmp	r3, #100	; 0x64
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e1fb      	b.n	8003296 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e9e:	4b76      	ldr	r3, [pc, #472]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCC_OscConfig+0xc0>
 8002eaa:	e014      	b.n	8002ed6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eac:	f7ff f9cc 	bl	8002248 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eb4:	f7ff f9c8 	bl	8002248 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b64      	cmp	r3, #100	; 0x64
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e1e7      	b.n	8003296 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ec6:	4b6c      	ldr	r3, [pc, #432]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f0      	bne.n	8002eb4 <HAL_RCC_OscConfig+0xe8>
 8002ed2:	e000      	b.n	8002ed6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d063      	beq.n	8002faa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ee2:	4b65      	ldr	r3, [pc, #404]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 030c 	and.w	r3, r3, #12
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00b      	beq.n	8002f06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eee:	4b62      	ldr	r3, [pc, #392]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ef6:	2b08      	cmp	r3, #8
 8002ef8:	d11c      	bne.n	8002f34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002efa:	4b5f      	ldr	r3, [pc, #380]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d116      	bne.n	8002f34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f06:	4b5c      	ldr	r3, [pc, #368]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d005      	beq.n	8002f1e <HAL_RCC_OscConfig+0x152>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d001      	beq.n	8002f1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e1bb      	b.n	8003296 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f1e:	4b56      	ldr	r3, [pc, #344]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	4952      	ldr	r1, [pc, #328]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f32:	e03a      	b.n	8002faa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d020      	beq.n	8002f7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f3c:	4b4f      	ldr	r3, [pc, #316]	; (800307c <HAL_RCC_OscConfig+0x2b0>)
 8002f3e:	2201      	movs	r2, #1
 8002f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f42:	f7ff f981 	bl	8002248 <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f48:	e008      	b.n	8002f5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f4a:	f7ff f97d 	bl	8002248 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e19c      	b.n	8003296 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f5c:	4b46      	ldr	r3, [pc, #280]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d0f0      	beq.n	8002f4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f68:	4b43      	ldr	r3, [pc, #268]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	4940      	ldr	r1, [pc, #256]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	600b      	str	r3, [r1, #0]
 8002f7c:	e015      	b.n	8002faa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f7e:	4b3f      	ldr	r3, [pc, #252]	; (800307c <HAL_RCC_OscConfig+0x2b0>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f84:	f7ff f960 	bl	8002248 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f8c:	f7ff f95c 	bl	8002248 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e17b      	b.n	8003296 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f9e:	4b36      	ldr	r3, [pc, #216]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f0      	bne.n	8002f8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d030      	beq.n	8003018 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d016      	beq.n	8002fec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fbe:	4b30      	ldr	r3, [pc, #192]	; (8003080 <HAL_RCC_OscConfig+0x2b4>)
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc4:	f7ff f940 	bl	8002248 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fcc:	f7ff f93c 	bl	8002248 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e15b      	b.n	8003296 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fde:	4b26      	ldr	r3, [pc, #152]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8002fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0f0      	beq.n	8002fcc <HAL_RCC_OscConfig+0x200>
 8002fea:	e015      	b.n	8003018 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fec:	4b24      	ldr	r3, [pc, #144]	; (8003080 <HAL_RCC_OscConfig+0x2b4>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff2:	f7ff f929 	bl	8002248 <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ffa:	f7ff f925 	bl	8002248 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e144      	b.n	8003296 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800300c:	4b1a      	ldr	r3, [pc, #104]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 800300e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1f0      	bne.n	8002ffa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 80a0 	beq.w	8003166 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003026:	2300      	movs	r3, #0
 8003028:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800302a:	4b13      	ldr	r3, [pc, #76]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10f      	bne.n	8003056 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003036:	2300      	movs	r3, #0
 8003038:	60bb      	str	r3, [r7, #8]
 800303a:	4b0f      	ldr	r3, [pc, #60]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	4a0e      	ldr	r2, [pc, #56]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8003040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003044:	6413      	str	r3, [r2, #64]	; 0x40
 8003046:	4b0c      	ldr	r3, [pc, #48]	; (8003078 <HAL_RCC_OscConfig+0x2ac>)
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800304e:	60bb      	str	r3, [r7, #8]
 8003050:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003052:	2301      	movs	r3, #1
 8003054:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003056:	4b0b      	ldr	r3, [pc, #44]	; (8003084 <HAL_RCC_OscConfig+0x2b8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305e:	2b00      	cmp	r3, #0
 8003060:	d121      	bne.n	80030a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003062:	4b08      	ldr	r3, [pc, #32]	; (8003084 <HAL_RCC_OscConfig+0x2b8>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a07      	ldr	r2, [pc, #28]	; (8003084 <HAL_RCC_OscConfig+0x2b8>)
 8003068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800306c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800306e:	f7ff f8eb 	bl	8002248 <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003074:	e011      	b.n	800309a <HAL_RCC_OscConfig+0x2ce>
 8003076:	bf00      	nop
 8003078:	40023800 	.word	0x40023800
 800307c:	42470000 	.word	0x42470000
 8003080:	42470e80 	.word	0x42470e80
 8003084:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003088:	f7ff f8de 	bl	8002248 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e0fd      	b.n	8003296 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800309a:	4b81      	ldr	r3, [pc, #516]	; (80032a0 <HAL_RCC_OscConfig+0x4d4>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0f0      	beq.n	8003088 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d106      	bne.n	80030bc <HAL_RCC_OscConfig+0x2f0>
 80030ae:	4b7d      	ldr	r3, [pc, #500]	; (80032a4 <HAL_RCC_OscConfig+0x4d8>)
 80030b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b2:	4a7c      	ldr	r2, [pc, #496]	; (80032a4 <HAL_RCC_OscConfig+0x4d8>)
 80030b4:	f043 0301 	orr.w	r3, r3, #1
 80030b8:	6713      	str	r3, [r2, #112]	; 0x70
 80030ba:	e01c      	b.n	80030f6 <HAL_RCC_OscConfig+0x32a>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	2b05      	cmp	r3, #5
 80030c2:	d10c      	bne.n	80030de <HAL_RCC_OscConfig+0x312>
 80030c4:	4b77      	ldr	r3, [pc, #476]	; (80032a4 <HAL_RCC_OscConfig+0x4d8>)
 80030c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c8:	4a76      	ldr	r2, [pc, #472]	; (80032a4 <HAL_RCC_OscConfig+0x4d8>)
 80030ca:	f043 0304 	orr.w	r3, r3, #4
 80030ce:	6713      	str	r3, [r2, #112]	; 0x70
 80030d0:	4b74      	ldr	r3, [pc, #464]	; (80032a4 <HAL_RCC_OscConfig+0x4d8>)
 80030d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d4:	4a73      	ldr	r2, [pc, #460]	; (80032a4 <HAL_RCC_OscConfig+0x4d8>)
 80030d6:	f043 0301 	orr.w	r3, r3, #1
 80030da:	6713      	str	r3, [r2, #112]	; 0x70
 80030dc:	e00b      	b.n	80030f6 <HAL_RCC_OscConfig+0x32a>
 80030de:	4b71      	ldr	r3, [pc, #452]	; (80032a4 <HAL_RCC_OscConfig+0x4d8>)
 80030e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e2:	4a70      	ldr	r2, [pc, #448]	; (80032a4 <HAL_RCC_OscConfig+0x4d8>)
 80030e4:	f023 0301 	bic.w	r3, r3, #1
 80030e8:	6713      	str	r3, [r2, #112]	; 0x70
 80030ea:	4b6e      	ldr	r3, [pc, #440]	; (80032a4 <HAL_RCC_OscConfig+0x4d8>)
 80030ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ee:	4a6d      	ldr	r2, [pc, #436]	; (80032a4 <HAL_RCC_OscConfig+0x4d8>)
 80030f0:	f023 0304 	bic.w	r3, r3, #4
 80030f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d015      	beq.n	800312a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fe:	f7ff f8a3 	bl	8002248 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003104:	e00a      	b.n	800311c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003106:	f7ff f89f 	bl	8002248 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	f241 3288 	movw	r2, #5000	; 0x1388
 8003114:	4293      	cmp	r3, r2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e0bc      	b.n	8003296 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800311c:	4b61      	ldr	r3, [pc, #388]	; (80032a4 <HAL_RCC_OscConfig+0x4d8>)
 800311e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0ee      	beq.n	8003106 <HAL_RCC_OscConfig+0x33a>
 8003128:	e014      	b.n	8003154 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800312a:	f7ff f88d 	bl	8002248 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003130:	e00a      	b.n	8003148 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003132:	f7ff f889 	bl	8002248 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003140:	4293      	cmp	r3, r2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e0a6      	b.n	8003296 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003148:	4b56      	ldr	r3, [pc, #344]	; (80032a4 <HAL_RCC_OscConfig+0x4d8>)
 800314a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1ee      	bne.n	8003132 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003154:	7dfb      	ldrb	r3, [r7, #23]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d105      	bne.n	8003166 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800315a:	4b52      	ldr	r3, [pc, #328]	; (80032a4 <HAL_RCC_OscConfig+0x4d8>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	4a51      	ldr	r2, [pc, #324]	; (80032a4 <HAL_RCC_OscConfig+0x4d8>)
 8003160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003164:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 8092 	beq.w	8003294 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003170:	4b4c      	ldr	r3, [pc, #304]	; (80032a4 <HAL_RCC_OscConfig+0x4d8>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 030c 	and.w	r3, r3, #12
 8003178:	2b08      	cmp	r3, #8
 800317a:	d05c      	beq.n	8003236 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	2b02      	cmp	r3, #2
 8003182:	d141      	bne.n	8003208 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003184:	4b48      	ldr	r3, [pc, #288]	; (80032a8 <HAL_RCC_OscConfig+0x4dc>)
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318a:	f7ff f85d 	bl	8002248 <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003192:	f7ff f859 	bl	8002248 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e078      	b.n	8003296 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a4:	4b3f      	ldr	r3, [pc, #252]	; (80032a4 <HAL_RCC_OscConfig+0x4d8>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1f0      	bne.n	8003192 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	69da      	ldr	r2, [r3, #28]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	431a      	orrs	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	019b      	lsls	r3, r3, #6
 80031c0:	431a      	orrs	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c6:	085b      	lsrs	r3, r3, #1
 80031c8:	3b01      	subs	r3, #1
 80031ca:	041b      	lsls	r3, r3, #16
 80031cc:	431a      	orrs	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d2:	061b      	lsls	r3, r3, #24
 80031d4:	4933      	ldr	r1, [pc, #204]	; (80032a4 <HAL_RCC_OscConfig+0x4d8>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031da:	4b33      	ldr	r3, [pc, #204]	; (80032a8 <HAL_RCC_OscConfig+0x4dc>)
 80031dc:	2201      	movs	r2, #1
 80031de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e0:	f7ff f832 	bl	8002248 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e8:	f7ff f82e 	bl	8002248 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e04d      	b.n	8003296 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031fa:	4b2a      	ldr	r3, [pc, #168]	; (80032a4 <HAL_RCC_OscConfig+0x4d8>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0f0      	beq.n	80031e8 <HAL_RCC_OscConfig+0x41c>
 8003206:	e045      	b.n	8003294 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003208:	4b27      	ldr	r3, [pc, #156]	; (80032a8 <HAL_RCC_OscConfig+0x4dc>)
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320e:	f7ff f81b 	bl	8002248 <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003216:	f7ff f817 	bl	8002248 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e036      	b.n	8003296 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003228:	4b1e      	ldr	r3, [pc, #120]	; (80032a4 <HAL_RCC_OscConfig+0x4d8>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1f0      	bne.n	8003216 <HAL_RCC_OscConfig+0x44a>
 8003234:	e02e      	b.n	8003294 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d101      	bne.n	8003242 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e029      	b.n	8003296 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003242:	4b18      	ldr	r3, [pc, #96]	; (80032a4 <HAL_RCC_OscConfig+0x4d8>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	429a      	cmp	r2, r3
 8003254:	d11c      	bne.n	8003290 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003260:	429a      	cmp	r2, r3
 8003262:	d115      	bne.n	8003290 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800326a:	4013      	ands	r3, r2
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003270:	4293      	cmp	r3, r2
 8003272:	d10d      	bne.n	8003290 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800327e:	429a      	cmp	r2, r3
 8003280:	d106      	bne.n	8003290 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800328c:	429a      	cmp	r2, r3
 800328e:	d001      	beq.n	8003294 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e000      	b.n	8003296 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40007000 	.word	0x40007000
 80032a4:	40023800 	.word	0x40023800
 80032a8:	42470060 	.word	0x42470060

080032ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e0cc      	b.n	800345a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032c0:	4b68      	ldr	r3, [pc, #416]	; (8003464 <HAL_RCC_ClockConfig+0x1b8>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 030f 	and.w	r3, r3, #15
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d90c      	bls.n	80032e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ce:	4b65      	ldr	r3, [pc, #404]	; (8003464 <HAL_RCC_ClockConfig+0x1b8>)
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	b2d2      	uxtb	r2, r2
 80032d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032d6:	4b63      	ldr	r3, [pc, #396]	; (8003464 <HAL_RCC_ClockConfig+0x1b8>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 030f 	and.w	r3, r3, #15
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d001      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e0b8      	b.n	800345a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d020      	beq.n	8003336 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d005      	beq.n	800330c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003300:	4b59      	ldr	r3, [pc, #356]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	4a58      	ldr	r2, [pc, #352]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 8003306:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800330a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0308 	and.w	r3, r3, #8
 8003314:	2b00      	cmp	r3, #0
 8003316:	d005      	beq.n	8003324 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003318:	4b53      	ldr	r3, [pc, #332]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	4a52      	ldr	r2, [pc, #328]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 800331e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003322:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003324:	4b50      	ldr	r3, [pc, #320]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	494d      	ldr	r1, [pc, #308]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 8003332:	4313      	orrs	r3, r2
 8003334:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d044      	beq.n	80033cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d107      	bne.n	800335a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800334a:	4b47      	ldr	r3, [pc, #284]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d119      	bne.n	800338a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e07f      	b.n	800345a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b02      	cmp	r3, #2
 8003360:	d003      	beq.n	800336a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003366:	2b03      	cmp	r3, #3
 8003368:	d107      	bne.n	800337a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800336a:	4b3f      	ldr	r3, [pc, #252]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d109      	bne.n	800338a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e06f      	b.n	800345a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800337a:	4b3b      	ldr	r3, [pc, #236]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e067      	b.n	800345a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800338a:	4b37      	ldr	r3, [pc, #220]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f023 0203 	bic.w	r2, r3, #3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	4934      	ldr	r1, [pc, #208]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 8003398:	4313      	orrs	r3, r2
 800339a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800339c:	f7fe ff54 	bl	8002248 <HAL_GetTick>
 80033a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033a2:	e00a      	b.n	80033ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a4:	f7fe ff50 	bl	8002248 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e04f      	b.n	800345a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ba:	4b2b      	ldr	r3, [pc, #172]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 020c 	and.w	r2, r3, #12
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d1eb      	bne.n	80033a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033cc:	4b25      	ldr	r3, [pc, #148]	; (8003464 <HAL_RCC_ClockConfig+0x1b8>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 030f 	and.w	r3, r3, #15
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d20c      	bcs.n	80033f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033da:	4b22      	ldr	r3, [pc, #136]	; (8003464 <HAL_RCC_ClockConfig+0x1b8>)
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e2:	4b20      	ldr	r3, [pc, #128]	; (8003464 <HAL_RCC_ClockConfig+0x1b8>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d001      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e032      	b.n	800345a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d008      	beq.n	8003412 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003400:	4b19      	ldr	r3, [pc, #100]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	4916      	ldr	r1, [pc, #88]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 800340e:	4313      	orrs	r3, r2
 8003410:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0308 	and.w	r3, r3, #8
 800341a:	2b00      	cmp	r3, #0
 800341c:	d009      	beq.n	8003432 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800341e:	4b12      	ldr	r3, [pc, #72]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	490e      	ldr	r1, [pc, #56]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 800342e:	4313      	orrs	r3, r2
 8003430:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003432:	f000 f821 	bl	8003478 <HAL_RCC_GetSysClockFreq>
 8003436:	4601      	mov	r1, r0
 8003438:	4b0b      	ldr	r3, [pc, #44]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	091b      	lsrs	r3, r3, #4
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	4a0a      	ldr	r2, [pc, #40]	; (800346c <HAL_RCC_ClockConfig+0x1c0>)
 8003444:	5cd3      	ldrb	r3, [r2, r3]
 8003446:	fa21 f303 	lsr.w	r3, r1, r3
 800344a:	4a09      	ldr	r2, [pc, #36]	; (8003470 <HAL_RCC_ClockConfig+0x1c4>)
 800344c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800344e:	4b09      	ldr	r3, [pc, #36]	; (8003474 <HAL_RCC_ClockConfig+0x1c8>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f7fe feb4 	bl	80021c0 <HAL_InitTick>

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40023c00 	.word	0x40023c00
 8003468:	40023800 	.word	0x40023800
 800346c:	08007b5c 	.word	0x08007b5c
 8003470:	20000000 	.word	0x20000000
 8003474:	20000004 	.word	0x20000004

08003478 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800347e:	2300      	movs	r3, #0
 8003480:	607b      	str	r3, [r7, #4]
 8003482:	2300      	movs	r3, #0
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	2300      	movs	r3, #0
 8003488:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800348a:	2300      	movs	r3, #0
 800348c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800348e:	4b63      	ldr	r3, [pc, #396]	; (800361c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 030c 	and.w	r3, r3, #12
 8003496:	2b04      	cmp	r3, #4
 8003498:	d007      	beq.n	80034aa <HAL_RCC_GetSysClockFreq+0x32>
 800349a:	2b08      	cmp	r3, #8
 800349c:	d008      	beq.n	80034b0 <HAL_RCC_GetSysClockFreq+0x38>
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f040 80b4 	bne.w	800360c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034a4:	4b5e      	ldr	r3, [pc, #376]	; (8003620 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80034a6:	60bb      	str	r3, [r7, #8]
       break;
 80034a8:	e0b3      	b.n	8003612 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034aa:	4b5e      	ldr	r3, [pc, #376]	; (8003624 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80034ac:	60bb      	str	r3, [r7, #8]
      break;
 80034ae:	e0b0      	b.n	8003612 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034b0:	4b5a      	ldr	r3, [pc, #360]	; (800361c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034b8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034ba:	4b58      	ldr	r3, [pc, #352]	; (800361c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d04a      	beq.n	800355c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034c6:	4b55      	ldr	r3, [pc, #340]	; (800361c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	099b      	lsrs	r3, r3, #6
 80034cc:	f04f 0400 	mov.w	r4, #0
 80034d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	ea03 0501 	and.w	r5, r3, r1
 80034dc:	ea04 0602 	and.w	r6, r4, r2
 80034e0:	4629      	mov	r1, r5
 80034e2:	4632      	mov	r2, r6
 80034e4:	f04f 0300 	mov.w	r3, #0
 80034e8:	f04f 0400 	mov.w	r4, #0
 80034ec:	0154      	lsls	r4, r2, #5
 80034ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80034f2:	014b      	lsls	r3, r1, #5
 80034f4:	4619      	mov	r1, r3
 80034f6:	4622      	mov	r2, r4
 80034f8:	1b49      	subs	r1, r1, r5
 80034fa:	eb62 0206 	sbc.w	r2, r2, r6
 80034fe:	f04f 0300 	mov.w	r3, #0
 8003502:	f04f 0400 	mov.w	r4, #0
 8003506:	0194      	lsls	r4, r2, #6
 8003508:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800350c:	018b      	lsls	r3, r1, #6
 800350e:	1a5b      	subs	r3, r3, r1
 8003510:	eb64 0402 	sbc.w	r4, r4, r2
 8003514:	f04f 0100 	mov.w	r1, #0
 8003518:	f04f 0200 	mov.w	r2, #0
 800351c:	00e2      	lsls	r2, r4, #3
 800351e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003522:	00d9      	lsls	r1, r3, #3
 8003524:	460b      	mov	r3, r1
 8003526:	4614      	mov	r4, r2
 8003528:	195b      	adds	r3, r3, r5
 800352a:	eb44 0406 	adc.w	r4, r4, r6
 800352e:	f04f 0100 	mov.w	r1, #0
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	0262      	lsls	r2, r4, #9
 8003538:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800353c:	0259      	lsls	r1, r3, #9
 800353e:	460b      	mov	r3, r1
 8003540:	4614      	mov	r4, r2
 8003542:	4618      	mov	r0, r3
 8003544:	4621      	mov	r1, r4
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f04f 0400 	mov.w	r4, #0
 800354c:	461a      	mov	r2, r3
 800354e:	4623      	mov	r3, r4
 8003550:	f7fd fb2a 	bl	8000ba8 <__aeabi_uldivmod>
 8003554:	4603      	mov	r3, r0
 8003556:	460c      	mov	r4, r1
 8003558:	60fb      	str	r3, [r7, #12]
 800355a:	e049      	b.n	80035f0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800355c:	4b2f      	ldr	r3, [pc, #188]	; (800361c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	099b      	lsrs	r3, r3, #6
 8003562:	f04f 0400 	mov.w	r4, #0
 8003566:	f240 11ff 	movw	r1, #511	; 0x1ff
 800356a:	f04f 0200 	mov.w	r2, #0
 800356e:	ea03 0501 	and.w	r5, r3, r1
 8003572:	ea04 0602 	and.w	r6, r4, r2
 8003576:	4629      	mov	r1, r5
 8003578:	4632      	mov	r2, r6
 800357a:	f04f 0300 	mov.w	r3, #0
 800357e:	f04f 0400 	mov.w	r4, #0
 8003582:	0154      	lsls	r4, r2, #5
 8003584:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003588:	014b      	lsls	r3, r1, #5
 800358a:	4619      	mov	r1, r3
 800358c:	4622      	mov	r2, r4
 800358e:	1b49      	subs	r1, r1, r5
 8003590:	eb62 0206 	sbc.w	r2, r2, r6
 8003594:	f04f 0300 	mov.w	r3, #0
 8003598:	f04f 0400 	mov.w	r4, #0
 800359c:	0194      	lsls	r4, r2, #6
 800359e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80035a2:	018b      	lsls	r3, r1, #6
 80035a4:	1a5b      	subs	r3, r3, r1
 80035a6:	eb64 0402 	sbc.w	r4, r4, r2
 80035aa:	f04f 0100 	mov.w	r1, #0
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	00e2      	lsls	r2, r4, #3
 80035b4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80035b8:	00d9      	lsls	r1, r3, #3
 80035ba:	460b      	mov	r3, r1
 80035bc:	4614      	mov	r4, r2
 80035be:	195b      	adds	r3, r3, r5
 80035c0:	eb44 0406 	adc.w	r4, r4, r6
 80035c4:	f04f 0100 	mov.w	r1, #0
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	02a2      	lsls	r2, r4, #10
 80035ce:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80035d2:	0299      	lsls	r1, r3, #10
 80035d4:	460b      	mov	r3, r1
 80035d6:	4614      	mov	r4, r2
 80035d8:	4618      	mov	r0, r3
 80035da:	4621      	mov	r1, r4
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f04f 0400 	mov.w	r4, #0
 80035e2:	461a      	mov	r2, r3
 80035e4:	4623      	mov	r3, r4
 80035e6:	f7fd fadf 	bl	8000ba8 <__aeabi_uldivmod>
 80035ea:	4603      	mov	r3, r0
 80035ec:	460c      	mov	r4, r1
 80035ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035f0:	4b0a      	ldr	r3, [pc, #40]	; (800361c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	0c1b      	lsrs	r3, r3, #16
 80035f6:	f003 0303 	and.w	r3, r3, #3
 80035fa:	3301      	adds	r3, #1
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	fbb2 f3f3 	udiv	r3, r2, r3
 8003608:	60bb      	str	r3, [r7, #8]
      break;
 800360a:	e002      	b.n	8003612 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800360c:	4b04      	ldr	r3, [pc, #16]	; (8003620 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800360e:	60bb      	str	r3, [r7, #8]
      break;
 8003610:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003612:	68bb      	ldr	r3, [r7, #8]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800361c:	40023800 	.word	0x40023800
 8003620:	00f42400 	.word	0x00f42400
 8003624:	007a1200 	.word	0x007a1200

08003628 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800362c:	4b03      	ldr	r3, [pc, #12]	; (800363c <HAL_RCC_GetHCLKFreq+0x14>)
 800362e:	681b      	ldr	r3, [r3, #0]
}
 8003630:	4618      	mov	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	20000000 	.word	0x20000000

08003640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003644:	f7ff fff0 	bl	8003628 <HAL_RCC_GetHCLKFreq>
 8003648:	4601      	mov	r1, r0
 800364a:	4b05      	ldr	r3, [pc, #20]	; (8003660 <HAL_RCC_GetPCLK1Freq+0x20>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	0a9b      	lsrs	r3, r3, #10
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	4a03      	ldr	r2, [pc, #12]	; (8003664 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003656:	5cd3      	ldrb	r3, [r2, r3]
 8003658:	fa21 f303 	lsr.w	r3, r1, r3
}
 800365c:	4618      	mov	r0, r3
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40023800 	.word	0x40023800
 8003664:	08007b6c 	.word	0x08007b6c

08003668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800366c:	f7ff ffdc 	bl	8003628 <HAL_RCC_GetHCLKFreq>
 8003670:	4601      	mov	r1, r0
 8003672:	4b05      	ldr	r3, [pc, #20]	; (8003688 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	0b5b      	lsrs	r3, r3, #13
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	4a03      	ldr	r2, [pc, #12]	; (800368c <HAL_RCC_GetPCLK2Freq+0x24>)
 800367e:	5cd3      	ldrb	r3, [r2, r3]
 8003680:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003684:	4618      	mov	r0, r3
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40023800 	.word	0x40023800
 800368c:	08007b6c 	.word	0x08007b6c

08003690 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e03f      	b.n	8003722 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d106      	bne.n	80036bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7fe fc16 	bl	8001ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2224      	movs	r2, #36	; 0x24
 80036c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 fb97 	bl	8003e08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	691a      	ldr	r2, [r3, #16]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	695a      	ldr	r2, [r3, #20]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68da      	ldr	r2, [r3, #12]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003708:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2220      	movs	r2, #32
 800371c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b088      	sub	sp, #32
 800372e:	af02      	add	r7, sp, #8
 8003730:	60f8      	str	r0, [r7, #12]
 8003732:	60b9      	str	r1, [r7, #8]
 8003734:	603b      	str	r3, [r7, #0]
 8003736:	4613      	mov	r3, r2
 8003738:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800373a:	2300      	movs	r3, #0
 800373c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b20      	cmp	r3, #32
 8003748:	f040 8083 	bne.w	8003852 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <HAL_UART_Transmit+0x2e>
 8003752:	88fb      	ldrh	r3, [r7, #6]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e07b      	b.n	8003854 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003762:	2b01      	cmp	r3, #1
 8003764:	d101      	bne.n	800376a <HAL_UART_Transmit+0x40>
 8003766:	2302      	movs	r3, #2
 8003768:	e074      	b.n	8003854 <HAL_UART_Transmit+0x12a>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2221      	movs	r2, #33	; 0x21
 800377c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003780:	f7fe fd62 	bl	8002248 <HAL_GetTick>
 8003784:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	88fa      	ldrh	r2, [r7, #6]
 800378a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	88fa      	ldrh	r2, [r7, #6]
 8003790:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800379a:	e042      	b.n	8003822 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	3b01      	subs	r3, #1
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b2:	d122      	bne.n	80037fa <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	2200      	movs	r2, #0
 80037bc:	2180      	movs	r1, #128	; 0x80
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f000 f9b6 	bl	8003b30 <UART_WaitOnFlagUntilTimeout>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e042      	b.n	8003854 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	881b      	ldrh	r3, [r3, #0]
 80037d6:	461a      	mov	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037e0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d103      	bne.n	80037f2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	3302      	adds	r3, #2
 80037ee:	60bb      	str	r3, [r7, #8]
 80037f0:	e017      	b.n	8003822 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	3301      	adds	r3, #1
 80037f6:	60bb      	str	r3, [r7, #8]
 80037f8:	e013      	b.n	8003822 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	2200      	movs	r2, #0
 8003802:	2180      	movs	r1, #128	; 0x80
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 f993 	bl	8003b30 <UART_WaitOnFlagUntilTimeout>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e01f      	b.n	8003854 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	1c5a      	adds	r2, r3, #1
 8003818:	60ba      	str	r2, [r7, #8]
 800381a:	781a      	ldrb	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003826:	b29b      	uxth	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1b7      	bne.n	800379c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	9300      	str	r3, [sp, #0]
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	2200      	movs	r2, #0
 8003834:	2140      	movs	r1, #64	; 0x40
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 f97a 	bl	8003b30 <UART_WaitOnFlagUntilTimeout>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e006      	b.n	8003854 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2220      	movs	r2, #32
 800384a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800384e:	2300      	movs	r3, #0
 8003850:	e000      	b.n	8003854 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003852:	2302      	movs	r3, #2
  }
}
 8003854:	4618      	mov	r0, r3
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	4613      	mov	r3, r2
 8003868:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b20      	cmp	r3, #32
 8003874:	d140      	bne.n	80038f8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d002      	beq.n	8003882 <HAL_UART_Receive_IT+0x26>
 800387c:	88fb      	ldrh	r3, [r7, #6]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e039      	b.n	80038fa <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800388c:	2b01      	cmp	r3, #1
 800388e:	d101      	bne.n	8003894 <HAL_UART_Receive_IT+0x38>
 8003890:	2302      	movs	r3, #2
 8003892:	e032      	b.n	80038fa <HAL_UART_Receive_IT+0x9e>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	88fa      	ldrh	r2, [r7, #6]
 80038a6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	88fa      	ldrh	r2, [r7, #6]
 80038ac:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2222      	movs	r2, #34	; 0x22
 80038b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038d2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695a      	ldr	r2, [r3, #20]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0201 	orr.w	r2, r2, #1
 80038e2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0220 	orr.w	r2, r2, #32
 80038f2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80038f4:	2300      	movs	r3, #0
 80038f6:	e000      	b.n	80038fa <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80038f8:	2302      	movs	r3, #2
  }
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
	...

08003908 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b088      	sub	sp, #32
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003928:	2300      	movs	r3, #0
 800392a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800392c:	2300      	movs	r3, #0
 800392e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	f003 030f 	and.w	r3, r3, #15
 8003936:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10d      	bne.n	800395a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	f003 0320 	and.w	r3, r3, #32
 8003944:	2b00      	cmp	r3, #0
 8003946:	d008      	beq.n	800395a <HAL_UART_IRQHandler+0x52>
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	f003 0320 	and.w	r3, r3, #32
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f9d6 	bl	8003d04 <UART_Receive_IT>
      return;
 8003958:	e0d1      	b.n	8003afe <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 80b0 	beq.w	8003ac2 <HAL_UART_IRQHandler+0x1ba>
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	2b00      	cmp	r3, #0
 800396a:	d105      	bne.n	8003978 <HAL_UART_IRQHandler+0x70>
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 80a5 	beq.w	8003ac2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00a      	beq.n	8003998 <HAL_UART_IRQHandler+0x90>
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003988:	2b00      	cmp	r3, #0
 800398a:	d005      	beq.n	8003998 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003990:	f043 0201 	orr.w	r2, r3, #1
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	f003 0304 	and.w	r3, r3, #4
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00a      	beq.n	80039b8 <HAL_UART_IRQHandler+0xb0>
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d005      	beq.n	80039b8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b0:	f043 0202 	orr.w	r2, r3, #2
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00a      	beq.n	80039d8 <HAL_UART_IRQHandler+0xd0>
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d005      	beq.n	80039d8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d0:	f043 0204 	orr.w	r2, r3, #4
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00f      	beq.n	8003a02 <HAL_UART_IRQHandler+0xfa>
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	f003 0320 	and.w	r3, r3, #32
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d104      	bne.n	80039f6 <HAL_UART_IRQHandler+0xee>
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d005      	beq.n	8003a02 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fa:	f043 0208 	orr.w	r2, r3, #8
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d078      	beq.n	8003afc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	f003 0320 	and.w	r3, r3, #32
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d007      	beq.n	8003a24 <HAL_UART_IRQHandler+0x11c>
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d002      	beq.n	8003a24 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f970 	bl	8003d04 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a2e:	2b40      	cmp	r3, #64	; 0x40
 8003a30:	bf0c      	ite	eq
 8003a32:	2301      	moveq	r3, #1
 8003a34:	2300      	movne	r3, #0
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d102      	bne.n	8003a4c <HAL_UART_IRQHandler+0x144>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d031      	beq.n	8003ab0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f8b9 	bl	8003bc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a5c:	2b40      	cmp	r3, #64	; 0x40
 8003a5e:	d123      	bne.n	8003aa8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695a      	ldr	r2, [r3, #20]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a6e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d013      	beq.n	8003aa0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a7c:	4a21      	ldr	r2, [pc, #132]	; (8003b04 <HAL_UART_IRQHandler+0x1fc>)
 8003a7e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fe fdab 	bl	80025e0 <HAL_DMA_Abort_IT>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d016      	beq.n	8003abe <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a9a:	4610      	mov	r0, r2
 8003a9c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a9e:	e00e      	b.n	8003abe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 f83b 	bl	8003b1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa6:	e00a      	b.n	8003abe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 f837 	bl	8003b1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aae:	e006      	b.n	8003abe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f833 	bl	8003b1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003abc:	e01e      	b.n	8003afc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003abe:	bf00      	nop
    return;
 8003ac0:	e01c      	b.n	8003afc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d008      	beq.n	8003ade <HAL_UART_IRQHandler+0x1d6>
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f8a6 	bl	8003c28 <UART_Transmit_IT>
    return;
 8003adc:	e00f      	b.n	8003afe <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00a      	beq.n	8003afe <HAL_UART_IRQHandler+0x1f6>
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d005      	beq.n	8003afe <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f8ee 	bl	8003cd4 <UART_EndTransmit_IT>
    return;
 8003af8:	bf00      	nop
 8003afa:	e000      	b.n	8003afe <HAL_UART_IRQHandler+0x1f6>
    return;
 8003afc:	bf00      	nop
  }
}
 8003afe:	3720      	adds	r7, #32
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	08003c01 	.word	0x08003c01

08003b08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	603b      	str	r3, [r7, #0]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b40:	e02c      	b.n	8003b9c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b48:	d028      	beq.n	8003b9c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d007      	beq.n	8003b60 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b50:	f7fe fb7a 	bl	8002248 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d21d      	bcs.n	8003b9c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68da      	ldr	r2, [r3, #12]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b6e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695a      	ldr	r2, [r3, #20]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 0201 	bic.w	r2, r2, #1
 8003b7e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2220      	movs	r2, #32
 8003b84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e00f      	b.n	8003bbc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	bf0c      	ite	eq
 8003bac:	2301      	moveq	r3, #1
 8003bae:	2300      	movne	r3, #0
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	79fb      	ldrb	r3, [r7, #7]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d0c3      	beq.n	8003b42 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3710      	adds	r7, #16
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68da      	ldr	r2, [r3, #12]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003bda:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	695a      	ldr	r2, [r3, #20]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0201 	bic.w	r2, r2, #1
 8003bea:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f7ff ff7e 	bl	8003b1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c20:	bf00      	nop
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b21      	cmp	r3, #33	; 0x21
 8003c3a:	d144      	bne.n	8003cc6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c44:	d11a      	bne.n	8003c7c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	461a      	mov	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c5a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d105      	bne.n	8003c70 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	1c9a      	adds	r2, r3, #2
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	621a      	str	r2, [r3, #32]
 8003c6e:	e00e      	b.n	8003c8e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	1c5a      	adds	r2, r3, #1
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	621a      	str	r2, [r3, #32]
 8003c7a:	e008      	b.n	8003c8e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	1c59      	adds	r1, r3, #1
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6211      	str	r1, [r2, #32]
 8003c86:	781a      	ldrb	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	3b01      	subs	r3, #1
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10f      	bne.n	8003cc2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68da      	ldr	r2, [r3, #12]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cb0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68da      	ldr	r2, [r3, #12]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cc0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	e000      	b.n	8003cc8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003cc6:	2302      	movs	r3, #2
  }
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3714      	adds	r7, #20
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68da      	ldr	r2, [r3, #12]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f7ff ff07 	bl	8003b08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b22      	cmp	r3, #34	; 0x22
 8003d16:	d171      	bne.n	8003dfc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d20:	d123      	bne.n	8003d6a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d26:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d10e      	bne.n	8003d4e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d46:	1c9a      	adds	r2, r3, #2
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	629a      	str	r2, [r3, #40]	; 0x28
 8003d4c:	e029      	b.n	8003da2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d62:	1c5a      	adds	r2, r3, #1
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	629a      	str	r2, [r3, #40]	; 0x28
 8003d68:	e01b      	b.n	8003da2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10a      	bne.n	8003d88 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6858      	ldr	r0, [r3, #4]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7c:	1c59      	adds	r1, r3, #1
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	6291      	str	r1, [r2, #40]	; 0x28
 8003d82:	b2c2      	uxtb	r2, r0
 8003d84:	701a      	strb	r2, [r3, #0]
 8003d86:	e00c      	b.n	8003da2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d94:	1c58      	adds	r0, r3, #1
 8003d96:	6879      	ldr	r1, [r7, #4]
 8003d98:	6288      	str	r0, [r1, #40]	; 0x28
 8003d9a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d9e:	b2d2      	uxtb	r2, r2
 8003da0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	4619      	mov	r1, r3
 8003db0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d120      	bne.n	8003df8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68da      	ldr	r2, [r3, #12]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f022 0220 	bic.w	r2, r2, #32
 8003dc4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68da      	ldr	r2, [r3, #12]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dd4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	695a      	ldr	r2, [r3, #20]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 0201 	bic.w	r2, r2, #1
 8003de4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7fd ff0e 	bl	8001c10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003df4:	2300      	movs	r3, #0
 8003df6:	e002      	b.n	8003dfe <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	e000      	b.n	8003dfe <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003dfc:	2302      	movs	r3, #2
  }
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
	...

08003e08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e0c:	b085      	sub	sp, #20
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68da      	ldr	r2, [r3, #12]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	431a      	orrs	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	69db      	ldr	r3, [r3, #28]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003e4a:	f023 030c 	bic.w	r3, r3, #12
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6812      	ldr	r2, [r2, #0]
 8003e52:	68f9      	ldr	r1, [r7, #12]
 8003e54:	430b      	orrs	r3, r1
 8003e56:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	699a      	ldr	r2, [r3, #24]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e76:	f040 818b 	bne.w	8004190 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4ac1      	ldr	r2, [pc, #772]	; (8004184 <UART_SetConfig+0x37c>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d005      	beq.n	8003e90 <UART_SetConfig+0x88>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4abf      	ldr	r2, [pc, #764]	; (8004188 <UART_SetConfig+0x380>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	f040 80bd 	bne.w	800400a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e90:	f7ff fbea 	bl	8003668 <HAL_RCC_GetPCLK2Freq>
 8003e94:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	461d      	mov	r5, r3
 8003e9a:	f04f 0600 	mov.w	r6, #0
 8003e9e:	46a8      	mov	r8, r5
 8003ea0:	46b1      	mov	r9, r6
 8003ea2:	eb18 0308 	adds.w	r3, r8, r8
 8003ea6:	eb49 0409 	adc.w	r4, r9, r9
 8003eaa:	4698      	mov	r8, r3
 8003eac:	46a1      	mov	r9, r4
 8003eae:	eb18 0805 	adds.w	r8, r8, r5
 8003eb2:	eb49 0906 	adc.w	r9, r9, r6
 8003eb6:	f04f 0100 	mov.w	r1, #0
 8003eba:	f04f 0200 	mov.w	r2, #0
 8003ebe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ec2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ec6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003eca:	4688      	mov	r8, r1
 8003ecc:	4691      	mov	r9, r2
 8003ece:	eb18 0005 	adds.w	r0, r8, r5
 8003ed2:	eb49 0106 	adc.w	r1, r9, r6
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	461d      	mov	r5, r3
 8003edc:	f04f 0600 	mov.w	r6, #0
 8003ee0:	196b      	adds	r3, r5, r5
 8003ee2:	eb46 0406 	adc.w	r4, r6, r6
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	4623      	mov	r3, r4
 8003eea:	f7fc fe5d 	bl	8000ba8 <__aeabi_uldivmod>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	460c      	mov	r4, r1
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	4ba5      	ldr	r3, [pc, #660]	; (800418c <UART_SetConfig+0x384>)
 8003ef6:	fba3 2302 	umull	r2, r3, r3, r2
 8003efa:	095b      	lsrs	r3, r3, #5
 8003efc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	461d      	mov	r5, r3
 8003f04:	f04f 0600 	mov.w	r6, #0
 8003f08:	46a9      	mov	r9, r5
 8003f0a:	46b2      	mov	sl, r6
 8003f0c:	eb19 0309 	adds.w	r3, r9, r9
 8003f10:	eb4a 040a 	adc.w	r4, sl, sl
 8003f14:	4699      	mov	r9, r3
 8003f16:	46a2      	mov	sl, r4
 8003f18:	eb19 0905 	adds.w	r9, r9, r5
 8003f1c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f20:	f04f 0100 	mov.w	r1, #0
 8003f24:	f04f 0200 	mov.w	r2, #0
 8003f28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f2c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f30:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f34:	4689      	mov	r9, r1
 8003f36:	4692      	mov	sl, r2
 8003f38:	eb19 0005 	adds.w	r0, r9, r5
 8003f3c:	eb4a 0106 	adc.w	r1, sl, r6
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	461d      	mov	r5, r3
 8003f46:	f04f 0600 	mov.w	r6, #0
 8003f4a:	196b      	adds	r3, r5, r5
 8003f4c:	eb46 0406 	adc.w	r4, r6, r6
 8003f50:	461a      	mov	r2, r3
 8003f52:	4623      	mov	r3, r4
 8003f54:	f7fc fe28 	bl	8000ba8 <__aeabi_uldivmod>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	460c      	mov	r4, r1
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	4b8b      	ldr	r3, [pc, #556]	; (800418c <UART_SetConfig+0x384>)
 8003f60:	fba3 1302 	umull	r1, r3, r3, r2
 8003f64:	095b      	lsrs	r3, r3, #5
 8003f66:	2164      	movs	r1, #100	; 0x64
 8003f68:	fb01 f303 	mul.w	r3, r1, r3
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	3332      	adds	r3, #50	; 0x32
 8003f72:	4a86      	ldr	r2, [pc, #536]	; (800418c <UART_SetConfig+0x384>)
 8003f74:	fba2 2303 	umull	r2, r3, r2, r3
 8003f78:	095b      	lsrs	r3, r3, #5
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f80:	4498      	add	r8, r3
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	461d      	mov	r5, r3
 8003f86:	f04f 0600 	mov.w	r6, #0
 8003f8a:	46a9      	mov	r9, r5
 8003f8c:	46b2      	mov	sl, r6
 8003f8e:	eb19 0309 	adds.w	r3, r9, r9
 8003f92:	eb4a 040a 	adc.w	r4, sl, sl
 8003f96:	4699      	mov	r9, r3
 8003f98:	46a2      	mov	sl, r4
 8003f9a:	eb19 0905 	adds.w	r9, r9, r5
 8003f9e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003fa2:	f04f 0100 	mov.w	r1, #0
 8003fa6:	f04f 0200 	mov.w	r2, #0
 8003faa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fb2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fb6:	4689      	mov	r9, r1
 8003fb8:	4692      	mov	sl, r2
 8003fba:	eb19 0005 	adds.w	r0, r9, r5
 8003fbe:	eb4a 0106 	adc.w	r1, sl, r6
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	461d      	mov	r5, r3
 8003fc8:	f04f 0600 	mov.w	r6, #0
 8003fcc:	196b      	adds	r3, r5, r5
 8003fce:	eb46 0406 	adc.w	r4, r6, r6
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	4623      	mov	r3, r4
 8003fd6:	f7fc fde7 	bl	8000ba8 <__aeabi_uldivmod>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	460c      	mov	r4, r1
 8003fde:	461a      	mov	r2, r3
 8003fe0:	4b6a      	ldr	r3, [pc, #424]	; (800418c <UART_SetConfig+0x384>)
 8003fe2:	fba3 1302 	umull	r1, r3, r3, r2
 8003fe6:	095b      	lsrs	r3, r3, #5
 8003fe8:	2164      	movs	r1, #100	; 0x64
 8003fea:	fb01 f303 	mul.w	r3, r1, r3
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	3332      	adds	r3, #50	; 0x32
 8003ff4:	4a65      	ldr	r2, [pc, #404]	; (800418c <UART_SetConfig+0x384>)
 8003ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffa:	095b      	lsrs	r3, r3, #5
 8003ffc:	f003 0207 	and.w	r2, r3, #7
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4442      	add	r2, r8
 8004006:	609a      	str	r2, [r3, #8]
 8004008:	e26f      	b.n	80044ea <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800400a:	f7ff fb19 	bl	8003640 <HAL_RCC_GetPCLK1Freq>
 800400e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	461d      	mov	r5, r3
 8004014:	f04f 0600 	mov.w	r6, #0
 8004018:	46a8      	mov	r8, r5
 800401a:	46b1      	mov	r9, r6
 800401c:	eb18 0308 	adds.w	r3, r8, r8
 8004020:	eb49 0409 	adc.w	r4, r9, r9
 8004024:	4698      	mov	r8, r3
 8004026:	46a1      	mov	r9, r4
 8004028:	eb18 0805 	adds.w	r8, r8, r5
 800402c:	eb49 0906 	adc.w	r9, r9, r6
 8004030:	f04f 0100 	mov.w	r1, #0
 8004034:	f04f 0200 	mov.w	r2, #0
 8004038:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800403c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004040:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004044:	4688      	mov	r8, r1
 8004046:	4691      	mov	r9, r2
 8004048:	eb18 0005 	adds.w	r0, r8, r5
 800404c:	eb49 0106 	adc.w	r1, r9, r6
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	461d      	mov	r5, r3
 8004056:	f04f 0600 	mov.w	r6, #0
 800405a:	196b      	adds	r3, r5, r5
 800405c:	eb46 0406 	adc.w	r4, r6, r6
 8004060:	461a      	mov	r2, r3
 8004062:	4623      	mov	r3, r4
 8004064:	f7fc fda0 	bl	8000ba8 <__aeabi_uldivmod>
 8004068:	4603      	mov	r3, r0
 800406a:	460c      	mov	r4, r1
 800406c:	461a      	mov	r2, r3
 800406e:	4b47      	ldr	r3, [pc, #284]	; (800418c <UART_SetConfig+0x384>)
 8004070:	fba3 2302 	umull	r2, r3, r3, r2
 8004074:	095b      	lsrs	r3, r3, #5
 8004076:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	461d      	mov	r5, r3
 800407e:	f04f 0600 	mov.w	r6, #0
 8004082:	46a9      	mov	r9, r5
 8004084:	46b2      	mov	sl, r6
 8004086:	eb19 0309 	adds.w	r3, r9, r9
 800408a:	eb4a 040a 	adc.w	r4, sl, sl
 800408e:	4699      	mov	r9, r3
 8004090:	46a2      	mov	sl, r4
 8004092:	eb19 0905 	adds.w	r9, r9, r5
 8004096:	eb4a 0a06 	adc.w	sl, sl, r6
 800409a:	f04f 0100 	mov.w	r1, #0
 800409e:	f04f 0200 	mov.w	r2, #0
 80040a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040ae:	4689      	mov	r9, r1
 80040b0:	4692      	mov	sl, r2
 80040b2:	eb19 0005 	adds.w	r0, r9, r5
 80040b6:	eb4a 0106 	adc.w	r1, sl, r6
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	461d      	mov	r5, r3
 80040c0:	f04f 0600 	mov.w	r6, #0
 80040c4:	196b      	adds	r3, r5, r5
 80040c6:	eb46 0406 	adc.w	r4, r6, r6
 80040ca:	461a      	mov	r2, r3
 80040cc:	4623      	mov	r3, r4
 80040ce:	f7fc fd6b 	bl	8000ba8 <__aeabi_uldivmod>
 80040d2:	4603      	mov	r3, r0
 80040d4:	460c      	mov	r4, r1
 80040d6:	461a      	mov	r2, r3
 80040d8:	4b2c      	ldr	r3, [pc, #176]	; (800418c <UART_SetConfig+0x384>)
 80040da:	fba3 1302 	umull	r1, r3, r3, r2
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	2164      	movs	r1, #100	; 0x64
 80040e2:	fb01 f303 	mul.w	r3, r1, r3
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	3332      	adds	r3, #50	; 0x32
 80040ec:	4a27      	ldr	r2, [pc, #156]	; (800418c <UART_SetConfig+0x384>)
 80040ee:	fba2 2303 	umull	r2, r3, r2, r3
 80040f2:	095b      	lsrs	r3, r3, #5
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040fa:	4498      	add	r8, r3
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	461d      	mov	r5, r3
 8004100:	f04f 0600 	mov.w	r6, #0
 8004104:	46a9      	mov	r9, r5
 8004106:	46b2      	mov	sl, r6
 8004108:	eb19 0309 	adds.w	r3, r9, r9
 800410c:	eb4a 040a 	adc.w	r4, sl, sl
 8004110:	4699      	mov	r9, r3
 8004112:	46a2      	mov	sl, r4
 8004114:	eb19 0905 	adds.w	r9, r9, r5
 8004118:	eb4a 0a06 	adc.w	sl, sl, r6
 800411c:	f04f 0100 	mov.w	r1, #0
 8004120:	f04f 0200 	mov.w	r2, #0
 8004124:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004128:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800412c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004130:	4689      	mov	r9, r1
 8004132:	4692      	mov	sl, r2
 8004134:	eb19 0005 	adds.w	r0, r9, r5
 8004138:	eb4a 0106 	adc.w	r1, sl, r6
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	461d      	mov	r5, r3
 8004142:	f04f 0600 	mov.w	r6, #0
 8004146:	196b      	adds	r3, r5, r5
 8004148:	eb46 0406 	adc.w	r4, r6, r6
 800414c:	461a      	mov	r2, r3
 800414e:	4623      	mov	r3, r4
 8004150:	f7fc fd2a 	bl	8000ba8 <__aeabi_uldivmod>
 8004154:	4603      	mov	r3, r0
 8004156:	460c      	mov	r4, r1
 8004158:	461a      	mov	r2, r3
 800415a:	4b0c      	ldr	r3, [pc, #48]	; (800418c <UART_SetConfig+0x384>)
 800415c:	fba3 1302 	umull	r1, r3, r3, r2
 8004160:	095b      	lsrs	r3, r3, #5
 8004162:	2164      	movs	r1, #100	; 0x64
 8004164:	fb01 f303 	mul.w	r3, r1, r3
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	3332      	adds	r3, #50	; 0x32
 800416e:	4a07      	ldr	r2, [pc, #28]	; (800418c <UART_SetConfig+0x384>)
 8004170:	fba2 2303 	umull	r2, r3, r2, r3
 8004174:	095b      	lsrs	r3, r3, #5
 8004176:	f003 0207 	and.w	r2, r3, #7
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4442      	add	r2, r8
 8004180:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004182:	e1b2      	b.n	80044ea <UART_SetConfig+0x6e2>
 8004184:	40011000 	.word	0x40011000
 8004188:	40011400 	.word	0x40011400
 800418c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4ad7      	ldr	r2, [pc, #860]	; (80044f4 <UART_SetConfig+0x6ec>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d005      	beq.n	80041a6 <UART_SetConfig+0x39e>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4ad6      	ldr	r2, [pc, #856]	; (80044f8 <UART_SetConfig+0x6f0>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	f040 80d1 	bne.w	8004348 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80041a6:	f7ff fa5f 	bl	8003668 <HAL_RCC_GetPCLK2Freq>
 80041aa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	469a      	mov	sl, r3
 80041b0:	f04f 0b00 	mov.w	fp, #0
 80041b4:	46d0      	mov	r8, sl
 80041b6:	46d9      	mov	r9, fp
 80041b8:	eb18 0308 	adds.w	r3, r8, r8
 80041bc:	eb49 0409 	adc.w	r4, r9, r9
 80041c0:	4698      	mov	r8, r3
 80041c2:	46a1      	mov	r9, r4
 80041c4:	eb18 080a 	adds.w	r8, r8, sl
 80041c8:	eb49 090b 	adc.w	r9, r9, fp
 80041cc:	f04f 0100 	mov.w	r1, #0
 80041d0:	f04f 0200 	mov.w	r2, #0
 80041d4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80041d8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80041dc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80041e0:	4688      	mov	r8, r1
 80041e2:	4691      	mov	r9, r2
 80041e4:	eb1a 0508 	adds.w	r5, sl, r8
 80041e8:	eb4b 0609 	adc.w	r6, fp, r9
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	4619      	mov	r1, r3
 80041f2:	f04f 0200 	mov.w	r2, #0
 80041f6:	f04f 0300 	mov.w	r3, #0
 80041fa:	f04f 0400 	mov.w	r4, #0
 80041fe:	0094      	lsls	r4, r2, #2
 8004200:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004204:	008b      	lsls	r3, r1, #2
 8004206:	461a      	mov	r2, r3
 8004208:	4623      	mov	r3, r4
 800420a:	4628      	mov	r0, r5
 800420c:	4631      	mov	r1, r6
 800420e:	f7fc fccb 	bl	8000ba8 <__aeabi_uldivmod>
 8004212:	4603      	mov	r3, r0
 8004214:	460c      	mov	r4, r1
 8004216:	461a      	mov	r2, r3
 8004218:	4bb8      	ldr	r3, [pc, #736]	; (80044fc <UART_SetConfig+0x6f4>)
 800421a:	fba3 2302 	umull	r2, r3, r3, r2
 800421e:	095b      	lsrs	r3, r3, #5
 8004220:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	469b      	mov	fp, r3
 8004228:	f04f 0c00 	mov.w	ip, #0
 800422c:	46d9      	mov	r9, fp
 800422e:	46e2      	mov	sl, ip
 8004230:	eb19 0309 	adds.w	r3, r9, r9
 8004234:	eb4a 040a 	adc.w	r4, sl, sl
 8004238:	4699      	mov	r9, r3
 800423a:	46a2      	mov	sl, r4
 800423c:	eb19 090b 	adds.w	r9, r9, fp
 8004240:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004244:	f04f 0100 	mov.w	r1, #0
 8004248:	f04f 0200 	mov.w	r2, #0
 800424c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004250:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004254:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004258:	4689      	mov	r9, r1
 800425a:	4692      	mov	sl, r2
 800425c:	eb1b 0509 	adds.w	r5, fp, r9
 8004260:	eb4c 060a 	adc.w	r6, ip, sl
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	4619      	mov	r1, r3
 800426a:	f04f 0200 	mov.w	r2, #0
 800426e:	f04f 0300 	mov.w	r3, #0
 8004272:	f04f 0400 	mov.w	r4, #0
 8004276:	0094      	lsls	r4, r2, #2
 8004278:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800427c:	008b      	lsls	r3, r1, #2
 800427e:	461a      	mov	r2, r3
 8004280:	4623      	mov	r3, r4
 8004282:	4628      	mov	r0, r5
 8004284:	4631      	mov	r1, r6
 8004286:	f7fc fc8f 	bl	8000ba8 <__aeabi_uldivmod>
 800428a:	4603      	mov	r3, r0
 800428c:	460c      	mov	r4, r1
 800428e:	461a      	mov	r2, r3
 8004290:	4b9a      	ldr	r3, [pc, #616]	; (80044fc <UART_SetConfig+0x6f4>)
 8004292:	fba3 1302 	umull	r1, r3, r3, r2
 8004296:	095b      	lsrs	r3, r3, #5
 8004298:	2164      	movs	r1, #100	; 0x64
 800429a:	fb01 f303 	mul.w	r3, r1, r3
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	011b      	lsls	r3, r3, #4
 80042a2:	3332      	adds	r3, #50	; 0x32
 80042a4:	4a95      	ldr	r2, [pc, #596]	; (80044fc <UART_SetConfig+0x6f4>)
 80042a6:	fba2 2303 	umull	r2, r3, r2, r3
 80042aa:	095b      	lsrs	r3, r3, #5
 80042ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042b0:	4498      	add	r8, r3
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	469b      	mov	fp, r3
 80042b6:	f04f 0c00 	mov.w	ip, #0
 80042ba:	46d9      	mov	r9, fp
 80042bc:	46e2      	mov	sl, ip
 80042be:	eb19 0309 	adds.w	r3, r9, r9
 80042c2:	eb4a 040a 	adc.w	r4, sl, sl
 80042c6:	4699      	mov	r9, r3
 80042c8:	46a2      	mov	sl, r4
 80042ca:	eb19 090b 	adds.w	r9, r9, fp
 80042ce:	eb4a 0a0c 	adc.w	sl, sl, ip
 80042d2:	f04f 0100 	mov.w	r1, #0
 80042d6:	f04f 0200 	mov.w	r2, #0
 80042da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042e6:	4689      	mov	r9, r1
 80042e8:	4692      	mov	sl, r2
 80042ea:	eb1b 0509 	adds.w	r5, fp, r9
 80042ee:	eb4c 060a 	adc.w	r6, ip, sl
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	4619      	mov	r1, r3
 80042f8:	f04f 0200 	mov.w	r2, #0
 80042fc:	f04f 0300 	mov.w	r3, #0
 8004300:	f04f 0400 	mov.w	r4, #0
 8004304:	0094      	lsls	r4, r2, #2
 8004306:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800430a:	008b      	lsls	r3, r1, #2
 800430c:	461a      	mov	r2, r3
 800430e:	4623      	mov	r3, r4
 8004310:	4628      	mov	r0, r5
 8004312:	4631      	mov	r1, r6
 8004314:	f7fc fc48 	bl	8000ba8 <__aeabi_uldivmod>
 8004318:	4603      	mov	r3, r0
 800431a:	460c      	mov	r4, r1
 800431c:	461a      	mov	r2, r3
 800431e:	4b77      	ldr	r3, [pc, #476]	; (80044fc <UART_SetConfig+0x6f4>)
 8004320:	fba3 1302 	umull	r1, r3, r3, r2
 8004324:	095b      	lsrs	r3, r3, #5
 8004326:	2164      	movs	r1, #100	; 0x64
 8004328:	fb01 f303 	mul.w	r3, r1, r3
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	011b      	lsls	r3, r3, #4
 8004330:	3332      	adds	r3, #50	; 0x32
 8004332:	4a72      	ldr	r2, [pc, #456]	; (80044fc <UART_SetConfig+0x6f4>)
 8004334:	fba2 2303 	umull	r2, r3, r2, r3
 8004338:	095b      	lsrs	r3, r3, #5
 800433a:	f003 020f 	and.w	r2, r3, #15
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4442      	add	r2, r8
 8004344:	609a      	str	r2, [r3, #8]
 8004346:	e0d0      	b.n	80044ea <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004348:	f7ff f97a 	bl	8003640 <HAL_RCC_GetPCLK1Freq>
 800434c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	469a      	mov	sl, r3
 8004352:	f04f 0b00 	mov.w	fp, #0
 8004356:	46d0      	mov	r8, sl
 8004358:	46d9      	mov	r9, fp
 800435a:	eb18 0308 	adds.w	r3, r8, r8
 800435e:	eb49 0409 	adc.w	r4, r9, r9
 8004362:	4698      	mov	r8, r3
 8004364:	46a1      	mov	r9, r4
 8004366:	eb18 080a 	adds.w	r8, r8, sl
 800436a:	eb49 090b 	adc.w	r9, r9, fp
 800436e:	f04f 0100 	mov.w	r1, #0
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800437a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800437e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004382:	4688      	mov	r8, r1
 8004384:	4691      	mov	r9, r2
 8004386:	eb1a 0508 	adds.w	r5, sl, r8
 800438a:	eb4b 0609 	adc.w	r6, fp, r9
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	4619      	mov	r1, r3
 8004394:	f04f 0200 	mov.w	r2, #0
 8004398:	f04f 0300 	mov.w	r3, #0
 800439c:	f04f 0400 	mov.w	r4, #0
 80043a0:	0094      	lsls	r4, r2, #2
 80043a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80043a6:	008b      	lsls	r3, r1, #2
 80043a8:	461a      	mov	r2, r3
 80043aa:	4623      	mov	r3, r4
 80043ac:	4628      	mov	r0, r5
 80043ae:	4631      	mov	r1, r6
 80043b0:	f7fc fbfa 	bl	8000ba8 <__aeabi_uldivmod>
 80043b4:	4603      	mov	r3, r0
 80043b6:	460c      	mov	r4, r1
 80043b8:	461a      	mov	r2, r3
 80043ba:	4b50      	ldr	r3, [pc, #320]	; (80044fc <UART_SetConfig+0x6f4>)
 80043bc:	fba3 2302 	umull	r2, r3, r3, r2
 80043c0:	095b      	lsrs	r3, r3, #5
 80043c2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	469b      	mov	fp, r3
 80043ca:	f04f 0c00 	mov.w	ip, #0
 80043ce:	46d9      	mov	r9, fp
 80043d0:	46e2      	mov	sl, ip
 80043d2:	eb19 0309 	adds.w	r3, r9, r9
 80043d6:	eb4a 040a 	adc.w	r4, sl, sl
 80043da:	4699      	mov	r9, r3
 80043dc:	46a2      	mov	sl, r4
 80043de:	eb19 090b 	adds.w	r9, r9, fp
 80043e2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80043e6:	f04f 0100 	mov.w	r1, #0
 80043ea:	f04f 0200 	mov.w	r2, #0
 80043ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043fa:	4689      	mov	r9, r1
 80043fc:	4692      	mov	sl, r2
 80043fe:	eb1b 0509 	adds.w	r5, fp, r9
 8004402:	eb4c 060a 	adc.w	r6, ip, sl
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	4619      	mov	r1, r3
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	f04f 0300 	mov.w	r3, #0
 8004414:	f04f 0400 	mov.w	r4, #0
 8004418:	0094      	lsls	r4, r2, #2
 800441a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800441e:	008b      	lsls	r3, r1, #2
 8004420:	461a      	mov	r2, r3
 8004422:	4623      	mov	r3, r4
 8004424:	4628      	mov	r0, r5
 8004426:	4631      	mov	r1, r6
 8004428:	f7fc fbbe 	bl	8000ba8 <__aeabi_uldivmod>
 800442c:	4603      	mov	r3, r0
 800442e:	460c      	mov	r4, r1
 8004430:	461a      	mov	r2, r3
 8004432:	4b32      	ldr	r3, [pc, #200]	; (80044fc <UART_SetConfig+0x6f4>)
 8004434:	fba3 1302 	umull	r1, r3, r3, r2
 8004438:	095b      	lsrs	r3, r3, #5
 800443a:	2164      	movs	r1, #100	; 0x64
 800443c:	fb01 f303 	mul.w	r3, r1, r3
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	011b      	lsls	r3, r3, #4
 8004444:	3332      	adds	r3, #50	; 0x32
 8004446:	4a2d      	ldr	r2, [pc, #180]	; (80044fc <UART_SetConfig+0x6f4>)
 8004448:	fba2 2303 	umull	r2, r3, r2, r3
 800444c:	095b      	lsrs	r3, r3, #5
 800444e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004452:	4498      	add	r8, r3
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	469b      	mov	fp, r3
 8004458:	f04f 0c00 	mov.w	ip, #0
 800445c:	46d9      	mov	r9, fp
 800445e:	46e2      	mov	sl, ip
 8004460:	eb19 0309 	adds.w	r3, r9, r9
 8004464:	eb4a 040a 	adc.w	r4, sl, sl
 8004468:	4699      	mov	r9, r3
 800446a:	46a2      	mov	sl, r4
 800446c:	eb19 090b 	adds.w	r9, r9, fp
 8004470:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004474:	f04f 0100 	mov.w	r1, #0
 8004478:	f04f 0200 	mov.w	r2, #0
 800447c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004480:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004484:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004488:	4689      	mov	r9, r1
 800448a:	4692      	mov	sl, r2
 800448c:	eb1b 0509 	adds.w	r5, fp, r9
 8004490:	eb4c 060a 	adc.w	r6, ip, sl
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	4619      	mov	r1, r3
 800449a:	f04f 0200 	mov.w	r2, #0
 800449e:	f04f 0300 	mov.w	r3, #0
 80044a2:	f04f 0400 	mov.w	r4, #0
 80044a6:	0094      	lsls	r4, r2, #2
 80044a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80044ac:	008b      	lsls	r3, r1, #2
 80044ae:	461a      	mov	r2, r3
 80044b0:	4623      	mov	r3, r4
 80044b2:	4628      	mov	r0, r5
 80044b4:	4631      	mov	r1, r6
 80044b6:	f7fc fb77 	bl	8000ba8 <__aeabi_uldivmod>
 80044ba:	4603      	mov	r3, r0
 80044bc:	460c      	mov	r4, r1
 80044be:	461a      	mov	r2, r3
 80044c0:	4b0e      	ldr	r3, [pc, #56]	; (80044fc <UART_SetConfig+0x6f4>)
 80044c2:	fba3 1302 	umull	r1, r3, r3, r2
 80044c6:	095b      	lsrs	r3, r3, #5
 80044c8:	2164      	movs	r1, #100	; 0x64
 80044ca:	fb01 f303 	mul.w	r3, r1, r3
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	3332      	adds	r3, #50	; 0x32
 80044d4:	4a09      	ldr	r2, [pc, #36]	; (80044fc <UART_SetConfig+0x6f4>)
 80044d6:	fba2 2303 	umull	r2, r3, r2, r3
 80044da:	095b      	lsrs	r3, r3, #5
 80044dc:	f003 020f 	and.w	r2, r3, #15
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4442      	add	r2, r8
 80044e6:	609a      	str	r2, [r3, #8]
}
 80044e8:	e7ff      	b.n	80044ea <UART_SetConfig+0x6e2>
 80044ea:	bf00      	nop
 80044ec:	3714      	adds	r7, #20
 80044ee:	46bd      	mov	sp, r7
 80044f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044f4:	40011000 	.word	0x40011000
 80044f8:	40011400 	.word	0x40011400
 80044fc:	51eb851f 	.word	0x51eb851f

08004500 <atol>:
 8004500:	220a      	movs	r2, #10
 8004502:	2100      	movs	r1, #0
 8004504:	f000 be7a 	b.w	80051fc <strtol>

08004508 <__errno>:
 8004508:	4b01      	ldr	r3, [pc, #4]	; (8004510 <__errno+0x8>)
 800450a:	6818      	ldr	r0, [r3, #0]
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	2000000c 	.word	0x2000000c

08004514 <exit>:
 8004514:	b508      	push	{r3, lr}
 8004516:	4b07      	ldr	r3, [pc, #28]	; (8004534 <exit+0x20>)
 8004518:	4604      	mov	r4, r0
 800451a:	b113      	cbz	r3, 8004522 <exit+0xe>
 800451c:	2100      	movs	r1, #0
 800451e:	f3af 8000 	nop.w
 8004522:	4b05      	ldr	r3, [pc, #20]	; (8004538 <exit+0x24>)
 8004524:	6818      	ldr	r0, [r3, #0]
 8004526:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004528:	b103      	cbz	r3, 800452c <exit+0x18>
 800452a:	4798      	blx	r3
 800452c:	4620      	mov	r0, r4
 800452e:	f7fd fdaf 	bl	8002090 <_exit>
 8004532:	bf00      	nop
 8004534:	00000000 	.word	0x00000000
 8004538:	08007b7c 	.word	0x08007b7c

0800453c <__libc_init_array>:
 800453c:	b570      	push	{r4, r5, r6, lr}
 800453e:	4e0d      	ldr	r6, [pc, #52]	; (8004574 <__libc_init_array+0x38>)
 8004540:	4c0d      	ldr	r4, [pc, #52]	; (8004578 <__libc_init_array+0x3c>)
 8004542:	1ba4      	subs	r4, r4, r6
 8004544:	10a4      	asrs	r4, r4, #2
 8004546:	2500      	movs	r5, #0
 8004548:	42a5      	cmp	r5, r4
 800454a:	d109      	bne.n	8004560 <__libc_init_array+0x24>
 800454c:	4e0b      	ldr	r6, [pc, #44]	; (800457c <__libc_init_array+0x40>)
 800454e:	4c0c      	ldr	r4, [pc, #48]	; (8004580 <__libc_init_array+0x44>)
 8004550:	f003 facc 	bl	8007aec <_init>
 8004554:	1ba4      	subs	r4, r4, r6
 8004556:	10a4      	asrs	r4, r4, #2
 8004558:	2500      	movs	r5, #0
 800455a:	42a5      	cmp	r5, r4
 800455c:	d105      	bne.n	800456a <__libc_init_array+0x2e>
 800455e:	bd70      	pop	{r4, r5, r6, pc}
 8004560:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004564:	4798      	blx	r3
 8004566:	3501      	adds	r5, #1
 8004568:	e7ee      	b.n	8004548 <__libc_init_array+0xc>
 800456a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800456e:	4798      	blx	r3
 8004570:	3501      	adds	r5, #1
 8004572:	e7f2      	b.n	800455a <__libc_init_array+0x1e>
 8004574:	08007fc8 	.word	0x08007fc8
 8004578:	08007fc8 	.word	0x08007fc8
 800457c:	08007fc8 	.word	0x08007fc8
 8004580:	08007fcc 	.word	0x08007fcc

08004584 <malloc>:
 8004584:	4b02      	ldr	r3, [pc, #8]	; (8004590 <malloc+0xc>)
 8004586:	4601      	mov	r1, r0
 8004588:	6818      	ldr	r0, [r3, #0]
 800458a:	f000 b86d 	b.w	8004668 <_malloc_r>
 800458e:	bf00      	nop
 8004590:	2000000c 	.word	0x2000000c

08004594 <free>:
 8004594:	4b02      	ldr	r3, [pc, #8]	; (80045a0 <free+0xc>)
 8004596:	4601      	mov	r1, r0
 8004598:	6818      	ldr	r0, [r3, #0]
 800459a:	f000 b817 	b.w	80045cc <_free_r>
 800459e:	bf00      	nop
 80045a0:	2000000c 	.word	0x2000000c

080045a4 <memcpy>:
 80045a4:	b510      	push	{r4, lr}
 80045a6:	1e43      	subs	r3, r0, #1
 80045a8:	440a      	add	r2, r1
 80045aa:	4291      	cmp	r1, r2
 80045ac:	d100      	bne.n	80045b0 <memcpy+0xc>
 80045ae:	bd10      	pop	{r4, pc}
 80045b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045b8:	e7f7      	b.n	80045aa <memcpy+0x6>

080045ba <memset>:
 80045ba:	4402      	add	r2, r0
 80045bc:	4603      	mov	r3, r0
 80045be:	4293      	cmp	r3, r2
 80045c0:	d100      	bne.n	80045c4 <memset+0xa>
 80045c2:	4770      	bx	lr
 80045c4:	f803 1b01 	strb.w	r1, [r3], #1
 80045c8:	e7f9      	b.n	80045be <memset+0x4>
	...

080045cc <_free_r>:
 80045cc:	b538      	push	{r3, r4, r5, lr}
 80045ce:	4605      	mov	r5, r0
 80045d0:	2900      	cmp	r1, #0
 80045d2:	d045      	beq.n	8004660 <_free_r+0x94>
 80045d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045d8:	1f0c      	subs	r4, r1, #4
 80045da:	2b00      	cmp	r3, #0
 80045dc:	bfb8      	it	lt
 80045de:	18e4      	addlt	r4, r4, r3
 80045e0:	f001 fc8a 	bl	8005ef8 <__malloc_lock>
 80045e4:	4a1f      	ldr	r2, [pc, #124]	; (8004664 <_free_r+0x98>)
 80045e6:	6813      	ldr	r3, [r2, #0]
 80045e8:	4610      	mov	r0, r2
 80045ea:	b933      	cbnz	r3, 80045fa <_free_r+0x2e>
 80045ec:	6063      	str	r3, [r4, #4]
 80045ee:	6014      	str	r4, [r2, #0]
 80045f0:	4628      	mov	r0, r5
 80045f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045f6:	f001 bc80 	b.w	8005efa <__malloc_unlock>
 80045fa:	42a3      	cmp	r3, r4
 80045fc:	d90c      	bls.n	8004618 <_free_r+0x4c>
 80045fe:	6821      	ldr	r1, [r4, #0]
 8004600:	1862      	adds	r2, r4, r1
 8004602:	4293      	cmp	r3, r2
 8004604:	bf04      	itt	eq
 8004606:	681a      	ldreq	r2, [r3, #0]
 8004608:	685b      	ldreq	r3, [r3, #4]
 800460a:	6063      	str	r3, [r4, #4]
 800460c:	bf04      	itt	eq
 800460e:	1852      	addeq	r2, r2, r1
 8004610:	6022      	streq	r2, [r4, #0]
 8004612:	6004      	str	r4, [r0, #0]
 8004614:	e7ec      	b.n	80045f0 <_free_r+0x24>
 8004616:	4613      	mov	r3, r2
 8004618:	685a      	ldr	r2, [r3, #4]
 800461a:	b10a      	cbz	r2, 8004620 <_free_r+0x54>
 800461c:	42a2      	cmp	r2, r4
 800461e:	d9fa      	bls.n	8004616 <_free_r+0x4a>
 8004620:	6819      	ldr	r1, [r3, #0]
 8004622:	1858      	adds	r0, r3, r1
 8004624:	42a0      	cmp	r0, r4
 8004626:	d10b      	bne.n	8004640 <_free_r+0x74>
 8004628:	6820      	ldr	r0, [r4, #0]
 800462a:	4401      	add	r1, r0
 800462c:	1858      	adds	r0, r3, r1
 800462e:	4282      	cmp	r2, r0
 8004630:	6019      	str	r1, [r3, #0]
 8004632:	d1dd      	bne.n	80045f0 <_free_r+0x24>
 8004634:	6810      	ldr	r0, [r2, #0]
 8004636:	6852      	ldr	r2, [r2, #4]
 8004638:	605a      	str	r2, [r3, #4]
 800463a:	4401      	add	r1, r0
 800463c:	6019      	str	r1, [r3, #0]
 800463e:	e7d7      	b.n	80045f0 <_free_r+0x24>
 8004640:	d902      	bls.n	8004648 <_free_r+0x7c>
 8004642:	230c      	movs	r3, #12
 8004644:	602b      	str	r3, [r5, #0]
 8004646:	e7d3      	b.n	80045f0 <_free_r+0x24>
 8004648:	6820      	ldr	r0, [r4, #0]
 800464a:	1821      	adds	r1, r4, r0
 800464c:	428a      	cmp	r2, r1
 800464e:	bf04      	itt	eq
 8004650:	6811      	ldreq	r1, [r2, #0]
 8004652:	6852      	ldreq	r2, [r2, #4]
 8004654:	6062      	str	r2, [r4, #4]
 8004656:	bf04      	itt	eq
 8004658:	1809      	addeq	r1, r1, r0
 800465a:	6021      	streq	r1, [r4, #0]
 800465c:	605c      	str	r4, [r3, #4]
 800465e:	e7c7      	b.n	80045f0 <_free_r+0x24>
 8004660:	bd38      	pop	{r3, r4, r5, pc}
 8004662:	bf00      	nop
 8004664:	200002f0 	.word	0x200002f0

08004668 <_malloc_r>:
 8004668:	b570      	push	{r4, r5, r6, lr}
 800466a:	1ccd      	adds	r5, r1, #3
 800466c:	f025 0503 	bic.w	r5, r5, #3
 8004670:	3508      	adds	r5, #8
 8004672:	2d0c      	cmp	r5, #12
 8004674:	bf38      	it	cc
 8004676:	250c      	movcc	r5, #12
 8004678:	2d00      	cmp	r5, #0
 800467a:	4606      	mov	r6, r0
 800467c:	db01      	blt.n	8004682 <_malloc_r+0x1a>
 800467e:	42a9      	cmp	r1, r5
 8004680:	d903      	bls.n	800468a <_malloc_r+0x22>
 8004682:	230c      	movs	r3, #12
 8004684:	6033      	str	r3, [r6, #0]
 8004686:	2000      	movs	r0, #0
 8004688:	bd70      	pop	{r4, r5, r6, pc}
 800468a:	f001 fc35 	bl	8005ef8 <__malloc_lock>
 800468e:	4a21      	ldr	r2, [pc, #132]	; (8004714 <_malloc_r+0xac>)
 8004690:	6814      	ldr	r4, [r2, #0]
 8004692:	4621      	mov	r1, r4
 8004694:	b991      	cbnz	r1, 80046bc <_malloc_r+0x54>
 8004696:	4c20      	ldr	r4, [pc, #128]	; (8004718 <_malloc_r+0xb0>)
 8004698:	6823      	ldr	r3, [r4, #0]
 800469a:	b91b      	cbnz	r3, 80046a4 <_malloc_r+0x3c>
 800469c:	4630      	mov	r0, r6
 800469e:	f000 fc99 	bl	8004fd4 <_sbrk_r>
 80046a2:	6020      	str	r0, [r4, #0]
 80046a4:	4629      	mov	r1, r5
 80046a6:	4630      	mov	r0, r6
 80046a8:	f000 fc94 	bl	8004fd4 <_sbrk_r>
 80046ac:	1c43      	adds	r3, r0, #1
 80046ae:	d124      	bne.n	80046fa <_malloc_r+0x92>
 80046b0:	230c      	movs	r3, #12
 80046b2:	6033      	str	r3, [r6, #0]
 80046b4:	4630      	mov	r0, r6
 80046b6:	f001 fc20 	bl	8005efa <__malloc_unlock>
 80046ba:	e7e4      	b.n	8004686 <_malloc_r+0x1e>
 80046bc:	680b      	ldr	r3, [r1, #0]
 80046be:	1b5b      	subs	r3, r3, r5
 80046c0:	d418      	bmi.n	80046f4 <_malloc_r+0x8c>
 80046c2:	2b0b      	cmp	r3, #11
 80046c4:	d90f      	bls.n	80046e6 <_malloc_r+0x7e>
 80046c6:	600b      	str	r3, [r1, #0]
 80046c8:	50cd      	str	r5, [r1, r3]
 80046ca:	18cc      	adds	r4, r1, r3
 80046cc:	4630      	mov	r0, r6
 80046ce:	f001 fc14 	bl	8005efa <__malloc_unlock>
 80046d2:	f104 000b 	add.w	r0, r4, #11
 80046d6:	1d23      	adds	r3, r4, #4
 80046d8:	f020 0007 	bic.w	r0, r0, #7
 80046dc:	1ac3      	subs	r3, r0, r3
 80046de:	d0d3      	beq.n	8004688 <_malloc_r+0x20>
 80046e0:	425a      	negs	r2, r3
 80046e2:	50e2      	str	r2, [r4, r3]
 80046e4:	e7d0      	b.n	8004688 <_malloc_r+0x20>
 80046e6:	428c      	cmp	r4, r1
 80046e8:	684b      	ldr	r3, [r1, #4]
 80046ea:	bf16      	itet	ne
 80046ec:	6063      	strne	r3, [r4, #4]
 80046ee:	6013      	streq	r3, [r2, #0]
 80046f0:	460c      	movne	r4, r1
 80046f2:	e7eb      	b.n	80046cc <_malloc_r+0x64>
 80046f4:	460c      	mov	r4, r1
 80046f6:	6849      	ldr	r1, [r1, #4]
 80046f8:	e7cc      	b.n	8004694 <_malloc_r+0x2c>
 80046fa:	1cc4      	adds	r4, r0, #3
 80046fc:	f024 0403 	bic.w	r4, r4, #3
 8004700:	42a0      	cmp	r0, r4
 8004702:	d005      	beq.n	8004710 <_malloc_r+0xa8>
 8004704:	1a21      	subs	r1, r4, r0
 8004706:	4630      	mov	r0, r6
 8004708:	f000 fc64 	bl	8004fd4 <_sbrk_r>
 800470c:	3001      	adds	r0, #1
 800470e:	d0cf      	beq.n	80046b0 <_malloc_r+0x48>
 8004710:	6025      	str	r5, [r4, #0]
 8004712:	e7db      	b.n	80046cc <_malloc_r+0x64>
 8004714:	200002f0 	.word	0x200002f0
 8004718:	200002f4 	.word	0x200002f4

0800471c <__cvt>:
 800471c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004720:	ec55 4b10 	vmov	r4, r5, d0
 8004724:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004726:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800472a:	2d00      	cmp	r5, #0
 800472c:	460e      	mov	r6, r1
 800472e:	4691      	mov	r9, r2
 8004730:	4619      	mov	r1, r3
 8004732:	bfb8      	it	lt
 8004734:	4622      	movlt	r2, r4
 8004736:	462b      	mov	r3, r5
 8004738:	f027 0720 	bic.w	r7, r7, #32
 800473c:	bfbb      	ittet	lt
 800473e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004742:	461d      	movlt	r5, r3
 8004744:	2300      	movge	r3, #0
 8004746:	232d      	movlt	r3, #45	; 0x2d
 8004748:	bfb8      	it	lt
 800474a:	4614      	movlt	r4, r2
 800474c:	2f46      	cmp	r7, #70	; 0x46
 800474e:	700b      	strb	r3, [r1, #0]
 8004750:	d004      	beq.n	800475c <__cvt+0x40>
 8004752:	2f45      	cmp	r7, #69	; 0x45
 8004754:	d100      	bne.n	8004758 <__cvt+0x3c>
 8004756:	3601      	adds	r6, #1
 8004758:	2102      	movs	r1, #2
 800475a:	e000      	b.n	800475e <__cvt+0x42>
 800475c:	2103      	movs	r1, #3
 800475e:	ab03      	add	r3, sp, #12
 8004760:	9301      	str	r3, [sp, #4]
 8004762:	ab02      	add	r3, sp, #8
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	4632      	mov	r2, r6
 8004768:	4653      	mov	r3, sl
 800476a:	ec45 4b10 	vmov	d0, r4, r5
 800476e:	f000 fde7 	bl	8005340 <_dtoa_r>
 8004772:	2f47      	cmp	r7, #71	; 0x47
 8004774:	4680      	mov	r8, r0
 8004776:	d102      	bne.n	800477e <__cvt+0x62>
 8004778:	f019 0f01 	tst.w	r9, #1
 800477c:	d026      	beq.n	80047cc <__cvt+0xb0>
 800477e:	2f46      	cmp	r7, #70	; 0x46
 8004780:	eb08 0906 	add.w	r9, r8, r6
 8004784:	d111      	bne.n	80047aa <__cvt+0x8e>
 8004786:	f898 3000 	ldrb.w	r3, [r8]
 800478a:	2b30      	cmp	r3, #48	; 0x30
 800478c:	d10a      	bne.n	80047a4 <__cvt+0x88>
 800478e:	2200      	movs	r2, #0
 8004790:	2300      	movs	r3, #0
 8004792:	4620      	mov	r0, r4
 8004794:	4629      	mov	r1, r5
 8004796:	f7fc f997 	bl	8000ac8 <__aeabi_dcmpeq>
 800479a:	b918      	cbnz	r0, 80047a4 <__cvt+0x88>
 800479c:	f1c6 0601 	rsb	r6, r6, #1
 80047a0:	f8ca 6000 	str.w	r6, [sl]
 80047a4:	f8da 3000 	ldr.w	r3, [sl]
 80047a8:	4499      	add	r9, r3
 80047aa:	2200      	movs	r2, #0
 80047ac:	2300      	movs	r3, #0
 80047ae:	4620      	mov	r0, r4
 80047b0:	4629      	mov	r1, r5
 80047b2:	f7fc f989 	bl	8000ac8 <__aeabi_dcmpeq>
 80047b6:	b938      	cbnz	r0, 80047c8 <__cvt+0xac>
 80047b8:	2230      	movs	r2, #48	; 0x30
 80047ba:	9b03      	ldr	r3, [sp, #12]
 80047bc:	454b      	cmp	r3, r9
 80047be:	d205      	bcs.n	80047cc <__cvt+0xb0>
 80047c0:	1c59      	adds	r1, r3, #1
 80047c2:	9103      	str	r1, [sp, #12]
 80047c4:	701a      	strb	r2, [r3, #0]
 80047c6:	e7f8      	b.n	80047ba <__cvt+0x9e>
 80047c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80047cc:	9b03      	ldr	r3, [sp, #12]
 80047ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047d0:	eba3 0308 	sub.w	r3, r3, r8
 80047d4:	4640      	mov	r0, r8
 80047d6:	6013      	str	r3, [r2, #0]
 80047d8:	b004      	add	sp, #16
 80047da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080047de <__exponent>:
 80047de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047e0:	2900      	cmp	r1, #0
 80047e2:	4604      	mov	r4, r0
 80047e4:	bfba      	itte	lt
 80047e6:	4249      	neglt	r1, r1
 80047e8:	232d      	movlt	r3, #45	; 0x2d
 80047ea:	232b      	movge	r3, #43	; 0x2b
 80047ec:	2909      	cmp	r1, #9
 80047ee:	f804 2b02 	strb.w	r2, [r4], #2
 80047f2:	7043      	strb	r3, [r0, #1]
 80047f4:	dd20      	ble.n	8004838 <__exponent+0x5a>
 80047f6:	f10d 0307 	add.w	r3, sp, #7
 80047fa:	461f      	mov	r7, r3
 80047fc:	260a      	movs	r6, #10
 80047fe:	fb91 f5f6 	sdiv	r5, r1, r6
 8004802:	fb06 1115 	mls	r1, r6, r5, r1
 8004806:	3130      	adds	r1, #48	; 0x30
 8004808:	2d09      	cmp	r5, #9
 800480a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800480e:	f103 32ff 	add.w	r2, r3, #4294967295
 8004812:	4629      	mov	r1, r5
 8004814:	dc09      	bgt.n	800482a <__exponent+0x4c>
 8004816:	3130      	adds	r1, #48	; 0x30
 8004818:	3b02      	subs	r3, #2
 800481a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800481e:	42bb      	cmp	r3, r7
 8004820:	4622      	mov	r2, r4
 8004822:	d304      	bcc.n	800482e <__exponent+0x50>
 8004824:	1a10      	subs	r0, r2, r0
 8004826:	b003      	add	sp, #12
 8004828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800482a:	4613      	mov	r3, r2
 800482c:	e7e7      	b.n	80047fe <__exponent+0x20>
 800482e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004832:	f804 2b01 	strb.w	r2, [r4], #1
 8004836:	e7f2      	b.n	800481e <__exponent+0x40>
 8004838:	2330      	movs	r3, #48	; 0x30
 800483a:	4419      	add	r1, r3
 800483c:	7083      	strb	r3, [r0, #2]
 800483e:	1d02      	adds	r2, r0, #4
 8004840:	70c1      	strb	r1, [r0, #3]
 8004842:	e7ef      	b.n	8004824 <__exponent+0x46>

08004844 <_printf_float>:
 8004844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004848:	b08d      	sub	sp, #52	; 0x34
 800484a:	460c      	mov	r4, r1
 800484c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004850:	4616      	mov	r6, r2
 8004852:	461f      	mov	r7, r3
 8004854:	4605      	mov	r5, r0
 8004856:	f001 fb2f 	bl	8005eb8 <_localeconv_r>
 800485a:	6803      	ldr	r3, [r0, #0]
 800485c:	9304      	str	r3, [sp, #16]
 800485e:	4618      	mov	r0, r3
 8004860:	f7fb fcb6 	bl	80001d0 <strlen>
 8004864:	2300      	movs	r3, #0
 8004866:	930a      	str	r3, [sp, #40]	; 0x28
 8004868:	f8d8 3000 	ldr.w	r3, [r8]
 800486c:	9005      	str	r0, [sp, #20]
 800486e:	3307      	adds	r3, #7
 8004870:	f023 0307 	bic.w	r3, r3, #7
 8004874:	f103 0208 	add.w	r2, r3, #8
 8004878:	f894 a018 	ldrb.w	sl, [r4, #24]
 800487c:	f8d4 b000 	ldr.w	fp, [r4]
 8004880:	f8c8 2000 	str.w	r2, [r8]
 8004884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004888:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800488c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004890:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004894:	9307      	str	r3, [sp, #28]
 8004896:	f8cd 8018 	str.w	r8, [sp, #24]
 800489a:	f04f 32ff 	mov.w	r2, #4294967295
 800489e:	4ba7      	ldr	r3, [pc, #668]	; (8004b3c <_printf_float+0x2f8>)
 80048a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048a4:	f7fc f942 	bl	8000b2c <__aeabi_dcmpun>
 80048a8:	bb70      	cbnz	r0, 8004908 <_printf_float+0xc4>
 80048aa:	f04f 32ff 	mov.w	r2, #4294967295
 80048ae:	4ba3      	ldr	r3, [pc, #652]	; (8004b3c <_printf_float+0x2f8>)
 80048b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048b4:	f7fc f91c 	bl	8000af0 <__aeabi_dcmple>
 80048b8:	bb30      	cbnz	r0, 8004908 <_printf_float+0xc4>
 80048ba:	2200      	movs	r2, #0
 80048bc:	2300      	movs	r3, #0
 80048be:	4640      	mov	r0, r8
 80048c0:	4649      	mov	r1, r9
 80048c2:	f7fc f90b 	bl	8000adc <__aeabi_dcmplt>
 80048c6:	b110      	cbz	r0, 80048ce <_printf_float+0x8a>
 80048c8:	232d      	movs	r3, #45	; 0x2d
 80048ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048ce:	4a9c      	ldr	r2, [pc, #624]	; (8004b40 <_printf_float+0x2fc>)
 80048d0:	4b9c      	ldr	r3, [pc, #624]	; (8004b44 <_printf_float+0x300>)
 80048d2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80048d6:	bf8c      	ite	hi
 80048d8:	4690      	movhi	r8, r2
 80048da:	4698      	movls	r8, r3
 80048dc:	2303      	movs	r3, #3
 80048de:	f02b 0204 	bic.w	r2, fp, #4
 80048e2:	6123      	str	r3, [r4, #16]
 80048e4:	6022      	str	r2, [r4, #0]
 80048e6:	f04f 0900 	mov.w	r9, #0
 80048ea:	9700      	str	r7, [sp, #0]
 80048ec:	4633      	mov	r3, r6
 80048ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80048f0:	4621      	mov	r1, r4
 80048f2:	4628      	mov	r0, r5
 80048f4:	f000 f9e6 	bl	8004cc4 <_printf_common>
 80048f8:	3001      	adds	r0, #1
 80048fa:	f040 808d 	bne.w	8004a18 <_printf_float+0x1d4>
 80048fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004902:	b00d      	add	sp, #52	; 0x34
 8004904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004908:	4642      	mov	r2, r8
 800490a:	464b      	mov	r3, r9
 800490c:	4640      	mov	r0, r8
 800490e:	4649      	mov	r1, r9
 8004910:	f7fc f90c 	bl	8000b2c <__aeabi_dcmpun>
 8004914:	b110      	cbz	r0, 800491c <_printf_float+0xd8>
 8004916:	4a8c      	ldr	r2, [pc, #560]	; (8004b48 <_printf_float+0x304>)
 8004918:	4b8c      	ldr	r3, [pc, #560]	; (8004b4c <_printf_float+0x308>)
 800491a:	e7da      	b.n	80048d2 <_printf_float+0x8e>
 800491c:	6861      	ldr	r1, [r4, #4]
 800491e:	1c4b      	adds	r3, r1, #1
 8004920:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004924:	a80a      	add	r0, sp, #40	; 0x28
 8004926:	d13e      	bne.n	80049a6 <_printf_float+0x162>
 8004928:	2306      	movs	r3, #6
 800492a:	6063      	str	r3, [r4, #4]
 800492c:	2300      	movs	r3, #0
 800492e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004932:	ab09      	add	r3, sp, #36	; 0x24
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	ec49 8b10 	vmov	d0, r8, r9
 800493a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800493e:	6022      	str	r2, [r4, #0]
 8004940:	f8cd a004 	str.w	sl, [sp, #4]
 8004944:	6861      	ldr	r1, [r4, #4]
 8004946:	4628      	mov	r0, r5
 8004948:	f7ff fee8 	bl	800471c <__cvt>
 800494c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004950:	2b47      	cmp	r3, #71	; 0x47
 8004952:	4680      	mov	r8, r0
 8004954:	d109      	bne.n	800496a <_printf_float+0x126>
 8004956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004958:	1cd8      	adds	r0, r3, #3
 800495a:	db02      	blt.n	8004962 <_printf_float+0x11e>
 800495c:	6862      	ldr	r2, [r4, #4]
 800495e:	4293      	cmp	r3, r2
 8004960:	dd47      	ble.n	80049f2 <_printf_float+0x1ae>
 8004962:	f1aa 0a02 	sub.w	sl, sl, #2
 8004966:	fa5f fa8a 	uxtb.w	sl, sl
 800496a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800496e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004970:	d824      	bhi.n	80049bc <_printf_float+0x178>
 8004972:	3901      	subs	r1, #1
 8004974:	4652      	mov	r2, sl
 8004976:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800497a:	9109      	str	r1, [sp, #36]	; 0x24
 800497c:	f7ff ff2f 	bl	80047de <__exponent>
 8004980:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004982:	1813      	adds	r3, r2, r0
 8004984:	2a01      	cmp	r2, #1
 8004986:	4681      	mov	r9, r0
 8004988:	6123      	str	r3, [r4, #16]
 800498a:	dc02      	bgt.n	8004992 <_printf_float+0x14e>
 800498c:	6822      	ldr	r2, [r4, #0]
 800498e:	07d1      	lsls	r1, r2, #31
 8004990:	d501      	bpl.n	8004996 <_printf_float+0x152>
 8004992:	3301      	adds	r3, #1
 8004994:	6123      	str	r3, [r4, #16]
 8004996:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0a5      	beq.n	80048ea <_printf_float+0xa6>
 800499e:	232d      	movs	r3, #45	; 0x2d
 80049a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049a4:	e7a1      	b.n	80048ea <_printf_float+0xa6>
 80049a6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80049aa:	f000 8177 	beq.w	8004c9c <_printf_float+0x458>
 80049ae:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80049b2:	d1bb      	bne.n	800492c <_printf_float+0xe8>
 80049b4:	2900      	cmp	r1, #0
 80049b6:	d1b9      	bne.n	800492c <_printf_float+0xe8>
 80049b8:	2301      	movs	r3, #1
 80049ba:	e7b6      	b.n	800492a <_printf_float+0xe6>
 80049bc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80049c0:	d119      	bne.n	80049f6 <_printf_float+0x1b2>
 80049c2:	2900      	cmp	r1, #0
 80049c4:	6863      	ldr	r3, [r4, #4]
 80049c6:	dd0c      	ble.n	80049e2 <_printf_float+0x19e>
 80049c8:	6121      	str	r1, [r4, #16]
 80049ca:	b913      	cbnz	r3, 80049d2 <_printf_float+0x18e>
 80049cc:	6822      	ldr	r2, [r4, #0]
 80049ce:	07d2      	lsls	r2, r2, #31
 80049d0:	d502      	bpl.n	80049d8 <_printf_float+0x194>
 80049d2:	3301      	adds	r3, #1
 80049d4:	440b      	add	r3, r1
 80049d6:	6123      	str	r3, [r4, #16]
 80049d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049da:	65a3      	str	r3, [r4, #88]	; 0x58
 80049dc:	f04f 0900 	mov.w	r9, #0
 80049e0:	e7d9      	b.n	8004996 <_printf_float+0x152>
 80049e2:	b913      	cbnz	r3, 80049ea <_printf_float+0x1a6>
 80049e4:	6822      	ldr	r2, [r4, #0]
 80049e6:	07d0      	lsls	r0, r2, #31
 80049e8:	d501      	bpl.n	80049ee <_printf_float+0x1aa>
 80049ea:	3302      	adds	r3, #2
 80049ec:	e7f3      	b.n	80049d6 <_printf_float+0x192>
 80049ee:	2301      	movs	r3, #1
 80049f0:	e7f1      	b.n	80049d6 <_printf_float+0x192>
 80049f2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80049f6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80049fa:	4293      	cmp	r3, r2
 80049fc:	db05      	blt.n	8004a0a <_printf_float+0x1c6>
 80049fe:	6822      	ldr	r2, [r4, #0]
 8004a00:	6123      	str	r3, [r4, #16]
 8004a02:	07d1      	lsls	r1, r2, #31
 8004a04:	d5e8      	bpl.n	80049d8 <_printf_float+0x194>
 8004a06:	3301      	adds	r3, #1
 8004a08:	e7e5      	b.n	80049d6 <_printf_float+0x192>
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	bfd4      	ite	le
 8004a0e:	f1c3 0302 	rsble	r3, r3, #2
 8004a12:	2301      	movgt	r3, #1
 8004a14:	4413      	add	r3, r2
 8004a16:	e7de      	b.n	80049d6 <_printf_float+0x192>
 8004a18:	6823      	ldr	r3, [r4, #0]
 8004a1a:	055a      	lsls	r2, r3, #21
 8004a1c:	d407      	bmi.n	8004a2e <_printf_float+0x1ea>
 8004a1e:	6923      	ldr	r3, [r4, #16]
 8004a20:	4642      	mov	r2, r8
 8004a22:	4631      	mov	r1, r6
 8004a24:	4628      	mov	r0, r5
 8004a26:	47b8      	blx	r7
 8004a28:	3001      	adds	r0, #1
 8004a2a:	d12b      	bne.n	8004a84 <_printf_float+0x240>
 8004a2c:	e767      	b.n	80048fe <_printf_float+0xba>
 8004a2e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004a32:	f240 80dc 	bls.w	8004bee <_printf_float+0x3aa>
 8004a36:	2200      	movs	r2, #0
 8004a38:	2300      	movs	r3, #0
 8004a3a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a3e:	f7fc f843 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a42:	2800      	cmp	r0, #0
 8004a44:	d033      	beq.n	8004aae <_printf_float+0x26a>
 8004a46:	2301      	movs	r3, #1
 8004a48:	4a41      	ldr	r2, [pc, #260]	; (8004b50 <_printf_float+0x30c>)
 8004a4a:	4631      	mov	r1, r6
 8004a4c:	4628      	mov	r0, r5
 8004a4e:	47b8      	blx	r7
 8004a50:	3001      	adds	r0, #1
 8004a52:	f43f af54 	beq.w	80048fe <_printf_float+0xba>
 8004a56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	db02      	blt.n	8004a64 <_printf_float+0x220>
 8004a5e:	6823      	ldr	r3, [r4, #0]
 8004a60:	07d8      	lsls	r0, r3, #31
 8004a62:	d50f      	bpl.n	8004a84 <_printf_float+0x240>
 8004a64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a68:	4631      	mov	r1, r6
 8004a6a:	4628      	mov	r0, r5
 8004a6c:	47b8      	blx	r7
 8004a6e:	3001      	adds	r0, #1
 8004a70:	f43f af45 	beq.w	80048fe <_printf_float+0xba>
 8004a74:	f04f 0800 	mov.w	r8, #0
 8004a78:	f104 091a 	add.w	r9, r4, #26
 8004a7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	4543      	cmp	r3, r8
 8004a82:	dc09      	bgt.n	8004a98 <_printf_float+0x254>
 8004a84:	6823      	ldr	r3, [r4, #0]
 8004a86:	079b      	lsls	r3, r3, #30
 8004a88:	f100 8103 	bmi.w	8004c92 <_printf_float+0x44e>
 8004a8c:	68e0      	ldr	r0, [r4, #12]
 8004a8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a90:	4298      	cmp	r0, r3
 8004a92:	bfb8      	it	lt
 8004a94:	4618      	movlt	r0, r3
 8004a96:	e734      	b.n	8004902 <_printf_float+0xbe>
 8004a98:	2301      	movs	r3, #1
 8004a9a:	464a      	mov	r2, r9
 8004a9c:	4631      	mov	r1, r6
 8004a9e:	4628      	mov	r0, r5
 8004aa0:	47b8      	blx	r7
 8004aa2:	3001      	adds	r0, #1
 8004aa4:	f43f af2b 	beq.w	80048fe <_printf_float+0xba>
 8004aa8:	f108 0801 	add.w	r8, r8, #1
 8004aac:	e7e6      	b.n	8004a7c <_printf_float+0x238>
 8004aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	dc2b      	bgt.n	8004b0c <_printf_float+0x2c8>
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	4a26      	ldr	r2, [pc, #152]	; (8004b50 <_printf_float+0x30c>)
 8004ab8:	4631      	mov	r1, r6
 8004aba:	4628      	mov	r0, r5
 8004abc:	47b8      	blx	r7
 8004abe:	3001      	adds	r0, #1
 8004ac0:	f43f af1d 	beq.w	80048fe <_printf_float+0xba>
 8004ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ac6:	b923      	cbnz	r3, 8004ad2 <_printf_float+0x28e>
 8004ac8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004aca:	b913      	cbnz	r3, 8004ad2 <_printf_float+0x28e>
 8004acc:	6823      	ldr	r3, [r4, #0]
 8004ace:	07d9      	lsls	r1, r3, #31
 8004ad0:	d5d8      	bpl.n	8004a84 <_printf_float+0x240>
 8004ad2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ad6:	4631      	mov	r1, r6
 8004ad8:	4628      	mov	r0, r5
 8004ada:	47b8      	blx	r7
 8004adc:	3001      	adds	r0, #1
 8004ade:	f43f af0e 	beq.w	80048fe <_printf_float+0xba>
 8004ae2:	f04f 0900 	mov.w	r9, #0
 8004ae6:	f104 0a1a 	add.w	sl, r4, #26
 8004aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aec:	425b      	negs	r3, r3
 8004aee:	454b      	cmp	r3, r9
 8004af0:	dc01      	bgt.n	8004af6 <_printf_float+0x2b2>
 8004af2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004af4:	e794      	b.n	8004a20 <_printf_float+0x1dc>
 8004af6:	2301      	movs	r3, #1
 8004af8:	4652      	mov	r2, sl
 8004afa:	4631      	mov	r1, r6
 8004afc:	4628      	mov	r0, r5
 8004afe:	47b8      	blx	r7
 8004b00:	3001      	adds	r0, #1
 8004b02:	f43f aefc 	beq.w	80048fe <_printf_float+0xba>
 8004b06:	f109 0901 	add.w	r9, r9, #1
 8004b0a:	e7ee      	b.n	8004aea <_printf_float+0x2a6>
 8004b0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b10:	429a      	cmp	r2, r3
 8004b12:	bfa8      	it	ge
 8004b14:	461a      	movge	r2, r3
 8004b16:	2a00      	cmp	r2, #0
 8004b18:	4691      	mov	r9, r2
 8004b1a:	dd07      	ble.n	8004b2c <_printf_float+0x2e8>
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	4631      	mov	r1, r6
 8004b20:	4642      	mov	r2, r8
 8004b22:	4628      	mov	r0, r5
 8004b24:	47b8      	blx	r7
 8004b26:	3001      	adds	r0, #1
 8004b28:	f43f aee9 	beq.w	80048fe <_printf_float+0xba>
 8004b2c:	f104 031a 	add.w	r3, r4, #26
 8004b30:	f04f 0b00 	mov.w	fp, #0
 8004b34:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b38:	9306      	str	r3, [sp, #24]
 8004b3a:	e015      	b.n	8004b68 <_printf_float+0x324>
 8004b3c:	7fefffff 	.word	0x7fefffff
 8004b40:	08007b84 	.word	0x08007b84
 8004b44:	08007b80 	.word	0x08007b80
 8004b48:	08007b8c 	.word	0x08007b8c
 8004b4c:	08007b88 	.word	0x08007b88
 8004b50:	08007b90 	.word	0x08007b90
 8004b54:	2301      	movs	r3, #1
 8004b56:	9a06      	ldr	r2, [sp, #24]
 8004b58:	4631      	mov	r1, r6
 8004b5a:	4628      	mov	r0, r5
 8004b5c:	47b8      	blx	r7
 8004b5e:	3001      	adds	r0, #1
 8004b60:	f43f aecd 	beq.w	80048fe <_printf_float+0xba>
 8004b64:	f10b 0b01 	add.w	fp, fp, #1
 8004b68:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004b6c:	ebaa 0309 	sub.w	r3, sl, r9
 8004b70:	455b      	cmp	r3, fp
 8004b72:	dcef      	bgt.n	8004b54 <_printf_float+0x310>
 8004b74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	44d0      	add	r8, sl
 8004b7c:	db15      	blt.n	8004baa <_printf_float+0x366>
 8004b7e:	6823      	ldr	r3, [r4, #0]
 8004b80:	07da      	lsls	r2, r3, #31
 8004b82:	d412      	bmi.n	8004baa <_printf_float+0x366>
 8004b84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b88:	eba3 020a 	sub.w	r2, r3, sl
 8004b8c:	eba3 0a01 	sub.w	sl, r3, r1
 8004b90:	4592      	cmp	sl, r2
 8004b92:	bfa8      	it	ge
 8004b94:	4692      	movge	sl, r2
 8004b96:	f1ba 0f00 	cmp.w	sl, #0
 8004b9a:	dc0e      	bgt.n	8004bba <_printf_float+0x376>
 8004b9c:	f04f 0800 	mov.w	r8, #0
 8004ba0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004ba4:	f104 091a 	add.w	r9, r4, #26
 8004ba8:	e019      	b.n	8004bde <_printf_float+0x39a>
 8004baa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bae:	4631      	mov	r1, r6
 8004bb0:	4628      	mov	r0, r5
 8004bb2:	47b8      	blx	r7
 8004bb4:	3001      	adds	r0, #1
 8004bb6:	d1e5      	bne.n	8004b84 <_printf_float+0x340>
 8004bb8:	e6a1      	b.n	80048fe <_printf_float+0xba>
 8004bba:	4653      	mov	r3, sl
 8004bbc:	4642      	mov	r2, r8
 8004bbe:	4631      	mov	r1, r6
 8004bc0:	4628      	mov	r0, r5
 8004bc2:	47b8      	blx	r7
 8004bc4:	3001      	adds	r0, #1
 8004bc6:	d1e9      	bne.n	8004b9c <_printf_float+0x358>
 8004bc8:	e699      	b.n	80048fe <_printf_float+0xba>
 8004bca:	2301      	movs	r3, #1
 8004bcc:	464a      	mov	r2, r9
 8004bce:	4631      	mov	r1, r6
 8004bd0:	4628      	mov	r0, r5
 8004bd2:	47b8      	blx	r7
 8004bd4:	3001      	adds	r0, #1
 8004bd6:	f43f ae92 	beq.w	80048fe <_printf_float+0xba>
 8004bda:	f108 0801 	add.w	r8, r8, #1
 8004bde:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004be2:	1a9b      	subs	r3, r3, r2
 8004be4:	eba3 030a 	sub.w	r3, r3, sl
 8004be8:	4543      	cmp	r3, r8
 8004bea:	dcee      	bgt.n	8004bca <_printf_float+0x386>
 8004bec:	e74a      	b.n	8004a84 <_printf_float+0x240>
 8004bee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004bf0:	2a01      	cmp	r2, #1
 8004bf2:	dc01      	bgt.n	8004bf8 <_printf_float+0x3b4>
 8004bf4:	07db      	lsls	r3, r3, #31
 8004bf6:	d53a      	bpl.n	8004c6e <_printf_float+0x42a>
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	4642      	mov	r2, r8
 8004bfc:	4631      	mov	r1, r6
 8004bfe:	4628      	mov	r0, r5
 8004c00:	47b8      	blx	r7
 8004c02:	3001      	adds	r0, #1
 8004c04:	f43f ae7b 	beq.w	80048fe <_printf_float+0xba>
 8004c08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c0c:	4631      	mov	r1, r6
 8004c0e:	4628      	mov	r0, r5
 8004c10:	47b8      	blx	r7
 8004c12:	3001      	adds	r0, #1
 8004c14:	f108 0801 	add.w	r8, r8, #1
 8004c18:	f43f ae71 	beq.w	80048fe <_printf_float+0xba>
 8004c1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f103 3aff 	add.w	sl, r3, #4294967295
 8004c24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c28:	2300      	movs	r3, #0
 8004c2a:	f7fb ff4d 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c2e:	b9c8      	cbnz	r0, 8004c64 <_printf_float+0x420>
 8004c30:	4653      	mov	r3, sl
 8004c32:	4642      	mov	r2, r8
 8004c34:	4631      	mov	r1, r6
 8004c36:	4628      	mov	r0, r5
 8004c38:	47b8      	blx	r7
 8004c3a:	3001      	adds	r0, #1
 8004c3c:	d10e      	bne.n	8004c5c <_printf_float+0x418>
 8004c3e:	e65e      	b.n	80048fe <_printf_float+0xba>
 8004c40:	2301      	movs	r3, #1
 8004c42:	4652      	mov	r2, sl
 8004c44:	4631      	mov	r1, r6
 8004c46:	4628      	mov	r0, r5
 8004c48:	47b8      	blx	r7
 8004c4a:	3001      	adds	r0, #1
 8004c4c:	f43f ae57 	beq.w	80048fe <_printf_float+0xba>
 8004c50:	f108 0801 	add.w	r8, r8, #1
 8004c54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c56:	3b01      	subs	r3, #1
 8004c58:	4543      	cmp	r3, r8
 8004c5a:	dcf1      	bgt.n	8004c40 <_printf_float+0x3fc>
 8004c5c:	464b      	mov	r3, r9
 8004c5e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004c62:	e6de      	b.n	8004a22 <_printf_float+0x1de>
 8004c64:	f04f 0800 	mov.w	r8, #0
 8004c68:	f104 0a1a 	add.w	sl, r4, #26
 8004c6c:	e7f2      	b.n	8004c54 <_printf_float+0x410>
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e7df      	b.n	8004c32 <_printf_float+0x3ee>
 8004c72:	2301      	movs	r3, #1
 8004c74:	464a      	mov	r2, r9
 8004c76:	4631      	mov	r1, r6
 8004c78:	4628      	mov	r0, r5
 8004c7a:	47b8      	blx	r7
 8004c7c:	3001      	adds	r0, #1
 8004c7e:	f43f ae3e 	beq.w	80048fe <_printf_float+0xba>
 8004c82:	f108 0801 	add.w	r8, r8, #1
 8004c86:	68e3      	ldr	r3, [r4, #12]
 8004c88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004c8a:	1a9b      	subs	r3, r3, r2
 8004c8c:	4543      	cmp	r3, r8
 8004c8e:	dcf0      	bgt.n	8004c72 <_printf_float+0x42e>
 8004c90:	e6fc      	b.n	8004a8c <_printf_float+0x248>
 8004c92:	f04f 0800 	mov.w	r8, #0
 8004c96:	f104 0919 	add.w	r9, r4, #25
 8004c9a:	e7f4      	b.n	8004c86 <_printf_float+0x442>
 8004c9c:	2900      	cmp	r1, #0
 8004c9e:	f43f ae8b 	beq.w	80049b8 <_printf_float+0x174>
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004ca8:	ab09      	add	r3, sp, #36	; 0x24
 8004caa:	9300      	str	r3, [sp, #0]
 8004cac:	ec49 8b10 	vmov	d0, r8, r9
 8004cb0:	6022      	str	r2, [r4, #0]
 8004cb2:	f8cd a004 	str.w	sl, [sp, #4]
 8004cb6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004cba:	4628      	mov	r0, r5
 8004cbc:	f7ff fd2e 	bl	800471c <__cvt>
 8004cc0:	4680      	mov	r8, r0
 8004cc2:	e648      	b.n	8004956 <_printf_float+0x112>

08004cc4 <_printf_common>:
 8004cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cc8:	4691      	mov	r9, r2
 8004cca:	461f      	mov	r7, r3
 8004ccc:	688a      	ldr	r2, [r1, #8]
 8004cce:	690b      	ldr	r3, [r1, #16]
 8004cd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	bfb8      	it	lt
 8004cd8:	4613      	movlt	r3, r2
 8004cda:	f8c9 3000 	str.w	r3, [r9]
 8004cde:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ce2:	4606      	mov	r6, r0
 8004ce4:	460c      	mov	r4, r1
 8004ce6:	b112      	cbz	r2, 8004cee <_printf_common+0x2a>
 8004ce8:	3301      	adds	r3, #1
 8004cea:	f8c9 3000 	str.w	r3, [r9]
 8004cee:	6823      	ldr	r3, [r4, #0]
 8004cf0:	0699      	lsls	r1, r3, #26
 8004cf2:	bf42      	ittt	mi
 8004cf4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004cf8:	3302      	addmi	r3, #2
 8004cfa:	f8c9 3000 	strmi.w	r3, [r9]
 8004cfe:	6825      	ldr	r5, [r4, #0]
 8004d00:	f015 0506 	ands.w	r5, r5, #6
 8004d04:	d107      	bne.n	8004d16 <_printf_common+0x52>
 8004d06:	f104 0a19 	add.w	sl, r4, #25
 8004d0a:	68e3      	ldr	r3, [r4, #12]
 8004d0c:	f8d9 2000 	ldr.w	r2, [r9]
 8004d10:	1a9b      	subs	r3, r3, r2
 8004d12:	42ab      	cmp	r3, r5
 8004d14:	dc28      	bgt.n	8004d68 <_printf_common+0xa4>
 8004d16:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004d1a:	6822      	ldr	r2, [r4, #0]
 8004d1c:	3300      	adds	r3, #0
 8004d1e:	bf18      	it	ne
 8004d20:	2301      	movne	r3, #1
 8004d22:	0692      	lsls	r2, r2, #26
 8004d24:	d42d      	bmi.n	8004d82 <_printf_common+0xbe>
 8004d26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d2a:	4639      	mov	r1, r7
 8004d2c:	4630      	mov	r0, r6
 8004d2e:	47c0      	blx	r8
 8004d30:	3001      	adds	r0, #1
 8004d32:	d020      	beq.n	8004d76 <_printf_common+0xb2>
 8004d34:	6823      	ldr	r3, [r4, #0]
 8004d36:	68e5      	ldr	r5, [r4, #12]
 8004d38:	f8d9 2000 	ldr.w	r2, [r9]
 8004d3c:	f003 0306 	and.w	r3, r3, #6
 8004d40:	2b04      	cmp	r3, #4
 8004d42:	bf08      	it	eq
 8004d44:	1aad      	subeq	r5, r5, r2
 8004d46:	68a3      	ldr	r3, [r4, #8]
 8004d48:	6922      	ldr	r2, [r4, #16]
 8004d4a:	bf0c      	ite	eq
 8004d4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d50:	2500      	movne	r5, #0
 8004d52:	4293      	cmp	r3, r2
 8004d54:	bfc4      	itt	gt
 8004d56:	1a9b      	subgt	r3, r3, r2
 8004d58:	18ed      	addgt	r5, r5, r3
 8004d5a:	f04f 0900 	mov.w	r9, #0
 8004d5e:	341a      	adds	r4, #26
 8004d60:	454d      	cmp	r5, r9
 8004d62:	d11a      	bne.n	8004d9a <_printf_common+0xd6>
 8004d64:	2000      	movs	r0, #0
 8004d66:	e008      	b.n	8004d7a <_printf_common+0xb6>
 8004d68:	2301      	movs	r3, #1
 8004d6a:	4652      	mov	r2, sl
 8004d6c:	4639      	mov	r1, r7
 8004d6e:	4630      	mov	r0, r6
 8004d70:	47c0      	blx	r8
 8004d72:	3001      	adds	r0, #1
 8004d74:	d103      	bne.n	8004d7e <_printf_common+0xba>
 8004d76:	f04f 30ff 	mov.w	r0, #4294967295
 8004d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d7e:	3501      	adds	r5, #1
 8004d80:	e7c3      	b.n	8004d0a <_printf_common+0x46>
 8004d82:	18e1      	adds	r1, r4, r3
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	2030      	movs	r0, #48	; 0x30
 8004d88:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d8c:	4422      	add	r2, r4
 8004d8e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d92:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d96:	3302      	adds	r3, #2
 8004d98:	e7c5      	b.n	8004d26 <_printf_common+0x62>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	4622      	mov	r2, r4
 8004d9e:	4639      	mov	r1, r7
 8004da0:	4630      	mov	r0, r6
 8004da2:	47c0      	blx	r8
 8004da4:	3001      	adds	r0, #1
 8004da6:	d0e6      	beq.n	8004d76 <_printf_common+0xb2>
 8004da8:	f109 0901 	add.w	r9, r9, #1
 8004dac:	e7d8      	b.n	8004d60 <_printf_common+0x9c>
	...

08004db0 <_printf_i>:
 8004db0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004db4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004db8:	460c      	mov	r4, r1
 8004dba:	7e09      	ldrb	r1, [r1, #24]
 8004dbc:	b085      	sub	sp, #20
 8004dbe:	296e      	cmp	r1, #110	; 0x6e
 8004dc0:	4617      	mov	r7, r2
 8004dc2:	4606      	mov	r6, r0
 8004dc4:	4698      	mov	r8, r3
 8004dc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004dc8:	f000 80b3 	beq.w	8004f32 <_printf_i+0x182>
 8004dcc:	d822      	bhi.n	8004e14 <_printf_i+0x64>
 8004dce:	2963      	cmp	r1, #99	; 0x63
 8004dd0:	d036      	beq.n	8004e40 <_printf_i+0x90>
 8004dd2:	d80a      	bhi.n	8004dea <_printf_i+0x3a>
 8004dd4:	2900      	cmp	r1, #0
 8004dd6:	f000 80b9 	beq.w	8004f4c <_printf_i+0x19c>
 8004dda:	2958      	cmp	r1, #88	; 0x58
 8004ddc:	f000 8083 	beq.w	8004ee6 <_printf_i+0x136>
 8004de0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004de4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004de8:	e032      	b.n	8004e50 <_printf_i+0xa0>
 8004dea:	2964      	cmp	r1, #100	; 0x64
 8004dec:	d001      	beq.n	8004df2 <_printf_i+0x42>
 8004dee:	2969      	cmp	r1, #105	; 0x69
 8004df0:	d1f6      	bne.n	8004de0 <_printf_i+0x30>
 8004df2:	6820      	ldr	r0, [r4, #0]
 8004df4:	6813      	ldr	r3, [r2, #0]
 8004df6:	0605      	lsls	r5, r0, #24
 8004df8:	f103 0104 	add.w	r1, r3, #4
 8004dfc:	d52a      	bpl.n	8004e54 <_printf_i+0xa4>
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6011      	str	r1, [r2, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	da03      	bge.n	8004e0e <_printf_i+0x5e>
 8004e06:	222d      	movs	r2, #45	; 0x2d
 8004e08:	425b      	negs	r3, r3
 8004e0a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004e0e:	486f      	ldr	r0, [pc, #444]	; (8004fcc <_printf_i+0x21c>)
 8004e10:	220a      	movs	r2, #10
 8004e12:	e039      	b.n	8004e88 <_printf_i+0xd8>
 8004e14:	2973      	cmp	r1, #115	; 0x73
 8004e16:	f000 809d 	beq.w	8004f54 <_printf_i+0x1a4>
 8004e1a:	d808      	bhi.n	8004e2e <_printf_i+0x7e>
 8004e1c:	296f      	cmp	r1, #111	; 0x6f
 8004e1e:	d020      	beq.n	8004e62 <_printf_i+0xb2>
 8004e20:	2970      	cmp	r1, #112	; 0x70
 8004e22:	d1dd      	bne.n	8004de0 <_printf_i+0x30>
 8004e24:	6823      	ldr	r3, [r4, #0]
 8004e26:	f043 0320 	orr.w	r3, r3, #32
 8004e2a:	6023      	str	r3, [r4, #0]
 8004e2c:	e003      	b.n	8004e36 <_printf_i+0x86>
 8004e2e:	2975      	cmp	r1, #117	; 0x75
 8004e30:	d017      	beq.n	8004e62 <_printf_i+0xb2>
 8004e32:	2978      	cmp	r1, #120	; 0x78
 8004e34:	d1d4      	bne.n	8004de0 <_printf_i+0x30>
 8004e36:	2378      	movs	r3, #120	; 0x78
 8004e38:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e3c:	4864      	ldr	r0, [pc, #400]	; (8004fd0 <_printf_i+0x220>)
 8004e3e:	e055      	b.n	8004eec <_printf_i+0x13c>
 8004e40:	6813      	ldr	r3, [r2, #0]
 8004e42:	1d19      	adds	r1, r3, #4
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6011      	str	r1, [r2, #0]
 8004e48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e50:	2301      	movs	r3, #1
 8004e52:	e08c      	b.n	8004f6e <_printf_i+0x1be>
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6011      	str	r1, [r2, #0]
 8004e58:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e5c:	bf18      	it	ne
 8004e5e:	b21b      	sxthne	r3, r3
 8004e60:	e7cf      	b.n	8004e02 <_printf_i+0x52>
 8004e62:	6813      	ldr	r3, [r2, #0]
 8004e64:	6825      	ldr	r5, [r4, #0]
 8004e66:	1d18      	adds	r0, r3, #4
 8004e68:	6010      	str	r0, [r2, #0]
 8004e6a:	0628      	lsls	r0, r5, #24
 8004e6c:	d501      	bpl.n	8004e72 <_printf_i+0xc2>
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	e002      	b.n	8004e78 <_printf_i+0xc8>
 8004e72:	0668      	lsls	r0, r5, #25
 8004e74:	d5fb      	bpl.n	8004e6e <_printf_i+0xbe>
 8004e76:	881b      	ldrh	r3, [r3, #0]
 8004e78:	4854      	ldr	r0, [pc, #336]	; (8004fcc <_printf_i+0x21c>)
 8004e7a:	296f      	cmp	r1, #111	; 0x6f
 8004e7c:	bf14      	ite	ne
 8004e7e:	220a      	movne	r2, #10
 8004e80:	2208      	moveq	r2, #8
 8004e82:	2100      	movs	r1, #0
 8004e84:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e88:	6865      	ldr	r5, [r4, #4]
 8004e8a:	60a5      	str	r5, [r4, #8]
 8004e8c:	2d00      	cmp	r5, #0
 8004e8e:	f2c0 8095 	blt.w	8004fbc <_printf_i+0x20c>
 8004e92:	6821      	ldr	r1, [r4, #0]
 8004e94:	f021 0104 	bic.w	r1, r1, #4
 8004e98:	6021      	str	r1, [r4, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d13d      	bne.n	8004f1a <_printf_i+0x16a>
 8004e9e:	2d00      	cmp	r5, #0
 8004ea0:	f040 808e 	bne.w	8004fc0 <_printf_i+0x210>
 8004ea4:	4665      	mov	r5, ip
 8004ea6:	2a08      	cmp	r2, #8
 8004ea8:	d10b      	bne.n	8004ec2 <_printf_i+0x112>
 8004eaa:	6823      	ldr	r3, [r4, #0]
 8004eac:	07db      	lsls	r3, r3, #31
 8004eae:	d508      	bpl.n	8004ec2 <_printf_i+0x112>
 8004eb0:	6923      	ldr	r3, [r4, #16]
 8004eb2:	6862      	ldr	r2, [r4, #4]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	bfde      	ittt	le
 8004eb8:	2330      	movle	r3, #48	; 0x30
 8004eba:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ebe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ec2:	ebac 0305 	sub.w	r3, ip, r5
 8004ec6:	6123      	str	r3, [r4, #16]
 8004ec8:	f8cd 8000 	str.w	r8, [sp]
 8004ecc:	463b      	mov	r3, r7
 8004ece:	aa03      	add	r2, sp, #12
 8004ed0:	4621      	mov	r1, r4
 8004ed2:	4630      	mov	r0, r6
 8004ed4:	f7ff fef6 	bl	8004cc4 <_printf_common>
 8004ed8:	3001      	adds	r0, #1
 8004eda:	d14d      	bne.n	8004f78 <_printf_i+0x1c8>
 8004edc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee0:	b005      	add	sp, #20
 8004ee2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ee6:	4839      	ldr	r0, [pc, #228]	; (8004fcc <_printf_i+0x21c>)
 8004ee8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004eec:	6813      	ldr	r3, [r2, #0]
 8004eee:	6821      	ldr	r1, [r4, #0]
 8004ef0:	1d1d      	adds	r5, r3, #4
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6015      	str	r5, [r2, #0]
 8004ef6:	060a      	lsls	r2, r1, #24
 8004ef8:	d50b      	bpl.n	8004f12 <_printf_i+0x162>
 8004efa:	07ca      	lsls	r2, r1, #31
 8004efc:	bf44      	itt	mi
 8004efe:	f041 0120 	orrmi.w	r1, r1, #32
 8004f02:	6021      	strmi	r1, [r4, #0]
 8004f04:	b91b      	cbnz	r3, 8004f0e <_printf_i+0x15e>
 8004f06:	6822      	ldr	r2, [r4, #0]
 8004f08:	f022 0220 	bic.w	r2, r2, #32
 8004f0c:	6022      	str	r2, [r4, #0]
 8004f0e:	2210      	movs	r2, #16
 8004f10:	e7b7      	b.n	8004e82 <_printf_i+0xd2>
 8004f12:	064d      	lsls	r5, r1, #25
 8004f14:	bf48      	it	mi
 8004f16:	b29b      	uxthmi	r3, r3
 8004f18:	e7ef      	b.n	8004efa <_printf_i+0x14a>
 8004f1a:	4665      	mov	r5, ip
 8004f1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f20:	fb02 3311 	mls	r3, r2, r1, r3
 8004f24:	5cc3      	ldrb	r3, [r0, r3]
 8004f26:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	2900      	cmp	r1, #0
 8004f2e:	d1f5      	bne.n	8004f1c <_printf_i+0x16c>
 8004f30:	e7b9      	b.n	8004ea6 <_printf_i+0xf6>
 8004f32:	6813      	ldr	r3, [r2, #0]
 8004f34:	6825      	ldr	r5, [r4, #0]
 8004f36:	6961      	ldr	r1, [r4, #20]
 8004f38:	1d18      	adds	r0, r3, #4
 8004f3a:	6010      	str	r0, [r2, #0]
 8004f3c:	0628      	lsls	r0, r5, #24
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	d501      	bpl.n	8004f46 <_printf_i+0x196>
 8004f42:	6019      	str	r1, [r3, #0]
 8004f44:	e002      	b.n	8004f4c <_printf_i+0x19c>
 8004f46:	066a      	lsls	r2, r5, #25
 8004f48:	d5fb      	bpl.n	8004f42 <_printf_i+0x192>
 8004f4a:	8019      	strh	r1, [r3, #0]
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	6123      	str	r3, [r4, #16]
 8004f50:	4665      	mov	r5, ip
 8004f52:	e7b9      	b.n	8004ec8 <_printf_i+0x118>
 8004f54:	6813      	ldr	r3, [r2, #0]
 8004f56:	1d19      	adds	r1, r3, #4
 8004f58:	6011      	str	r1, [r2, #0]
 8004f5a:	681d      	ldr	r5, [r3, #0]
 8004f5c:	6862      	ldr	r2, [r4, #4]
 8004f5e:	2100      	movs	r1, #0
 8004f60:	4628      	mov	r0, r5
 8004f62:	f7fb f93d 	bl	80001e0 <memchr>
 8004f66:	b108      	cbz	r0, 8004f6c <_printf_i+0x1bc>
 8004f68:	1b40      	subs	r0, r0, r5
 8004f6a:	6060      	str	r0, [r4, #4]
 8004f6c:	6863      	ldr	r3, [r4, #4]
 8004f6e:	6123      	str	r3, [r4, #16]
 8004f70:	2300      	movs	r3, #0
 8004f72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f76:	e7a7      	b.n	8004ec8 <_printf_i+0x118>
 8004f78:	6923      	ldr	r3, [r4, #16]
 8004f7a:	462a      	mov	r2, r5
 8004f7c:	4639      	mov	r1, r7
 8004f7e:	4630      	mov	r0, r6
 8004f80:	47c0      	blx	r8
 8004f82:	3001      	adds	r0, #1
 8004f84:	d0aa      	beq.n	8004edc <_printf_i+0x12c>
 8004f86:	6823      	ldr	r3, [r4, #0]
 8004f88:	079b      	lsls	r3, r3, #30
 8004f8a:	d413      	bmi.n	8004fb4 <_printf_i+0x204>
 8004f8c:	68e0      	ldr	r0, [r4, #12]
 8004f8e:	9b03      	ldr	r3, [sp, #12]
 8004f90:	4298      	cmp	r0, r3
 8004f92:	bfb8      	it	lt
 8004f94:	4618      	movlt	r0, r3
 8004f96:	e7a3      	b.n	8004ee0 <_printf_i+0x130>
 8004f98:	2301      	movs	r3, #1
 8004f9a:	464a      	mov	r2, r9
 8004f9c:	4639      	mov	r1, r7
 8004f9e:	4630      	mov	r0, r6
 8004fa0:	47c0      	blx	r8
 8004fa2:	3001      	adds	r0, #1
 8004fa4:	d09a      	beq.n	8004edc <_printf_i+0x12c>
 8004fa6:	3501      	adds	r5, #1
 8004fa8:	68e3      	ldr	r3, [r4, #12]
 8004faa:	9a03      	ldr	r2, [sp, #12]
 8004fac:	1a9b      	subs	r3, r3, r2
 8004fae:	42ab      	cmp	r3, r5
 8004fb0:	dcf2      	bgt.n	8004f98 <_printf_i+0x1e8>
 8004fb2:	e7eb      	b.n	8004f8c <_printf_i+0x1dc>
 8004fb4:	2500      	movs	r5, #0
 8004fb6:	f104 0919 	add.w	r9, r4, #25
 8004fba:	e7f5      	b.n	8004fa8 <_printf_i+0x1f8>
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1ac      	bne.n	8004f1a <_printf_i+0x16a>
 8004fc0:	7803      	ldrb	r3, [r0, #0]
 8004fc2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fc6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fca:	e76c      	b.n	8004ea6 <_printf_i+0xf6>
 8004fcc:	08007b92 	.word	0x08007b92
 8004fd0:	08007ba3 	.word	0x08007ba3

08004fd4 <_sbrk_r>:
 8004fd4:	b538      	push	{r3, r4, r5, lr}
 8004fd6:	4c06      	ldr	r4, [pc, #24]	; (8004ff0 <_sbrk_r+0x1c>)
 8004fd8:	2300      	movs	r3, #0
 8004fda:	4605      	mov	r5, r0
 8004fdc:	4608      	mov	r0, r1
 8004fde:	6023      	str	r3, [r4, #0]
 8004fe0:	f7fd f860 	bl	80020a4 <_sbrk>
 8004fe4:	1c43      	adds	r3, r0, #1
 8004fe6:	d102      	bne.n	8004fee <_sbrk_r+0x1a>
 8004fe8:	6823      	ldr	r3, [r4, #0]
 8004fea:	b103      	cbz	r3, 8004fee <_sbrk_r+0x1a>
 8004fec:	602b      	str	r3, [r5, #0]
 8004fee:	bd38      	pop	{r3, r4, r5, pc}
 8004ff0:	200003a0 	.word	0x200003a0

08004ff4 <sniprintf>:
 8004ff4:	b40c      	push	{r2, r3}
 8004ff6:	b530      	push	{r4, r5, lr}
 8004ff8:	4b17      	ldr	r3, [pc, #92]	; (8005058 <sniprintf+0x64>)
 8004ffa:	1e0c      	subs	r4, r1, #0
 8004ffc:	b09d      	sub	sp, #116	; 0x74
 8004ffe:	681d      	ldr	r5, [r3, #0]
 8005000:	da08      	bge.n	8005014 <sniprintf+0x20>
 8005002:	238b      	movs	r3, #139	; 0x8b
 8005004:	602b      	str	r3, [r5, #0]
 8005006:	f04f 30ff 	mov.w	r0, #4294967295
 800500a:	b01d      	add	sp, #116	; 0x74
 800500c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005010:	b002      	add	sp, #8
 8005012:	4770      	bx	lr
 8005014:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005018:	f8ad 3014 	strh.w	r3, [sp, #20]
 800501c:	bf14      	ite	ne
 800501e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005022:	4623      	moveq	r3, r4
 8005024:	9304      	str	r3, [sp, #16]
 8005026:	9307      	str	r3, [sp, #28]
 8005028:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800502c:	9002      	str	r0, [sp, #8]
 800502e:	9006      	str	r0, [sp, #24]
 8005030:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005034:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005036:	ab21      	add	r3, sp, #132	; 0x84
 8005038:	a902      	add	r1, sp, #8
 800503a:	4628      	mov	r0, r5
 800503c:	9301      	str	r3, [sp, #4]
 800503e:	f001 faa1 	bl	8006584 <_svfiprintf_r>
 8005042:	1c43      	adds	r3, r0, #1
 8005044:	bfbc      	itt	lt
 8005046:	238b      	movlt	r3, #139	; 0x8b
 8005048:	602b      	strlt	r3, [r5, #0]
 800504a:	2c00      	cmp	r4, #0
 800504c:	d0dd      	beq.n	800500a <sniprintf+0x16>
 800504e:	9b02      	ldr	r3, [sp, #8]
 8005050:	2200      	movs	r2, #0
 8005052:	701a      	strb	r2, [r3, #0]
 8005054:	e7d9      	b.n	800500a <sniprintf+0x16>
 8005056:	bf00      	nop
 8005058:	2000000c 	.word	0x2000000c

0800505c <strtok>:
 800505c:	4b13      	ldr	r3, [pc, #76]	; (80050ac <strtok+0x50>)
 800505e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005062:	681d      	ldr	r5, [r3, #0]
 8005064:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8005066:	4606      	mov	r6, r0
 8005068:	460f      	mov	r7, r1
 800506a:	b9b4      	cbnz	r4, 800509a <strtok+0x3e>
 800506c:	2050      	movs	r0, #80	; 0x50
 800506e:	f7ff fa89 	bl	8004584 <malloc>
 8005072:	65a8      	str	r0, [r5, #88]	; 0x58
 8005074:	e9c0 4400 	strd	r4, r4, [r0]
 8005078:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800507c:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005080:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005084:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005088:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800508c:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005090:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005094:	6184      	str	r4, [r0, #24]
 8005096:	7704      	strb	r4, [r0, #28]
 8005098:	6244      	str	r4, [r0, #36]	; 0x24
 800509a:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800509c:	4639      	mov	r1, r7
 800509e:	4630      	mov	r0, r6
 80050a0:	2301      	movs	r3, #1
 80050a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050a6:	f000 b803 	b.w	80050b0 <__strtok_r>
 80050aa:	bf00      	nop
 80050ac:	2000000c 	.word	0x2000000c

080050b0 <__strtok_r>:
 80050b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050b2:	b918      	cbnz	r0, 80050bc <__strtok_r+0xc>
 80050b4:	6810      	ldr	r0, [r2, #0]
 80050b6:	b908      	cbnz	r0, 80050bc <__strtok_r+0xc>
 80050b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050ba:	4620      	mov	r0, r4
 80050bc:	4604      	mov	r4, r0
 80050be:	460f      	mov	r7, r1
 80050c0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80050c4:	f817 6b01 	ldrb.w	r6, [r7], #1
 80050c8:	b91e      	cbnz	r6, 80050d2 <__strtok_r+0x22>
 80050ca:	b96d      	cbnz	r5, 80050e8 <__strtok_r+0x38>
 80050cc:	6015      	str	r5, [r2, #0]
 80050ce:	4628      	mov	r0, r5
 80050d0:	e7f2      	b.n	80050b8 <__strtok_r+0x8>
 80050d2:	42b5      	cmp	r5, r6
 80050d4:	d1f6      	bne.n	80050c4 <__strtok_r+0x14>
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1ef      	bne.n	80050ba <__strtok_r+0xa>
 80050da:	6014      	str	r4, [r2, #0]
 80050dc:	7003      	strb	r3, [r0, #0]
 80050de:	e7eb      	b.n	80050b8 <__strtok_r+0x8>
 80050e0:	462b      	mov	r3, r5
 80050e2:	e00d      	b.n	8005100 <__strtok_r+0x50>
 80050e4:	b926      	cbnz	r6, 80050f0 <__strtok_r+0x40>
 80050e6:	461c      	mov	r4, r3
 80050e8:	4623      	mov	r3, r4
 80050ea:	460f      	mov	r7, r1
 80050ec:	f813 5b01 	ldrb.w	r5, [r3], #1
 80050f0:	f817 6b01 	ldrb.w	r6, [r7], #1
 80050f4:	42b5      	cmp	r5, r6
 80050f6:	d1f5      	bne.n	80050e4 <__strtok_r+0x34>
 80050f8:	2d00      	cmp	r5, #0
 80050fa:	d0f1      	beq.n	80050e0 <__strtok_r+0x30>
 80050fc:	2100      	movs	r1, #0
 80050fe:	7021      	strb	r1, [r4, #0]
 8005100:	6013      	str	r3, [r2, #0]
 8005102:	e7d9      	b.n	80050b8 <__strtok_r+0x8>

08005104 <_strtol_l.isra.0>:
 8005104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005108:	4680      	mov	r8, r0
 800510a:	4689      	mov	r9, r1
 800510c:	4692      	mov	sl, r2
 800510e:	461e      	mov	r6, r3
 8005110:	460f      	mov	r7, r1
 8005112:	463d      	mov	r5, r7
 8005114:	9808      	ldr	r0, [sp, #32]
 8005116:	f815 4b01 	ldrb.w	r4, [r5], #1
 800511a:	f000 fec9 	bl	8005eb0 <__locale_ctype_ptr_l>
 800511e:	4420      	add	r0, r4
 8005120:	7843      	ldrb	r3, [r0, #1]
 8005122:	f013 0308 	ands.w	r3, r3, #8
 8005126:	d132      	bne.n	800518e <_strtol_l.isra.0+0x8a>
 8005128:	2c2d      	cmp	r4, #45	; 0x2d
 800512a:	d132      	bne.n	8005192 <_strtol_l.isra.0+0x8e>
 800512c:	787c      	ldrb	r4, [r7, #1]
 800512e:	1cbd      	adds	r5, r7, #2
 8005130:	2201      	movs	r2, #1
 8005132:	2e00      	cmp	r6, #0
 8005134:	d05d      	beq.n	80051f2 <_strtol_l.isra.0+0xee>
 8005136:	2e10      	cmp	r6, #16
 8005138:	d109      	bne.n	800514e <_strtol_l.isra.0+0x4a>
 800513a:	2c30      	cmp	r4, #48	; 0x30
 800513c:	d107      	bne.n	800514e <_strtol_l.isra.0+0x4a>
 800513e:	782b      	ldrb	r3, [r5, #0]
 8005140:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005144:	2b58      	cmp	r3, #88	; 0x58
 8005146:	d14f      	bne.n	80051e8 <_strtol_l.isra.0+0xe4>
 8005148:	786c      	ldrb	r4, [r5, #1]
 800514a:	2610      	movs	r6, #16
 800514c:	3502      	adds	r5, #2
 800514e:	2a00      	cmp	r2, #0
 8005150:	bf14      	ite	ne
 8005152:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005156:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800515a:	2700      	movs	r7, #0
 800515c:	fbb1 fcf6 	udiv	ip, r1, r6
 8005160:	4638      	mov	r0, r7
 8005162:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005166:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800516a:	2b09      	cmp	r3, #9
 800516c:	d817      	bhi.n	800519e <_strtol_l.isra.0+0x9a>
 800516e:	461c      	mov	r4, r3
 8005170:	42a6      	cmp	r6, r4
 8005172:	dd23      	ble.n	80051bc <_strtol_l.isra.0+0xb8>
 8005174:	1c7b      	adds	r3, r7, #1
 8005176:	d007      	beq.n	8005188 <_strtol_l.isra.0+0x84>
 8005178:	4584      	cmp	ip, r0
 800517a:	d31c      	bcc.n	80051b6 <_strtol_l.isra.0+0xb2>
 800517c:	d101      	bne.n	8005182 <_strtol_l.isra.0+0x7e>
 800517e:	45a6      	cmp	lr, r4
 8005180:	db19      	blt.n	80051b6 <_strtol_l.isra.0+0xb2>
 8005182:	fb00 4006 	mla	r0, r0, r6, r4
 8005186:	2701      	movs	r7, #1
 8005188:	f815 4b01 	ldrb.w	r4, [r5], #1
 800518c:	e7eb      	b.n	8005166 <_strtol_l.isra.0+0x62>
 800518e:	462f      	mov	r7, r5
 8005190:	e7bf      	b.n	8005112 <_strtol_l.isra.0+0xe>
 8005192:	2c2b      	cmp	r4, #43	; 0x2b
 8005194:	bf04      	itt	eq
 8005196:	1cbd      	addeq	r5, r7, #2
 8005198:	787c      	ldrbeq	r4, [r7, #1]
 800519a:	461a      	mov	r2, r3
 800519c:	e7c9      	b.n	8005132 <_strtol_l.isra.0+0x2e>
 800519e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80051a2:	2b19      	cmp	r3, #25
 80051a4:	d801      	bhi.n	80051aa <_strtol_l.isra.0+0xa6>
 80051a6:	3c37      	subs	r4, #55	; 0x37
 80051a8:	e7e2      	b.n	8005170 <_strtol_l.isra.0+0x6c>
 80051aa:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80051ae:	2b19      	cmp	r3, #25
 80051b0:	d804      	bhi.n	80051bc <_strtol_l.isra.0+0xb8>
 80051b2:	3c57      	subs	r4, #87	; 0x57
 80051b4:	e7dc      	b.n	8005170 <_strtol_l.isra.0+0x6c>
 80051b6:	f04f 37ff 	mov.w	r7, #4294967295
 80051ba:	e7e5      	b.n	8005188 <_strtol_l.isra.0+0x84>
 80051bc:	1c7b      	adds	r3, r7, #1
 80051be:	d108      	bne.n	80051d2 <_strtol_l.isra.0+0xce>
 80051c0:	2322      	movs	r3, #34	; 0x22
 80051c2:	f8c8 3000 	str.w	r3, [r8]
 80051c6:	4608      	mov	r0, r1
 80051c8:	f1ba 0f00 	cmp.w	sl, #0
 80051cc:	d107      	bne.n	80051de <_strtol_l.isra.0+0xda>
 80051ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051d2:	b102      	cbz	r2, 80051d6 <_strtol_l.isra.0+0xd2>
 80051d4:	4240      	negs	r0, r0
 80051d6:	f1ba 0f00 	cmp.w	sl, #0
 80051da:	d0f8      	beq.n	80051ce <_strtol_l.isra.0+0xca>
 80051dc:	b10f      	cbz	r7, 80051e2 <_strtol_l.isra.0+0xde>
 80051de:	f105 39ff 	add.w	r9, r5, #4294967295
 80051e2:	f8ca 9000 	str.w	r9, [sl]
 80051e6:	e7f2      	b.n	80051ce <_strtol_l.isra.0+0xca>
 80051e8:	2430      	movs	r4, #48	; 0x30
 80051ea:	2e00      	cmp	r6, #0
 80051ec:	d1af      	bne.n	800514e <_strtol_l.isra.0+0x4a>
 80051ee:	2608      	movs	r6, #8
 80051f0:	e7ad      	b.n	800514e <_strtol_l.isra.0+0x4a>
 80051f2:	2c30      	cmp	r4, #48	; 0x30
 80051f4:	d0a3      	beq.n	800513e <_strtol_l.isra.0+0x3a>
 80051f6:	260a      	movs	r6, #10
 80051f8:	e7a9      	b.n	800514e <_strtol_l.isra.0+0x4a>
	...

080051fc <strtol>:
 80051fc:	4b08      	ldr	r3, [pc, #32]	; (8005220 <strtol+0x24>)
 80051fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005200:	681c      	ldr	r4, [r3, #0]
 8005202:	4d08      	ldr	r5, [pc, #32]	; (8005224 <strtol+0x28>)
 8005204:	6a23      	ldr	r3, [r4, #32]
 8005206:	2b00      	cmp	r3, #0
 8005208:	bf08      	it	eq
 800520a:	462b      	moveq	r3, r5
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	4613      	mov	r3, r2
 8005210:	460a      	mov	r2, r1
 8005212:	4601      	mov	r1, r0
 8005214:	4620      	mov	r0, r4
 8005216:	f7ff ff75 	bl	8005104 <_strtol_l.isra.0>
 800521a:	b003      	add	sp, #12
 800521c:	bd30      	pop	{r4, r5, pc}
 800521e:	bf00      	nop
 8005220:	2000000c 	.word	0x2000000c
 8005224:	20000070 	.word	0x20000070

08005228 <quorem>:
 8005228:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800522c:	6903      	ldr	r3, [r0, #16]
 800522e:	690c      	ldr	r4, [r1, #16]
 8005230:	42a3      	cmp	r3, r4
 8005232:	4680      	mov	r8, r0
 8005234:	f2c0 8082 	blt.w	800533c <quorem+0x114>
 8005238:	3c01      	subs	r4, #1
 800523a:	f101 0714 	add.w	r7, r1, #20
 800523e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005242:	f100 0614 	add.w	r6, r0, #20
 8005246:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800524a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800524e:	eb06 030c 	add.w	r3, r6, ip
 8005252:	3501      	adds	r5, #1
 8005254:	eb07 090c 	add.w	r9, r7, ip
 8005258:	9301      	str	r3, [sp, #4]
 800525a:	fbb0 f5f5 	udiv	r5, r0, r5
 800525e:	b395      	cbz	r5, 80052c6 <quorem+0x9e>
 8005260:	f04f 0a00 	mov.w	sl, #0
 8005264:	4638      	mov	r0, r7
 8005266:	46b6      	mov	lr, r6
 8005268:	46d3      	mov	fp, sl
 800526a:	f850 2b04 	ldr.w	r2, [r0], #4
 800526e:	b293      	uxth	r3, r2
 8005270:	fb05 a303 	mla	r3, r5, r3, sl
 8005274:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005278:	b29b      	uxth	r3, r3
 800527a:	ebab 0303 	sub.w	r3, fp, r3
 800527e:	0c12      	lsrs	r2, r2, #16
 8005280:	f8de b000 	ldr.w	fp, [lr]
 8005284:	fb05 a202 	mla	r2, r5, r2, sl
 8005288:	fa13 f38b 	uxtah	r3, r3, fp
 800528c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005290:	fa1f fb82 	uxth.w	fp, r2
 8005294:	f8de 2000 	ldr.w	r2, [lr]
 8005298:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800529c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052a6:	4581      	cmp	r9, r0
 80052a8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80052ac:	f84e 3b04 	str.w	r3, [lr], #4
 80052b0:	d2db      	bcs.n	800526a <quorem+0x42>
 80052b2:	f856 300c 	ldr.w	r3, [r6, ip]
 80052b6:	b933      	cbnz	r3, 80052c6 <quorem+0x9e>
 80052b8:	9b01      	ldr	r3, [sp, #4]
 80052ba:	3b04      	subs	r3, #4
 80052bc:	429e      	cmp	r6, r3
 80052be:	461a      	mov	r2, r3
 80052c0:	d330      	bcc.n	8005324 <quorem+0xfc>
 80052c2:	f8c8 4010 	str.w	r4, [r8, #16]
 80052c6:	4640      	mov	r0, r8
 80052c8:	f001 f82e 	bl	8006328 <__mcmp>
 80052cc:	2800      	cmp	r0, #0
 80052ce:	db25      	blt.n	800531c <quorem+0xf4>
 80052d0:	3501      	adds	r5, #1
 80052d2:	4630      	mov	r0, r6
 80052d4:	f04f 0c00 	mov.w	ip, #0
 80052d8:	f857 2b04 	ldr.w	r2, [r7], #4
 80052dc:	f8d0 e000 	ldr.w	lr, [r0]
 80052e0:	b293      	uxth	r3, r2
 80052e2:	ebac 0303 	sub.w	r3, ip, r3
 80052e6:	0c12      	lsrs	r2, r2, #16
 80052e8:	fa13 f38e 	uxtah	r3, r3, lr
 80052ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80052f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052fa:	45b9      	cmp	r9, r7
 80052fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005300:	f840 3b04 	str.w	r3, [r0], #4
 8005304:	d2e8      	bcs.n	80052d8 <quorem+0xb0>
 8005306:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800530a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800530e:	b92a      	cbnz	r2, 800531c <quorem+0xf4>
 8005310:	3b04      	subs	r3, #4
 8005312:	429e      	cmp	r6, r3
 8005314:	461a      	mov	r2, r3
 8005316:	d30b      	bcc.n	8005330 <quorem+0x108>
 8005318:	f8c8 4010 	str.w	r4, [r8, #16]
 800531c:	4628      	mov	r0, r5
 800531e:	b003      	add	sp, #12
 8005320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005324:	6812      	ldr	r2, [r2, #0]
 8005326:	3b04      	subs	r3, #4
 8005328:	2a00      	cmp	r2, #0
 800532a:	d1ca      	bne.n	80052c2 <quorem+0x9a>
 800532c:	3c01      	subs	r4, #1
 800532e:	e7c5      	b.n	80052bc <quorem+0x94>
 8005330:	6812      	ldr	r2, [r2, #0]
 8005332:	3b04      	subs	r3, #4
 8005334:	2a00      	cmp	r2, #0
 8005336:	d1ef      	bne.n	8005318 <quorem+0xf0>
 8005338:	3c01      	subs	r4, #1
 800533a:	e7ea      	b.n	8005312 <quorem+0xea>
 800533c:	2000      	movs	r0, #0
 800533e:	e7ee      	b.n	800531e <quorem+0xf6>

08005340 <_dtoa_r>:
 8005340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005344:	ec57 6b10 	vmov	r6, r7, d0
 8005348:	b097      	sub	sp, #92	; 0x5c
 800534a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800534c:	9106      	str	r1, [sp, #24]
 800534e:	4604      	mov	r4, r0
 8005350:	920b      	str	r2, [sp, #44]	; 0x2c
 8005352:	9312      	str	r3, [sp, #72]	; 0x48
 8005354:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005358:	e9cd 6700 	strd	r6, r7, [sp]
 800535c:	b93d      	cbnz	r5, 800536e <_dtoa_r+0x2e>
 800535e:	2010      	movs	r0, #16
 8005360:	f7ff f910 	bl	8004584 <malloc>
 8005364:	6260      	str	r0, [r4, #36]	; 0x24
 8005366:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800536a:	6005      	str	r5, [r0, #0]
 800536c:	60c5      	str	r5, [r0, #12]
 800536e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005370:	6819      	ldr	r1, [r3, #0]
 8005372:	b151      	cbz	r1, 800538a <_dtoa_r+0x4a>
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	604a      	str	r2, [r1, #4]
 8005378:	2301      	movs	r3, #1
 800537a:	4093      	lsls	r3, r2
 800537c:	608b      	str	r3, [r1, #8]
 800537e:	4620      	mov	r0, r4
 8005380:	f000 fdf0 	bl	8005f64 <_Bfree>
 8005384:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005386:	2200      	movs	r2, #0
 8005388:	601a      	str	r2, [r3, #0]
 800538a:	1e3b      	subs	r3, r7, #0
 800538c:	bfbb      	ittet	lt
 800538e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005392:	9301      	strlt	r3, [sp, #4]
 8005394:	2300      	movge	r3, #0
 8005396:	2201      	movlt	r2, #1
 8005398:	bfac      	ite	ge
 800539a:	f8c8 3000 	strge.w	r3, [r8]
 800539e:	f8c8 2000 	strlt.w	r2, [r8]
 80053a2:	4baf      	ldr	r3, [pc, #700]	; (8005660 <_dtoa_r+0x320>)
 80053a4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80053a8:	ea33 0308 	bics.w	r3, r3, r8
 80053ac:	d114      	bne.n	80053d8 <_dtoa_r+0x98>
 80053ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80053b0:	f242 730f 	movw	r3, #9999	; 0x270f
 80053b4:	6013      	str	r3, [r2, #0]
 80053b6:	9b00      	ldr	r3, [sp, #0]
 80053b8:	b923      	cbnz	r3, 80053c4 <_dtoa_r+0x84>
 80053ba:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80053be:	2800      	cmp	r0, #0
 80053c0:	f000 8542 	beq.w	8005e48 <_dtoa_r+0xb08>
 80053c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80053c6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8005674 <_dtoa_r+0x334>
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f000 8544 	beq.w	8005e58 <_dtoa_r+0xb18>
 80053d0:	f10b 0303 	add.w	r3, fp, #3
 80053d4:	f000 bd3e 	b.w	8005e54 <_dtoa_r+0xb14>
 80053d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80053dc:	2200      	movs	r2, #0
 80053de:	2300      	movs	r3, #0
 80053e0:	4630      	mov	r0, r6
 80053e2:	4639      	mov	r1, r7
 80053e4:	f7fb fb70 	bl	8000ac8 <__aeabi_dcmpeq>
 80053e8:	4681      	mov	r9, r0
 80053ea:	b168      	cbz	r0, 8005408 <_dtoa_r+0xc8>
 80053ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80053ee:	2301      	movs	r3, #1
 80053f0:	6013      	str	r3, [r2, #0]
 80053f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f000 8524 	beq.w	8005e42 <_dtoa_r+0xb02>
 80053fa:	4b9a      	ldr	r3, [pc, #616]	; (8005664 <_dtoa_r+0x324>)
 80053fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80053fe:	f103 3bff 	add.w	fp, r3, #4294967295
 8005402:	6013      	str	r3, [r2, #0]
 8005404:	f000 bd28 	b.w	8005e58 <_dtoa_r+0xb18>
 8005408:	aa14      	add	r2, sp, #80	; 0x50
 800540a:	a915      	add	r1, sp, #84	; 0x54
 800540c:	ec47 6b10 	vmov	d0, r6, r7
 8005410:	4620      	mov	r0, r4
 8005412:	f001 f800 	bl	8006416 <__d2b>
 8005416:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800541a:	9004      	str	r0, [sp, #16]
 800541c:	2d00      	cmp	r5, #0
 800541e:	d07c      	beq.n	800551a <_dtoa_r+0x1da>
 8005420:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005424:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005428:	46b2      	mov	sl, r6
 800542a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800542e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005432:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005436:	2200      	movs	r2, #0
 8005438:	4b8b      	ldr	r3, [pc, #556]	; (8005668 <_dtoa_r+0x328>)
 800543a:	4650      	mov	r0, sl
 800543c:	4659      	mov	r1, fp
 800543e:	f7fa ff23 	bl	8000288 <__aeabi_dsub>
 8005442:	a381      	add	r3, pc, #516	; (adr r3, 8005648 <_dtoa_r+0x308>)
 8005444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005448:	f7fb f8d6 	bl	80005f8 <__aeabi_dmul>
 800544c:	a380      	add	r3, pc, #512	; (adr r3, 8005650 <_dtoa_r+0x310>)
 800544e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005452:	f7fa ff1b 	bl	800028c <__adddf3>
 8005456:	4606      	mov	r6, r0
 8005458:	4628      	mov	r0, r5
 800545a:	460f      	mov	r7, r1
 800545c:	f7fb f862 	bl	8000524 <__aeabi_i2d>
 8005460:	a37d      	add	r3, pc, #500	; (adr r3, 8005658 <_dtoa_r+0x318>)
 8005462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005466:	f7fb f8c7 	bl	80005f8 <__aeabi_dmul>
 800546a:	4602      	mov	r2, r0
 800546c:	460b      	mov	r3, r1
 800546e:	4630      	mov	r0, r6
 8005470:	4639      	mov	r1, r7
 8005472:	f7fa ff0b 	bl	800028c <__adddf3>
 8005476:	4606      	mov	r6, r0
 8005478:	460f      	mov	r7, r1
 800547a:	f7fb fb6d 	bl	8000b58 <__aeabi_d2iz>
 800547e:	2200      	movs	r2, #0
 8005480:	4682      	mov	sl, r0
 8005482:	2300      	movs	r3, #0
 8005484:	4630      	mov	r0, r6
 8005486:	4639      	mov	r1, r7
 8005488:	f7fb fb28 	bl	8000adc <__aeabi_dcmplt>
 800548c:	b148      	cbz	r0, 80054a2 <_dtoa_r+0x162>
 800548e:	4650      	mov	r0, sl
 8005490:	f7fb f848 	bl	8000524 <__aeabi_i2d>
 8005494:	4632      	mov	r2, r6
 8005496:	463b      	mov	r3, r7
 8005498:	f7fb fb16 	bl	8000ac8 <__aeabi_dcmpeq>
 800549c:	b908      	cbnz	r0, 80054a2 <_dtoa_r+0x162>
 800549e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054a2:	f1ba 0f16 	cmp.w	sl, #22
 80054a6:	d859      	bhi.n	800555c <_dtoa_r+0x21c>
 80054a8:	4970      	ldr	r1, [pc, #448]	; (800566c <_dtoa_r+0x32c>)
 80054aa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80054ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80054b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054b6:	f7fb fb2f 	bl	8000b18 <__aeabi_dcmpgt>
 80054ba:	2800      	cmp	r0, #0
 80054bc:	d050      	beq.n	8005560 <_dtoa_r+0x220>
 80054be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054c2:	2300      	movs	r3, #0
 80054c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80054c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80054c8:	1b5d      	subs	r5, r3, r5
 80054ca:	f1b5 0801 	subs.w	r8, r5, #1
 80054ce:	bf49      	itett	mi
 80054d0:	f1c5 0301 	rsbmi	r3, r5, #1
 80054d4:	2300      	movpl	r3, #0
 80054d6:	9305      	strmi	r3, [sp, #20]
 80054d8:	f04f 0800 	movmi.w	r8, #0
 80054dc:	bf58      	it	pl
 80054de:	9305      	strpl	r3, [sp, #20]
 80054e0:	f1ba 0f00 	cmp.w	sl, #0
 80054e4:	db3e      	blt.n	8005564 <_dtoa_r+0x224>
 80054e6:	2300      	movs	r3, #0
 80054e8:	44d0      	add	r8, sl
 80054ea:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80054ee:	9307      	str	r3, [sp, #28]
 80054f0:	9b06      	ldr	r3, [sp, #24]
 80054f2:	2b09      	cmp	r3, #9
 80054f4:	f200 8090 	bhi.w	8005618 <_dtoa_r+0x2d8>
 80054f8:	2b05      	cmp	r3, #5
 80054fa:	bfc4      	itt	gt
 80054fc:	3b04      	subgt	r3, #4
 80054fe:	9306      	strgt	r3, [sp, #24]
 8005500:	9b06      	ldr	r3, [sp, #24]
 8005502:	f1a3 0302 	sub.w	r3, r3, #2
 8005506:	bfcc      	ite	gt
 8005508:	2500      	movgt	r5, #0
 800550a:	2501      	movle	r5, #1
 800550c:	2b03      	cmp	r3, #3
 800550e:	f200 808f 	bhi.w	8005630 <_dtoa_r+0x2f0>
 8005512:	e8df f003 	tbb	[pc, r3]
 8005516:	7f7d      	.short	0x7f7d
 8005518:	7131      	.short	0x7131
 800551a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800551e:	441d      	add	r5, r3
 8005520:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005524:	2820      	cmp	r0, #32
 8005526:	dd13      	ble.n	8005550 <_dtoa_r+0x210>
 8005528:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800552c:	9b00      	ldr	r3, [sp, #0]
 800552e:	fa08 f800 	lsl.w	r8, r8, r0
 8005532:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005536:	fa23 f000 	lsr.w	r0, r3, r0
 800553a:	ea48 0000 	orr.w	r0, r8, r0
 800553e:	f7fa ffe1 	bl	8000504 <__aeabi_ui2d>
 8005542:	2301      	movs	r3, #1
 8005544:	4682      	mov	sl, r0
 8005546:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800554a:	3d01      	subs	r5, #1
 800554c:	9313      	str	r3, [sp, #76]	; 0x4c
 800554e:	e772      	b.n	8005436 <_dtoa_r+0xf6>
 8005550:	9b00      	ldr	r3, [sp, #0]
 8005552:	f1c0 0020 	rsb	r0, r0, #32
 8005556:	fa03 f000 	lsl.w	r0, r3, r0
 800555a:	e7f0      	b.n	800553e <_dtoa_r+0x1fe>
 800555c:	2301      	movs	r3, #1
 800555e:	e7b1      	b.n	80054c4 <_dtoa_r+0x184>
 8005560:	900f      	str	r0, [sp, #60]	; 0x3c
 8005562:	e7b0      	b.n	80054c6 <_dtoa_r+0x186>
 8005564:	9b05      	ldr	r3, [sp, #20]
 8005566:	eba3 030a 	sub.w	r3, r3, sl
 800556a:	9305      	str	r3, [sp, #20]
 800556c:	f1ca 0300 	rsb	r3, sl, #0
 8005570:	9307      	str	r3, [sp, #28]
 8005572:	2300      	movs	r3, #0
 8005574:	930e      	str	r3, [sp, #56]	; 0x38
 8005576:	e7bb      	b.n	80054f0 <_dtoa_r+0x1b0>
 8005578:	2301      	movs	r3, #1
 800557a:	930a      	str	r3, [sp, #40]	; 0x28
 800557c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800557e:	2b00      	cmp	r3, #0
 8005580:	dd59      	ble.n	8005636 <_dtoa_r+0x2f6>
 8005582:	9302      	str	r3, [sp, #8]
 8005584:	4699      	mov	r9, r3
 8005586:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005588:	2200      	movs	r2, #0
 800558a:	6072      	str	r2, [r6, #4]
 800558c:	2204      	movs	r2, #4
 800558e:	f102 0014 	add.w	r0, r2, #20
 8005592:	4298      	cmp	r0, r3
 8005594:	6871      	ldr	r1, [r6, #4]
 8005596:	d953      	bls.n	8005640 <_dtoa_r+0x300>
 8005598:	4620      	mov	r0, r4
 800559a:	f000 fcaf 	bl	8005efc <_Balloc>
 800559e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055a0:	6030      	str	r0, [r6, #0]
 80055a2:	f1b9 0f0e 	cmp.w	r9, #14
 80055a6:	f8d3 b000 	ldr.w	fp, [r3]
 80055aa:	f200 80e6 	bhi.w	800577a <_dtoa_r+0x43a>
 80055ae:	2d00      	cmp	r5, #0
 80055b0:	f000 80e3 	beq.w	800577a <_dtoa_r+0x43a>
 80055b4:	ed9d 7b00 	vldr	d7, [sp]
 80055b8:	f1ba 0f00 	cmp.w	sl, #0
 80055bc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80055c0:	dd74      	ble.n	80056ac <_dtoa_r+0x36c>
 80055c2:	4a2a      	ldr	r2, [pc, #168]	; (800566c <_dtoa_r+0x32c>)
 80055c4:	f00a 030f 	and.w	r3, sl, #15
 80055c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80055cc:	ed93 7b00 	vldr	d7, [r3]
 80055d0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80055d4:	06f0      	lsls	r0, r6, #27
 80055d6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80055da:	d565      	bpl.n	80056a8 <_dtoa_r+0x368>
 80055dc:	4b24      	ldr	r3, [pc, #144]	; (8005670 <_dtoa_r+0x330>)
 80055de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80055e2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80055e6:	f7fb f931 	bl	800084c <__aeabi_ddiv>
 80055ea:	e9cd 0100 	strd	r0, r1, [sp]
 80055ee:	f006 060f 	and.w	r6, r6, #15
 80055f2:	2503      	movs	r5, #3
 80055f4:	4f1e      	ldr	r7, [pc, #120]	; (8005670 <_dtoa_r+0x330>)
 80055f6:	e04c      	b.n	8005692 <_dtoa_r+0x352>
 80055f8:	2301      	movs	r3, #1
 80055fa:	930a      	str	r3, [sp, #40]	; 0x28
 80055fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055fe:	4453      	add	r3, sl
 8005600:	f103 0901 	add.w	r9, r3, #1
 8005604:	9302      	str	r3, [sp, #8]
 8005606:	464b      	mov	r3, r9
 8005608:	2b01      	cmp	r3, #1
 800560a:	bfb8      	it	lt
 800560c:	2301      	movlt	r3, #1
 800560e:	e7ba      	b.n	8005586 <_dtoa_r+0x246>
 8005610:	2300      	movs	r3, #0
 8005612:	e7b2      	b.n	800557a <_dtoa_r+0x23a>
 8005614:	2300      	movs	r3, #0
 8005616:	e7f0      	b.n	80055fa <_dtoa_r+0x2ba>
 8005618:	2501      	movs	r5, #1
 800561a:	2300      	movs	r3, #0
 800561c:	9306      	str	r3, [sp, #24]
 800561e:	950a      	str	r5, [sp, #40]	; 0x28
 8005620:	f04f 33ff 	mov.w	r3, #4294967295
 8005624:	9302      	str	r3, [sp, #8]
 8005626:	4699      	mov	r9, r3
 8005628:	2200      	movs	r2, #0
 800562a:	2312      	movs	r3, #18
 800562c:	920b      	str	r2, [sp, #44]	; 0x2c
 800562e:	e7aa      	b.n	8005586 <_dtoa_r+0x246>
 8005630:	2301      	movs	r3, #1
 8005632:	930a      	str	r3, [sp, #40]	; 0x28
 8005634:	e7f4      	b.n	8005620 <_dtoa_r+0x2e0>
 8005636:	2301      	movs	r3, #1
 8005638:	9302      	str	r3, [sp, #8]
 800563a:	4699      	mov	r9, r3
 800563c:	461a      	mov	r2, r3
 800563e:	e7f5      	b.n	800562c <_dtoa_r+0x2ec>
 8005640:	3101      	adds	r1, #1
 8005642:	6071      	str	r1, [r6, #4]
 8005644:	0052      	lsls	r2, r2, #1
 8005646:	e7a2      	b.n	800558e <_dtoa_r+0x24e>
 8005648:	636f4361 	.word	0x636f4361
 800564c:	3fd287a7 	.word	0x3fd287a7
 8005650:	8b60c8b3 	.word	0x8b60c8b3
 8005654:	3fc68a28 	.word	0x3fc68a28
 8005658:	509f79fb 	.word	0x509f79fb
 800565c:	3fd34413 	.word	0x3fd34413
 8005660:	7ff00000 	.word	0x7ff00000
 8005664:	08007b91 	.word	0x08007b91
 8005668:	3ff80000 	.word	0x3ff80000
 800566c:	08007bf8 	.word	0x08007bf8
 8005670:	08007bd0 	.word	0x08007bd0
 8005674:	08007bbd 	.word	0x08007bbd
 8005678:	07f1      	lsls	r1, r6, #31
 800567a:	d508      	bpl.n	800568e <_dtoa_r+0x34e>
 800567c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005680:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005684:	f7fa ffb8 	bl	80005f8 <__aeabi_dmul>
 8005688:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800568c:	3501      	adds	r5, #1
 800568e:	1076      	asrs	r6, r6, #1
 8005690:	3708      	adds	r7, #8
 8005692:	2e00      	cmp	r6, #0
 8005694:	d1f0      	bne.n	8005678 <_dtoa_r+0x338>
 8005696:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800569a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800569e:	f7fb f8d5 	bl	800084c <__aeabi_ddiv>
 80056a2:	e9cd 0100 	strd	r0, r1, [sp]
 80056a6:	e01a      	b.n	80056de <_dtoa_r+0x39e>
 80056a8:	2502      	movs	r5, #2
 80056aa:	e7a3      	b.n	80055f4 <_dtoa_r+0x2b4>
 80056ac:	f000 80a0 	beq.w	80057f0 <_dtoa_r+0x4b0>
 80056b0:	f1ca 0600 	rsb	r6, sl, #0
 80056b4:	4b9f      	ldr	r3, [pc, #636]	; (8005934 <_dtoa_r+0x5f4>)
 80056b6:	4fa0      	ldr	r7, [pc, #640]	; (8005938 <_dtoa_r+0x5f8>)
 80056b8:	f006 020f 	and.w	r2, r6, #15
 80056bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80056c8:	f7fa ff96 	bl	80005f8 <__aeabi_dmul>
 80056cc:	e9cd 0100 	strd	r0, r1, [sp]
 80056d0:	1136      	asrs	r6, r6, #4
 80056d2:	2300      	movs	r3, #0
 80056d4:	2502      	movs	r5, #2
 80056d6:	2e00      	cmp	r6, #0
 80056d8:	d17f      	bne.n	80057da <_dtoa_r+0x49a>
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1e1      	bne.n	80056a2 <_dtoa_r+0x362>
 80056de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f000 8087 	beq.w	80057f4 <_dtoa_r+0x4b4>
 80056e6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80056ea:	2200      	movs	r2, #0
 80056ec:	4b93      	ldr	r3, [pc, #588]	; (800593c <_dtoa_r+0x5fc>)
 80056ee:	4630      	mov	r0, r6
 80056f0:	4639      	mov	r1, r7
 80056f2:	f7fb f9f3 	bl	8000adc <__aeabi_dcmplt>
 80056f6:	2800      	cmp	r0, #0
 80056f8:	d07c      	beq.n	80057f4 <_dtoa_r+0x4b4>
 80056fa:	f1b9 0f00 	cmp.w	r9, #0
 80056fe:	d079      	beq.n	80057f4 <_dtoa_r+0x4b4>
 8005700:	9b02      	ldr	r3, [sp, #8]
 8005702:	2b00      	cmp	r3, #0
 8005704:	dd35      	ble.n	8005772 <_dtoa_r+0x432>
 8005706:	f10a 33ff 	add.w	r3, sl, #4294967295
 800570a:	9308      	str	r3, [sp, #32]
 800570c:	4639      	mov	r1, r7
 800570e:	2200      	movs	r2, #0
 8005710:	4b8b      	ldr	r3, [pc, #556]	; (8005940 <_dtoa_r+0x600>)
 8005712:	4630      	mov	r0, r6
 8005714:	f7fa ff70 	bl	80005f8 <__aeabi_dmul>
 8005718:	e9cd 0100 	strd	r0, r1, [sp]
 800571c:	9f02      	ldr	r7, [sp, #8]
 800571e:	3501      	adds	r5, #1
 8005720:	4628      	mov	r0, r5
 8005722:	f7fa feff 	bl	8000524 <__aeabi_i2d>
 8005726:	e9dd 2300 	ldrd	r2, r3, [sp]
 800572a:	f7fa ff65 	bl	80005f8 <__aeabi_dmul>
 800572e:	2200      	movs	r2, #0
 8005730:	4b84      	ldr	r3, [pc, #528]	; (8005944 <_dtoa_r+0x604>)
 8005732:	f7fa fdab 	bl	800028c <__adddf3>
 8005736:	4605      	mov	r5, r0
 8005738:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800573c:	2f00      	cmp	r7, #0
 800573e:	d15d      	bne.n	80057fc <_dtoa_r+0x4bc>
 8005740:	2200      	movs	r2, #0
 8005742:	4b81      	ldr	r3, [pc, #516]	; (8005948 <_dtoa_r+0x608>)
 8005744:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005748:	f7fa fd9e 	bl	8000288 <__aeabi_dsub>
 800574c:	462a      	mov	r2, r5
 800574e:	4633      	mov	r3, r6
 8005750:	e9cd 0100 	strd	r0, r1, [sp]
 8005754:	f7fb f9e0 	bl	8000b18 <__aeabi_dcmpgt>
 8005758:	2800      	cmp	r0, #0
 800575a:	f040 8288 	bne.w	8005c6e <_dtoa_r+0x92e>
 800575e:	462a      	mov	r2, r5
 8005760:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005764:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005768:	f7fb f9b8 	bl	8000adc <__aeabi_dcmplt>
 800576c:	2800      	cmp	r0, #0
 800576e:	f040 827c 	bne.w	8005c6a <_dtoa_r+0x92a>
 8005772:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005776:	e9cd 2300 	strd	r2, r3, [sp]
 800577a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800577c:	2b00      	cmp	r3, #0
 800577e:	f2c0 8150 	blt.w	8005a22 <_dtoa_r+0x6e2>
 8005782:	f1ba 0f0e 	cmp.w	sl, #14
 8005786:	f300 814c 	bgt.w	8005a22 <_dtoa_r+0x6e2>
 800578a:	4b6a      	ldr	r3, [pc, #424]	; (8005934 <_dtoa_r+0x5f4>)
 800578c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005790:	ed93 7b00 	vldr	d7, [r3]
 8005794:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005796:	2b00      	cmp	r3, #0
 8005798:	ed8d 7b02 	vstr	d7, [sp, #8]
 800579c:	f280 80d8 	bge.w	8005950 <_dtoa_r+0x610>
 80057a0:	f1b9 0f00 	cmp.w	r9, #0
 80057a4:	f300 80d4 	bgt.w	8005950 <_dtoa_r+0x610>
 80057a8:	f040 825e 	bne.w	8005c68 <_dtoa_r+0x928>
 80057ac:	2200      	movs	r2, #0
 80057ae:	4b66      	ldr	r3, [pc, #408]	; (8005948 <_dtoa_r+0x608>)
 80057b0:	ec51 0b17 	vmov	r0, r1, d7
 80057b4:	f7fa ff20 	bl	80005f8 <__aeabi_dmul>
 80057b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057bc:	f7fb f9a2 	bl	8000b04 <__aeabi_dcmpge>
 80057c0:	464f      	mov	r7, r9
 80057c2:	464e      	mov	r6, r9
 80057c4:	2800      	cmp	r0, #0
 80057c6:	f040 8234 	bne.w	8005c32 <_dtoa_r+0x8f2>
 80057ca:	2331      	movs	r3, #49	; 0x31
 80057cc:	f10b 0501 	add.w	r5, fp, #1
 80057d0:	f88b 3000 	strb.w	r3, [fp]
 80057d4:	f10a 0a01 	add.w	sl, sl, #1
 80057d8:	e22f      	b.n	8005c3a <_dtoa_r+0x8fa>
 80057da:	07f2      	lsls	r2, r6, #31
 80057dc:	d505      	bpl.n	80057ea <_dtoa_r+0x4aa>
 80057de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057e2:	f7fa ff09 	bl	80005f8 <__aeabi_dmul>
 80057e6:	3501      	adds	r5, #1
 80057e8:	2301      	movs	r3, #1
 80057ea:	1076      	asrs	r6, r6, #1
 80057ec:	3708      	adds	r7, #8
 80057ee:	e772      	b.n	80056d6 <_dtoa_r+0x396>
 80057f0:	2502      	movs	r5, #2
 80057f2:	e774      	b.n	80056de <_dtoa_r+0x39e>
 80057f4:	f8cd a020 	str.w	sl, [sp, #32]
 80057f8:	464f      	mov	r7, r9
 80057fa:	e791      	b.n	8005720 <_dtoa_r+0x3e0>
 80057fc:	4b4d      	ldr	r3, [pc, #308]	; (8005934 <_dtoa_r+0x5f4>)
 80057fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005802:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005808:	2b00      	cmp	r3, #0
 800580a:	d047      	beq.n	800589c <_dtoa_r+0x55c>
 800580c:	4602      	mov	r2, r0
 800580e:	460b      	mov	r3, r1
 8005810:	2000      	movs	r0, #0
 8005812:	494e      	ldr	r1, [pc, #312]	; (800594c <_dtoa_r+0x60c>)
 8005814:	f7fb f81a 	bl	800084c <__aeabi_ddiv>
 8005818:	462a      	mov	r2, r5
 800581a:	4633      	mov	r3, r6
 800581c:	f7fa fd34 	bl	8000288 <__aeabi_dsub>
 8005820:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005824:	465d      	mov	r5, fp
 8005826:	e9dd 0100 	ldrd	r0, r1, [sp]
 800582a:	f7fb f995 	bl	8000b58 <__aeabi_d2iz>
 800582e:	4606      	mov	r6, r0
 8005830:	f7fa fe78 	bl	8000524 <__aeabi_i2d>
 8005834:	4602      	mov	r2, r0
 8005836:	460b      	mov	r3, r1
 8005838:	e9dd 0100 	ldrd	r0, r1, [sp]
 800583c:	f7fa fd24 	bl	8000288 <__aeabi_dsub>
 8005840:	3630      	adds	r6, #48	; 0x30
 8005842:	f805 6b01 	strb.w	r6, [r5], #1
 8005846:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800584a:	e9cd 0100 	strd	r0, r1, [sp]
 800584e:	f7fb f945 	bl	8000adc <__aeabi_dcmplt>
 8005852:	2800      	cmp	r0, #0
 8005854:	d163      	bne.n	800591e <_dtoa_r+0x5de>
 8005856:	e9dd 2300 	ldrd	r2, r3, [sp]
 800585a:	2000      	movs	r0, #0
 800585c:	4937      	ldr	r1, [pc, #220]	; (800593c <_dtoa_r+0x5fc>)
 800585e:	f7fa fd13 	bl	8000288 <__aeabi_dsub>
 8005862:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005866:	f7fb f939 	bl	8000adc <__aeabi_dcmplt>
 800586a:	2800      	cmp	r0, #0
 800586c:	f040 80b7 	bne.w	80059de <_dtoa_r+0x69e>
 8005870:	eba5 030b 	sub.w	r3, r5, fp
 8005874:	429f      	cmp	r7, r3
 8005876:	f77f af7c 	ble.w	8005772 <_dtoa_r+0x432>
 800587a:	2200      	movs	r2, #0
 800587c:	4b30      	ldr	r3, [pc, #192]	; (8005940 <_dtoa_r+0x600>)
 800587e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005882:	f7fa feb9 	bl	80005f8 <__aeabi_dmul>
 8005886:	2200      	movs	r2, #0
 8005888:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800588c:	4b2c      	ldr	r3, [pc, #176]	; (8005940 <_dtoa_r+0x600>)
 800588e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005892:	f7fa feb1 	bl	80005f8 <__aeabi_dmul>
 8005896:	e9cd 0100 	strd	r0, r1, [sp]
 800589a:	e7c4      	b.n	8005826 <_dtoa_r+0x4e6>
 800589c:	462a      	mov	r2, r5
 800589e:	4633      	mov	r3, r6
 80058a0:	f7fa feaa 	bl	80005f8 <__aeabi_dmul>
 80058a4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80058a8:	eb0b 0507 	add.w	r5, fp, r7
 80058ac:	465e      	mov	r6, fp
 80058ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058b2:	f7fb f951 	bl	8000b58 <__aeabi_d2iz>
 80058b6:	4607      	mov	r7, r0
 80058b8:	f7fa fe34 	bl	8000524 <__aeabi_i2d>
 80058bc:	3730      	adds	r7, #48	; 0x30
 80058be:	4602      	mov	r2, r0
 80058c0:	460b      	mov	r3, r1
 80058c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058c6:	f7fa fcdf 	bl	8000288 <__aeabi_dsub>
 80058ca:	f806 7b01 	strb.w	r7, [r6], #1
 80058ce:	42ae      	cmp	r6, r5
 80058d0:	e9cd 0100 	strd	r0, r1, [sp]
 80058d4:	f04f 0200 	mov.w	r2, #0
 80058d8:	d126      	bne.n	8005928 <_dtoa_r+0x5e8>
 80058da:	4b1c      	ldr	r3, [pc, #112]	; (800594c <_dtoa_r+0x60c>)
 80058dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80058e0:	f7fa fcd4 	bl	800028c <__adddf3>
 80058e4:	4602      	mov	r2, r0
 80058e6:	460b      	mov	r3, r1
 80058e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058ec:	f7fb f914 	bl	8000b18 <__aeabi_dcmpgt>
 80058f0:	2800      	cmp	r0, #0
 80058f2:	d174      	bne.n	80059de <_dtoa_r+0x69e>
 80058f4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80058f8:	2000      	movs	r0, #0
 80058fa:	4914      	ldr	r1, [pc, #80]	; (800594c <_dtoa_r+0x60c>)
 80058fc:	f7fa fcc4 	bl	8000288 <__aeabi_dsub>
 8005900:	4602      	mov	r2, r0
 8005902:	460b      	mov	r3, r1
 8005904:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005908:	f7fb f8e8 	bl	8000adc <__aeabi_dcmplt>
 800590c:	2800      	cmp	r0, #0
 800590e:	f43f af30 	beq.w	8005772 <_dtoa_r+0x432>
 8005912:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005916:	2b30      	cmp	r3, #48	; 0x30
 8005918:	f105 32ff 	add.w	r2, r5, #4294967295
 800591c:	d002      	beq.n	8005924 <_dtoa_r+0x5e4>
 800591e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005922:	e04a      	b.n	80059ba <_dtoa_r+0x67a>
 8005924:	4615      	mov	r5, r2
 8005926:	e7f4      	b.n	8005912 <_dtoa_r+0x5d2>
 8005928:	4b05      	ldr	r3, [pc, #20]	; (8005940 <_dtoa_r+0x600>)
 800592a:	f7fa fe65 	bl	80005f8 <__aeabi_dmul>
 800592e:	e9cd 0100 	strd	r0, r1, [sp]
 8005932:	e7bc      	b.n	80058ae <_dtoa_r+0x56e>
 8005934:	08007bf8 	.word	0x08007bf8
 8005938:	08007bd0 	.word	0x08007bd0
 800593c:	3ff00000 	.word	0x3ff00000
 8005940:	40240000 	.word	0x40240000
 8005944:	401c0000 	.word	0x401c0000
 8005948:	40140000 	.word	0x40140000
 800594c:	3fe00000 	.word	0x3fe00000
 8005950:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005954:	465d      	mov	r5, fp
 8005956:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800595a:	4630      	mov	r0, r6
 800595c:	4639      	mov	r1, r7
 800595e:	f7fa ff75 	bl	800084c <__aeabi_ddiv>
 8005962:	f7fb f8f9 	bl	8000b58 <__aeabi_d2iz>
 8005966:	4680      	mov	r8, r0
 8005968:	f7fa fddc 	bl	8000524 <__aeabi_i2d>
 800596c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005970:	f7fa fe42 	bl	80005f8 <__aeabi_dmul>
 8005974:	4602      	mov	r2, r0
 8005976:	460b      	mov	r3, r1
 8005978:	4630      	mov	r0, r6
 800597a:	4639      	mov	r1, r7
 800597c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005980:	f7fa fc82 	bl	8000288 <__aeabi_dsub>
 8005984:	f805 6b01 	strb.w	r6, [r5], #1
 8005988:	eba5 060b 	sub.w	r6, r5, fp
 800598c:	45b1      	cmp	r9, r6
 800598e:	4602      	mov	r2, r0
 8005990:	460b      	mov	r3, r1
 8005992:	d139      	bne.n	8005a08 <_dtoa_r+0x6c8>
 8005994:	f7fa fc7a 	bl	800028c <__adddf3>
 8005998:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800599c:	4606      	mov	r6, r0
 800599e:	460f      	mov	r7, r1
 80059a0:	f7fb f8ba 	bl	8000b18 <__aeabi_dcmpgt>
 80059a4:	b9c8      	cbnz	r0, 80059da <_dtoa_r+0x69a>
 80059a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059aa:	4630      	mov	r0, r6
 80059ac:	4639      	mov	r1, r7
 80059ae:	f7fb f88b 	bl	8000ac8 <__aeabi_dcmpeq>
 80059b2:	b110      	cbz	r0, 80059ba <_dtoa_r+0x67a>
 80059b4:	f018 0f01 	tst.w	r8, #1
 80059b8:	d10f      	bne.n	80059da <_dtoa_r+0x69a>
 80059ba:	9904      	ldr	r1, [sp, #16]
 80059bc:	4620      	mov	r0, r4
 80059be:	f000 fad1 	bl	8005f64 <_Bfree>
 80059c2:	2300      	movs	r3, #0
 80059c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80059c6:	702b      	strb	r3, [r5, #0]
 80059c8:	f10a 0301 	add.w	r3, sl, #1
 80059cc:	6013      	str	r3, [r2, #0]
 80059ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f000 8241 	beq.w	8005e58 <_dtoa_r+0xb18>
 80059d6:	601d      	str	r5, [r3, #0]
 80059d8:	e23e      	b.n	8005e58 <_dtoa_r+0xb18>
 80059da:	f8cd a020 	str.w	sl, [sp, #32]
 80059de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80059e2:	2a39      	cmp	r2, #57	; 0x39
 80059e4:	f105 33ff 	add.w	r3, r5, #4294967295
 80059e8:	d108      	bne.n	80059fc <_dtoa_r+0x6bc>
 80059ea:	459b      	cmp	fp, r3
 80059ec:	d10a      	bne.n	8005a04 <_dtoa_r+0x6c4>
 80059ee:	9b08      	ldr	r3, [sp, #32]
 80059f0:	3301      	adds	r3, #1
 80059f2:	9308      	str	r3, [sp, #32]
 80059f4:	2330      	movs	r3, #48	; 0x30
 80059f6:	f88b 3000 	strb.w	r3, [fp]
 80059fa:	465b      	mov	r3, fp
 80059fc:	781a      	ldrb	r2, [r3, #0]
 80059fe:	3201      	adds	r2, #1
 8005a00:	701a      	strb	r2, [r3, #0]
 8005a02:	e78c      	b.n	800591e <_dtoa_r+0x5de>
 8005a04:	461d      	mov	r5, r3
 8005a06:	e7ea      	b.n	80059de <_dtoa_r+0x69e>
 8005a08:	2200      	movs	r2, #0
 8005a0a:	4b9b      	ldr	r3, [pc, #620]	; (8005c78 <_dtoa_r+0x938>)
 8005a0c:	f7fa fdf4 	bl	80005f8 <__aeabi_dmul>
 8005a10:	2200      	movs	r2, #0
 8005a12:	2300      	movs	r3, #0
 8005a14:	4606      	mov	r6, r0
 8005a16:	460f      	mov	r7, r1
 8005a18:	f7fb f856 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a1c:	2800      	cmp	r0, #0
 8005a1e:	d09a      	beq.n	8005956 <_dtoa_r+0x616>
 8005a20:	e7cb      	b.n	80059ba <_dtoa_r+0x67a>
 8005a22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a24:	2a00      	cmp	r2, #0
 8005a26:	f000 808b 	beq.w	8005b40 <_dtoa_r+0x800>
 8005a2a:	9a06      	ldr	r2, [sp, #24]
 8005a2c:	2a01      	cmp	r2, #1
 8005a2e:	dc6e      	bgt.n	8005b0e <_dtoa_r+0x7ce>
 8005a30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005a32:	2a00      	cmp	r2, #0
 8005a34:	d067      	beq.n	8005b06 <_dtoa_r+0x7c6>
 8005a36:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005a3a:	9f07      	ldr	r7, [sp, #28]
 8005a3c:	9d05      	ldr	r5, [sp, #20]
 8005a3e:	9a05      	ldr	r2, [sp, #20]
 8005a40:	2101      	movs	r1, #1
 8005a42:	441a      	add	r2, r3
 8005a44:	4620      	mov	r0, r4
 8005a46:	9205      	str	r2, [sp, #20]
 8005a48:	4498      	add	r8, r3
 8005a4a:	f000 fb2b 	bl	80060a4 <__i2b>
 8005a4e:	4606      	mov	r6, r0
 8005a50:	2d00      	cmp	r5, #0
 8005a52:	dd0c      	ble.n	8005a6e <_dtoa_r+0x72e>
 8005a54:	f1b8 0f00 	cmp.w	r8, #0
 8005a58:	dd09      	ble.n	8005a6e <_dtoa_r+0x72e>
 8005a5a:	4545      	cmp	r5, r8
 8005a5c:	9a05      	ldr	r2, [sp, #20]
 8005a5e:	462b      	mov	r3, r5
 8005a60:	bfa8      	it	ge
 8005a62:	4643      	movge	r3, r8
 8005a64:	1ad2      	subs	r2, r2, r3
 8005a66:	9205      	str	r2, [sp, #20]
 8005a68:	1aed      	subs	r5, r5, r3
 8005a6a:	eba8 0803 	sub.w	r8, r8, r3
 8005a6e:	9b07      	ldr	r3, [sp, #28]
 8005a70:	b1eb      	cbz	r3, 8005aae <_dtoa_r+0x76e>
 8005a72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d067      	beq.n	8005b48 <_dtoa_r+0x808>
 8005a78:	b18f      	cbz	r7, 8005a9e <_dtoa_r+0x75e>
 8005a7a:	4631      	mov	r1, r6
 8005a7c:	463a      	mov	r2, r7
 8005a7e:	4620      	mov	r0, r4
 8005a80:	f000 fbb0 	bl	80061e4 <__pow5mult>
 8005a84:	9a04      	ldr	r2, [sp, #16]
 8005a86:	4601      	mov	r1, r0
 8005a88:	4606      	mov	r6, r0
 8005a8a:	4620      	mov	r0, r4
 8005a8c:	f000 fb13 	bl	80060b6 <__multiply>
 8005a90:	9904      	ldr	r1, [sp, #16]
 8005a92:	9008      	str	r0, [sp, #32]
 8005a94:	4620      	mov	r0, r4
 8005a96:	f000 fa65 	bl	8005f64 <_Bfree>
 8005a9a:	9b08      	ldr	r3, [sp, #32]
 8005a9c:	9304      	str	r3, [sp, #16]
 8005a9e:	9b07      	ldr	r3, [sp, #28]
 8005aa0:	1bda      	subs	r2, r3, r7
 8005aa2:	d004      	beq.n	8005aae <_dtoa_r+0x76e>
 8005aa4:	9904      	ldr	r1, [sp, #16]
 8005aa6:	4620      	mov	r0, r4
 8005aa8:	f000 fb9c 	bl	80061e4 <__pow5mult>
 8005aac:	9004      	str	r0, [sp, #16]
 8005aae:	2101      	movs	r1, #1
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	f000 faf7 	bl	80060a4 <__i2b>
 8005ab6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ab8:	4607      	mov	r7, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f000 81d0 	beq.w	8005e60 <_dtoa_r+0xb20>
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	4601      	mov	r1, r0
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	f000 fb8d 	bl	80061e4 <__pow5mult>
 8005aca:	9b06      	ldr	r3, [sp, #24]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	4607      	mov	r7, r0
 8005ad0:	dc40      	bgt.n	8005b54 <_dtoa_r+0x814>
 8005ad2:	9b00      	ldr	r3, [sp, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d139      	bne.n	8005b4c <_dtoa_r+0x80c>
 8005ad8:	9b01      	ldr	r3, [sp, #4]
 8005ada:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d136      	bne.n	8005b50 <_dtoa_r+0x810>
 8005ae2:	9b01      	ldr	r3, [sp, #4]
 8005ae4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ae8:	0d1b      	lsrs	r3, r3, #20
 8005aea:	051b      	lsls	r3, r3, #20
 8005aec:	b12b      	cbz	r3, 8005afa <_dtoa_r+0x7ba>
 8005aee:	9b05      	ldr	r3, [sp, #20]
 8005af0:	3301      	adds	r3, #1
 8005af2:	9305      	str	r3, [sp, #20]
 8005af4:	f108 0801 	add.w	r8, r8, #1
 8005af8:	2301      	movs	r3, #1
 8005afa:	9307      	str	r3, [sp, #28]
 8005afc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d12a      	bne.n	8005b58 <_dtoa_r+0x818>
 8005b02:	2001      	movs	r0, #1
 8005b04:	e030      	b.n	8005b68 <_dtoa_r+0x828>
 8005b06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005b08:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b0c:	e795      	b.n	8005a3a <_dtoa_r+0x6fa>
 8005b0e:	9b07      	ldr	r3, [sp, #28]
 8005b10:	f109 37ff 	add.w	r7, r9, #4294967295
 8005b14:	42bb      	cmp	r3, r7
 8005b16:	bfbf      	itttt	lt
 8005b18:	9b07      	ldrlt	r3, [sp, #28]
 8005b1a:	9707      	strlt	r7, [sp, #28]
 8005b1c:	1afa      	sublt	r2, r7, r3
 8005b1e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005b20:	bfbb      	ittet	lt
 8005b22:	189b      	addlt	r3, r3, r2
 8005b24:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005b26:	1bdf      	subge	r7, r3, r7
 8005b28:	2700      	movlt	r7, #0
 8005b2a:	f1b9 0f00 	cmp.w	r9, #0
 8005b2e:	bfb5      	itete	lt
 8005b30:	9b05      	ldrlt	r3, [sp, #20]
 8005b32:	9d05      	ldrge	r5, [sp, #20]
 8005b34:	eba3 0509 	sublt.w	r5, r3, r9
 8005b38:	464b      	movge	r3, r9
 8005b3a:	bfb8      	it	lt
 8005b3c:	2300      	movlt	r3, #0
 8005b3e:	e77e      	b.n	8005a3e <_dtoa_r+0x6fe>
 8005b40:	9f07      	ldr	r7, [sp, #28]
 8005b42:	9d05      	ldr	r5, [sp, #20]
 8005b44:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005b46:	e783      	b.n	8005a50 <_dtoa_r+0x710>
 8005b48:	9a07      	ldr	r2, [sp, #28]
 8005b4a:	e7ab      	b.n	8005aa4 <_dtoa_r+0x764>
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	e7d4      	b.n	8005afa <_dtoa_r+0x7ba>
 8005b50:	9b00      	ldr	r3, [sp, #0]
 8005b52:	e7d2      	b.n	8005afa <_dtoa_r+0x7ba>
 8005b54:	2300      	movs	r3, #0
 8005b56:	9307      	str	r3, [sp, #28]
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005b5e:	6918      	ldr	r0, [r3, #16]
 8005b60:	f000 fa52 	bl	8006008 <__hi0bits>
 8005b64:	f1c0 0020 	rsb	r0, r0, #32
 8005b68:	4440      	add	r0, r8
 8005b6a:	f010 001f 	ands.w	r0, r0, #31
 8005b6e:	d047      	beq.n	8005c00 <_dtoa_r+0x8c0>
 8005b70:	f1c0 0320 	rsb	r3, r0, #32
 8005b74:	2b04      	cmp	r3, #4
 8005b76:	dd3b      	ble.n	8005bf0 <_dtoa_r+0x8b0>
 8005b78:	9b05      	ldr	r3, [sp, #20]
 8005b7a:	f1c0 001c 	rsb	r0, r0, #28
 8005b7e:	4403      	add	r3, r0
 8005b80:	9305      	str	r3, [sp, #20]
 8005b82:	4405      	add	r5, r0
 8005b84:	4480      	add	r8, r0
 8005b86:	9b05      	ldr	r3, [sp, #20]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	dd05      	ble.n	8005b98 <_dtoa_r+0x858>
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	9904      	ldr	r1, [sp, #16]
 8005b90:	4620      	mov	r0, r4
 8005b92:	f000 fb75 	bl	8006280 <__lshift>
 8005b96:	9004      	str	r0, [sp, #16]
 8005b98:	f1b8 0f00 	cmp.w	r8, #0
 8005b9c:	dd05      	ble.n	8005baa <_dtoa_r+0x86a>
 8005b9e:	4639      	mov	r1, r7
 8005ba0:	4642      	mov	r2, r8
 8005ba2:	4620      	mov	r0, r4
 8005ba4:	f000 fb6c 	bl	8006280 <__lshift>
 8005ba8:	4607      	mov	r7, r0
 8005baa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005bac:	b353      	cbz	r3, 8005c04 <_dtoa_r+0x8c4>
 8005bae:	4639      	mov	r1, r7
 8005bb0:	9804      	ldr	r0, [sp, #16]
 8005bb2:	f000 fbb9 	bl	8006328 <__mcmp>
 8005bb6:	2800      	cmp	r0, #0
 8005bb8:	da24      	bge.n	8005c04 <_dtoa_r+0x8c4>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	220a      	movs	r2, #10
 8005bbe:	9904      	ldr	r1, [sp, #16]
 8005bc0:	4620      	mov	r0, r4
 8005bc2:	f000 f9e6 	bl	8005f92 <__multadd>
 8005bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bc8:	9004      	str	r0, [sp, #16]
 8005bca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f000 814d 	beq.w	8005e6e <_dtoa_r+0xb2e>
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	4631      	mov	r1, r6
 8005bd8:	220a      	movs	r2, #10
 8005bda:	4620      	mov	r0, r4
 8005bdc:	f000 f9d9 	bl	8005f92 <__multadd>
 8005be0:	9b02      	ldr	r3, [sp, #8]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	4606      	mov	r6, r0
 8005be6:	dc4f      	bgt.n	8005c88 <_dtoa_r+0x948>
 8005be8:	9b06      	ldr	r3, [sp, #24]
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	dd4c      	ble.n	8005c88 <_dtoa_r+0x948>
 8005bee:	e011      	b.n	8005c14 <_dtoa_r+0x8d4>
 8005bf0:	d0c9      	beq.n	8005b86 <_dtoa_r+0x846>
 8005bf2:	9a05      	ldr	r2, [sp, #20]
 8005bf4:	331c      	adds	r3, #28
 8005bf6:	441a      	add	r2, r3
 8005bf8:	9205      	str	r2, [sp, #20]
 8005bfa:	441d      	add	r5, r3
 8005bfc:	4498      	add	r8, r3
 8005bfe:	e7c2      	b.n	8005b86 <_dtoa_r+0x846>
 8005c00:	4603      	mov	r3, r0
 8005c02:	e7f6      	b.n	8005bf2 <_dtoa_r+0x8b2>
 8005c04:	f1b9 0f00 	cmp.w	r9, #0
 8005c08:	dc38      	bgt.n	8005c7c <_dtoa_r+0x93c>
 8005c0a:	9b06      	ldr	r3, [sp, #24]
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	dd35      	ble.n	8005c7c <_dtoa_r+0x93c>
 8005c10:	f8cd 9008 	str.w	r9, [sp, #8]
 8005c14:	9b02      	ldr	r3, [sp, #8]
 8005c16:	b963      	cbnz	r3, 8005c32 <_dtoa_r+0x8f2>
 8005c18:	4639      	mov	r1, r7
 8005c1a:	2205      	movs	r2, #5
 8005c1c:	4620      	mov	r0, r4
 8005c1e:	f000 f9b8 	bl	8005f92 <__multadd>
 8005c22:	4601      	mov	r1, r0
 8005c24:	4607      	mov	r7, r0
 8005c26:	9804      	ldr	r0, [sp, #16]
 8005c28:	f000 fb7e 	bl	8006328 <__mcmp>
 8005c2c:	2800      	cmp	r0, #0
 8005c2e:	f73f adcc 	bgt.w	80057ca <_dtoa_r+0x48a>
 8005c32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c34:	465d      	mov	r5, fp
 8005c36:	ea6f 0a03 	mvn.w	sl, r3
 8005c3a:	f04f 0900 	mov.w	r9, #0
 8005c3e:	4639      	mov	r1, r7
 8005c40:	4620      	mov	r0, r4
 8005c42:	f000 f98f 	bl	8005f64 <_Bfree>
 8005c46:	2e00      	cmp	r6, #0
 8005c48:	f43f aeb7 	beq.w	80059ba <_dtoa_r+0x67a>
 8005c4c:	f1b9 0f00 	cmp.w	r9, #0
 8005c50:	d005      	beq.n	8005c5e <_dtoa_r+0x91e>
 8005c52:	45b1      	cmp	r9, r6
 8005c54:	d003      	beq.n	8005c5e <_dtoa_r+0x91e>
 8005c56:	4649      	mov	r1, r9
 8005c58:	4620      	mov	r0, r4
 8005c5a:	f000 f983 	bl	8005f64 <_Bfree>
 8005c5e:	4631      	mov	r1, r6
 8005c60:	4620      	mov	r0, r4
 8005c62:	f000 f97f 	bl	8005f64 <_Bfree>
 8005c66:	e6a8      	b.n	80059ba <_dtoa_r+0x67a>
 8005c68:	2700      	movs	r7, #0
 8005c6a:	463e      	mov	r6, r7
 8005c6c:	e7e1      	b.n	8005c32 <_dtoa_r+0x8f2>
 8005c6e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005c72:	463e      	mov	r6, r7
 8005c74:	e5a9      	b.n	80057ca <_dtoa_r+0x48a>
 8005c76:	bf00      	nop
 8005c78:	40240000 	.word	0x40240000
 8005c7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c7e:	f8cd 9008 	str.w	r9, [sp, #8]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f000 80fa 	beq.w	8005e7c <_dtoa_r+0xb3c>
 8005c88:	2d00      	cmp	r5, #0
 8005c8a:	dd05      	ble.n	8005c98 <_dtoa_r+0x958>
 8005c8c:	4631      	mov	r1, r6
 8005c8e:	462a      	mov	r2, r5
 8005c90:	4620      	mov	r0, r4
 8005c92:	f000 faf5 	bl	8006280 <__lshift>
 8005c96:	4606      	mov	r6, r0
 8005c98:	9b07      	ldr	r3, [sp, #28]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d04c      	beq.n	8005d38 <_dtoa_r+0x9f8>
 8005c9e:	6871      	ldr	r1, [r6, #4]
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	f000 f92b 	bl	8005efc <_Balloc>
 8005ca6:	6932      	ldr	r2, [r6, #16]
 8005ca8:	3202      	adds	r2, #2
 8005caa:	4605      	mov	r5, r0
 8005cac:	0092      	lsls	r2, r2, #2
 8005cae:	f106 010c 	add.w	r1, r6, #12
 8005cb2:	300c      	adds	r0, #12
 8005cb4:	f7fe fc76 	bl	80045a4 <memcpy>
 8005cb8:	2201      	movs	r2, #1
 8005cba:	4629      	mov	r1, r5
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	f000 fadf 	bl	8006280 <__lshift>
 8005cc2:	9b00      	ldr	r3, [sp, #0]
 8005cc4:	f8cd b014 	str.w	fp, [sp, #20]
 8005cc8:	f003 0301 	and.w	r3, r3, #1
 8005ccc:	46b1      	mov	r9, r6
 8005cce:	9307      	str	r3, [sp, #28]
 8005cd0:	4606      	mov	r6, r0
 8005cd2:	4639      	mov	r1, r7
 8005cd4:	9804      	ldr	r0, [sp, #16]
 8005cd6:	f7ff faa7 	bl	8005228 <quorem>
 8005cda:	4649      	mov	r1, r9
 8005cdc:	4605      	mov	r5, r0
 8005cde:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005ce2:	9804      	ldr	r0, [sp, #16]
 8005ce4:	f000 fb20 	bl	8006328 <__mcmp>
 8005ce8:	4632      	mov	r2, r6
 8005cea:	9000      	str	r0, [sp, #0]
 8005cec:	4639      	mov	r1, r7
 8005cee:	4620      	mov	r0, r4
 8005cf0:	f000 fb34 	bl	800635c <__mdiff>
 8005cf4:	68c3      	ldr	r3, [r0, #12]
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	bb03      	cbnz	r3, 8005d3c <_dtoa_r+0x9fc>
 8005cfa:	4601      	mov	r1, r0
 8005cfc:	9008      	str	r0, [sp, #32]
 8005cfe:	9804      	ldr	r0, [sp, #16]
 8005d00:	f000 fb12 	bl	8006328 <__mcmp>
 8005d04:	9a08      	ldr	r2, [sp, #32]
 8005d06:	4603      	mov	r3, r0
 8005d08:	4611      	mov	r1, r2
 8005d0a:	4620      	mov	r0, r4
 8005d0c:	9308      	str	r3, [sp, #32]
 8005d0e:	f000 f929 	bl	8005f64 <_Bfree>
 8005d12:	9b08      	ldr	r3, [sp, #32]
 8005d14:	b9a3      	cbnz	r3, 8005d40 <_dtoa_r+0xa00>
 8005d16:	9a06      	ldr	r2, [sp, #24]
 8005d18:	b992      	cbnz	r2, 8005d40 <_dtoa_r+0xa00>
 8005d1a:	9a07      	ldr	r2, [sp, #28]
 8005d1c:	b982      	cbnz	r2, 8005d40 <_dtoa_r+0xa00>
 8005d1e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005d22:	d029      	beq.n	8005d78 <_dtoa_r+0xa38>
 8005d24:	9b00      	ldr	r3, [sp, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	dd01      	ble.n	8005d2e <_dtoa_r+0x9ee>
 8005d2a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005d2e:	9b05      	ldr	r3, [sp, #20]
 8005d30:	1c5d      	adds	r5, r3, #1
 8005d32:	f883 8000 	strb.w	r8, [r3]
 8005d36:	e782      	b.n	8005c3e <_dtoa_r+0x8fe>
 8005d38:	4630      	mov	r0, r6
 8005d3a:	e7c2      	b.n	8005cc2 <_dtoa_r+0x982>
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e7e3      	b.n	8005d08 <_dtoa_r+0x9c8>
 8005d40:	9a00      	ldr	r2, [sp, #0]
 8005d42:	2a00      	cmp	r2, #0
 8005d44:	db04      	blt.n	8005d50 <_dtoa_r+0xa10>
 8005d46:	d125      	bne.n	8005d94 <_dtoa_r+0xa54>
 8005d48:	9a06      	ldr	r2, [sp, #24]
 8005d4a:	bb1a      	cbnz	r2, 8005d94 <_dtoa_r+0xa54>
 8005d4c:	9a07      	ldr	r2, [sp, #28]
 8005d4e:	bb0a      	cbnz	r2, 8005d94 <_dtoa_r+0xa54>
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	ddec      	ble.n	8005d2e <_dtoa_r+0x9ee>
 8005d54:	2201      	movs	r2, #1
 8005d56:	9904      	ldr	r1, [sp, #16]
 8005d58:	4620      	mov	r0, r4
 8005d5a:	f000 fa91 	bl	8006280 <__lshift>
 8005d5e:	4639      	mov	r1, r7
 8005d60:	9004      	str	r0, [sp, #16]
 8005d62:	f000 fae1 	bl	8006328 <__mcmp>
 8005d66:	2800      	cmp	r0, #0
 8005d68:	dc03      	bgt.n	8005d72 <_dtoa_r+0xa32>
 8005d6a:	d1e0      	bne.n	8005d2e <_dtoa_r+0x9ee>
 8005d6c:	f018 0f01 	tst.w	r8, #1
 8005d70:	d0dd      	beq.n	8005d2e <_dtoa_r+0x9ee>
 8005d72:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005d76:	d1d8      	bne.n	8005d2a <_dtoa_r+0x9ea>
 8005d78:	9b05      	ldr	r3, [sp, #20]
 8005d7a:	9a05      	ldr	r2, [sp, #20]
 8005d7c:	1c5d      	adds	r5, r3, #1
 8005d7e:	2339      	movs	r3, #57	; 0x39
 8005d80:	7013      	strb	r3, [r2, #0]
 8005d82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005d86:	2b39      	cmp	r3, #57	; 0x39
 8005d88:	f105 32ff 	add.w	r2, r5, #4294967295
 8005d8c:	d04f      	beq.n	8005e2e <_dtoa_r+0xaee>
 8005d8e:	3301      	adds	r3, #1
 8005d90:	7013      	strb	r3, [r2, #0]
 8005d92:	e754      	b.n	8005c3e <_dtoa_r+0x8fe>
 8005d94:	9a05      	ldr	r2, [sp, #20]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f102 0501 	add.w	r5, r2, #1
 8005d9c:	dd06      	ble.n	8005dac <_dtoa_r+0xa6c>
 8005d9e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005da2:	d0e9      	beq.n	8005d78 <_dtoa_r+0xa38>
 8005da4:	f108 0801 	add.w	r8, r8, #1
 8005da8:	9b05      	ldr	r3, [sp, #20]
 8005daa:	e7c2      	b.n	8005d32 <_dtoa_r+0x9f2>
 8005dac:	9a02      	ldr	r2, [sp, #8]
 8005dae:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005db2:	eba5 030b 	sub.w	r3, r5, fp
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d021      	beq.n	8005dfe <_dtoa_r+0xabe>
 8005dba:	2300      	movs	r3, #0
 8005dbc:	220a      	movs	r2, #10
 8005dbe:	9904      	ldr	r1, [sp, #16]
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	f000 f8e6 	bl	8005f92 <__multadd>
 8005dc6:	45b1      	cmp	r9, r6
 8005dc8:	9004      	str	r0, [sp, #16]
 8005dca:	f04f 0300 	mov.w	r3, #0
 8005dce:	f04f 020a 	mov.w	r2, #10
 8005dd2:	4649      	mov	r1, r9
 8005dd4:	4620      	mov	r0, r4
 8005dd6:	d105      	bne.n	8005de4 <_dtoa_r+0xaa4>
 8005dd8:	f000 f8db 	bl	8005f92 <__multadd>
 8005ddc:	4681      	mov	r9, r0
 8005dde:	4606      	mov	r6, r0
 8005de0:	9505      	str	r5, [sp, #20]
 8005de2:	e776      	b.n	8005cd2 <_dtoa_r+0x992>
 8005de4:	f000 f8d5 	bl	8005f92 <__multadd>
 8005de8:	4631      	mov	r1, r6
 8005dea:	4681      	mov	r9, r0
 8005dec:	2300      	movs	r3, #0
 8005dee:	220a      	movs	r2, #10
 8005df0:	4620      	mov	r0, r4
 8005df2:	f000 f8ce 	bl	8005f92 <__multadd>
 8005df6:	4606      	mov	r6, r0
 8005df8:	e7f2      	b.n	8005de0 <_dtoa_r+0xaa0>
 8005dfa:	f04f 0900 	mov.w	r9, #0
 8005dfe:	2201      	movs	r2, #1
 8005e00:	9904      	ldr	r1, [sp, #16]
 8005e02:	4620      	mov	r0, r4
 8005e04:	f000 fa3c 	bl	8006280 <__lshift>
 8005e08:	4639      	mov	r1, r7
 8005e0a:	9004      	str	r0, [sp, #16]
 8005e0c:	f000 fa8c 	bl	8006328 <__mcmp>
 8005e10:	2800      	cmp	r0, #0
 8005e12:	dcb6      	bgt.n	8005d82 <_dtoa_r+0xa42>
 8005e14:	d102      	bne.n	8005e1c <_dtoa_r+0xadc>
 8005e16:	f018 0f01 	tst.w	r8, #1
 8005e1a:	d1b2      	bne.n	8005d82 <_dtoa_r+0xa42>
 8005e1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005e20:	2b30      	cmp	r3, #48	; 0x30
 8005e22:	f105 32ff 	add.w	r2, r5, #4294967295
 8005e26:	f47f af0a 	bne.w	8005c3e <_dtoa_r+0x8fe>
 8005e2a:	4615      	mov	r5, r2
 8005e2c:	e7f6      	b.n	8005e1c <_dtoa_r+0xadc>
 8005e2e:	4593      	cmp	fp, r2
 8005e30:	d105      	bne.n	8005e3e <_dtoa_r+0xafe>
 8005e32:	2331      	movs	r3, #49	; 0x31
 8005e34:	f10a 0a01 	add.w	sl, sl, #1
 8005e38:	f88b 3000 	strb.w	r3, [fp]
 8005e3c:	e6ff      	b.n	8005c3e <_dtoa_r+0x8fe>
 8005e3e:	4615      	mov	r5, r2
 8005e40:	e79f      	b.n	8005d82 <_dtoa_r+0xa42>
 8005e42:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005ea8 <_dtoa_r+0xb68>
 8005e46:	e007      	b.n	8005e58 <_dtoa_r+0xb18>
 8005e48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e4a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005eac <_dtoa_r+0xb6c>
 8005e4e:	b11b      	cbz	r3, 8005e58 <_dtoa_r+0xb18>
 8005e50:	f10b 0308 	add.w	r3, fp, #8
 8005e54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e56:	6013      	str	r3, [r2, #0]
 8005e58:	4658      	mov	r0, fp
 8005e5a:	b017      	add	sp, #92	; 0x5c
 8005e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e60:	9b06      	ldr	r3, [sp, #24]
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	f77f ae35 	ble.w	8005ad2 <_dtoa_r+0x792>
 8005e68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e6a:	9307      	str	r3, [sp, #28]
 8005e6c:	e649      	b.n	8005b02 <_dtoa_r+0x7c2>
 8005e6e:	9b02      	ldr	r3, [sp, #8]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	dc03      	bgt.n	8005e7c <_dtoa_r+0xb3c>
 8005e74:	9b06      	ldr	r3, [sp, #24]
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	f73f aecc 	bgt.w	8005c14 <_dtoa_r+0x8d4>
 8005e7c:	465d      	mov	r5, fp
 8005e7e:	4639      	mov	r1, r7
 8005e80:	9804      	ldr	r0, [sp, #16]
 8005e82:	f7ff f9d1 	bl	8005228 <quorem>
 8005e86:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005e8a:	f805 8b01 	strb.w	r8, [r5], #1
 8005e8e:	9a02      	ldr	r2, [sp, #8]
 8005e90:	eba5 030b 	sub.w	r3, r5, fp
 8005e94:	429a      	cmp	r2, r3
 8005e96:	ddb0      	ble.n	8005dfa <_dtoa_r+0xaba>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	220a      	movs	r2, #10
 8005e9c:	9904      	ldr	r1, [sp, #16]
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	f000 f877 	bl	8005f92 <__multadd>
 8005ea4:	9004      	str	r0, [sp, #16]
 8005ea6:	e7ea      	b.n	8005e7e <_dtoa_r+0xb3e>
 8005ea8:	08007b90 	.word	0x08007b90
 8005eac:	08007bb4 	.word	0x08007bb4

08005eb0 <__locale_ctype_ptr_l>:
 8005eb0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005eb4:	4770      	bx	lr
	...

08005eb8 <_localeconv_r>:
 8005eb8:	4b04      	ldr	r3, [pc, #16]	; (8005ecc <_localeconv_r+0x14>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6a18      	ldr	r0, [r3, #32]
 8005ebe:	4b04      	ldr	r3, [pc, #16]	; (8005ed0 <_localeconv_r+0x18>)
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	bf08      	it	eq
 8005ec4:	4618      	moveq	r0, r3
 8005ec6:	30f0      	adds	r0, #240	; 0xf0
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	2000000c 	.word	0x2000000c
 8005ed0:	20000070 	.word	0x20000070

08005ed4 <__ascii_mbtowc>:
 8005ed4:	b082      	sub	sp, #8
 8005ed6:	b901      	cbnz	r1, 8005eda <__ascii_mbtowc+0x6>
 8005ed8:	a901      	add	r1, sp, #4
 8005eda:	b142      	cbz	r2, 8005eee <__ascii_mbtowc+0x1a>
 8005edc:	b14b      	cbz	r3, 8005ef2 <__ascii_mbtowc+0x1e>
 8005ede:	7813      	ldrb	r3, [r2, #0]
 8005ee0:	600b      	str	r3, [r1, #0]
 8005ee2:	7812      	ldrb	r2, [r2, #0]
 8005ee4:	1c10      	adds	r0, r2, #0
 8005ee6:	bf18      	it	ne
 8005ee8:	2001      	movne	r0, #1
 8005eea:	b002      	add	sp, #8
 8005eec:	4770      	bx	lr
 8005eee:	4610      	mov	r0, r2
 8005ef0:	e7fb      	b.n	8005eea <__ascii_mbtowc+0x16>
 8005ef2:	f06f 0001 	mvn.w	r0, #1
 8005ef6:	e7f8      	b.n	8005eea <__ascii_mbtowc+0x16>

08005ef8 <__malloc_lock>:
 8005ef8:	4770      	bx	lr

08005efa <__malloc_unlock>:
 8005efa:	4770      	bx	lr

08005efc <_Balloc>:
 8005efc:	b570      	push	{r4, r5, r6, lr}
 8005efe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005f00:	4604      	mov	r4, r0
 8005f02:	460e      	mov	r6, r1
 8005f04:	b93d      	cbnz	r5, 8005f16 <_Balloc+0x1a>
 8005f06:	2010      	movs	r0, #16
 8005f08:	f7fe fb3c 	bl	8004584 <malloc>
 8005f0c:	6260      	str	r0, [r4, #36]	; 0x24
 8005f0e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005f12:	6005      	str	r5, [r0, #0]
 8005f14:	60c5      	str	r5, [r0, #12]
 8005f16:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005f18:	68eb      	ldr	r3, [r5, #12]
 8005f1a:	b183      	cbz	r3, 8005f3e <_Balloc+0x42>
 8005f1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005f24:	b9b8      	cbnz	r0, 8005f56 <_Balloc+0x5a>
 8005f26:	2101      	movs	r1, #1
 8005f28:	fa01 f506 	lsl.w	r5, r1, r6
 8005f2c:	1d6a      	adds	r2, r5, #5
 8005f2e:	0092      	lsls	r2, r2, #2
 8005f30:	4620      	mov	r0, r4
 8005f32:	f000 fabf 	bl	80064b4 <_calloc_r>
 8005f36:	b160      	cbz	r0, 8005f52 <_Balloc+0x56>
 8005f38:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005f3c:	e00e      	b.n	8005f5c <_Balloc+0x60>
 8005f3e:	2221      	movs	r2, #33	; 0x21
 8005f40:	2104      	movs	r1, #4
 8005f42:	4620      	mov	r0, r4
 8005f44:	f000 fab6 	bl	80064b4 <_calloc_r>
 8005f48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f4a:	60e8      	str	r0, [r5, #12]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1e4      	bne.n	8005f1c <_Balloc+0x20>
 8005f52:	2000      	movs	r0, #0
 8005f54:	bd70      	pop	{r4, r5, r6, pc}
 8005f56:	6802      	ldr	r2, [r0, #0]
 8005f58:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f62:	e7f7      	b.n	8005f54 <_Balloc+0x58>

08005f64 <_Bfree>:
 8005f64:	b570      	push	{r4, r5, r6, lr}
 8005f66:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005f68:	4606      	mov	r6, r0
 8005f6a:	460d      	mov	r5, r1
 8005f6c:	b93c      	cbnz	r4, 8005f7e <_Bfree+0x1a>
 8005f6e:	2010      	movs	r0, #16
 8005f70:	f7fe fb08 	bl	8004584 <malloc>
 8005f74:	6270      	str	r0, [r6, #36]	; 0x24
 8005f76:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f7a:	6004      	str	r4, [r0, #0]
 8005f7c:	60c4      	str	r4, [r0, #12]
 8005f7e:	b13d      	cbz	r5, 8005f90 <_Bfree+0x2c>
 8005f80:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005f82:	686a      	ldr	r2, [r5, #4]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f8a:	6029      	str	r1, [r5, #0]
 8005f8c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005f90:	bd70      	pop	{r4, r5, r6, pc}

08005f92 <__multadd>:
 8005f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f96:	690d      	ldr	r5, [r1, #16]
 8005f98:	461f      	mov	r7, r3
 8005f9a:	4606      	mov	r6, r0
 8005f9c:	460c      	mov	r4, r1
 8005f9e:	f101 0c14 	add.w	ip, r1, #20
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	f8dc 0000 	ldr.w	r0, [ip]
 8005fa8:	b281      	uxth	r1, r0
 8005faa:	fb02 7101 	mla	r1, r2, r1, r7
 8005fae:	0c0f      	lsrs	r7, r1, #16
 8005fb0:	0c00      	lsrs	r0, r0, #16
 8005fb2:	fb02 7000 	mla	r0, r2, r0, r7
 8005fb6:	b289      	uxth	r1, r1
 8005fb8:	3301      	adds	r3, #1
 8005fba:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005fbe:	429d      	cmp	r5, r3
 8005fc0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005fc4:	f84c 1b04 	str.w	r1, [ip], #4
 8005fc8:	dcec      	bgt.n	8005fa4 <__multadd+0x12>
 8005fca:	b1d7      	cbz	r7, 8006002 <__multadd+0x70>
 8005fcc:	68a3      	ldr	r3, [r4, #8]
 8005fce:	42ab      	cmp	r3, r5
 8005fd0:	dc12      	bgt.n	8005ff8 <__multadd+0x66>
 8005fd2:	6861      	ldr	r1, [r4, #4]
 8005fd4:	4630      	mov	r0, r6
 8005fd6:	3101      	adds	r1, #1
 8005fd8:	f7ff ff90 	bl	8005efc <_Balloc>
 8005fdc:	6922      	ldr	r2, [r4, #16]
 8005fde:	3202      	adds	r2, #2
 8005fe0:	f104 010c 	add.w	r1, r4, #12
 8005fe4:	4680      	mov	r8, r0
 8005fe6:	0092      	lsls	r2, r2, #2
 8005fe8:	300c      	adds	r0, #12
 8005fea:	f7fe fadb 	bl	80045a4 <memcpy>
 8005fee:	4621      	mov	r1, r4
 8005ff0:	4630      	mov	r0, r6
 8005ff2:	f7ff ffb7 	bl	8005f64 <_Bfree>
 8005ff6:	4644      	mov	r4, r8
 8005ff8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005ffc:	3501      	adds	r5, #1
 8005ffe:	615f      	str	r7, [r3, #20]
 8006000:	6125      	str	r5, [r4, #16]
 8006002:	4620      	mov	r0, r4
 8006004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006008 <__hi0bits>:
 8006008:	0c02      	lsrs	r2, r0, #16
 800600a:	0412      	lsls	r2, r2, #16
 800600c:	4603      	mov	r3, r0
 800600e:	b9b2      	cbnz	r2, 800603e <__hi0bits+0x36>
 8006010:	0403      	lsls	r3, r0, #16
 8006012:	2010      	movs	r0, #16
 8006014:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006018:	bf04      	itt	eq
 800601a:	021b      	lsleq	r3, r3, #8
 800601c:	3008      	addeq	r0, #8
 800601e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006022:	bf04      	itt	eq
 8006024:	011b      	lsleq	r3, r3, #4
 8006026:	3004      	addeq	r0, #4
 8006028:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800602c:	bf04      	itt	eq
 800602e:	009b      	lsleq	r3, r3, #2
 8006030:	3002      	addeq	r0, #2
 8006032:	2b00      	cmp	r3, #0
 8006034:	db06      	blt.n	8006044 <__hi0bits+0x3c>
 8006036:	005b      	lsls	r3, r3, #1
 8006038:	d503      	bpl.n	8006042 <__hi0bits+0x3a>
 800603a:	3001      	adds	r0, #1
 800603c:	4770      	bx	lr
 800603e:	2000      	movs	r0, #0
 8006040:	e7e8      	b.n	8006014 <__hi0bits+0xc>
 8006042:	2020      	movs	r0, #32
 8006044:	4770      	bx	lr

08006046 <__lo0bits>:
 8006046:	6803      	ldr	r3, [r0, #0]
 8006048:	f013 0207 	ands.w	r2, r3, #7
 800604c:	4601      	mov	r1, r0
 800604e:	d00b      	beq.n	8006068 <__lo0bits+0x22>
 8006050:	07da      	lsls	r2, r3, #31
 8006052:	d423      	bmi.n	800609c <__lo0bits+0x56>
 8006054:	0798      	lsls	r0, r3, #30
 8006056:	bf49      	itett	mi
 8006058:	085b      	lsrmi	r3, r3, #1
 800605a:	089b      	lsrpl	r3, r3, #2
 800605c:	2001      	movmi	r0, #1
 800605e:	600b      	strmi	r3, [r1, #0]
 8006060:	bf5c      	itt	pl
 8006062:	600b      	strpl	r3, [r1, #0]
 8006064:	2002      	movpl	r0, #2
 8006066:	4770      	bx	lr
 8006068:	b298      	uxth	r0, r3
 800606a:	b9a8      	cbnz	r0, 8006098 <__lo0bits+0x52>
 800606c:	0c1b      	lsrs	r3, r3, #16
 800606e:	2010      	movs	r0, #16
 8006070:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006074:	bf04      	itt	eq
 8006076:	0a1b      	lsreq	r3, r3, #8
 8006078:	3008      	addeq	r0, #8
 800607a:	071a      	lsls	r2, r3, #28
 800607c:	bf04      	itt	eq
 800607e:	091b      	lsreq	r3, r3, #4
 8006080:	3004      	addeq	r0, #4
 8006082:	079a      	lsls	r2, r3, #30
 8006084:	bf04      	itt	eq
 8006086:	089b      	lsreq	r3, r3, #2
 8006088:	3002      	addeq	r0, #2
 800608a:	07da      	lsls	r2, r3, #31
 800608c:	d402      	bmi.n	8006094 <__lo0bits+0x4e>
 800608e:	085b      	lsrs	r3, r3, #1
 8006090:	d006      	beq.n	80060a0 <__lo0bits+0x5a>
 8006092:	3001      	adds	r0, #1
 8006094:	600b      	str	r3, [r1, #0]
 8006096:	4770      	bx	lr
 8006098:	4610      	mov	r0, r2
 800609a:	e7e9      	b.n	8006070 <__lo0bits+0x2a>
 800609c:	2000      	movs	r0, #0
 800609e:	4770      	bx	lr
 80060a0:	2020      	movs	r0, #32
 80060a2:	4770      	bx	lr

080060a4 <__i2b>:
 80060a4:	b510      	push	{r4, lr}
 80060a6:	460c      	mov	r4, r1
 80060a8:	2101      	movs	r1, #1
 80060aa:	f7ff ff27 	bl	8005efc <_Balloc>
 80060ae:	2201      	movs	r2, #1
 80060b0:	6144      	str	r4, [r0, #20]
 80060b2:	6102      	str	r2, [r0, #16]
 80060b4:	bd10      	pop	{r4, pc}

080060b6 <__multiply>:
 80060b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ba:	4614      	mov	r4, r2
 80060bc:	690a      	ldr	r2, [r1, #16]
 80060be:	6923      	ldr	r3, [r4, #16]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	bfb8      	it	lt
 80060c4:	460b      	movlt	r3, r1
 80060c6:	4688      	mov	r8, r1
 80060c8:	bfbc      	itt	lt
 80060ca:	46a0      	movlt	r8, r4
 80060cc:	461c      	movlt	r4, r3
 80060ce:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80060d2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80060d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80060da:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80060de:	eb07 0609 	add.w	r6, r7, r9
 80060e2:	42b3      	cmp	r3, r6
 80060e4:	bfb8      	it	lt
 80060e6:	3101      	addlt	r1, #1
 80060e8:	f7ff ff08 	bl	8005efc <_Balloc>
 80060ec:	f100 0514 	add.w	r5, r0, #20
 80060f0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80060f4:	462b      	mov	r3, r5
 80060f6:	2200      	movs	r2, #0
 80060f8:	4573      	cmp	r3, lr
 80060fa:	d316      	bcc.n	800612a <__multiply+0x74>
 80060fc:	f104 0214 	add.w	r2, r4, #20
 8006100:	f108 0114 	add.w	r1, r8, #20
 8006104:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006108:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	9b00      	ldr	r3, [sp, #0]
 8006110:	9201      	str	r2, [sp, #4]
 8006112:	4293      	cmp	r3, r2
 8006114:	d80c      	bhi.n	8006130 <__multiply+0x7a>
 8006116:	2e00      	cmp	r6, #0
 8006118:	dd03      	ble.n	8006122 <__multiply+0x6c>
 800611a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800611e:	2b00      	cmp	r3, #0
 8006120:	d05d      	beq.n	80061de <__multiply+0x128>
 8006122:	6106      	str	r6, [r0, #16]
 8006124:	b003      	add	sp, #12
 8006126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800612a:	f843 2b04 	str.w	r2, [r3], #4
 800612e:	e7e3      	b.n	80060f8 <__multiply+0x42>
 8006130:	f8b2 b000 	ldrh.w	fp, [r2]
 8006134:	f1bb 0f00 	cmp.w	fp, #0
 8006138:	d023      	beq.n	8006182 <__multiply+0xcc>
 800613a:	4689      	mov	r9, r1
 800613c:	46ac      	mov	ip, r5
 800613e:	f04f 0800 	mov.w	r8, #0
 8006142:	f859 4b04 	ldr.w	r4, [r9], #4
 8006146:	f8dc a000 	ldr.w	sl, [ip]
 800614a:	b2a3      	uxth	r3, r4
 800614c:	fa1f fa8a 	uxth.w	sl, sl
 8006150:	fb0b a303 	mla	r3, fp, r3, sl
 8006154:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006158:	f8dc 4000 	ldr.w	r4, [ip]
 800615c:	4443      	add	r3, r8
 800615e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006162:	fb0b 840a 	mla	r4, fp, sl, r8
 8006166:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800616a:	46e2      	mov	sl, ip
 800616c:	b29b      	uxth	r3, r3
 800616e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006172:	454f      	cmp	r7, r9
 8006174:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006178:	f84a 3b04 	str.w	r3, [sl], #4
 800617c:	d82b      	bhi.n	80061d6 <__multiply+0x120>
 800617e:	f8cc 8004 	str.w	r8, [ip, #4]
 8006182:	9b01      	ldr	r3, [sp, #4]
 8006184:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006188:	3204      	adds	r2, #4
 800618a:	f1ba 0f00 	cmp.w	sl, #0
 800618e:	d020      	beq.n	80061d2 <__multiply+0x11c>
 8006190:	682b      	ldr	r3, [r5, #0]
 8006192:	4689      	mov	r9, r1
 8006194:	46a8      	mov	r8, r5
 8006196:	f04f 0b00 	mov.w	fp, #0
 800619a:	f8b9 c000 	ldrh.w	ip, [r9]
 800619e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80061a2:	fb0a 440c 	mla	r4, sl, ip, r4
 80061a6:	445c      	add	r4, fp
 80061a8:	46c4      	mov	ip, r8
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80061b0:	f84c 3b04 	str.w	r3, [ip], #4
 80061b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80061b8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80061bc:	0c1b      	lsrs	r3, r3, #16
 80061be:	fb0a b303 	mla	r3, sl, r3, fp
 80061c2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80061c6:	454f      	cmp	r7, r9
 80061c8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80061cc:	d805      	bhi.n	80061da <__multiply+0x124>
 80061ce:	f8c8 3004 	str.w	r3, [r8, #4]
 80061d2:	3504      	adds	r5, #4
 80061d4:	e79b      	b.n	800610e <__multiply+0x58>
 80061d6:	46d4      	mov	ip, sl
 80061d8:	e7b3      	b.n	8006142 <__multiply+0x8c>
 80061da:	46e0      	mov	r8, ip
 80061dc:	e7dd      	b.n	800619a <__multiply+0xe4>
 80061de:	3e01      	subs	r6, #1
 80061e0:	e799      	b.n	8006116 <__multiply+0x60>
	...

080061e4 <__pow5mult>:
 80061e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061e8:	4615      	mov	r5, r2
 80061ea:	f012 0203 	ands.w	r2, r2, #3
 80061ee:	4606      	mov	r6, r0
 80061f0:	460f      	mov	r7, r1
 80061f2:	d007      	beq.n	8006204 <__pow5mult+0x20>
 80061f4:	3a01      	subs	r2, #1
 80061f6:	4c21      	ldr	r4, [pc, #132]	; (800627c <__pow5mult+0x98>)
 80061f8:	2300      	movs	r3, #0
 80061fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80061fe:	f7ff fec8 	bl	8005f92 <__multadd>
 8006202:	4607      	mov	r7, r0
 8006204:	10ad      	asrs	r5, r5, #2
 8006206:	d035      	beq.n	8006274 <__pow5mult+0x90>
 8006208:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800620a:	b93c      	cbnz	r4, 800621c <__pow5mult+0x38>
 800620c:	2010      	movs	r0, #16
 800620e:	f7fe f9b9 	bl	8004584 <malloc>
 8006212:	6270      	str	r0, [r6, #36]	; 0x24
 8006214:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006218:	6004      	str	r4, [r0, #0]
 800621a:	60c4      	str	r4, [r0, #12]
 800621c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006220:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006224:	b94c      	cbnz	r4, 800623a <__pow5mult+0x56>
 8006226:	f240 2171 	movw	r1, #625	; 0x271
 800622a:	4630      	mov	r0, r6
 800622c:	f7ff ff3a 	bl	80060a4 <__i2b>
 8006230:	2300      	movs	r3, #0
 8006232:	f8c8 0008 	str.w	r0, [r8, #8]
 8006236:	4604      	mov	r4, r0
 8006238:	6003      	str	r3, [r0, #0]
 800623a:	f04f 0800 	mov.w	r8, #0
 800623e:	07eb      	lsls	r3, r5, #31
 8006240:	d50a      	bpl.n	8006258 <__pow5mult+0x74>
 8006242:	4639      	mov	r1, r7
 8006244:	4622      	mov	r2, r4
 8006246:	4630      	mov	r0, r6
 8006248:	f7ff ff35 	bl	80060b6 <__multiply>
 800624c:	4639      	mov	r1, r7
 800624e:	4681      	mov	r9, r0
 8006250:	4630      	mov	r0, r6
 8006252:	f7ff fe87 	bl	8005f64 <_Bfree>
 8006256:	464f      	mov	r7, r9
 8006258:	106d      	asrs	r5, r5, #1
 800625a:	d00b      	beq.n	8006274 <__pow5mult+0x90>
 800625c:	6820      	ldr	r0, [r4, #0]
 800625e:	b938      	cbnz	r0, 8006270 <__pow5mult+0x8c>
 8006260:	4622      	mov	r2, r4
 8006262:	4621      	mov	r1, r4
 8006264:	4630      	mov	r0, r6
 8006266:	f7ff ff26 	bl	80060b6 <__multiply>
 800626a:	6020      	str	r0, [r4, #0]
 800626c:	f8c0 8000 	str.w	r8, [r0]
 8006270:	4604      	mov	r4, r0
 8006272:	e7e4      	b.n	800623e <__pow5mult+0x5a>
 8006274:	4638      	mov	r0, r7
 8006276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800627a:	bf00      	nop
 800627c:	08007cc0 	.word	0x08007cc0

08006280 <__lshift>:
 8006280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006284:	460c      	mov	r4, r1
 8006286:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800628a:	6923      	ldr	r3, [r4, #16]
 800628c:	6849      	ldr	r1, [r1, #4]
 800628e:	eb0a 0903 	add.w	r9, sl, r3
 8006292:	68a3      	ldr	r3, [r4, #8]
 8006294:	4607      	mov	r7, r0
 8006296:	4616      	mov	r6, r2
 8006298:	f109 0501 	add.w	r5, r9, #1
 800629c:	42ab      	cmp	r3, r5
 800629e:	db32      	blt.n	8006306 <__lshift+0x86>
 80062a0:	4638      	mov	r0, r7
 80062a2:	f7ff fe2b 	bl	8005efc <_Balloc>
 80062a6:	2300      	movs	r3, #0
 80062a8:	4680      	mov	r8, r0
 80062aa:	f100 0114 	add.w	r1, r0, #20
 80062ae:	461a      	mov	r2, r3
 80062b0:	4553      	cmp	r3, sl
 80062b2:	db2b      	blt.n	800630c <__lshift+0x8c>
 80062b4:	6920      	ldr	r0, [r4, #16]
 80062b6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80062ba:	f104 0314 	add.w	r3, r4, #20
 80062be:	f016 021f 	ands.w	r2, r6, #31
 80062c2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80062c6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80062ca:	d025      	beq.n	8006318 <__lshift+0x98>
 80062cc:	f1c2 0e20 	rsb	lr, r2, #32
 80062d0:	2000      	movs	r0, #0
 80062d2:	681e      	ldr	r6, [r3, #0]
 80062d4:	468a      	mov	sl, r1
 80062d6:	4096      	lsls	r6, r2
 80062d8:	4330      	orrs	r0, r6
 80062da:	f84a 0b04 	str.w	r0, [sl], #4
 80062de:	f853 0b04 	ldr.w	r0, [r3], #4
 80062e2:	459c      	cmp	ip, r3
 80062e4:	fa20 f00e 	lsr.w	r0, r0, lr
 80062e8:	d814      	bhi.n	8006314 <__lshift+0x94>
 80062ea:	6048      	str	r0, [r1, #4]
 80062ec:	b108      	cbz	r0, 80062f2 <__lshift+0x72>
 80062ee:	f109 0502 	add.w	r5, r9, #2
 80062f2:	3d01      	subs	r5, #1
 80062f4:	4638      	mov	r0, r7
 80062f6:	f8c8 5010 	str.w	r5, [r8, #16]
 80062fa:	4621      	mov	r1, r4
 80062fc:	f7ff fe32 	bl	8005f64 <_Bfree>
 8006300:	4640      	mov	r0, r8
 8006302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006306:	3101      	adds	r1, #1
 8006308:	005b      	lsls	r3, r3, #1
 800630a:	e7c7      	b.n	800629c <__lshift+0x1c>
 800630c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006310:	3301      	adds	r3, #1
 8006312:	e7cd      	b.n	80062b0 <__lshift+0x30>
 8006314:	4651      	mov	r1, sl
 8006316:	e7dc      	b.n	80062d2 <__lshift+0x52>
 8006318:	3904      	subs	r1, #4
 800631a:	f853 2b04 	ldr.w	r2, [r3], #4
 800631e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006322:	459c      	cmp	ip, r3
 8006324:	d8f9      	bhi.n	800631a <__lshift+0x9a>
 8006326:	e7e4      	b.n	80062f2 <__lshift+0x72>

08006328 <__mcmp>:
 8006328:	6903      	ldr	r3, [r0, #16]
 800632a:	690a      	ldr	r2, [r1, #16]
 800632c:	1a9b      	subs	r3, r3, r2
 800632e:	b530      	push	{r4, r5, lr}
 8006330:	d10c      	bne.n	800634c <__mcmp+0x24>
 8006332:	0092      	lsls	r2, r2, #2
 8006334:	3014      	adds	r0, #20
 8006336:	3114      	adds	r1, #20
 8006338:	1884      	adds	r4, r0, r2
 800633a:	4411      	add	r1, r2
 800633c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006340:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006344:	4295      	cmp	r5, r2
 8006346:	d003      	beq.n	8006350 <__mcmp+0x28>
 8006348:	d305      	bcc.n	8006356 <__mcmp+0x2e>
 800634a:	2301      	movs	r3, #1
 800634c:	4618      	mov	r0, r3
 800634e:	bd30      	pop	{r4, r5, pc}
 8006350:	42a0      	cmp	r0, r4
 8006352:	d3f3      	bcc.n	800633c <__mcmp+0x14>
 8006354:	e7fa      	b.n	800634c <__mcmp+0x24>
 8006356:	f04f 33ff 	mov.w	r3, #4294967295
 800635a:	e7f7      	b.n	800634c <__mcmp+0x24>

0800635c <__mdiff>:
 800635c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006360:	460d      	mov	r5, r1
 8006362:	4607      	mov	r7, r0
 8006364:	4611      	mov	r1, r2
 8006366:	4628      	mov	r0, r5
 8006368:	4614      	mov	r4, r2
 800636a:	f7ff ffdd 	bl	8006328 <__mcmp>
 800636e:	1e06      	subs	r6, r0, #0
 8006370:	d108      	bne.n	8006384 <__mdiff+0x28>
 8006372:	4631      	mov	r1, r6
 8006374:	4638      	mov	r0, r7
 8006376:	f7ff fdc1 	bl	8005efc <_Balloc>
 800637a:	2301      	movs	r3, #1
 800637c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006384:	bfa4      	itt	ge
 8006386:	4623      	movge	r3, r4
 8006388:	462c      	movge	r4, r5
 800638a:	4638      	mov	r0, r7
 800638c:	6861      	ldr	r1, [r4, #4]
 800638e:	bfa6      	itte	ge
 8006390:	461d      	movge	r5, r3
 8006392:	2600      	movge	r6, #0
 8006394:	2601      	movlt	r6, #1
 8006396:	f7ff fdb1 	bl	8005efc <_Balloc>
 800639a:	692b      	ldr	r3, [r5, #16]
 800639c:	60c6      	str	r6, [r0, #12]
 800639e:	6926      	ldr	r6, [r4, #16]
 80063a0:	f105 0914 	add.w	r9, r5, #20
 80063a4:	f104 0214 	add.w	r2, r4, #20
 80063a8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80063ac:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80063b0:	f100 0514 	add.w	r5, r0, #20
 80063b4:	f04f 0e00 	mov.w	lr, #0
 80063b8:	f852 ab04 	ldr.w	sl, [r2], #4
 80063bc:	f859 4b04 	ldr.w	r4, [r9], #4
 80063c0:	fa1e f18a 	uxtah	r1, lr, sl
 80063c4:	b2a3      	uxth	r3, r4
 80063c6:	1ac9      	subs	r1, r1, r3
 80063c8:	0c23      	lsrs	r3, r4, #16
 80063ca:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80063ce:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80063d2:	b289      	uxth	r1, r1
 80063d4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80063d8:	45c8      	cmp	r8, r9
 80063da:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80063de:	4694      	mov	ip, r2
 80063e0:	f845 3b04 	str.w	r3, [r5], #4
 80063e4:	d8e8      	bhi.n	80063b8 <__mdiff+0x5c>
 80063e6:	45bc      	cmp	ip, r7
 80063e8:	d304      	bcc.n	80063f4 <__mdiff+0x98>
 80063ea:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80063ee:	b183      	cbz	r3, 8006412 <__mdiff+0xb6>
 80063f0:	6106      	str	r6, [r0, #16]
 80063f2:	e7c5      	b.n	8006380 <__mdiff+0x24>
 80063f4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80063f8:	fa1e f381 	uxtah	r3, lr, r1
 80063fc:	141a      	asrs	r2, r3, #16
 80063fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006402:	b29b      	uxth	r3, r3
 8006404:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006408:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800640c:	f845 3b04 	str.w	r3, [r5], #4
 8006410:	e7e9      	b.n	80063e6 <__mdiff+0x8a>
 8006412:	3e01      	subs	r6, #1
 8006414:	e7e9      	b.n	80063ea <__mdiff+0x8e>

08006416 <__d2b>:
 8006416:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800641a:	460e      	mov	r6, r1
 800641c:	2101      	movs	r1, #1
 800641e:	ec59 8b10 	vmov	r8, r9, d0
 8006422:	4615      	mov	r5, r2
 8006424:	f7ff fd6a 	bl	8005efc <_Balloc>
 8006428:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800642c:	4607      	mov	r7, r0
 800642e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006432:	bb34      	cbnz	r4, 8006482 <__d2b+0x6c>
 8006434:	9301      	str	r3, [sp, #4]
 8006436:	f1b8 0300 	subs.w	r3, r8, #0
 800643a:	d027      	beq.n	800648c <__d2b+0x76>
 800643c:	a802      	add	r0, sp, #8
 800643e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006442:	f7ff fe00 	bl	8006046 <__lo0bits>
 8006446:	9900      	ldr	r1, [sp, #0]
 8006448:	b1f0      	cbz	r0, 8006488 <__d2b+0x72>
 800644a:	9a01      	ldr	r2, [sp, #4]
 800644c:	f1c0 0320 	rsb	r3, r0, #32
 8006450:	fa02 f303 	lsl.w	r3, r2, r3
 8006454:	430b      	orrs	r3, r1
 8006456:	40c2      	lsrs	r2, r0
 8006458:	617b      	str	r3, [r7, #20]
 800645a:	9201      	str	r2, [sp, #4]
 800645c:	9b01      	ldr	r3, [sp, #4]
 800645e:	61bb      	str	r3, [r7, #24]
 8006460:	2b00      	cmp	r3, #0
 8006462:	bf14      	ite	ne
 8006464:	2102      	movne	r1, #2
 8006466:	2101      	moveq	r1, #1
 8006468:	6139      	str	r1, [r7, #16]
 800646a:	b1c4      	cbz	r4, 800649e <__d2b+0x88>
 800646c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006470:	4404      	add	r4, r0
 8006472:	6034      	str	r4, [r6, #0]
 8006474:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006478:	6028      	str	r0, [r5, #0]
 800647a:	4638      	mov	r0, r7
 800647c:	b003      	add	sp, #12
 800647e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006482:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006486:	e7d5      	b.n	8006434 <__d2b+0x1e>
 8006488:	6179      	str	r1, [r7, #20]
 800648a:	e7e7      	b.n	800645c <__d2b+0x46>
 800648c:	a801      	add	r0, sp, #4
 800648e:	f7ff fdda 	bl	8006046 <__lo0bits>
 8006492:	9b01      	ldr	r3, [sp, #4]
 8006494:	617b      	str	r3, [r7, #20]
 8006496:	2101      	movs	r1, #1
 8006498:	6139      	str	r1, [r7, #16]
 800649a:	3020      	adds	r0, #32
 800649c:	e7e5      	b.n	800646a <__d2b+0x54>
 800649e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80064a2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80064a6:	6030      	str	r0, [r6, #0]
 80064a8:	6918      	ldr	r0, [r3, #16]
 80064aa:	f7ff fdad 	bl	8006008 <__hi0bits>
 80064ae:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80064b2:	e7e1      	b.n	8006478 <__d2b+0x62>

080064b4 <_calloc_r>:
 80064b4:	b538      	push	{r3, r4, r5, lr}
 80064b6:	fb02 f401 	mul.w	r4, r2, r1
 80064ba:	4621      	mov	r1, r4
 80064bc:	f7fe f8d4 	bl	8004668 <_malloc_r>
 80064c0:	4605      	mov	r5, r0
 80064c2:	b118      	cbz	r0, 80064cc <_calloc_r+0x18>
 80064c4:	4622      	mov	r2, r4
 80064c6:	2100      	movs	r1, #0
 80064c8:	f7fe f877 	bl	80045ba <memset>
 80064cc:	4628      	mov	r0, r5
 80064ce:	bd38      	pop	{r3, r4, r5, pc}

080064d0 <__ssputs_r>:
 80064d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064d4:	688e      	ldr	r6, [r1, #8]
 80064d6:	429e      	cmp	r6, r3
 80064d8:	4682      	mov	sl, r0
 80064da:	460c      	mov	r4, r1
 80064dc:	4690      	mov	r8, r2
 80064de:	4699      	mov	r9, r3
 80064e0:	d837      	bhi.n	8006552 <__ssputs_r+0x82>
 80064e2:	898a      	ldrh	r2, [r1, #12]
 80064e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80064e8:	d031      	beq.n	800654e <__ssputs_r+0x7e>
 80064ea:	6825      	ldr	r5, [r4, #0]
 80064ec:	6909      	ldr	r1, [r1, #16]
 80064ee:	1a6f      	subs	r7, r5, r1
 80064f0:	6965      	ldr	r5, [r4, #20]
 80064f2:	2302      	movs	r3, #2
 80064f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064f8:	fb95 f5f3 	sdiv	r5, r5, r3
 80064fc:	f109 0301 	add.w	r3, r9, #1
 8006500:	443b      	add	r3, r7
 8006502:	429d      	cmp	r5, r3
 8006504:	bf38      	it	cc
 8006506:	461d      	movcc	r5, r3
 8006508:	0553      	lsls	r3, r2, #21
 800650a:	d530      	bpl.n	800656e <__ssputs_r+0x9e>
 800650c:	4629      	mov	r1, r5
 800650e:	f7fe f8ab 	bl	8004668 <_malloc_r>
 8006512:	4606      	mov	r6, r0
 8006514:	b950      	cbnz	r0, 800652c <__ssputs_r+0x5c>
 8006516:	230c      	movs	r3, #12
 8006518:	f8ca 3000 	str.w	r3, [sl]
 800651c:	89a3      	ldrh	r3, [r4, #12]
 800651e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006522:	81a3      	strh	r3, [r4, #12]
 8006524:	f04f 30ff 	mov.w	r0, #4294967295
 8006528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800652c:	463a      	mov	r2, r7
 800652e:	6921      	ldr	r1, [r4, #16]
 8006530:	f7fe f838 	bl	80045a4 <memcpy>
 8006534:	89a3      	ldrh	r3, [r4, #12]
 8006536:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800653a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800653e:	81a3      	strh	r3, [r4, #12]
 8006540:	6126      	str	r6, [r4, #16]
 8006542:	6165      	str	r5, [r4, #20]
 8006544:	443e      	add	r6, r7
 8006546:	1bed      	subs	r5, r5, r7
 8006548:	6026      	str	r6, [r4, #0]
 800654a:	60a5      	str	r5, [r4, #8]
 800654c:	464e      	mov	r6, r9
 800654e:	454e      	cmp	r6, r9
 8006550:	d900      	bls.n	8006554 <__ssputs_r+0x84>
 8006552:	464e      	mov	r6, r9
 8006554:	4632      	mov	r2, r6
 8006556:	4641      	mov	r1, r8
 8006558:	6820      	ldr	r0, [r4, #0]
 800655a:	f000 f918 	bl	800678e <memmove>
 800655e:	68a3      	ldr	r3, [r4, #8]
 8006560:	1b9b      	subs	r3, r3, r6
 8006562:	60a3      	str	r3, [r4, #8]
 8006564:	6823      	ldr	r3, [r4, #0]
 8006566:	441e      	add	r6, r3
 8006568:	6026      	str	r6, [r4, #0]
 800656a:	2000      	movs	r0, #0
 800656c:	e7dc      	b.n	8006528 <__ssputs_r+0x58>
 800656e:	462a      	mov	r2, r5
 8006570:	f000 f926 	bl	80067c0 <_realloc_r>
 8006574:	4606      	mov	r6, r0
 8006576:	2800      	cmp	r0, #0
 8006578:	d1e2      	bne.n	8006540 <__ssputs_r+0x70>
 800657a:	6921      	ldr	r1, [r4, #16]
 800657c:	4650      	mov	r0, sl
 800657e:	f7fe f825 	bl	80045cc <_free_r>
 8006582:	e7c8      	b.n	8006516 <__ssputs_r+0x46>

08006584 <_svfiprintf_r>:
 8006584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006588:	461d      	mov	r5, r3
 800658a:	898b      	ldrh	r3, [r1, #12]
 800658c:	061f      	lsls	r7, r3, #24
 800658e:	b09d      	sub	sp, #116	; 0x74
 8006590:	4680      	mov	r8, r0
 8006592:	460c      	mov	r4, r1
 8006594:	4616      	mov	r6, r2
 8006596:	d50f      	bpl.n	80065b8 <_svfiprintf_r+0x34>
 8006598:	690b      	ldr	r3, [r1, #16]
 800659a:	b96b      	cbnz	r3, 80065b8 <_svfiprintf_r+0x34>
 800659c:	2140      	movs	r1, #64	; 0x40
 800659e:	f7fe f863 	bl	8004668 <_malloc_r>
 80065a2:	6020      	str	r0, [r4, #0]
 80065a4:	6120      	str	r0, [r4, #16]
 80065a6:	b928      	cbnz	r0, 80065b4 <_svfiprintf_r+0x30>
 80065a8:	230c      	movs	r3, #12
 80065aa:	f8c8 3000 	str.w	r3, [r8]
 80065ae:	f04f 30ff 	mov.w	r0, #4294967295
 80065b2:	e0c8      	b.n	8006746 <_svfiprintf_r+0x1c2>
 80065b4:	2340      	movs	r3, #64	; 0x40
 80065b6:	6163      	str	r3, [r4, #20]
 80065b8:	2300      	movs	r3, #0
 80065ba:	9309      	str	r3, [sp, #36]	; 0x24
 80065bc:	2320      	movs	r3, #32
 80065be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065c2:	2330      	movs	r3, #48	; 0x30
 80065c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065c8:	9503      	str	r5, [sp, #12]
 80065ca:	f04f 0b01 	mov.w	fp, #1
 80065ce:	4637      	mov	r7, r6
 80065d0:	463d      	mov	r5, r7
 80065d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80065d6:	b10b      	cbz	r3, 80065dc <_svfiprintf_r+0x58>
 80065d8:	2b25      	cmp	r3, #37	; 0x25
 80065da:	d13e      	bne.n	800665a <_svfiprintf_r+0xd6>
 80065dc:	ebb7 0a06 	subs.w	sl, r7, r6
 80065e0:	d00b      	beq.n	80065fa <_svfiprintf_r+0x76>
 80065e2:	4653      	mov	r3, sl
 80065e4:	4632      	mov	r2, r6
 80065e6:	4621      	mov	r1, r4
 80065e8:	4640      	mov	r0, r8
 80065ea:	f7ff ff71 	bl	80064d0 <__ssputs_r>
 80065ee:	3001      	adds	r0, #1
 80065f0:	f000 80a4 	beq.w	800673c <_svfiprintf_r+0x1b8>
 80065f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065f6:	4453      	add	r3, sl
 80065f8:	9309      	str	r3, [sp, #36]	; 0x24
 80065fa:	783b      	ldrb	r3, [r7, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f000 809d 	beq.w	800673c <_svfiprintf_r+0x1b8>
 8006602:	2300      	movs	r3, #0
 8006604:	f04f 32ff 	mov.w	r2, #4294967295
 8006608:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800660c:	9304      	str	r3, [sp, #16]
 800660e:	9307      	str	r3, [sp, #28]
 8006610:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006614:	931a      	str	r3, [sp, #104]	; 0x68
 8006616:	462f      	mov	r7, r5
 8006618:	2205      	movs	r2, #5
 800661a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800661e:	4850      	ldr	r0, [pc, #320]	; (8006760 <_svfiprintf_r+0x1dc>)
 8006620:	f7f9 fdde 	bl	80001e0 <memchr>
 8006624:	9b04      	ldr	r3, [sp, #16]
 8006626:	b9d0      	cbnz	r0, 800665e <_svfiprintf_r+0xda>
 8006628:	06d9      	lsls	r1, r3, #27
 800662a:	bf44      	itt	mi
 800662c:	2220      	movmi	r2, #32
 800662e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006632:	071a      	lsls	r2, r3, #28
 8006634:	bf44      	itt	mi
 8006636:	222b      	movmi	r2, #43	; 0x2b
 8006638:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800663c:	782a      	ldrb	r2, [r5, #0]
 800663e:	2a2a      	cmp	r2, #42	; 0x2a
 8006640:	d015      	beq.n	800666e <_svfiprintf_r+0xea>
 8006642:	9a07      	ldr	r2, [sp, #28]
 8006644:	462f      	mov	r7, r5
 8006646:	2000      	movs	r0, #0
 8006648:	250a      	movs	r5, #10
 800664a:	4639      	mov	r1, r7
 800664c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006650:	3b30      	subs	r3, #48	; 0x30
 8006652:	2b09      	cmp	r3, #9
 8006654:	d94d      	bls.n	80066f2 <_svfiprintf_r+0x16e>
 8006656:	b1b8      	cbz	r0, 8006688 <_svfiprintf_r+0x104>
 8006658:	e00f      	b.n	800667a <_svfiprintf_r+0xf6>
 800665a:	462f      	mov	r7, r5
 800665c:	e7b8      	b.n	80065d0 <_svfiprintf_r+0x4c>
 800665e:	4a40      	ldr	r2, [pc, #256]	; (8006760 <_svfiprintf_r+0x1dc>)
 8006660:	1a80      	subs	r0, r0, r2
 8006662:	fa0b f000 	lsl.w	r0, fp, r0
 8006666:	4318      	orrs	r0, r3
 8006668:	9004      	str	r0, [sp, #16]
 800666a:	463d      	mov	r5, r7
 800666c:	e7d3      	b.n	8006616 <_svfiprintf_r+0x92>
 800666e:	9a03      	ldr	r2, [sp, #12]
 8006670:	1d11      	adds	r1, r2, #4
 8006672:	6812      	ldr	r2, [r2, #0]
 8006674:	9103      	str	r1, [sp, #12]
 8006676:	2a00      	cmp	r2, #0
 8006678:	db01      	blt.n	800667e <_svfiprintf_r+0xfa>
 800667a:	9207      	str	r2, [sp, #28]
 800667c:	e004      	b.n	8006688 <_svfiprintf_r+0x104>
 800667e:	4252      	negs	r2, r2
 8006680:	f043 0302 	orr.w	r3, r3, #2
 8006684:	9207      	str	r2, [sp, #28]
 8006686:	9304      	str	r3, [sp, #16]
 8006688:	783b      	ldrb	r3, [r7, #0]
 800668a:	2b2e      	cmp	r3, #46	; 0x2e
 800668c:	d10c      	bne.n	80066a8 <_svfiprintf_r+0x124>
 800668e:	787b      	ldrb	r3, [r7, #1]
 8006690:	2b2a      	cmp	r3, #42	; 0x2a
 8006692:	d133      	bne.n	80066fc <_svfiprintf_r+0x178>
 8006694:	9b03      	ldr	r3, [sp, #12]
 8006696:	1d1a      	adds	r2, r3, #4
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	9203      	str	r2, [sp, #12]
 800669c:	2b00      	cmp	r3, #0
 800669e:	bfb8      	it	lt
 80066a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80066a4:	3702      	adds	r7, #2
 80066a6:	9305      	str	r3, [sp, #20]
 80066a8:	4d2e      	ldr	r5, [pc, #184]	; (8006764 <_svfiprintf_r+0x1e0>)
 80066aa:	7839      	ldrb	r1, [r7, #0]
 80066ac:	2203      	movs	r2, #3
 80066ae:	4628      	mov	r0, r5
 80066b0:	f7f9 fd96 	bl	80001e0 <memchr>
 80066b4:	b138      	cbz	r0, 80066c6 <_svfiprintf_r+0x142>
 80066b6:	2340      	movs	r3, #64	; 0x40
 80066b8:	1b40      	subs	r0, r0, r5
 80066ba:	fa03 f000 	lsl.w	r0, r3, r0
 80066be:	9b04      	ldr	r3, [sp, #16]
 80066c0:	4303      	orrs	r3, r0
 80066c2:	3701      	adds	r7, #1
 80066c4:	9304      	str	r3, [sp, #16]
 80066c6:	7839      	ldrb	r1, [r7, #0]
 80066c8:	4827      	ldr	r0, [pc, #156]	; (8006768 <_svfiprintf_r+0x1e4>)
 80066ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066ce:	2206      	movs	r2, #6
 80066d0:	1c7e      	adds	r6, r7, #1
 80066d2:	f7f9 fd85 	bl	80001e0 <memchr>
 80066d6:	2800      	cmp	r0, #0
 80066d8:	d038      	beq.n	800674c <_svfiprintf_r+0x1c8>
 80066da:	4b24      	ldr	r3, [pc, #144]	; (800676c <_svfiprintf_r+0x1e8>)
 80066dc:	bb13      	cbnz	r3, 8006724 <_svfiprintf_r+0x1a0>
 80066de:	9b03      	ldr	r3, [sp, #12]
 80066e0:	3307      	adds	r3, #7
 80066e2:	f023 0307 	bic.w	r3, r3, #7
 80066e6:	3308      	adds	r3, #8
 80066e8:	9303      	str	r3, [sp, #12]
 80066ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066ec:	444b      	add	r3, r9
 80066ee:	9309      	str	r3, [sp, #36]	; 0x24
 80066f0:	e76d      	b.n	80065ce <_svfiprintf_r+0x4a>
 80066f2:	fb05 3202 	mla	r2, r5, r2, r3
 80066f6:	2001      	movs	r0, #1
 80066f8:	460f      	mov	r7, r1
 80066fa:	e7a6      	b.n	800664a <_svfiprintf_r+0xc6>
 80066fc:	2300      	movs	r3, #0
 80066fe:	3701      	adds	r7, #1
 8006700:	9305      	str	r3, [sp, #20]
 8006702:	4619      	mov	r1, r3
 8006704:	250a      	movs	r5, #10
 8006706:	4638      	mov	r0, r7
 8006708:	f810 2b01 	ldrb.w	r2, [r0], #1
 800670c:	3a30      	subs	r2, #48	; 0x30
 800670e:	2a09      	cmp	r2, #9
 8006710:	d903      	bls.n	800671a <_svfiprintf_r+0x196>
 8006712:	2b00      	cmp	r3, #0
 8006714:	d0c8      	beq.n	80066a8 <_svfiprintf_r+0x124>
 8006716:	9105      	str	r1, [sp, #20]
 8006718:	e7c6      	b.n	80066a8 <_svfiprintf_r+0x124>
 800671a:	fb05 2101 	mla	r1, r5, r1, r2
 800671e:	2301      	movs	r3, #1
 8006720:	4607      	mov	r7, r0
 8006722:	e7f0      	b.n	8006706 <_svfiprintf_r+0x182>
 8006724:	ab03      	add	r3, sp, #12
 8006726:	9300      	str	r3, [sp, #0]
 8006728:	4622      	mov	r2, r4
 800672a:	4b11      	ldr	r3, [pc, #68]	; (8006770 <_svfiprintf_r+0x1ec>)
 800672c:	a904      	add	r1, sp, #16
 800672e:	4640      	mov	r0, r8
 8006730:	f7fe f888 	bl	8004844 <_printf_float>
 8006734:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006738:	4681      	mov	r9, r0
 800673a:	d1d6      	bne.n	80066ea <_svfiprintf_r+0x166>
 800673c:	89a3      	ldrh	r3, [r4, #12]
 800673e:	065b      	lsls	r3, r3, #25
 8006740:	f53f af35 	bmi.w	80065ae <_svfiprintf_r+0x2a>
 8006744:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006746:	b01d      	add	sp, #116	; 0x74
 8006748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800674c:	ab03      	add	r3, sp, #12
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	4622      	mov	r2, r4
 8006752:	4b07      	ldr	r3, [pc, #28]	; (8006770 <_svfiprintf_r+0x1ec>)
 8006754:	a904      	add	r1, sp, #16
 8006756:	4640      	mov	r0, r8
 8006758:	f7fe fb2a 	bl	8004db0 <_printf_i>
 800675c:	e7ea      	b.n	8006734 <_svfiprintf_r+0x1b0>
 800675e:	bf00      	nop
 8006760:	08007ccc 	.word	0x08007ccc
 8006764:	08007cd2 	.word	0x08007cd2
 8006768:	08007cd6 	.word	0x08007cd6
 800676c:	08004845 	.word	0x08004845
 8006770:	080064d1 	.word	0x080064d1

08006774 <__ascii_wctomb>:
 8006774:	b149      	cbz	r1, 800678a <__ascii_wctomb+0x16>
 8006776:	2aff      	cmp	r2, #255	; 0xff
 8006778:	bf85      	ittet	hi
 800677a:	238a      	movhi	r3, #138	; 0x8a
 800677c:	6003      	strhi	r3, [r0, #0]
 800677e:	700a      	strbls	r2, [r1, #0]
 8006780:	f04f 30ff 	movhi.w	r0, #4294967295
 8006784:	bf98      	it	ls
 8006786:	2001      	movls	r0, #1
 8006788:	4770      	bx	lr
 800678a:	4608      	mov	r0, r1
 800678c:	4770      	bx	lr

0800678e <memmove>:
 800678e:	4288      	cmp	r0, r1
 8006790:	b510      	push	{r4, lr}
 8006792:	eb01 0302 	add.w	r3, r1, r2
 8006796:	d807      	bhi.n	80067a8 <memmove+0x1a>
 8006798:	1e42      	subs	r2, r0, #1
 800679a:	4299      	cmp	r1, r3
 800679c:	d00a      	beq.n	80067b4 <memmove+0x26>
 800679e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067a2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80067a6:	e7f8      	b.n	800679a <memmove+0xc>
 80067a8:	4283      	cmp	r3, r0
 80067aa:	d9f5      	bls.n	8006798 <memmove+0xa>
 80067ac:	1881      	adds	r1, r0, r2
 80067ae:	1ad2      	subs	r2, r2, r3
 80067b0:	42d3      	cmn	r3, r2
 80067b2:	d100      	bne.n	80067b6 <memmove+0x28>
 80067b4:	bd10      	pop	{r4, pc}
 80067b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80067ba:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80067be:	e7f7      	b.n	80067b0 <memmove+0x22>

080067c0 <_realloc_r>:
 80067c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c2:	4607      	mov	r7, r0
 80067c4:	4614      	mov	r4, r2
 80067c6:	460e      	mov	r6, r1
 80067c8:	b921      	cbnz	r1, 80067d4 <_realloc_r+0x14>
 80067ca:	4611      	mov	r1, r2
 80067cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80067d0:	f7fd bf4a 	b.w	8004668 <_malloc_r>
 80067d4:	b922      	cbnz	r2, 80067e0 <_realloc_r+0x20>
 80067d6:	f7fd fef9 	bl	80045cc <_free_r>
 80067da:	4625      	mov	r5, r4
 80067dc:	4628      	mov	r0, r5
 80067de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067e0:	f000 f814 	bl	800680c <_malloc_usable_size_r>
 80067e4:	42a0      	cmp	r0, r4
 80067e6:	d20f      	bcs.n	8006808 <_realloc_r+0x48>
 80067e8:	4621      	mov	r1, r4
 80067ea:	4638      	mov	r0, r7
 80067ec:	f7fd ff3c 	bl	8004668 <_malloc_r>
 80067f0:	4605      	mov	r5, r0
 80067f2:	2800      	cmp	r0, #0
 80067f4:	d0f2      	beq.n	80067dc <_realloc_r+0x1c>
 80067f6:	4631      	mov	r1, r6
 80067f8:	4622      	mov	r2, r4
 80067fa:	f7fd fed3 	bl	80045a4 <memcpy>
 80067fe:	4631      	mov	r1, r6
 8006800:	4638      	mov	r0, r7
 8006802:	f7fd fee3 	bl	80045cc <_free_r>
 8006806:	e7e9      	b.n	80067dc <_realloc_r+0x1c>
 8006808:	4635      	mov	r5, r6
 800680a:	e7e7      	b.n	80067dc <_realloc_r+0x1c>

0800680c <_malloc_usable_size_r>:
 800680c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006810:	1f18      	subs	r0, r3, #4
 8006812:	2b00      	cmp	r3, #0
 8006814:	bfbc      	itt	lt
 8006816:	580b      	ldrlt	r3, [r1, r0]
 8006818:	18c0      	addlt	r0, r0, r3
 800681a:	4770      	bx	lr
 800681c:	0000      	movs	r0, r0
	...

08006820 <cos>:
 8006820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006822:	ec51 0b10 	vmov	r0, r1, d0
 8006826:	4a1e      	ldr	r2, [pc, #120]	; (80068a0 <cos+0x80>)
 8006828:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800682c:	4293      	cmp	r3, r2
 800682e:	dc06      	bgt.n	800683e <cos+0x1e>
 8006830:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8006898 <cos+0x78>
 8006834:	f000 fb80 	bl	8006f38 <__kernel_cos>
 8006838:	ec51 0b10 	vmov	r0, r1, d0
 800683c:	e007      	b.n	800684e <cos+0x2e>
 800683e:	4a19      	ldr	r2, [pc, #100]	; (80068a4 <cos+0x84>)
 8006840:	4293      	cmp	r3, r2
 8006842:	dd09      	ble.n	8006858 <cos+0x38>
 8006844:	ee10 2a10 	vmov	r2, s0
 8006848:	460b      	mov	r3, r1
 800684a:	f7f9 fd1d 	bl	8000288 <__aeabi_dsub>
 800684e:	ec41 0b10 	vmov	d0, r0, r1
 8006852:	b005      	add	sp, #20
 8006854:	f85d fb04 	ldr.w	pc, [sp], #4
 8006858:	4668      	mov	r0, sp
 800685a:	f000 f8c9 	bl	80069f0 <__ieee754_rem_pio2>
 800685e:	f000 0003 	and.w	r0, r0, #3
 8006862:	2801      	cmp	r0, #1
 8006864:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006868:	ed9d 0b00 	vldr	d0, [sp]
 800686c:	d007      	beq.n	800687e <cos+0x5e>
 800686e:	2802      	cmp	r0, #2
 8006870:	d00e      	beq.n	8006890 <cos+0x70>
 8006872:	2800      	cmp	r0, #0
 8006874:	d0de      	beq.n	8006834 <cos+0x14>
 8006876:	2001      	movs	r0, #1
 8006878:	f000 ff66 	bl	8007748 <__kernel_sin>
 800687c:	e7dc      	b.n	8006838 <cos+0x18>
 800687e:	f000 ff63 	bl	8007748 <__kernel_sin>
 8006882:	ec53 2b10 	vmov	r2, r3, d0
 8006886:	ee10 0a10 	vmov	r0, s0
 800688a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800688e:	e7de      	b.n	800684e <cos+0x2e>
 8006890:	f000 fb52 	bl	8006f38 <__kernel_cos>
 8006894:	e7f5      	b.n	8006882 <cos+0x62>
 8006896:	bf00      	nop
	...
 80068a0:	3fe921fb 	.word	0x3fe921fb
 80068a4:	7fefffff 	.word	0x7fefffff

080068a8 <sin>:
 80068a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80068aa:	ec51 0b10 	vmov	r0, r1, d0
 80068ae:	4a20      	ldr	r2, [pc, #128]	; (8006930 <sin+0x88>)
 80068b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80068b4:	4293      	cmp	r3, r2
 80068b6:	dc07      	bgt.n	80068c8 <sin+0x20>
 80068b8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8006928 <sin+0x80>
 80068bc:	2000      	movs	r0, #0
 80068be:	f000 ff43 	bl	8007748 <__kernel_sin>
 80068c2:	ec51 0b10 	vmov	r0, r1, d0
 80068c6:	e007      	b.n	80068d8 <sin+0x30>
 80068c8:	4a1a      	ldr	r2, [pc, #104]	; (8006934 <sin+0x8c>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	dd09      	ble.n	80068e2 <sin+0x3a>
 80068ce:	ee10 2a10 	vmov	r2, s0
 80068d2:	460b      	mov	r3, r1
 80068d4:	f7f9 fcd8 	bl	8000288 <__aeabi_dsub>
 80068d8:	ec41 0b10 	vmov	d0, r0, r1
 80068dc:	b005      	add	sp, #20
 80068de:	f85d fb04 	ldr.w	pc, [sp], #4
 80068e2:	4668      	mov	r0, sp
 80068e4:	f000 f884 	bl	80069f0 <__ieee754_rem_pio2>
 80068e8:	f000 0003 	and.w	r0, r0, #3
 80068ec:	2801      	cmp	r0, #1
 80068ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 80068f2:	ed9d 0b00 	vldr	d0, [sp]
 80068f6:	d004      	beq.n	8006902 <sin+0x5a>
 80068f8:	2802      	cmp	r0, #2
 80068fa:	d005      	beq.n	8006908 <sin+0x60>
 80068fc:	b970      	cbnz	r0, 800691c <sin+0x74>
 80068fe:	2001      	movs	r0, #1
 8006900:	e7dd      	b.n	80068be <sin+0x16>
 8006902:	f000 fb19 	bl	8006f38 <__kernel_cos>
 8006906:	e7dc      	b.n	80068c2 <sin+0x1a>
 8006908:	2001      	movs	r0, #1
 800690a:	f000 ff1d 	bl	8007748 <__kernel_sin>
 800690e:	ec53 2b10 	vmov	r2, r3, d0
 8006912:	ee10 0a10 	vmov	r0, s0
 8006916:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800691a:	e7dd      	b.n	80068d8 <sin+0x30>
 800691c:	f000 fb0c 	bl	8006f38 <__kernel_cos>
 8006920:	e7f5      	b.n	800690e <sin+0x66>
 8006922:	bf00      	nop
 8006924:	f3af 8000 	nop.w
	...
 8006930:	3fe921fb 	.word	0x3fe921fb
 8006934:	7fefffff 	.word	0x7fefffff

08006938 <sqrt>:
 8006938:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800693c:	ed2d 8b02 	vpush	{d8}
 8006940:	b08b      	sub	sp, #44	; 0x2c
 8006942:	ec55 4b10 	vmov	r4, r5, d0
 8006946:	f000 fa45 	bl	8006dd4 <__ieee754_sqrt>
 800694a:	4b26      	ldr	r3, [pc, #152]	; (80069e4 <sqrt+0xac>)
 800694c:	eeb0 8a40 	vmov.f32	s16, s0
 8006950:	eef0 8a60 	vmov.f32	s17, s1
 8006954:	f993 6000 	ldrsb.w	r6, [r3]
 8006958:	1c73      	adds	r3, r6, #1
 800695a:	d02a      	beq.n	80069b2 <sqrt+0x7a>
 800695c:	4622      	mov	r2, r4
 800695e:	462b      	mov	r3, r5
 8006960:	4620      	mov	r0, r4
 8006962:	4629      	mov	r1, r5
 8006964:	f7fa f8e2 	bl	8000b2c <__aeabi_dcmpun>
 8006968:	4607      	mov	r7, r0
 800696a:	bb10      	cbnz	r0, 80069b2 <sqrt+0x7a>
 800696c:	f04f 0800 	mov.w	r8, #0
 8006970:	f04f 0900 	mov.w	r9, #0
 8006974:	4642      	mov	r2, r8
 8006976:	464b      	mov	r3, r9
 8006978:	4620      	mov	r0, r4
 800697a:	4629      	mov	r1, r5
 800697c:	f7fa f8ae 	bl	8000adc <__aeabi_dcmplt>
 8006980:	b1b8      	cbz	r0, 80069b2 <sqrt+0x7a>
 8006982:	2301      	movs	r3, #1
 8006984:	9300      	str	r3, [sp, #0]
 8006986:	4b18      	ldr	r3, [pc, #96]	; (80069e8 <sqrt+0xb0>)
 8006988:	9301      	str	r3, [sp, #4]
 800698a:	9708      	str	r7, [sp, #32]
 800698c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006990:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006994:	b9b6      	cbnz	r6, 80069c4 <sqrt+0x8c>
 8006996:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800699a:	4668      	mov	r0, sp
 800699c:	f001 f81c 	bl	80079d8 <matherr>
 80069a0:	b1d0      	cbz	r0, 80069d8 <sqrt+0xa0>
 80069a2:	9b08      	ldr	r3, [sp, #32]
 80069a4:	b11b      	cbz	r3, 80069ae <sqrt+0x76>
 80069a6:	f7fd fdaf 	bl	8004508 <__errno>
 80069aa:	9b08      	ldr	r3, [sp, #32]
 80069ac:	6003      	str	r3, [r0, #0]
 80069ae:	ed9d 8b06 	vldr	d8, [sp, #24]
 80069b2:	eeb0 0a48 	vmov.f32	s0, s16
 80069b6:	eef0 0a68 	vmov.f32	s1, s17
 80069ba:	b00b      	add	sp, #44	; 0x2c
 80069bc:	ecbd 8b02 	vpop	{d8}
 80069c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80069c4:	4642      	mov	r2, r8
 80069c6:	464b      	mov	r3, r9
 80069c8:	4640      	mov	r0, r8
 80069ca:	4649      	mov	r1, r9
 80069cc:	f7f9 ff3e 	bl	800084c <__aeabi_ddiv>
 80069d0:	2e02      	cmp	r6, #2
 80069d2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80069d6:	d1e0      	bne.n	800699a <sqrt+0x62>
 80069d8:	f7fd fd96 	bl	8004508 <__errno>
 80069dc:	2321      	movs	r3, #33	; 0x21
 80069de:	6003      	str	r3, [r0, #0]
 80069e0:	e7df      	b.n	80069a2 <sqrt+0x6a>
 80069e2:	bf00      	nop
 80069e4:	200001dc 	.word	0x200001dc
 80069e8:	08007dde 	.word	0x08007dde
 80069ec:	00000000 	.word	0x00000000

080069f0 <__ieee754_rem_pio2>:
 80069f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069f4:	ec57 6b10 	vmov	r6, r7, d0
 80069f8:	4bc3      	ldr	r3, [pc, #780]	; (8006d08 <__ieee754_rem_pio2+0x318>)
 80069fa:	b08d      	sub	sp, #52	; 0x34
 80069fc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006a00:	4598      	cmp	r8, r3
 8006a02:	4604      	mov	r4, r0
 8006a04:	9704      	str	r7, [sp, #16]
 8006a06:	dc07      	bgt.n	8006a18 <__ieee754_rem_pio2+0x28>
 8006a08:	2200      	movs	r2, #0
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	ed84 0b00 	vstr	d0, [r4]
 8006a10:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006a14:	2500      	movs	r5, #0
 8006a16:	e027      	b.n	8006a68 <__ieee754_rem_pio2+0x78>
 8006a18:	4bbc      	ldr	r3, [pc, #752]	; (8006d0c <__ieee754_rem_pio2+0x31c>)
 8006a1a:	4598      	cmp	r8, r3
 8006a1c:	dc75      	bgt.n	8006b0a <__ieee754_rem_pio2+0x11a>
 8006a1e:	9b04      	ldr	r3, [sp, #16]
 8006a20:	4dbb      	ldr	r5, [pc, #748]	; (8006d10 <__ieee754_rem_pio2+0x320>)
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	ee10 0a10 	vmov	r0, s0
 8006a28:	a3a9      	add	r3, pc, #676	; (adr r3, 8006cd0 <__ieee754_rem_pio2+0x2e0>)
 8006a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2e:	4639      	mov	r1, r7
 8006a30:	dd36      	ble.n	8006aa0 <__ieee754_rem_pio2+0xb0>
 8006a32:	f7f9 fc29 	bl	8000288 <__aeabi_dsub>
 8006a36:	45a8      	cmp	r8, r5
 8006a38:	4606      	mov	r6, r0
 8006a3a:	460f      	mov	r7, r1
 8006a3c:	d018      	beq.n	8006a70 <__ieee754_rem_pio2+0x80>
 8006a3e:	a3a6      	add	r3, pc, #664	; (adr r3, 8006cd8 <__ieee754_rem_pio2+0x2e8>)
 8006a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a44:	f7f9 fc20 	bl	8000288 <__aeabi_dsub>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	e9c4 2300 	strd	r2, r3, [r4]
 8006a50:	4630      	mov	r0, r6
 8006a52:	4639      	mov	r1, r7
 8006a54:	f7f9 fc18 	bl	8000288 <__aeabi_dsub>
 8006a58:	a39f      	add	r3, pc, #636	; (adr r3, 8006cd8 <__ieee754_rem_pio2+0x2e8>)
 8006a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5e:	f7f9 fc13 	bl	8000288 <__aeabi_dsub>
 8006a62:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006a66:	2501      	movs	r5, #1
 8006a68:	4628      	mov	r0, r5
 8006a6a:	b00d      	add	sp, #52	; 0x34
 8006a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a70:	a39b      	add	r3, pc, #620	; (adr r3, 8006ce0 <__ieee754_rem_pio2+0x2f0>)
 8006a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a76:	f7f9 fc07 	bl	8000288 <__aeabi_dsub>
 8006a7a:	a39b      	add	r3, pc, #620	; (adr r3, 8006ce8 <__ieee754_rem_pio2+0x2f8>)
 8006a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a80:	4606      	mov	r6, r0
 8006a82:	460f      	mov	r7, r1
 8006a84:	f7f9 fc00 	bl	8000288 <__aeabi_dsub>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	e9c4 2300 	strd	r2, r3, [r4]
 8006a90:	4630      	mov	r0, r6
 8006a92:	4639      	mov	r1, r7
 8006a94:	f7f9 fbf8 	bl	8000288 <__aeabi_dsub>
 8006a98:	a393      	add	r3, pc, #588	; (adr r3, 8006ce8 <__ieee754_rem_pio2+0x2f8>)
 8006a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9e:	e7de      	b.n	8006a5e <__ieee754_rem_pio2+0x6e>
 8006aa0:	f7f9 fbf4 	bl	800028c <__adddf3>
 8006aa4:	45a8      	cmp	r8, r5
 8006aa6:	4606      	mov	r6, r0
 8006aa8:	460f      	mov	r7, r1
 8006aaa:	d016      	beq.n	8006ada <__ieee754_rem_pio2+0xea>
 8006aac:	a38a      	add	r3, pc, #552	; (adr r3, 8006cd8 <__ieee754_rem_pio2+0x2e8>)
 8006aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab2:	f7f9 fbeb 	bl	800028c <__adddf3>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	460b      	mov	r3, r1
 8006aba:	e9c4 2300 	strd	r2, r3, [r4]
 8006abe:	4630      	mov	r0, r6
 8006ac0:	4639      	mov	r1, r7
 8006ac2:	f7f9 fbe1 	bl	8000288 <__aeabi_dsub>
 8006ac6:	a384      	add	r3, pc, #528	; (adr r3, 8006cd8 <__ieee754_rem_pio2+0x2e8>)
 8006ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006acc:	f7f9 fbde 	bl	800028c <__adddf3>
 8006ad0:	f04f 35ff 	mov.w	r5, #4294967295
 8006ad4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006ad8:	e7c6      	b.n	8006a68 <__ieee754_rem_pio2+0x78>
 8006ada:	a381      	add	r3, pc, #516	; (adr r3, 8006ce0 <__ieee754_rem_pio2+0x2f0>)
 8006adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae0:	f7f9 fbd4 	bl	800028c <__adddf3>
 8006ae4:	a380      	add	r3, pc, #512	; (adr r3, 8006ce8 <__ieee754_rem_pio2+0x2f8>)
 8006ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aea:	4606      	mov	r6, r0
 8006aec:	460f      	mov	r7, r1
 8006aee:	f7f9 fbcd 	bl	800028c <__adddf3>
 8006af2:	4602      	mov	r2, r0
 8006af4:	460b      	mov	r3, r1
 8006af6:	e9c4 2300 	strd	r2, r3, [r4]
 8006afa:	4630      	mov	r0, r6
 8006afc:	4639      	mov	r1, r7
 8006afe:	f7f9 fbc3 	bl	8000288 <__aeabi_dsub>
 8006b02:	a379      	add	r3, pc, #484	; (adr r3, 8006ce8 <__ieee754_rem_pio2+0x2f8>)
 8006b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b08:	e7e0      	b.n	8006acc <__ieee754_rem_pio2+0xdc>
 8006b0a:	4b82      	ldr	r3, [pc, #520]	; (8006d14 <__ieee754_rem_pio2+0x324>)
 8006b0c:	4598      	cmp	r8, r3
 8006b0e:	f300 80d0 	bgt.w	8006cb2 <__ieee754_rem_pio2+0x2c2>
 8006b12:	f000 fed3 	bl	80078bc <fabs>
 8006b16:	ec57 6b10 	vmov	r6, r7, d0
 8006b1a:	ee10 0a10 	vmov	r0, s0
 8006b1e:	a374      	add	r3, pc, #464	; (adr r3, 8006cf0 <__ieee754_rem_pio2+0x300>)
 8006b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b24:	4639      	mov	r1, r7
 8006b26:	f7f9 fd67 	bl	80005f8 <__aeabi_dmul>
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	4b7a      	ldr	r3, [pc, #488]	; (8006d18 <__ieee754_rem_pio2+0x328>)
 8006b2e:	f7f9 fbad 	bl	800028c <__adddf3>
 8006b32:	f7fa f811 	bl	8000b58 <__aeabi_d2iz>
 8006b36:	4605      	mov	r5, r0
 8006b38:	f7f9 fcf4 	bl	8000524 <__aeabi_i2d>
 8006b3c:	a364      	add	r3, pc, #400	; (adr r3, 8006cd0 <__ieee754_rem_pio2+0x2e0>)
 8006b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b46:	f7f9 fd57 	bl	80005f8 <__aeabi_dmul>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	4630      	mov	r0, r6
 8006b50:	4639      	mov	r1, r7
 8006b52:	f7f9 fb99 	bl	8000288 <__aeabi_dsub>
 8006b56:	a360      	add	r3, pc, #384	; (adr r3, 8006cd8 <__ieee754_rem_pio2+0x2e8>)
 8006b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5c:	4682      	mov	sl, r0
 8006b5e:	468b      	mov	fp, r1
 8006b60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b64:	f7f9 fd48 	bl	80005f8 <__aeabi_dmul>
 8006b68:	2d1f      	cmp	r5, #31
 8006b6a:	4606      	mov	r6, r0
 8006b6c:	460f      	mov	r7, r1
 8006b6e:	dc0c      	bgt.n	8006b8a <__ieee754_rem_pio2+0x19a>
 8006b70:	1e6a      	subs	r2, r5, #1
 8006b72:	4b6a      	ldr	r3, [pc, #424]	; (8006d1c <__ieee754_rem_pio2+0x32c>)
 8006b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b78:	4543      	cmp	r3, r8
 8006b7a:	d006      	beq.n	8006b8a <__ieee754_rem_pio2+0x19a>
 8006b7c:	4632      	mov	r2, r6
 8006b7e:	463b      	mov	r3, r7
 8006b80:	4650      	mov	r0, sl
 8006b82:	4659      	mov	r1, fp
 8006b84:	f7f9 fb80 	bl	8000288 <__aeabi_dsub>
 8006b88:	e00e      	b.n	8006ba8 <__ieee754_rem_pio2+0x1b8>
 8006b8a:	4632      	mov	r2, r6
 8006b8c:	463b      	mov	r3, r7
 8006b8e:	4650      	mov	r0, sl
 8006b90:	4659      	mov	r1, fp
 8006b92:	f7f9 fb79 	bl	8000288 <__aeabi_dsub>
 8006b96:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006b9a:	9305      	str	r3, [sp, #20]
 8006b9c:	9a05      	ldr	r2, [sp, #20]
 8006b9e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	2b10      	cmp	r3, #16
 8006ba6:	dc02      	bgt.n	8006bae <__ieee754_rem_pio2+0x1be>
 8006ba8:	e9c4 0100 	strd	r0, r1, [r4]
 8006bac:	e039      	b.n	8006c22 <__ieee754_rem_pio2+0x232>
 8006bae:	a34c      	add	r3, pc, #304	; (adr r3, 8006ce0 <__ieee754_rem_pio2+0x2f0>)
 8006bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bb8:	f7f9 fd1e 	bl	80005f8 <__aeabi_dmul>
 8006bbc:	4606      	mov	r6, r0
 8006bbe:	460f      	mov	r7, r1
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	4650      	mov	r0, sl
 8006bc6:	4659      	mov	r1, fp
 8006bc8:	f7f9 fb5e 	bl	8000288 <__aeabi_dsub>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	460b      	mov	r3, r1
 8006bd0:	4680      	mov	r8, r0
 8006bd2:	4689      	mov	r9, r1
 8006bd4:	4650      	mov	r0, sl
 8006bd6:	4659      	mov	r1, fp
 8006bd8:	f7f9 fb56 	bl	8000288 <__aeabi_dsub>
 8006bdc:	4632      	mov	r2, r6
 8006bde:	463b      	mov	r3, r7
 8006be0:	f7f9 fb52 	bl	8000288 <__aeabi_dsub>
 8006be4:	a340      	add	r3, pc, #256	; (adr r3, 8006ce8 <__ieee754_rem_pio2+0x2f8>)
 8006be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bea:	4606      	mov	r6, r0
 8006bec:	460f      	mov	r7, r1
 8006bee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bf2:	f7f9 fd01 	bl	80005f8 <__aeabi_dmul>
 8006bf6:	4632      	mov	r2, r6
 8006bf8:	463b      	mov	r3, r7
 8006bfa:	f7f9 fb45 	bl	8000288 <__aeabi_dsub>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	460b      	mov	r3, r1
 8006c02:	4606      	mov	r6, r0
 8006c04:	460f      	mov	r7, r1
 8006c06:	4640      	mov	r0, r8
 8006c08:	4649      	mov	r1, r9
 8006c0a:	f7f9 fb3d 	bl	8000288 <__aeabi_dsub>
 8006c0e:	9a05      	ldr	r2, [sp, #20]
 8006c10:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	2b31      	cmp	r3, #49	; 0x31
 8006c18:	dc20      	bgt.n	8006c5c <__ieee754_rem_pio2+0x26c>
 8006c1a:	e9c4 0100 	strd	r0, r1, [r4]
 8006c1e:	46c2      	mov	sl, r8
 8006c20:	46cb      	mov	fp, r9
 8006c22:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006c26:	4650      	mov	r0, sl
 8006c28:	4642      	mov	r2, r8
 8006c2a:	464b      	mov	r3, r9
 8006c2c:	4659      	mov	r1, fp
 8006c2e:	f7f9 fb2b 	bl	8000288 <__aeabi_dsub>
 8006c32:	463b      	mov	r3, r7
 8006c34:	4632      	mov	r2, r6
 8006c36:	f7f9 fb27 	bl	8000288 <__aeabi_dsub>
 8006c3a:	9b04      	ldr	r3, [sp, #16]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006c42:	f6bf af11 	bge.w	8006a68 <__ieee754_rem_pio2+0x78>
 8006c46:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006c4a:	6063      	str	r3, [r4, #4]
 8006c4c:	f8c4 8000 	str.w	r8, [r4]
 8006c50:	60a0      	str	r0, [r4, #8]
 8006c52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c56:	60e3      	str	r3, [r4, #12]
 8006c58:	426d      	negs	r5, r5
 8006c5a:	e705      	b.n	8006a68 <__ieee754_rem_pio2+0x78>
 8006c5c:	a326      	add	r3, pc, #152	; (adr r3, 8006cf8 <__ieee754_rem_pio2+0x308>)
 8006c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c66:	f7f9 fcc7 	bl	80005f8 <__aeabi_dmul>
 8006c6a:	4606      	mov	r6, r0
 8006c6c:	460f      	mov	r7, r1
 8006c6e:	4602      	mov	r2, r0
 8006c70:	460b      	mov	r3, r1
 8006c72:	4640      	mov	r0, r8
 8006c74:	4649      	mov	r1, r9
 8006c76:	f7f9 fb07 	bl	8000288 <__aeabi_dsub>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	4682      	mov	sl, r0
 8006c80:	468b      	mov	fp, r1
 8006c82:	4640      	mov	r0, r8
 8006c84:	4649      	mov	r1, r9
 8006c86:	f7f9 faff 	bl	8000288 <__aeabi_dsub>
 8006c8a:	4632      	mov	r2, r6
 8006c8c:	463b      	mov	r3, r7
 8006c8e:	f7f9 fafb 	bl	8000288 <__aeabi_dsub>
 8006c92:	a31b      	add	r3, pc, #108	; (adr r3, 8006d00 <__ieee754_rem_pio2+0x310>)
 8006c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c98:	4606      	mov	r6, r0
 8006c9a:	460f      	mov	r7, r1
 8006c9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ca0:	f7f9 fcaa 	bl	80005f8 <__aeabi_dmul>
 8006ca4:	4632      	mov	r2, r6
 8006ca6:	463b      	mov	r3, r7
 8006ca8:	f7f9 faee 	bl	8000288 <__aeabi_dsub>
 8006cac:	4606      	mov	r6, r0
 8006cae:	460f      	mov	r7, r1
 8006cb0:	e764      	b.n	8006b7c <__ieee754_rem_pio2+0x18c>
 8006cb2:	4b1b      	ldr	r3, [pc, #108]	; (8006d20 <__ieee754_rem_pio2+0x330>)
 8006cb4:	4598      	cmp	r8, r3
 8006cb6:	dd35      	ble.n	8006d24 <__ieee754_rem_pio2+0x334>
 8006cb8:	ee10 2a10 	vmov	r2, s0
 8006cbc:	463b      	mov	r3, r7
 8006cbe:	4630      	mov	r0, r6
 8006cc0:	4639      	mov	r1, r7
 8006cc2:	f7f9 fae1 	bl	8000288 <__aeabi_dsub>
 8006cc6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006cca:	e9c4 0100 	strd	r0, r1, [r4]
 8006cce:	e6a1      	b.n	8006a14 <__ieee754_rem_pio2+0x24>
 8006cd0:	54400000 	.word	0x54400000
 8006cd4:	3ff921fb 	.word	0x3ff921fb
 8006cd8:	1a626331 	.word	0x1a626331
 8006cdc:	3dd0b461 	.word	0x3dd0b461
 8006ce0:	1a600000 	.word	0x1a600000
 8006ce4:	3dd0b461 	.word	0x3dd0b461
 8006ce8:	2e037073 	.word	0x2e037073
 8006cec:	3ba3198a 	.word	0x3ba3198a
 8006cf0:	6dc9c883 	.word	0x6dc9c883
 8006cf4:	3fe45f30 	.word	0x3fe45f30
 8006cf8:	2e000000 	.word	0x2e000000
 8006cfc:	3ba3198a 	.word	0x3ba3198a
 8006d00:	252049c1 	.word	0x252049c1
 8006d04:	397b839a 	.word	0x397b839a
 8006d08:	3fe921fb 	.word	0x3fe921fb
 8006d0c:	4002d97b 	.word	0x4002d97b
 8006d10:	3ff921fb 	.word	0x3ff921fb
 8006d14:	413921fb 	.word	0x413921fb
 8006d18:	3fe00000 	.word	0x3fe00000
 8006d1c:	08007de4 	.word	0x08007de4
 8006d20:	7fefffff 	.word	0x7fefffff
 8006d24:	ea4f 5528 	mov.w	r5, r8, asr #20
 8006d28:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8006d2c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8006d30:	4630      	mov	r0, r6
 8006d32:	460f      	mov	r7, r1
 8006d34:	f7f9 ff10 	bl	8000b58 <__aeabi_d2iz>
 8006d38:	f7f9 fbf4 	bl	8000524 <__aeabi_i2d>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	460b      	mov	r3, r1
 8006d40:	4630      	mov	r0, r6
 8006d42:	4639      	mov	r1, r7
 8006d44:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006d48:	f7f9 fa9e 	bl	8000288 <__aeabi_dsub>
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	4b1f      	ldr	r3, [pc, #124]	; (8006dcc <__ieee754_rem_pio2+0x3dc>)
 8006d50:	f7f9 fc52 	bl	80005f8 <__aeabi_dmul>
 8006d54:	460f      	mov	r7, r1
 8006d56:	4606      	mov	r6, r0
 8006d58:	f7f9 fefe 	bl	8000b58 <__aeabi_d2iz>
 8006d5c:	f7f9 fbe2 	bl	8000524 <__aeabi_i2d>
 8006d60:	4602      	mov	r2, r0
 8006d62:	460b      	mov	r3, r1
 8006d64:	4630      	mov	r0, r6
 8006d66:	4639      	mov	r1, r7
 8006d68:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006d6c:	f7f9 fa8c 	bl	8000288 <__aeabi_dsub>
 8006d70:	2200      	movs	r2, #0
 8006d72:	4b16      	ldr	r3, [pc, #88]	; (8006dcc <__ieee754_rem_pio2+0x3dc>)
 8006d74:	f7f9 fc40 	bl	80005f8 <__aeabi_dmul>
 8006d78:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006d7c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8006d80:	f04f 0803 	mov.w	r8, #3
 8006d84:	2600      	movs	r6, #0
 8006d86:	2700      	movs	r7, #0
 8006d88:	4632      	mov	r2, r6
 8006d8a:	463b      	mov	r3, r7
 8006d8c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8006d90:	f108 3aff 	add.w	sl, r8, #4294967295
 8006d94:	f7f9 fe98 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d98:	b9b0      	cbnz	r0, 8006dc8 <__ieee754_rem_pio2+0x3d8>
 8006d9a:	4b0d      	ldr	r3, [pc, #52]	; (8006dd0 <__ieee754_rem_pio2+0x3e0>)
 8006d9c:	9301      	str	r3, [sp, #4]
 8006d9e:	2302      	movs	r3, #2
 8006da0:	9300      	str	r3, [sp, #0]
 8006da2:	462a      	mov	r2, r5
 8006da4:	4643      	mov	r3, r8
 8006da6:	4621      	mov	r1, r4
 8006da8:	a806      	add	r0, sp, #24
 8006daa:	f000 f98d 	bl	80070c8 <__kernel_rem_pio2>
 8006dae:	9b04      	ldr	r3, [sp, #16]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	4605      	mov	r5, r0
 8006db4:	f6bf ae58 	bge.w	8006a68 <__ieee754_rem_pio2+0x78>
 8006db8:	6863      	ldr	r3, [r4, #4]
 8006dba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006dbe:	6063      	str	r3, [r4, #4]
 8006dc0:	68e3      	ldr	r3, [r4, #12]
 8006dc2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006dc6:	e746      	b.n	8006c56 <__ieee754_rem_pio2+0x266>
 8006dc8:	46d0      	mov	r8, sl
 8006dca:	e7dd      	b.n	8006d88 <__ieee754_rem_pio2+0x398>
 8006dcc:	41700000 	.word	0x41700000
 8006dd0:	08007e64 	.word	0x08007e64

08006dd4 <__ieee754_sqrt>:
 8006dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dd8:	4955      	ldr	r1, [pc, #340]	; (8006f30 <__ieee754_sqrt+0x15c>)
 8006dda:	ec55 4b10 	vmov	r4, r5, d0
 8006dde:	43a9      	bics	r1, r5
 8006de0:	462b      	mov	r3, r5
 8006de2:	462a      	mov	r2, r5
 8006de4:	d112      	bne.n	8006e0c <__ieee754_sqrt+0x38>
 8006de6:	ee10 2a10 	vmov	r2, s0
 8006dea:	ee10 0a10 	vmov	r0, s0
 8006dee:	4629      	mov	r1, r5
 8006df0:	f7f9 fc02 	bl	80005f8 <__aeabi_dmul>
 8006df4:	4602      	mov	r2, r0
 8006df6:	460b      	mov	r3, r1
 8006df8:	4620      	mov	r0, r4
 8006dfa:	4629      	mov	r1, r5
 8006dfc:	f7f9 fa46 	bl	800028c <__adddf3>
 8006e00:	4604      	mov	r4, r0
 8006e02:	460d      	mov	r5, r1
 8006e04:	ec45 4b10 	vmov	d0, r4, r5
 8006e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e0c:	2d00      	cmp	r5, #0
 8006e0e:	ee10 0a10 	vmov	r0, s0
 8006e12:	4621      	mov	r1, r4
 8006e14:	dc0f      	bgt.n	8006e36 <__ieee754_sqrt+0x62>
 8006e16:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006e1a:	4330      	orrs	r0, r6
 8006e1c:	d0f2      	beq.n	8006e04 <__ieee754_sqrt+0x30>
 8006e1e:	b155      	cbz	r5, 8006e36 <__ieee754_sqrt+0x62>
 8006e20:	ee10 2a10 	vmov	r2, s0
 8006e24:	4620      	mov	r0, r4
 8006e26:	4629      	mov	r1, r5
 8006e28:	f7f9 fa2e 	bl	8000288 <__aeabi_dsub>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	460b      	mov	r3, r1
 8006e30:	f7f9 fd0c 	bl	800084c <__aeabi_ddiv>
 8006e34:	e7e4      	b.n	8006e00 <__ieee754_sqrt+0x2c>
 8006e36:	151b      	asrs	r3, r3, #20
 8006e38:	d073      	beq.n	8006f22 <__ieee754_sqrt+0x14e>
 8006e3a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006e3e:	07dd      	lsls	r5, r3, #31
 8006e40:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006e44:	bf48      	it	mi
 8006e46:	0fc8      	lsrmi	r0, r1, #31
 8006e48:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006e4c:	bf44      	itt	mi
 8006e4e:	0049      	lslmi	r1, r1, #1
 8006e50:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8006e54:	2500      	movs	r5, #0
 8006e56:	1058      	asrs	r0, r3, #1
 8006e58:	0fcb      	lsrs	r3, r1, #31
 8006e5a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8006e5e:	0049      	lsls	r1, r1, #1
 8006e60:	2316      	movs	r3, #22
 8006e62:	462c      	mov	r4, r5
 8006e64:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006e68:	19a7      	adds	r7, r4, r6
 8006e6a:	4297      	cmp	r7, r2
 8006e6c:	bfde      	ittt	le
 8006e6e:	19bc      	addle	r4, r7, r6
 8006e70:	1bd2      	suble	r2, r2, r7
 8006e72:	19ad      	addle	r5, r5, r6
 8006e74:	0fcf      	lsrs	r7, r1, #31
 8006e76:	3b01      	subs	r3, #1
 8006e78:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8006e7c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006e80:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006e84:	d1f0      	bne.n	8006e68 <__ieee754_sqrt+0x94>
 8006e86:	f04f 0c20 	mov.w	ip, #32
 8006e8a:	469e      	mov	lr, r3
 8006e8c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006e90:	42a2      	cmp	r2, r4
 8006e92:	eb06 070e 	add.w	r7, r6, lr
 8006e96:	dc02      	bgt.n	8006e9e <__ieee754_sqrt+0xca>
 8006e98:	d112      	bne.n	8006ec0 <__ieee754_sqrt+0xec>
 8006e9a:	428f      	cmp	r7, r1
 8006e9c:	d810      	bhi.n	8006ec0 <__ieee754_sqrt+0xec>
 8006e9e:	2f00      	cmp	r7, #0
 8006ea0:	eb07 0e06 	add.w	lr, r7, r6
 8006ea4:	da42      	bge.n	8006f2c <__ieee754_sqrt+0x158>
 8006ea6:	f1be 0f00 	cmp.w	lr, #0
 8006eaa:	db3f      	blt.n	8006f2c <__ieee754_sqrt+0x158>
 8006eac:	f104 0801 	add.w	r8, r4, #1
 8006eb0:	1b12      	subs	r2, r2, r4
 8006eb2:	428f      	cmp	r7, r1
 8006eb4:	bf88      	it	hi
 8006eb6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006eba:	1bc9      	subs	r1, r1, r7
 8006ebc:	4433      	add	r3, r6
 8006ebe:	4644      	mov	r4, r8
 8006ec0:	0052      	lsls	r2, r2, #1
 8006ec2:	f1bc 0c01 	subs.w	ip, ip, #1
 8006ec6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8006eca:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006ece:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006ed2:	d1dd      	bne.n	8006e90 <__ieee754_sqrt+0xbc>
 8006ed4:	430a      	orrs	r2, r1
 8006ed6:	d006      	beq.n	8006ee6 <__ieee754_sqrt+0x112>
 8006ed8:	1c5c      	adds	r4, r3, #1
 8006eda:	bf13      	iteet	ne
 8006edc:	3301      	addne	r3, #1
 8006ede:	3501      	addeq	r5, #1
 8006ee0:	4663      	moveq	r3, ip
 8006ee2:	f023 0301 	bicne.w	r3, r3, #1
 8006ee6:	106a      	asrs	r2, r5, #1
 8006ee8:	085b      	lsrs	r3, r3, #1
 8006eea:	07e9      	lsls	r1, r5, #31
 8006eec:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8006ef0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006ef4:	bf48      	it	mi
 8006ef6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8006efa:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8006efe:	461c      	mov	r4, r3
 8006f00:	e780      	b.n	8006e04 <__ieee754_sqrt+0x30>
 8006f02:	0aca      	lsrs	r2, r1, #11
 8006f04:	3815      	subs	r0, #21
 8006f06:	0549      	lsls	r1, r1, #21
 8006f08:	2a00      	cmp	r2, #0
 8006f0a:	d0fa      	beq.n	8006f02 <__ieee754_sqrt+0x12e>
 8006f0c:	02d6      	lsls	r6, r2, #11
 8006f0e:	d50a      	bpl.n	8006f26 <__ieee754_sqrt+0x152>
 8006f10:	f1c3 0420 	rsb	r4, r3, #32
 8006f14:	fa21 f404 	lsr.w	r4, r1, r4
 8006f18:	1e5d      	subs	r5, r3, #1
 8006f1a:	4099      	lsls	r1, r3
 8006f1c:	4322      	orrs	r2, r4
 8006f1e:	1b43      	subs	r3, r0, r5
 8006f20:	e78b      	b.n	8006e3a <__ieee754_sqrt+0x66>
 8006f22:	4618      	mov	r0, r3
 8006f24:	e7f0      	b.n	8006f08 <__ieee754_sqrt+0x134>
 8006f26:	0052      	lsls	r2, r2, #1
 8006f28:	3301      	adds	r3, #1
 8006f2a:	e7ef      	b.n	8006f0c <__ieee754_sqrt+0x138>
 8006f2c:	46a0      	mov	r8, r4
 8006f2e:	e7bf      	b.n	8006eb0 <__ieee754_sqrt+0xdc>
 8006f30:	7ff00000 	.word	0x7ff00000
 8006f34:	00000000 	.word	0x00000000

08006f38 <__kernel_cos>:
 8006f38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f3c:	ec59 8b10 	vmov	r8, r9, d0
 8006f40:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8006f44:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8006f48:	ed2d 8b02 	vpush	{d8}
 8006f4c:	eeb0 8a41 	vmov.f32	s16, s2
 8006f50:	eef0 8a61 	vmov.f32	s17, s3
 8006f54:	da07      	bge.n	8006f66 <__kernel_cos+0x2e>
 8006f56:	ee10 0a10 	vmov	r0, s0
 8006f5a:	4649      	mov	r1, r9
 8006f5c:	f7f9 fdfc 	bl	8000b58 <__aeabi_d2iz>
 8006f60:	2800      	cmp	r0, #0
 8006f62:	f000 8089 	beq.w	8007078 <__kernel_cos+0x140>
 8006f66:	4642      	mov	r2, r8
 8006f68:	464b      	mov	r3, r9
 8006f6a:	4640      	mov	r0, r8
 8006f6c:	4649      	mov	r1, r9
 8006f6e:	f7f9 fb43 	bl	80005f8 <__aeabi_dmul>
 8006f72:	2200      	movs	r2, #0
 8006f74:	4b4e      	ldr	r3, [pc, #312]	; (80070b0 <__kernel_cos+0x178>)
 8006f76:	4604      	mov	r4, r0
 8006f78:	460d      	mov	r5, r1
 8006f7a:	f7f9 fb3d 	bl	80005f8 <__aeabi_dmul>
 8006f7e:	a340      	add	r3, pc, #256	; (adr r3, 8007080 <__kernel_cos+0x148>)
 8006f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f84:	4682      	mov	sl, r0
 8006f86:	468b      	mov	fp, r1
 8006f88:	4620      	mov	r0, r4
 8006f8a:	4629      	mov	r1, r5
 8006f8c:	f7f9 fb34 	bl	80005f8 <__aeabi_dmul>
 8006f90:	a33d      	add	r3, pc, #244	; (adr r3, 8007088 <__kernel_cos+0x150>)
 8006f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f96:	f7f9 f979 	bl	800028c <__adddf3>
 8006f9a:	4622      	mov	r2, r4
 8006f9c:	462b      	mov	r3, r5
 8006f9e:	f7f9 fb2b 	bl	80005f8 <__aeabi_dmul>
 8006fa2:	a33b      	add	r3, pc, #236	; (adr r3, 8007090 <__kernel_cos+0x158>)
 8006fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa8:	f7f9 f96e 	bl	8000288 <__aeabi_dsub>
 8006fac:	4622      	mov	r2, r4
 8006fae:	462b      	mov	r3, r5
 8006fb0:	f7f9 fb22 	bl	80005f8 <__aeabi_dmul>
 8006fb4:	a338      	add	r3, pc, #224	; (adr r3, 8007098 <__kernel_cos+0x160>)
 8006fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fba:	f7f9 f967 	bl	800028c <__adddf3>
 8006fbe:	4622      	mov	r2, r4
 8006fc0:	462b      	mov	r3, r5
 8006fc2:	f7f9 fb19 	bl	80005f8 <__aeabi_dmul>
 8006fc6:	a336      	add	r3, pc, #216	; (adr r3, 80070a0 <__kernel_cos+0x168>)
 8006fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fcc:	f7f9 f95c 	bl	8000288 <__aeabi_dsub>
 8006fd0:	4622      	mov	r2, r4
 8006fd2:	462b      	mov	r3, r5
 8006fd4:	f7f9 fb10 	bl	80005f8 <__aeabi_dmul>
 8006fd8:	a333      	add	r3, pc, #204	; (adr r3, 80070a8 <__kernel_cos+0x170>)
 8006fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fde:	f7f9 f955 	bl	800028c <__adddf3>
 8006fe2:	4622      	mov	r2, r4
 8006fe4:	462b      	mov	r3, r5
 8006fe6:	f7f9 fb07 	bl	80005f8 <__aeabi_dmul>
 8006fea:	4622      	mov	r2, r4
 8006fec:	462b      	mov	r3, r5
 8006fee:	f7f9 fb03 	bl	80005f8 <__aeabi_dmul>
 8006ff2:	ec53 2b18 	vmov	r2, r3, d8
 8006ff6:	4604      	mov	r4, r0
 8006ff8:	460d      	mov	r5, r1
 8006ffa:	4640      	mov	r0, r8
 8006ffc:	4649      	mov	r1, r9
 8006ffe:	f7f9 fafb 	bl	80005f8 <__aeabi_dmul>
 8007002:	460b      	mov	r3, r1
 8007004:	4602      	mov	r2, r0
 8007006:	4629      	mov	r1, r5
 8007008:	4620      	mov	r0, r4
 800700a:	f7f9 f93d 	bl	8000288 <__aeabi_dsub>
 800700e:	4b29      	ldr	r3, [pc, #164]	; (80070b4 <__kernel_cos+0x17c>)
 8007010:	429e      	cmp	r6, r3
 8007012:	4680      	mov	r8, r0
 8007014:	4689      	mov	r9, r1
 8007016:	dc11      	bgt.n	800703c <__kernel_cos+0x104>
 8007018:	4602      	mov	r2, r0
 800701a:	460b      	mov	r3, r1
 800701c:	4650      	mov	r0, sl
 800701e:	4659      	mov	r1, fp
 8007020:	f7f9 f932 	bl	8000288 <__aeabi_dsub>
 8007024:	460b      	mov	r3, r1
 8007026:	4924      	ldr	r1, [pc, #144]	; (80070b8 <__kernel_cos+0x180>)
 8007028:	4602      	mov	r2, r0
 800702a:	2000      	movs	r0, #0
 800702c:	f7f9 f92c 	bl	8000288 <__aeabi_dsub>
 8007030:	ecbd 8b02 	vpop	{d8}
 8007034:	ec41 0b10 	vmov	d0, r0, r1
 8007038:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800703c:	4b1f      	ldr	r3, [pc, #124]	; (80070bc <__kernel_cos+0x184>)
 800703e:	491e      	ldr	r1, [pc, #120]	; (80070b8 <__kernel_cos+0x180>)
 8007040:	429e      	cmp	r6, r3
 8007042:	bfcc      	ite	gt
 8007044:	4d1e      	ldrgt	r5, [pc, #120]	; (80070c0 <__kernel_cos+0x188>)
 8007046:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800704a:	2400      	movs	r4, #0
 800704c:	4622      	mov	r2, r4
 800704e:	462b      	mov	r3, r5
 8007050:	2000      	movs	r0, #0
 8007052:	f7f9 f919 	bl	8000288 <__aeabi_dsub>
 8007056:	4622      	mov	r2, r4
 8007058:	4606      	mov	r6, r0
 800705a:	460f      	mov	r7, r1
 800705c:	462b      	mov	r3, r5
 800705e:	4650      	mov	r0, sl
 8007060:	4659      	mov	r1, fp
 8007062:	f7f9 f911 	bl	8000288 <__aeabi_dsub>
 8007066:	4642      	mov	r2, r8
 8007068:	464b      	mov	r3, r9
 800706a:	f7f9 f90d 	bl	8000288 <__aeabi_dsub>
 800706e:	4602      	mov	r2, r0
 8007070:	460b      	mov	r3, r1
 8007072:	4630      	mov	r0, r6
 8007074:	4639      	mov	r1, r7
 8007076:	e7d9      	b.n	800702c <__kernel_cos+0xf4>
 8007078:	2000      	movs	r0, #0
 800707a:	490f      	ldr	r1, [pc, #60]	; (80070b8 <__kernel_cos+0x180>)
 800707c:	e7d8      	b.n	8007030 <__kernel_cos+0xf8>
 800707e:	bf00      	nop
 8007080:	be8838d4 	.word	0xbe8838d4
 8007084:	bda8fae9 	.word	0xbda8fae9
 8007088:	bdb4b1c4 	.word	0xbdb4b1c4
 800708c:	3e21ee9e 	.word	0x3e21ee9e
 8007090:	809c52ad 	.word	0x809c52ad
 8007094:	3e927e4f 	.word	0x3e927e4f
 8007098:	19cb1590 	.word	0x19cb1590
 800709c:	3efa01a0 	.word	0x3efa01a0
 80070a0:	16c15177 	.word	0x16c15177
 80070a4:	3f56c16c 	.word	0x3f56c16c
 80070a8:	5555554c 	.word	0x5555554c
 80070ac:	3fa55555 	.word	0x3fa55555
 80070b0:	3fe00000 	.word	0x3fe00000
 80070b4:	3fd33332 	.word	0x3fd33332
 80070b8:	3ff00000 	.word	0x3ff00000
 80070bc:	3fe90000 	.word	0x3fe90000
 80070c0:	3fd20000 	.word	0x3fd20000
 80070c4:	00000000 	.word	0x00000000

080070c8 <__kernel_rem_pio2>:
 80070c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070cc:	ed2d 8b02 	vpush	{d8}
 80070d0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80070d4:	1ed4      	subs	r4, r2, #3
 80070d6:	9308      	str	r3, [sp, #32]
 80070d8:	9101      	str	r1, [sp, #4]
 80070da:	4bc5      	ldr	r3, [pc, #788]	; (80073f0 <__kernel_rem_pio2+0x328>)
 80070dc:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80070de:	9009      	str	r0, [sp, #36]	; 0x24
 80070e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80070e4:	9304      	str	r3, [sp, #16]
 80070e6:	9b08      	ldr	r3, [sp, #32]
 80070e8:	3b01      	subs	r3, #1
 80070ea:	9307      	str	r3, [sp, #28]
 80070ec:	2318      	movs	r3, #24
 80070ee:	fb94 f4f3 	sdiv	r4, r4, r3
 80070f2:	f06f 0317 	mvn.w	r3, #23
 80070f6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80070fa:	fb04 3303 	mla	r3, r4, r3, r3
 80070fe:	eb03 0a02 	add.w	sl, r3, r2
 8007102:	9b04      	ldr	r3, [sp, #16]
 8007104:	9a07      	ldr	r2, [sp, #28]
 8007106:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80073e0 <__kernel_rem_pio2+0x318>
 800710a:	eb03 0802 	add.w	r8, r3, r2
 800710e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007110:	1aa7      	subs	r7, r4, r2
 8007112:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007116:	ae22      	add	r6, sp, #136	; 0x88
 8007118:	2500      	movs	r5, #0
 800711a:	4545      	cmp	r5, r8
 800711c:	dd13      	ble.n	8007146 <__kernel_rem_pio2+0x7e>
 800711e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 80073e0 <__kernel_rem_pio2+0x318>
 8007122:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8007126:	2600      	movs	r6, #0
 8007128:	9b04      	ldr	r3, [sp, #16]
 800712a:	429e      	cmp	r6, r3
 800712c:	dc32      	bgt.n	8007194 <__kernel_rem_pio2+0xcc>
 800712e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007130:	9302      	str	r3, [sp, #8]
 8007132:	9b08      	ldr	r3, [sp, #32]
 8007134:	199d      	adds	r5, r3, r6
 8007136:	ab22      	add	r3, sp, #136	; 0x88
 8007138:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800713c:	9306      	str	r3, [sp, #24]
 800713e:	ec59 8b18 	vmov	r8, r9, d8
 8007142:	2700      	movs	r7, #0
 8007144:	e01f      	b.n	8007186 <__kernel_rem_pio2+0xbe>
 8007146:	42ef      	cmn	r7, r5
 8007148:	d407      	bmi.n	800715a <__kernel_rem_pio2+0x92>
 800714a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800714e:	f7f9 f9e9 	bl	8000524 <__aeabi_i2d>
 8007152:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007156:	3501      	adds	r5, #1
 8007158:	e7df      	b.n	800711a <__kernel_rem_pio2+0x52>
 800715a:	ec51 0b18 	vmov	r0, r1, d8
 800715e:	e7f8      	b.n	8007152 <__kernel_rem_pio2+0x8a>
 8007160:	9906      	ldr	r1, [sp, #24]
 8007162:	9d02      	ldr	r5, [sp, #8]
 8007164:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8007168:	9106      	str	r1, [sp, #24]
 800716a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800716e:	9502      	str	r5, [sp, #8]
 8007170:	f7f9 fa42 	bl	80005f8 <__aeabi_dmul>
 8007174:	4602      	mov	r2, r0
 8007176:	460b      	mov	r3, r1
 8007178:	4640      	mov	r0, r8
 800717a:	4649      	mov	r1, r9
 800717c:	f7f9 f886 	bl	800028c <__adddf3>
 8007180:	3701      	adds	r7, #1
 8007182:	4680      	mov	r8, r0
 8007184:	4689      	mov	r9, r1
 8007186:	9b07      	ldr	r3, [sp, #28]
 8007188:	429f      	cmp	r7, r3
 800718a:	dde9      	ble.n	8007160 <__kernel_rem_pio2+0x98>
 800718c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8007190:	3601      	adds	r6, #1
 8007192:	e7c9      	b.n	8007128 <__kernel_rem_pio2+0x60>
 8007194:	9b04      	ldr	r3, [sp, #16]
 8007196:	aa0e      	add	r2, sp, #56	; 0x38
 8007198:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800719c:	930c      	str	r3, [sp, #48]	; 0x30
 800719e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80071a0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80071a4:	9c04      	ldr	r4, [sp, #16]
 80071a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80071a8:	ab9a      	add	r3, sp, #616	; 0x268
 80071aa:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80071ae:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80071b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80071b6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80071ba:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80071be:	ab9a      	add	r3, sp, #616	; 0x268
 80071c0:	445b      	add	r3, fp
 80071c2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80071c6:	2500      	movs	r5, #0
 80071c8:	1b63      	subs	r3, r4, r5
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	dc78      	bgt.n	80072c0 <__kernel_rem_pio2+0x1f8>
 80071ce:	4650      	mov	r0, sl
 80071d0:	ec49 8b10 	vmov	d0, r8, r9
 80071d4:	f000 fc04 	bl	80079e0 <scalbn>
 80071d8:	ec57 6b10 	vmov	r6, r7, d0
 80071dc:	2200      	movs	r2, #0
 80071de:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80071e2:	ee10 0a10 	vmov	r0, s0
 80071e6:	4639      	mov	r1, r7
 80071e8:	f7f9 fa06 	bl	80005f8 <__aeabi_dmul>
 80071ec:	ec41 0b10 	vmov	d0, r0, r1
 80071f0:	f000 fb6e 	bl	80078d0 <floor>
 80071f4:	2200      	movs	r2, #0
 80071f6:	ec51 0b10 	vmov	r0, r1, d0
 80071fa:	4b7e      	ldr	r3, [pc, #504]	; (80073f4 <__kernel_rem_pio2+0x32c>)
 80071fc:	f7f9 f9fc 	bl	80005f8 <__aeabi_dmul>
 8007200:	4602      	mov	r2, r0
 8007202:	460b      	mov	r3, r1
 8007204:	4630      	mov	r0, r6
 8007206:	4639      	mov	r1, r7
 8007208:	f7f9 f83e 	bl	8000288 <__aeabi_dsub>
 800720c:	460f      	mov	r7, r1
 800720e:	4606      	mov	r6, r0
 8007210:	f7f9 fca2 	bl	8000b58 <__aeabi_d2iz>
 8007214:	9006      	str	r0, [sp, #24]
 8007216:	f7f9 f985 	bl	8000524 <__aeabi_i2d>
 800721a:	4602      	mov	r2, r0
 800721c:	460b      	mov	r3, r1
 800721e:	4630      	mov	r0, r6
 8007220:	4639      	mov	r1, r7
 8007222:	f7f9 f831 	bl	8000288 <__aeabi_dsub>
 8007226:	f1ba 0f00 	cmp.w	sl, #0
 800722a:	4606      	mov	r6, r0
 800722c:	460f      	mov	r7, r1
 800722e:	dd6c      	ble.n	800730a <__kernel_rem_pio2+0x242>
 8007230:	1e62      	subs	r2, r4, #1
 8007232:	ab0e      	add	r3, sp, #56	; 0x38
 8007234:	f1ca 0118 	rsb	r1, sl, #24
 8007238:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800723c:	9d06      	ldr	r5, [sp, #24]
 800723e:	fa40 f301 	asr.w	r3, r0, r1
 8007242:	441d      	add	r5, r3
 8007244:	408b      	lsls	r3, r1
 8007246:	1ac0      	subs	r0, r0, r3
 8007248:	ab0e      	add	r3, sp, #56	; 0x38
 800724a:	9506      	str	r5, [sp, #24]
 800724c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007250:	f1ca 0317 	rsb	r3, sl, #23
 8007254:	fa40 f303 	asr.w	r3, r0, r3
 8007258:	9302      	str	r3, [sp, #8]
 800725a:	9b02      	ldr	r3, [sp, #8]
 800725c:	2b00      	cmp	r3, #0
 800725e:	dd62      	ble.n	8007326 <__kernel_rem_pio2+0x25e>
 8007260:	9b06      	ldr	r3, [sp, #24]
 8007262:	2200      	movs	r2, #0
 8007264:	3301      	adds	r3, #1
 8007266:	9306      	str	r3, [sp, #24]
 8007268:	4615      	mov	r5, r2
 800726a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800726e:	4294      	cmp	r4, r2
 8007270:	f300 8095 	bgt.w	800739e <__kernel_rem_pio2+0x2d6>
 8007274:	f1ba 0f00 	cmp.w	sl, #0
 8007278:	dd07      	ble.n	800728a <__kernel_rem_pio2+0x1c2>
 800727a:	f1ba 0f01 	cmp.w	sl, #1
 800727e:	f000 80a2 	beq.w	80073c6 <__kernel_rem_pio2+0x2fe>
 8007282:	f1ba 0f02 	cmp.w	sl, #2
 8007286:	f000 80c1 	beq.w	800740c <__kernel_rem_pio2+0x344>
 800728a:	9b02      	ldr	r3, [sp, #8]
 800728c:	2b02      	cmp	r3, #2
 800728e:	d14a      	bne.n	8007326 <__kernel_rem_pio2+0x25e>
 8007290:	4632      	mov	r2, r6
 8007292:	463b      	mov	r3, r7
 8007294:	2000      	movs	r0, #0
 8007296:	4958      	ldr	r1, [pc, #352]	; (80073f8 <__kernel_rem_pio2+0x330>)
 8007298:	f7f8 fff6 	bl	8000288 <__aeabi_dsub>
 800729c:	4606      	mov	r6, r0
 800729e:	460f      	mov	r7, r1
 80072a0:	2d00      	cmp	r5, #0
 80072a2:	d040      	beq.n	8007326 <__kernel_rem_pio2+0x25e>
 80072a4:	4650      	mov	r0, sl
 80072a6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80073e8 <__kernel_rem_pio2+0x320>
 80072aa:	f000 fb99 	bl	80079e0 <scalbn>
 80072ae:	4630      	mov	r0, r6
 80072b0:	4639      	mov	r1, r7
 80072b2:	ec53 2b10 	vmov	r2, r3, d0
 80072b6:	f7f8 ffe7 	bl	8000288 <__aeabi_dsub>
 80072ba:	4606      	mov	r6, r0
 80072bc:	460f      	mov	r7, r1
 80072be:	e032      	b.n	8007326 <__kernel_rem_pio2+0x25e>
 80072c0:	2200      	movs	r2, #0
 80072c2:	4b4e      	ldr	r3, [pc, #312]	; (80073fc <__kernel_rem_pio2+0x334>)
 80072c4:	4640      	mov	r0, r8
 80072c6:	4649      	mov	r1, r9
 80072c8:	f7f9 f996 	bl	80005f8 <__aeabi_dmul>
 80072cc:	f7f9 fc44 	bl	8000b58 <__aeabi_d2iz>
 80072d0:	f7f9 f928 	bl	8000524 <__aeabi_i2d>
 80072d4:	2200      	movs	r2, #0
 80072d6:	4b4a      	ldr	r3, [pc, #296]	; (8007400 <__kernel_rem_pio2+0x338>)
 80072d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072dc:	f7f9 f98c 	bl	80005f8 <__aeabi_dmul>
 80072e0:	4602      	mov	r2, r0
 80072e2:	460b      	mov	r3, r1
 80072e4:	4640      	mov	r0, r8
 80072e6:	4649      	mov	r1, r9
 80072e8:	f7f8 ffce 	bl	8000288 <__aeabi_dsub>
 80072ec:	f7f9 fc34 	bl	8000b58 <__aeabi_d2iz>
 80072f0:	ab0e      	add	r3, sp, #56	; 0x38
 80072f2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80072f6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80072fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072fe:	f7f8 ffc5 	bl	800028c <__adddf3>
 8007302:	3501      	adds	r5, #1
 8007304:	4680      	mov	r8, r0
 8007306:	4689      	mov	r9, r1
 8007308:	e75e      	b.n	80071c8 <__kernel_rem_pio2+0x100>
 800730a:	d105      	bne.n	8007318 <__kernel_rem_pio2+0x250>
 800730c:	1e63      	subs	r3, r4, #1
 800730e:	aa0e      	add	r2, sp, #56	; 0x38
 8007310:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007314:	15c3      	asrs	r3, r0, #23
 8007316:	e79f      	b.n	8007258 <__kernel_rem_pio2+0x190>
 8007318:	2200      	movs	r2, #0
 800731a:	4b3a      	ldr	r3, [pc, #232]	; (8007404 <__kernel_rem_pio2+0x33c>)
 800731c:	f7f9 fbf2 	bl	8000b04 <__aeabi_dcmpge>
 8007320:	2800      	cmp	r0, #0
 8007322:	d139      	bne.n	8007398 <__kernel_rem_pio2+0x2d0>
 8007324:	9002      	str	r0, [sp, #8]
 8007326:	2200      	movs	r2, #0
 8007328:	2300      	movs	r3, #0
 800732a:	4630      	mov	r0, r6
 800732c:	4639      	mov	r1, r7
 800732e:	f7f9 fbcb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007332:	2800      	cmp	r0, #0
 8007334:	f000 80c7 	beq.w	80074c6 <__kernel_rem_pio2+0x3fe>
 8007338:	1e65      	subs	r5, r4, #1
 800733a:	462b      	mov	r3, r5
 800733c:	2200      	movs	r2, #0
 800733e:	9904      	ldr	r1, [sp, #16]
 8007340:	428b      	cmp	r3, r1
 8007342:	da6a      	bge.n	800741a <__kernel_rem_pio2+0x352>
 8007344:	2a00      	cmp	r2, #0
 8007346:	f000 8088 	beq.w	800745a <__kernel_rem_pio2+0x392>
 800734a:	ab0e      	add	r3, sp, #56	; 0x38
 800734c:	f1aa 0a18 	sub.w	sl, sl, #24
 8007350:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007354:	2b00      	cmp	r3, #0
 8007356:	f000 80b4 	beq.w	80074c2 <__kernel_rem_pio2+0x3fa>
 800735a:	4650      	mov	r0, sl
 800735c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80073e8 <__kernel_rem_pio2+0x320>
 8007360:	f000 fb3e 	bl	80079e0 <scalbn>
 8007364:	00ec      	lsls	r4, r5, #3
 8007366:	ab72      	add	r3, sp, #456	; 0x1c8
 8007368:	191e      	adds	r6, r3, r4
 800736a:	ec59 8b10 	vmov	r8, r9, d0
 800736e:	f106 0a08 	add.w	sl, r6, #8
 8007372:	462f      	mov	r7, r5
 8007374:	2f00      	cmp	r7, #0
 8007376:	f280 80df 	bge.w	8007538 <__kernel_rem_pio2+0x470>
 800737a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 80073e0 <__kernel_rem_pio2+0x318>
 800737e:	f04f 0a00 	mov.w	sl, #0
 8007382:	eba5 030a 	sub.w	r3, r5, sl
 8007386:	2b00      	cmp	r3, #0
 8007388:	f2c0 810a 	blt.w	80075a0 <__kernel_rem_pio2+0x4d8>
 800738c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8007408 <__kernel_rem_pio2+0x340>
 8007390:	ec59 8b18 	vmov	r8, r9, d8
 8007394:	2700      	movs	r7, #0
 8007396:	e0f5      	b.n	8007584 <__kernel_rem_pio2+0x4bc>
 8007398:	2302      	movs	r3, #2
 800739a:	9302      	str	r3, [sp, #8]
 800739c:	e760      	b.n	8007260 <__kernel_rem_pio2+0x198>
 800739e:	ab0e      	add	r3, sp, #56	; 0x38
 80073a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a4:	b94d      	cbnz	r5, 80073ba <__kernel_rem_pio2+0x2f2>
 80073a6:	b12b      	cbz	r3, 80073b4 <__kernel_rem_pio2+0x2ec>
 80073a8:	a80e      	add	r0, sp, #56	; 0x38
 80073aa:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80073ae:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80073b2:	2301      	movs	r3, #1
 80073b4:	3201      	adds	r2, #1
 80073b6:	461d      	mov	r5, r3
 80073b8:	e759      	b.n	800726e <__kernel_rem_pio2+0x1a6>
 80073ba:	a80e      	add	r0, sp, #56	; 0x38
 80073bc:	1acb      	subs	r3, r1, r3
 80073be:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80073c2:	462b      	mov	r3, r5
 80073c4:	e7f6      	b.n	80073b4 <__kernel_rem_pio2+0x2ec>
 80073c6:	1e62      	subs	r2, r4, #1
 80073c8:	ab0e      	add	r3, sp, #56	; 0x38
 80073ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ce:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80073d2:	a90e      	add	r1, sp, #56	; 0x38
 80073d4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80073d8:	e757      	b.n	800728a <__kernel_rem_pio2+0x1c2>
 80073da:	bf00      	nop
 80073dc:	f3af 8000 	nop.w
	...
 80073ec:	3ff00000 	.word	0x3ff00000
 80073f0:	08007fb0 	.word	0x08007fb0
 80073f4:	40200000 	.word	0x40200000
 80073f8:	3ff00000 	.word	0x3ff00000
 80073fc:	3e700000 	.word	0x3e700000
 8007400:	41700000 	.word	0x41700000
 8007404:	3fe00000 	.word	0x3fe00000
 8007408:	08007f70 	.word	0x08007f70
 800740c:	1e62      	subs	r2, r4, #1
 800740e:	ab0e      	add	r3, sp, #56	; 0x38
 8007410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007414:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007418:	e7db      	b.n	80073d2 <__kernel_rem_pio2+0x30a>
 800741a:	a90e      	add	r1, sp, #56	; 0x38
 800741c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007420:	3b01      	subs	r3, #1
 8007422:	430a      	orrs	r2, r1
 8007424:	e78b      	b.n	800733e <__kernel_rem_pio2+0x276>
 8007426:	3301      	adds	r3, #1
 8007428:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800742c:	2900      	cmp	r1, #0
 800742e:	d0fa      	beq.n	8007426 <__kernel_rem_pio2+0x35e>
 8007430:	9a08      	ldr	r2, [sp, #32]
 8007432:	4422      	add	r2, r4
 8007434:	00d2      	lsls	r2, r2, #3
 8007436:	a922      	add	r1, sp, #136	; 0x88
 8007438:	18e3      	adds	r3, r4, r3
 800743a:	9206      	str	r2, [sp, #24]
 800743c:	440a      	add	r2, r1
 800743e:	9302      	str	r3, [sp, #8]
 8007440:	f10b 0108 	add.w	r1, fp, #8
 8007444:	f102 0308 	add.w	r3, r2, #8
 8007448:	1c66      	adds	r6, r4, #1
 800744a:	910a      	str	r1, [sp, #40]	; 0x28
 800744c:	2500      	movs	r5, #0
 800744e:	930d      	str	r3, [sp, #52]	; 0x34
 8007450:	9b02      	ldr	r3, [sp, #8]
 8007452:	42b3      	cmp	r3, r6
 8007454:	da04      	bge.n	8007460 <__kernel_rem_pio2+0x398>
 8007456:	461c      	mov	r4, r3
 8007458:	e6a6      	b.n	80071a8 <__kernel_rem_pio2+0xe0>
 800745a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800745c:	2301      	movs	r3, #1
 800745e:	e7e3      	b.n	8007428 <__kernel_rem_pio2+0x360>
 8007460:	9b06      	ldr	r3, [sp, #24]
 8007462:	18ef      	adds	r7, r5, r3
 8007464:	ab22      	add	r3, sp, #136	; 0x88
 8007466:	441f      	add	r7, r3
 8007468:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800746a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800746e:	f7f9 f859 	bl	8000524 <__aeabi_i2d>
 8007472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007474:	461c      	mov	r4, r3
 8007476:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007478:	e9c7 0100 	strd	r0, r1, [r7]
 800747c:	eb03 0b05 	add.w	fp, r3, r5
 8007480:	2700      	movs	r7, #0
 8007482:	f04f 0800 	mov.w	r8, #0
 8007486:	f04f 0900 	mov.w	r9, #0
 800748a:	9b07      	ldr	r3, [sp, #28]
 800748c:	429f      	cmp	r7, r3
 800748e:	dd08      	ble.n	80074a2 <__kernel_rem_pio2+0x3da>
 8007490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007492:	aa72      	add	r2, sp, #456	; 0x1c8
 8007494:	18eb      	adds	r3, r5, r3
 8007496:	4413      	add	r3, r2
 8007498:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800749c:	3601      	adds	r6, #1
 800749e:	3508      	adds	r5, #8
 80074a0:	e7d6      	b.n	8007450 <__kernel_rem_pio2+0x388>
 80074a2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80074a6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80074aa:	f7f9 f8a5 	bl	80005f8 <__aeabi_dmul>
 80074ae:	4602      	mov	r2, r0
 80074b0:	460b      	mov	r3, r1
 80074b2:	4640      	mov	r0, r8
 80074b4:	4649      	mov	r1, r9
 80074b6:	f7f8 fee9 	bl	800028c <__adddf3>
 80074ba:	3701      	adds	r7, #1
 80074bc:	4680      	mov	r8, r0
 80074be:	4689      	mov	r9, r1
 80074c0:	e7e3      	b.n	800748a <__kernel_rem_pio2+0x3c2>
 80074c2:	3d01      	subs	r5, #1
 80074c4:	e741      	b.n	800734a <__kernel_rem_pio2+0x282>
 80074c6:	f1ca 0000 	rsb	r0, sl, #0
 80074ca:	ec47 6b10 	vmov	d0, r6, r7
 80074ce:	f000 fa87 	bl	80079e0 <scalbn>
 80074d2:	ec57 6b10 	vmov	r6, r7, d0
 80074d6:	2200      	movs	r2, #0
 80074d8:	4b99      	ldr	r3, [pc, #612]	; (8007740 <__kernel_rem_pio2+0x678>)
 80074da:	ee10 0a10 	vmov	r0, s0
 80074de:	4639      	mov	r1, r7
 80074e0:	f7f9 fb10 	bl	8000b04 <__aeabi_dcmpge>
 80074e4:	b1f8      	cbz	r0, 8007526 <__kernel_rem_pio2+0x45e>
 80074e6:	2200      	movs	r2, #0
 80074e8:	4b96      	ldr	r3, [pc, #600]	; (8007744 <__kernel_rem_pio2+0x67c>)
 80074ea:	4630      	mov	r0, r6
 80074ec:	4639      	mov	r1, r7
 80074ee:	f7f9 f883 	bl	80005f8 <__aeabi_dmul>
 80074f2:	f7f9 fb31 	bl	8000b58 <__aeabi_d2iz>
 80074f6:	4680      	mov	r8, r0
 80074f8:	f7f9 f814 	bl	8000524 <__aeabi_i2d>
 80074fc:	2200      	movs	r2, #0
 80074fe:	4b90      	ldr	r3, [pc, #576]	; (8007740 <__kernel_rem_pio2+0x678>)
 8007500:	f7f9 f87a 	bl	80005f8 <__aeabi_dmul>
 8007504:	460b      	mov	r3, r1
 8007506:	4602      	mov	r2, r0
 8007508:	4639      	mov	r1, r7
 800750a:	4630      	mov	r0, r6
 800750c:	f7f8 febc 	bl	8000288 <__aeabi_dsub>
 8007510:	f7f9 fb22 	bl	8000b58 <__aeabi_d2iz>
 8007514:	1c65      	adds	r5, r4, #1
 8007516:	ab0e      	add	r3, sp, #56	; 0x38
 8007518:	f10a 0a18 	add.w	sl, sl, #24
 800751c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007520:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007524:	e719      	b.n	800735a <__kernel_rem_pio2+0x292>
 8007526:	4630      	mov	r0, r6
 8007528:	4639      	mov	r1, r7
 800752a:	f7f9 fb15 	bl	8000b58 <__aeabi_d2iz>
 800752e:	ab0e      	add	r3, sp, #56	; 0x38
 8007530:	4625      	mov	r5, r4
 8007532:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007536:	e710      	b.n	800735a <__kernel_rem_pio2+0x292>
 8007538:	ab0e      	add	r3, sp, #56	; 0x38
 800753a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800753e:	f7f8 fff1 	bl	8000524 <__aeabi_i2d>
 8007542:	4642      	mov	r2, r8
 8007544:	464b      	mov	r3, r9
 8007546:	f7f9 f857 	bl	80005f8 <__aeabi_dmul>
 800754a:	2200      	movs	r2, #0
 800754c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8007550:	4b7c      	ldr	r3, [pc, #496]	; (8007744 <__kernel_rem_pio2+0x67c>)
 8007552:	4640      	mov	r0, r8
 8007554:	4649      	mov	r1, r9
 8007556:	f7f9 f84f 	bl	80005f8 <__aeabi_dmul>
 800755a:	3f01      	subs	r7, #1
 800755c:	4680      	mov	r8, r0
 800755e:	4689      	mov	r9, r1
 8007560:	e708      	b.n	8007374 <__kernel_rem_pio2+0x2ac>
 8007562:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8007566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800756e:	f7f9 f843 	bl	80005f8 <__aeabi_dmul>
 8007572:	4602      	mov	r2, r0
 8007574:	460b      	mov	r3, r1
 8007576:	4640      	mov	r0, r8
 8007578:	4649      	mov	r1, r9
 800757a:	f7f8 fe87 	bl	800028c <__adddf3>
 800757e:	3701      	adds	r7, #1
 8007580:	4680      	mov	r8, r0
 8007582:	4689      	mov	r9, r1
 8007584:	9b04      	ldr	r3, [sp, #16]
 8007586:	429f      	cmp	r7, r3
 8007588:	dc01      	bgt.n	800758e <__kernel_rem_pio2+0x4c6>
 800758a:	45ba      	cmp	sl, r7
 800758c:	dae9      	bge.n	8007562 <__kernel_rem_pio2+0x49a>
 800758e:	ab4a      	add	r3, sp, #296	; 0x128
 8007590:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007594:	e9c3 8900 	strd	r8, r9, [r3]
 8007598:	f10a 0a01 	add.w	sl, sl, #1
 800759c:	3e08      	subs	r6, #8
 800759e:	e6f0      	b.n	8007382 <__kernel_rem_pio2+0x2ba>
 80075a0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80075a2:	2b03      	cmp	r3, #3
 80075a4:	d85b      	bhi.n	800765e <__kernel_rem_pio2+0x596>
 80075a6:	e8df f003 	tbb	[pc, r3]
 80075aa:	264a      	.short	0x264a
 80075ac:	0226      	.short	0x0226
 80075ae:	ab9a      	add	r3, sp, #616	; 0x268
 80075b0:	441c      	add	r4, r3
 80075b2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80075b6:	46a2      	mov	sl, r4
 80075b8:	46ab      	mov	fp, r5
 80075ba:	f1bb 0f00 	cmp.w	fp, #0
 80075be:	dc6c      	bgt.n	800769a <__kernel_rem_pio2+0x5d2>
 80075c0:	46a2      	mov	sl, r4
 80075c2:	46ab      	mov	fp, r5
 80075c4:	f1bb 0f01 	cmp.w	fp, #1
 80075c8:	f300 8086 	bgt.w	80076d8 <__kernel_rem_pio2+0x610>
 80075cc:	2000      	movs	r0, #0
 80075ce:	2100      	movs	r1, #0
 80075d0:	2d01      	cmp	r5, #1
 80075d2:	f300 80a0 	bgt.w	8007716 <__kernel_rem_pio2+0x64e>
 80075d6:	9b02      	ldr	r3, [sp, #8]
 80075d8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80075dc:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f040 809e 	bne.w	8007722 <__kernel_rem_pio2+0x65a>
 80075e6:	9b01      	ldr	r3, [sp, #4]
 80075e8:	e9c3 7800 	strd	r7, r8, [r3]
 80075ec:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80075f0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80075f4:	e033      	b.n	800765e <__kernel_rem_pio2+0x596>
 80075f6:	3408      	adds	r4, #8
 80075f8:	ab4a      	add	r3, sp, #296	; 0x128
 80075fa:	441c      	add	r4, r3
 80075fc:	462e      	mov	r6, r5
 80075fe:	2000      	movs	r0, #0
 8007600:	2100      	movs	r1, #0
 8007602:	2e00      	cmp	r6, #0
 8007604:	da3a      	bge.n	800767c <__kernel_rem_pio2+0x5b4>
 8007606:	9b02      	ldr	r3, [sp, #8]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d03d      	beq.n	8007688 <__kernel_rem_pio2+0x5c0>
 800760c:	4602      	mov	r2, r0
 800760e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007612:	9c01      	ldr	r4, [sp, #4]
 8007614:	e9c4 2300 	strd	r2, r3, [r4]
 8007618:	4602      	mov	r2, r0
 800761a:	460b      	mov	r3, r1
 800761c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8007620:	f7f8 fe32 	bl	8000288 <__aeabi_dsub>
 8007624:	ae4c      	add	r6, sp, #304	; 0x130
 8007626:	2401      	movs	r4, #1
 8007628:	42a5      	cmp	r5, r4
 800762a:	da30      	bge.n	800768e <__kernel_rem_pio2+0x5c6>
 800762c:	9b02      	ldr	r3, [sp, #8]
 800762e:	b113      	cbz	r3, 8007636 <__kernel_rem_pio2+0x56e>
 8007630:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007634:	4619      	mov	r1, r3
 8007636:	9b01      	ldr	r3, [sp, #4]
 8007638:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800763c:	e00f      	b.n	800765e <__kernel_rem_pio2+0x596>
 800763e:	ab9a      	add	r3, sp, #616	; 0x268
 8007640:	441c      	add	r4, r3
 8007642:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007646:	2000      	movs	r0, #0
 8007648:	2100      	movs	r1, #0
 800764a:	2d00      	cmp	r5, #0
 800764c:	da10      	bge.n	8007670 <__kernel_rem_pio2+0x5a8>
 800764e:	9b02      	ldr	r3, [sp, #8]
 8007650:	b113      	cbz	r3, 8007658 <__kernel_rem_pio2+0x590>
 8007652:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007656:	4619      	mov	r1, r3
 8007658:	9b01      	ldr	r3, [sp, #4]
 800765a:	e9c3 0100 	strd	r0, r1, [r3]
 800765e:	9b06      	ldr	r3, [sp, #24]
 8007660:	f003 0007 	and.w	r0, r3, #7
 8007664:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007668:	ecbd 8b02 	vpop	{d8}
 800766c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007670:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007674:	f7f8 fe0a 	bl	800028c <__adddf3>
 8007678:	3d01      	subs	r5, #1
 800767a:	e7e6      	b.n	800764a <__kernel_rem_pio2+0x582>
 800767c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007680:	f7f8 fe04 	bl	800028c <__adddf3>
 8007684:	3e01      	subs	r6, #1
 8007686:	e7bc      	b.n	8007602 <__kernel_rem_pio2+0x53a>
 8007688:	4602      	mov	r2, r0
 800768a:	460b      	mov	r3, r1
 800768c:	e7c1      	b.n	8007612 <__kernel_rem_pio2+0x54a>
 800768e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007692:	f7f8 fdfb 	bl	800028c <__adddf3>
 8007696:	3401      	adds	r4, #1
 8007698:	e7c6      	b.n	8007628 <__kernel_rem_pio2+0x560>
 800769a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800769e:	ed3a 7b02 	vldmdb	sl!, {d7}
 80076a2:	4640      	mov	r0, r8
 80076a4:	ec53 2b17 	vmov	r2, r3, d7
 80076a8:	4649      	mov	r1, r9
 80076aa:	ed8d 7b04 	vstr	d7, [sp, #16]
 80076ae:	f7f8 fded 	bl	800028c <__adddf3>
 80076b2:	4602      	mov	r2, r0
 80076b4:	460b      	mov	r3, r1
 80076b6:	4606      	mov	r6, r0
 80076b8:	460f      	mov	r7, r1
 80076ba:	4640      	mov	r0, r8
 80076bc:	4649      	mov	r1, r9
 80076be:	f7f8 fde3 	bl	8000288 <__aeabi_dsub>
 80076c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076c6:	f7f8 fde1 	bl	800028c <__adddf3>
 80076ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80076ce:	e9ca 0100 	strd	r0, r1, [sl]
 80076d2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80076d6:	e770      	b.n	80075ba <__kernel_rem_pio2+0x4f2>
 80076d8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80076dc:	ed3a 7b02 	vldmdb	sl!, {d7}
 80076e0:	4630      	mov	r0, r6
 80076e2:	ec53 2b17 	vmov	r2, r3, d7
 80076e6:	4639      	mov	r1, r7
 80076e8:	ed8d 7b04 	vstr	d7, [sp, #16]
 80076ec:	f7f8 fdce 	bl	800028c <__adddf3>
 80076f0:	4602      	mov	r2, r0
 80076f2:	460b      	mov	r3, r1
 80076f4:	4680      	mov	r8, r0
 80076f6:	4689      	mov	r9, r1
 80076f8:	4630      	mov	r0, r6
 80076fa:	4639      	mov	r1, r7
 80076fc:	f7f8 fdc4 	bl	8000288 <__aeabi_dsub>
 8007700:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007704:	f7f8 fdc2 	bl	800028c <__adddf3>
 8007708:	f10b 3bff 	add.w	fp, fp, #4294967295
 800770c:	e9ca 0100 	strd	r0, r1, [sl]
 8007710:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8007714:	e756      	b.n	80075c4 <__kernel_rem_pio2+0x4fc>
 8007716:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800771a:	f7f8 fdb7 	bl	800028c <__adddf3>
 800771e:	3d01      	subs	r5, #1
 8007720:	e756      	b.n	80075d0 <__kernel_rem_pio2+0x508>
 8007722:	9b01      	ldr	r3, [sp, #4]
 8007724:	9a01      	ldr	r2, [sp, #4]
 8007726:	601f      	str	r7, [r3, #0]
 8007728:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800772c:	605c      	str	r4, [r3, #4]
 800772e:	609d      	str	r5, [r3, #8]
 8007730:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007734:	60d3      	str	r3, [r2, #12]
 8007736:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800773a:	6110      	str	r0, [r2, #16]
 800773c:	6153      	str	r3, [r2, #20]
 800773e:	e78e      	b.n	800765e <__kernel_rem_pio2+0x596>
 8007740:	41700000 	.word	0x41700000
 8007744:	3e700000 	.word	0x3e700000

08007748 <__kernel_sin>:
 8007748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800774c:	ec55 4b10 	vmov	r4, r5, d0
 8007750:	b085      	sub	sp, #20
 8007752:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007756:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800775a:	ed8d 1b00 	vstr	d1, [sp]
 800775e:	9002      	str	r0, [sp, #8]
 8007760:	da06      	bge.n	8007770 <__kernel_sin+0x28>
 8007762:	ee10 0a10 	vmov	r0, s0
 8007766:	4629      	mov	r1, r5
 8007768:	f7f9 f9f6 	bl	8000b58 <__aeabi_d2iz>
 800776c:	2800      	cmp	r0, #0
 800776e:	d051      	beq.n	8007814 <__kernel_sin+0xcc>
 8007770:	4622      	mov	r2, r4
 8007772:	462b      	mov	r3, r5
 8007774:	4620      	mov	r0, r4
 8007776:	4629      	mov	r1, r5
 8007778:	f7f8 ff3e 	bl	80005f8 <__aeabi_dmul>
 800777c:	4682      	mov	sl, r0
 800777e:	468b      	mov	fp, r1
 8007780:	4602      	mov	r2, r0
 8007782:	460b      	mov	r3, r1
 8007784:	4620      	mov	r0, r4
 8007786:	4629      	mov	r1, r5
 8007788:	f7f8 ff36 	bl	80005f8 <__aeabi_dmul>
 800778c:	a341      	add	r3, pc, #260	; (adr r3, 8007894 <__kernel_sin+0x14c>)
 800778e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007792:	4680      	mov	r8, r0
 8007794:	4689      	mov	r9, r1
 8007796:	4650      	mov	r0, sl
 8007798:	4659      	mov	r1, fp
 800779a:	f7f8 ff2d 	bl	80005f8 <__aeabi_dmul>
 800779e:	a33f      	add	r3, pc, #252	; (adr r3, 800789c <__kernel_sin+0x154>)
 80077a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a4:	f7f8 fd70 	bl	8000288 <__aeabi_dsub>
 80077a8:	4652      	mov	r2, sl
 80077aa:	465b      	mov	r3, fp
 80077ac:	f7f8 ff24 	bl	80005f8 <__aeabi_dmul>
 80077b0:	a33c      	add	r3, pc, #240	; (adr r3, 80078a4 <__kernel_sin+0x15c>)
 80077b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b6:	f7f8 fd69 	bl	800028c <__adddf3>
 80077ba:	4652      	mov	r2, sl
 80077bc:	465b      	mov	r3, fp
 80077be:	f7f8 ff1b 	bl	80005f8 <__aeabi_dmul>
 80077c2:	a33a      	add	r3, pc, #232	; (adr r3, 80078ac <__kernel_sin+0x164>)
 80077c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c8:	f7f8 fd5e 	bl	8000288 <__aeabi_dsub>
 80077cc:	4652      	mov	r2, sl
 80077ce:	465b      	mov	r3, fp
 80077d0:	f7f8 ff12 	bl	80005f8 <__aeabi_dmul>
 80077d4:	a337      	add	r3, pc, #220	; (adr r3, 80078b4 <__kernel_sin+0x16c>)
 80077d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077da:	f7f8 fd57 	bl	800028c <__adddf3>
 80077de:	9b02      	ldr	r3, [sp, #8]
 80077e0:	4606      	mov	r6, r0
 80077e2:	460f      	mov	r7, r1
 80077e4:	b9db      	cbnz	r3, 800781e <__kernel_sin+0xd6>
 80077e6:	4602      	mov	r2, r0
 80077e8:	460b      	mov	r3, r1
 80077ea:	4650      	mov	r0, sl
 80077ec:	4659      	mov	r1, fp
 80077ee:	f7f8 ff03 	bl	80005f8 <__aeabi_dmul>
 80077f2:	a325      	add	r3, pc, #148	; (adr r3, 8007888 <__kernel_sin+0x140>)
 80077f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f8:	f7f8 fd46 	bl	8000288 <__aeabi_dsub>
 80077fc:	4642      	mov	r2, r8
 80077fe:	464b      	mov	r3, r9
 8007800:	f7f8 fefa 	bl	80005f8 <__aeabi_dmul>
 8007804:	4602      	mov	r2, r0
 8007806:	460b      	mov	r3, r1
 8007808:	4620      	mov	r0, r4
 800780a:	4629      	mov	r1, r5
 800780c:	f7f8 fd3e 	bl	800028c <__adddf3>
 8007810:	4604      	mov	r4, r0
 8007812:	460d      	mov	r5, r1
 8007814:	ec45 4b10 	vmov	d0, r4, r5
 8007818:	b005      	add	sp, #20
 800781a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800781e:	2200      	movs	r2, #0
 8007820:	4b1b      	ldr	r3, [pc, #108]	; (8007890 <__kernel_sin+0x148>)
 8007822:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007826:	f7f8 fee7 	bl	80005f8 <__aeabi_dmul>
 800782a:	4632      	mov	r2, r6
 800782c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007830:	463b      	mov	r3, r7
 8007832:	4640      	mov	r0, r8
 8007834:	4649      	mov	r1, r9
 8007836:	f7f8 fedf 	bl	80005f8 <__aeabi_dmul>
 800783a:	4602      	mov	r2, r0
 800783c:	460b      	mov	r3, r1
 800783e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007842:	f7f8 fd21 	bl	8000288 <__aeabi_dsub>
 8007846:	4652      	mov	r2, sl
 8007848:	465b      	mov	r3, fp
 800784a:	f7f8 fed5 	bl	80005f8 <__aeabi_dmul>
 800784e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007852:	f7f8 fd19 	bl	8000288 <__aeabi_dsub>
 8007856:	a30c      	add	r3, pc, #48	; (adr r3, 8007888 <__kernel_sin+0x140>)
 8007858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785c:	4606      	mov	r6, r0
 800785e:	460f      	mov	r7, r1
 8007860:	4640      	mov	r0, r8
 8007862:	4649      	mov	r1, r9
 8007864:	f7f8 fec8 	bl	80005f8 <__aeabi_dmul>
 8007868:	4602      	mov	r2, r0
 800786a:	460b      	mov	r3, r1
 800786c:	4630      	mov	r0, r6
 800786e:	4639      	mov	r1, r7
 8007870:	f7f8 fd0c 	bl	800028c <__adddf3>
 8007874:	4602      	mov	r2, r0
 8007876:	460b      	mov	r3, r1
 8007878:	4620      	mov	r0, r4
 800787a:	4629      	mov	r1, r5
 800787c:	f7f8 fd04 	bl	8000288 <__aeabi_dsub>
 8007880:	e7c6      	b.n	8007810 <__kernel_sin+0xc8>
 8007882:	bf00      	nop
 8007884:	f3af 8000 	nop.w
 8007888:	55555549 	.word	0x55555549
 800788c:	3fc55555 	.word	0x3fc55555
 8007890:	3fe00000 	.word	0x3fe00000
 8007894:	5acfd57c 	.word	0x5acfd57c
 8007898:	3de5d93a 	.word	0x3de5d93a
 800789c:	8a2b9ceb 	.word	0x8a2b9ceb
 80078a0:	3e5ae5e6 	.word	0x3e5ae5e6
 80078a4:	57b1fe7d 	.word	0x57b1fe7d
 80078a8:	3ec71de3 	.word	0x3ec71de3
 80078ac:	19c161d5 	.word	0x19c161d5
 80078b0:	3f2a01a0 	.word	0x3f2a01a0
 80078b4:	1110f8a6 	.word	0x1110f8a6
 80078b8:	3f811111 	.word	0x3f811111

080078bc <fabs>:
 80078bc:	ec51 0b10 	vmov	r0, r1, d0
 80078c0:	ee10 2a10 	vmov	r2, s0
 80078c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80078c8:	ec43 2b10 	vmov	d0, r2, r3
 80078cc:	4770      	bx	lr
	...

080078d0 <floor>:
 80078d0:	ec51 0b10 	vmov	r0, r1, d0
 80078d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078d8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80078dc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80078e0:	2e13      	cmp	r6, #19
 80078e2:	460c      	mov	r4, r1
 80078e4:	ee10 5a10 	vmov	r5, s0
 80078e8:	4680      	mov	r8, r0
 80078ea:	dc34      	bgt.n	8007956 <floor+0x86>
 80078ec:	2e00      	cmp	r6, #0
 80078ee:	da16      	bge.n	800791e <floor+0x4e>
 80078f0:	a335      	add	r3, pc, #212	; (adr r3, 80079c8 <floor+0xf8>)
 80078f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f6:	f7f8 fcc9 	bl	800028c <__adddf3>
 80078fa:	2200      	movs	r2, #0
 80078fc:	2300      	movs	r3, #0
 80078fe:	f7f9 f90b 	bl	8000b18 <__aeabi_dcmpgt>
 8007902:	b148      	cbz	r0, 8007918 <floor+0x48>
 8007904:	2c00      	cmp	r4, #0
 8007906:	da59      	bge.n	80079bc <floor+0xec>
 8007908:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800790c:	4a30      	ldr	r2, [pc, #192]	; (80079d0 <floor+0x100>)
 800790e:	432b      	orrs	r3, r5
 8007910:	2500      	movs	r5, #0
 8007912:	42ab      	cmp	r3, r5
 8007914:	bf18      	it	ne
 8007916:	4614      	movne	r4, r2
 8007918:	4621      	mov	r1, r4
 800791a:	4628      	mov	r0, r5
 800791c:	e025      	b.n	800796a <floor+0x9a>
 800791e:	4f2d      	ldr	r7, [pc, #180]	; (80079d4 <floor+0x104>)
 8007920:	4137      	asrs	r7, r6
 8007922:	ea01 0307 	and.w	r3, r1, r7
 8007926:	4303      	orrs	r3, r0
 8007928:	d01f      	beq.n	800796a <floor+0x9a>
 800792a:	a327      	add	r3, pc, #156	; (adr r3, 80079c8 <floor+0xf8>)
 800792c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007930:	f7f8 fcac 	bl	800028c <__adddf3>
 8007934:	2200      	movs	r2, #0
 8007936:	2300      	movs	r3, #0
 8007938:	f7f9 f8ee 	bl	8000b18 <__aeabi_dcmpgt>
 800793c:	2800      	cmp	r0, #0
 800793e:	d0eb      	beq.n	8007918 <floor+0x48>
 8007940:	2c00      	cmp	r4, #0
 8007942:	bfbe      	ittt	lt
 8007944:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007948:	fa43 f606 	asrlt.w	r6, r3, r6
 800794c:	19a4      	addlt	r4, r4, r6
 800794e:	ea24 0407 	bic.w	r4, r4, r7
 8007952:	2500      	movs	r5, #0
 8007954:	e7e0      	b.n	8007918 <floor+0x48>
 8007956:	2e33      	cmp	r6, #51	; 0x33
 8007958:	dd0b      	ble.n	8007972 <floor+0xa2>
 800795a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800795e:	d104      	bne.n	800796a <floor+0x9a>
 8007960:	ee10 2a10 	vmov	r2, s0
 8007964:	460b      	mov	r3, r1
 8007966:	f7f8 fc91 	bl	800028c <__adddf3>
 800796a:	ec41 0b10 	vmov	d0, r0, r1
 800796e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007972:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007976:	f04f 33ff 	mov.w	r3, #4294967295
 800797a:	fa23 f707 	lsr.w	r7, r3, r7
 800797e:	4207      	tst	r7, r0
 8007980:	d0f3      	beq.n	800796a <floor+0x9a>
 8007982:	a311      	add	r3, pc, #68	; (adr r3, 80079c8 <floor+0xf8>)
 8007984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007988:	f7f8 fc80 	bl	800028c <__adddf3>
 800798c:	2200      	movs	r2, #0
 800798e:	2300      	movs	r3, #0
 8007990:	f7f9 f8c2 	bl	8000b18 <__aeabi_dcmpgt>
 8007994:	2800      	cmp	r0, #0
 8007996:	d0bf      	beq.n	8007918 <floor+0x48>
 8007998:	2c00      	cmp	r4, #0
 800799a:	da02      	bge.n	80079a2 <floor+0xd2>
 800799c:	2e14      	cmp	r6, #20
 800799e:	d103      	bne.n	80079a8 <floor+0xd8>
 80079a0:	3401      	adds	r4, #1
 80079a2:	ea25 0507 	bic.w	r5, r5, r7
 80079a6:	e7b7      	b.n	8007918 <floor+0x48>
 80079a8:	2301      	movs	r3, #1
 80079aa:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80079ae:	fa03 f606 	lsl.w	r6, r3, r6
 80079b2:	4435      	add	r5, r6
 80079b4:	4545      	cmp	r5, r8
 80079b6:	bf38      	it	cc
 80079b8:	18e4      	addcc	r4, r4, r3
 80079ba:	e7f2      	b.n	80079a2 <floor+0xd2>
 80079bc:	2500      	movs	r5, #0
 80079be:	462c      	mov	r4, r5
 80079c0:	e7aa      	b.n	8007918 <floor+0x48>
 80079c2:	bf00      	nop
 80079c4:	f3af 8000 	nop.w
 80079c8:	8800759c 	.word	0x8800759c
 80079cc:	7e37e43c 	.word	0x7e37e43c
 80079d0:	bff00000 	.word	0xbff00000
 80079d4:	000fffff 	.word	0x000fffff

080079d8 <matherr>:
 80079d8:	2000      	movs	r0, #0
 80079da:	4770      	bx	lr
 80079dc:	0000      	movs	r0, r0
	...

080079e0 <scalbn>:
 80079e0:	b570      	push	{r4, r5, r6, lr}
 80079e2:	ec55 4b10 	vmov	r4, r5, d0
 80079e6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80079ea:	4606      	mov	r6, r0
 80079ec:	462b      	mov	r3, r5
 80079ee:	b9aa      	cbnz	r2, 8007a1c <scalbn+0x3c>
 80079f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80079f4:	4323      	orrs	r3, r4
 80079f6:	d03b      	beq.n	8007a70 <scalbn+0x90>
 80079f8:	4b31      	ldr	r3, [pc, #196]	; (8007ac0 <scalbn+0xe0>)
 80079fa:	4629      	mov	r1, r5
 80079fc:	2200      	movs	r2, #0
 80079fe:	ee10 0a10 	vmov	r0, s0
 8007a02:	f7f8 fdf9 	bl	80005f8 <__aeabi_dmul>
 8007a06:	4b2f      	ldr	r3, [pc, #188]	; (8007ac4 <scalbn+0xe4>)
 8007a08:	429e      	cmp	r6, r3
 8007a0a:	4604      	mov	r4, r0
 8007a0c:	460d      	mov	r5, r1
 8007a0e:	da12      	bge.n	8007a36 <scalbn+0x56>
 8007a10:	a327      	add	r3, pc, #156	; (adr r3, 8007ab0 <scalbn+0xd0>)
 8007a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a16:	f7f8 fdef 	bl	80005f8 <__aeabi_dmul>
 8007a1a:	e009      	b.n	8007a30 <scalbn+0x50>
 8007a1c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007a20:	428a      	cmp	r2, r1
 8007a22:	d10c      	bne.n	8007a3e <scalbn+0x5e>
 8007a24:	ee10 2a10 	vmov	r2, s0
 8007a28:	4620      	mov	r0, r4
 8007a2a:	4629      	mov	r1, r5
 8007a2c:	f7f8 fc2e 	bl	800028c <__adddf3>
 8007a30:	4604      	mov	r4, r0
 8007a32:	460d      	mov	r5, r1
 8007a34:	e01c      	b.n	8007a70 <scalbn+0x90>
 8007a36:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	3a36      	subs	r2, #54	; 0x36
 8007a3e:	4432      	add	r2, r6
 8007a40:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007a44:	428a      	cmp	r2, r1
 8007a46:	dd0b      	ble.n	8007a60 <scalbn+0x80>
 8007a48:	ec45 4b11 	vmov	d1, r4, r5
 8007a4c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8007ab8 <scalbn+0xd8>
 8007a50:	f000 f83c 	bl	8007acc <copysign>
 8007a54:	a318      	add	r3, pc, #96	; (adr r3, 8007ab8 <scalbn+0xd8>)
 8007a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5a:	ec51 0b10 	vmov	r0, r1, d0
 8007a5e:	e7da      	b.n	8007a16 <scalbn+0x36>
 8007a60:	2a00      	cmp	r2, #0
 8007a62:	dd08      	ble.n	8007a76 <scalbn+0x96>
 8007a64:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007a68:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007a6c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007a70:	ec45 4b10 	vmov	d0, r4, r5
 8007a74:	bd70      	pop	{r4, r5, r6, pc}
 8007a76:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007a7a:	da0d      	bge.n	8007a98 <scalbn+0xb8>
 8007a7c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007a80:	429e      	cmp	r6, r3
 8007a82:	ec45 4b11 	vmov	d1, r4, r5
 8007a86:	dce1      	bgt.n	8007a4c <scalbn+0x6c>
 8007a88:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8007ab0 <scalbn+0xd0>
 8007a8c:	f000 f81e 	bl	8007acc <copysign>
 8007a90:	a307      	add	r3, pc, #28	; (adr r3, 8007ab0 <scalbn+0xd0>)
 8007a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a96:	e7e0      	b.n	8007a5a <scalbn+0x7a>
 8007a98:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007a9c:	3236      	adds	r2, #54	; 0x36
 8007a9e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007aa2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	4629      	mov	r1, r5
 8007aaa:	2200      	movs	r2, #0
 8007aac:	4b06      	ldr	r3, [pc, #24]	; (8007ac8 <scalbn+0xe8>)
 8007aae:	e7b2      	b.n	8007a16 <scalbn+0x36>
 8007ab0:	c2f8f359 	.word	0xc2f8f359
 8007ab4:	01a56e1f 	.word	0x01a56e1f
 8007ab8:	8800759c 	.word	0x8800759c
 8007abc:	7e37e43c 	.word	0x7e37e43c
 8007ac0:	43500000 	.word	0x43500000
 8007ac4:	ffff3cb0 	.word	0xffff3cb0
 8007ac8:	3c900000 	.word	0x3c900000

08007acc <copysign>:
 8007acc:	ec51 0b10 	vmov	r0, r1, d0
 8007ad0:	ee11 0a90 	vmov	r0, s3
 8007ad4:	ee10 2a10 	vmov	r2, s0
 8007ad8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007adc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007ae0:	ea41 0300 	orr.w	r3, r1, r0
 8007ae4:	ec43 2b10 	vmov	d0, r2, r3
 8007ae8:	4770      	bx	lr
	...

08007aec <_init>:
 8007aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aee:	bf00      	nop
 8007af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007af2:	bc08      	pop	{r3}
 8007af4:	469e      	mov	lr, r3
 8007af6:	4770      	bx	lr

08007af8 <_fini>:
 8007af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007afa:	bf00      	nop
 8007afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007afe:	bc08      	pop	{r3}
 8007b00:	469e      	mov	lr, r3
 8007b02:	4770      	bx	lr
